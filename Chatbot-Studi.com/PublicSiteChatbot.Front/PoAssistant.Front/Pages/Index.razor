@page "/"

@using PoAssistant.Front.Data
@using PoAssistant.Front.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime JSRuntime
@inject IConversationService conversationService
@inject INavigationService navigationService
@inject ISimpleAuthenticationStateProvider authenticationStateProvider

<PageTitle>Chatbot Studi.com</PageTitle>

<head>
</head>

<Modal @ref="modal" IsVisible="@IsLoginModalVisible" IsVisibleChanged="@LoginModalIsVisibleChangedAsync">
    <Login IsVisibleChanged="@LoginModalIsVisibleChangedAsync" />
</Modal>

<div class="chat-wrapper">
    <div class="chat-container">
        @if (messages != null)
        @foreach (var message in messages)
        {
            @* Display all messages (but the last one if ongoing message under edition is handled in the bottom textarea) *@
            @if (!(message.IsLastConversationMessage && !showOngoingMessageInConversation && showBottomInputMessage))
            {
                @* Messages headers *@
                <div class="@($"{(message.IsFromAI ? "message-source-sender" : "message-source-receiver")}")">
                    @message.Role
                    @if (message.DurationSeconds > 0)
                    {
                        <span class="duration-text">(@message.DurationSeconds s.)</span>
                    }
                    else if (message.DurationSeconds == -1)
                    {
                        <span class="duration-text">[...]</span>
                    }
                </div>

                @* Messages bubbles & contents *@
                <div class="@($"message-bubble {(message.IsFromAI ? "message-sender" : "message-receiver")}")" style="@(DisplayEditingButtons(message) ? "padding-bottom: 35px;" : "")">
                    @if (!IsEditableLastMessage(message) || showBottomInputMessage)
                    {
                        @* Display regular messages (non editable) *@
                        @message.Content
                    }
                    else
                    {
                        @* Display editing message *@
                        <textarea id="editingMessageTextarea"
                                    @onblur="RetrieveInputTextAreaValueAsync"
                                    @onkeydown="HandleEditMessageKeyDown"
                                    class="message-editable"
                                    placeholder="Ecrivez votre question ici ...">
                                        @newMessageContent
                        </textarea>

                        @* Display actions buttons *@
                        @if (DisplayEditingButtons(message))
                        {
                            <div class="send-button-wrapper">
                                <button title="Valider la rÃ©ponse" @onclick="() => SendMessage()" class="send-message-button">
                                    <span class="oi oi-check"></span>
                                </button>
                            </div>
                        }                        
                    }
                    @if (DisplayLoader(message))
                    {
                        <div class="loader">
                            <div class="circle"></div>
                            <div class="circle"></div>
                            <div class="circle"></div>
                            <div class="circle"></div>
                            <div class="circle"></div>
                        </div>
                    }
                </div>
            }
        }
    </div> 

    @* Display the user input textArea at the window bottom *@
    @if (showBottomInputMessage)
    {
        <div class="input-area">
            @* <div>
                <button title="Options" @onclick="() => SendMessage()" class="send-message-button">
                    <span class="oi oi-check"></span>
                </button>
            </div> *@
            <textarea id="editingMessageTextarea"
                        @onblur="RetrieveInputTextAreaValueAsync"
                        @onkeydown="HandleEditMessageKeyDown"
                        class="message-editable"
                        placeholder="Ecrivez votre question ici ..."
                        disabled="@(messages!.Last().IsSavedMessage)">
                @if (messages!.Last().IsFromUser && !messages!.Last().IsSavedMessage)
                {
                    @messages!.Last().Content
                }
                else
                {
                }
            </textarea>
            <div class="send-button-wrapper">
                <button id="sendEditingMessageButton" title="Valider la question" @onclick="() => SendMessage()" class="send-message-button">
                    <span class="oi oi-arrow-right"></span>
                </button>
            </div>
        </div>
    }
</div>
@if (showMessageEmptyError)
{
    <div class="notification">
        <span class="oi oi-task" aria-hidden="true"></span>
        <span>Impossible d'envoyer un message vide</span>
    </div>
}
@if (showApiCommunicationErrorNotification)
{
    <div class="api-communication-error">
        <span class="oi oi-circle-x" aria-hidden="true"></span>
        <span>Erreur de communication avec l'API du chatbot</span>
        <span class="close-btn" @onclick="() => showApiCommunicationErrorNotification = false">&times;</span>
    </div>
}

<body>
</body>

<script>
    function getElementValue(elementId) {
        var element = document.getElementById(elementId);
        if (!element) {
            console.error(`Element with id "${elementId}" were not found in DOM.`);
            return "";
        }
        return element.value;
    }
    function setElementValue(elementId, value) {
        const element = document.getElementById(elementId);
        if (!element) {
            console.error(`Element with id "${elementId}" were not found in DOM.`);
            return;
        }
        element.value = value;
    }
    function setDisabledValueToElement(elementId, disabledValue) {
        const element = document.getElementById(elementId);
        if (!element) {
            console.error(`Element with id "${elementId}" were not found in DOM.`);
            return;
        }
        element.disabled = disabledValue;
    }
    function autoResizeTextarea(id) {
        var textarea = document.getElementById(id);
        if (textarea) {
            console.error('testy!');
            textarea.style.height = 'auto';
            textarea.style.height = textarea.scrollHeight + 'px';
            textarea.addEventListener('input', function () {
                this.style.height = 'auto';
                this.style.height = this.scrollHeight + 'px';
            }, false);
        }
    }
    window.blazorExtensions = {
        WriteStorage: function (key, value) {
            window.localStorage.setItem(key, value);
        },
        ReadStorage: function (key) {
            return window.localStorage.getItem(key);
        }
    };
</script>
