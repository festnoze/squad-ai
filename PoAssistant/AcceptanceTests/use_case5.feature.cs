// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class InteractionAvecLaCarteGeographiqueIntegreeFeature : object, Xunit.IClassFixture<InteractionAvecLaCarteGeographiqueIntegreeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "use_case5.feature"
#line hidden
        
        public InteractionAvecLaCarteGeographiqueIntegreeFeature(InteractionAvecLaCarteGeographiqueIntegreeFeature.FixtureData fixtureData, AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "", "Interaction avec la carte géographique intégrée", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filtrage par parcours")]
        [Xunit.TraitAttribute("FeatureTitle", "Interaction avec la carte géographique intégrée")]
        [Xunit.TraitAttribute("Description", "Filtrage par parcours")]
        public void FiltrageParParcours()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtrage par parcours", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    testRunner.Given("je suis sur la page de l’annuaire des apprenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné que ");
#line hidden
#line 5
    testRunner.And("j’ai accès à la carte géographique intégrée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et que ");
#line hidden
#line 6
    testRunner.When("je sélectionne un parcours spécifique dans le filtre de la carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Lorsque ");
#line hidden
#line 7
    testRunner.Then("seuls les apprenants ayant ce parcours devraient apparaître sur la carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filtrage par distance")]
        [Xunit.TraitAttribute("FeatureTitle", "Interaction avec la carte géographique intégrée")]
        [Xunit.TraitAttribute("Description", "Filtrage par distance")]
        public void FiltrageParDistance()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtrage par distance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
    testRunner.Given("je suis sur la page de l’annuaire des apprenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné que ");
#line hidden
#line 11
    testRunner.And("je souhaite trouver des apprenants dans un rayon géographique spécifique autour d" +
                        "e ma position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et que ");
#line hidden
#line 12
    testRunner.When("j’entre une distance spécifique dans le filtre de la carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Lorsque ");
#line hidden
#line 13
    testRunner.Then("seuls les apprenants situés dans ce rayon devraient apparaître sur la carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Visualisation des profils sur la carte")]
        [Xunit.TraitAttribute("FeatureTitle", "Interaction avec la carte géographique intégrée")]
        [Xunit.TraitAttribute("Description", "Visualisation des profils sur la carte")]
        public void VisualisationDesProfilsSurLaCarte()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Visualisation des profils sur la carte", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.Given("je suis sur la page de l’annuaire des apprenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné que ");
#line hidden
#line 17
    testRunner.And("je clique sur le bouton pour afficher la carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et que ");
#line hidden
#line 18
    testRunner.When("la carte s’affiche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Lorsque ");
#line hidden
#line 19
    testRunner.Then("je devrais voir des marqueurs personnalisés avec la photo de profil des apprenant" +
                        "s sur la carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Affichage des informations supplémentaires au clic sur un marqueur")]
        [Xunit.TraitAttribute("FeatureTitle", "Interaction avec la carte géographique intégrée")]
        [Xunit.TraitAttribute("Description", "Affichage des informations supplémentaires au clic sur un marqueur")]
        public void AffichageDesInformationsSupplementairesAuClicSurUnMarqueur()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Affichage des informations supplémentaires au clic sur un marqueur", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
    testRunner.Given("je suis sur la page de l’annuaire des apprenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné que ");
#line hidden
#line 23
    testRunner.And("je clique sur un marqueur de profil sur la carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et que ");
#line hidden
#line 24
    testRunner.When("je clique sur le marqueur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Lorsque ");
#line hidden
#line 25
    testRunner.Then("une infobulle ou une fenêtre contextuelle devrait s’afficher avec plus d’informat" +
                        "ions sur l’apprenant correspondant au marqueur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                InteractionAvecLaCarteGeographiqueIntegreeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                InteractionAvecLaCarteGeographiqueIntegreeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
