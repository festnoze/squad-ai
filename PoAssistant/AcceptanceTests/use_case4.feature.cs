// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MessagerieDirectePourLaPriseDeContactEntreUtilisateursFeature : object, Xunit.IClassFixture<MessagerieDirectePourLaPriseDeContactEntreUtilisateursFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "use_case4.feature"
#line hidden
        
        public MessagerieDirectePourLaPriseDeContactEntreUtilisateursFeature(MessagerieDirectePourLaPriseDeContactEntreUtilisateursFeature.FixtureData fixtureData, AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "", "Messagerie directe pour la prise de contact entre utilisateurs", "En tant qu’apprenant inscrit sur le LMS,\r\nJe souhaite pouvoir m’envoyer des messa" +
                    "ges, fichiers et images à d’autres utilisateurs,\r\nAfin de faciliter la prise de " +
                    "contact et les échanges.\r\n\r\nCritères d’acceptance:", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Envoi d’un message textuel")]
        [Xunit.TraitAttribute("FeatureTitle", "Messagerie directe pour la prise de contact entre utilisateurs")]
        [Xunit.TraitAttribute("Description", "Envoi d’un message textuel")]
        public void EnvoiDUnMessageTextuel()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Envoi d’un message textuel", @"Given L’utilisateur A est connecté à son compte et sur la page de messagerie
And L’utilisateur B est connecté à son compte et sur la page de messagerie
When L’utilisateur A envoie un message textuel à l’utilisateur B
Then L’utilisateur B reçoit le message textuel de l’utilisateur A
And L’utilisateur B peut répondre au message de l’utilisateur A", tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Envoi d’un fichier")]
        [Xunit.TraitAttribute("FeatureTitle", "Messagerie directe pour la prise de contact entre utilisateurs")]
        [Xunit.TraitAttribute("Description", "Envoi d’un fichier")]
        public void EnvoiDUnFichier()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Envoi d’un fichier", @"Given L’utilisateur A est connecté à son compte et sur la page de messagerie
And L’utilisateur B est connecté à son compte et sur la page de messagerie
When L’utilisateur A envoie un fichier à l’utilisateur B
Then L’utilisateur B reçoit le fichier de l’utilisateur A
And L’utilisateur B peut télécharger le fichier reçu", tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Envoi d’une image")]
        [Xunit.TraitAttribute("FeatureTitle", "Messagerie directe pour la prise de contact entre utilisateurs")]
        [Xunit.TraitAttribute("Description", "Envoi d’une image")]
        public void EnvoiDUneImage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Envoi d’une image", @"Given L’utilisateur A est connecté à son compte et sur la page de messagerie
And L’utilisateur B est connecté à son compte et sur la page de messagerie
When L’utilisateur A envoie une image à l’utilisateur B
Then L’utilisateur B reçoit l’image de l’utilisateur A
And L’utilisateur B peut visualiser l’image reçue", tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Appel vidéo")]
        [Xunit.TraitAttribute("FeatureTitle", "Messagerie directe pour la prise de contact entre utilisateurs")]
        [Xunit.TraitAttribute("Description", "Appel vidéo")]
        public void AppelVideo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appel vidéo", @"Given L’utilisateur A est connecté à son compte et sur la page de messagerie
And L’utilisateur B est connecté à son compte et sur la page de messagerie
When L’utilisateur A initie un appel vidéo avec l’utilisateur B
Then L’utilisateur B reçoit une invitation à l’appel vidéo de l’utilisateur A
And L’utilisateur B peut accepter l’invitation et commencer l’appel vidéo avec l’utilisateur A", tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MessagerieDirectePourLaPriseDeContactEntreUtilisateursFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MessagerieDirectePourLaPriseDeContactEntreUtilisateursFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
