// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AccessibiliteEtUXUIDuModuleDAnnuaireFeature : object, Xunit.IClassFixture<AccessibiliteEtUXUIDuModuleDAnnuaireFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "use_case6.feature"
#line hidden
        
        public AccessibiliteEtUXUIDuModuleDAnnuaireFeature(AccessibiliteEtUXUIDuModuleDAnnuaireFeature.FixtureData fixtureData, AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "", "Accessibilité et UX/UI du module d’annuaire", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Le design est épuré, intuitif et inclusif, avec une attention particulière portée" +
            " à l’accessibilité pour différents types de handicaps.")]
        [Xunit.TraitAttribute("FeatureTitle", "Accessibilité et UX/UI du module d’annuaire")]
        [Xunit.TraitAttribute("Description", "Le design est épuré, intuitif et inclusif, avec une attention particulière portée" +
            " à l’accessibilité pour différents types de handicaps.")]
        public void LeDesignEstEpureIntuitifEtInclusifAvecUneAttentionParticulierePorteeALAccessibilitePourDifferentsTypesDeHandicaps_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Le design est épuré, intuitif et inclusif, avec une attention particulière portée" +
                    " à l’accessibilité pour différents types de handicaps.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  testRunner.Given("je suis un apprenant sur le LMS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné que ");
#line hidden
#line 5
  testRunner.When("j’accède au module d’annuaire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 6
  testRunner.Then("je vois un design épuré et intuitif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 7
  testRunner.And("les informations sont présentées de manière claire et facile à comprendre", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 8
  testRunner.And("les fonctionnalités du module sont accessibles pour différents types de handicaps" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Le module est accessible à la fois sur le site web LMS et sur les applications mo" +
            "biles si disponibles.")]
        [Xunit.TraitAttribute("FeatureTitle", "Accessibilité et UX/UI du module d’annuaire")]
        [Xunit.TraitAttribute("Description", "Le module est accessible à la fois sur le site web LMS et sur les applications mo" +
            "biles si disponibles.")]
        public void LeModuleEstAccessibleALaFoisSurLeSiteWebLMSEtSurLesApplicationsMobilesSiDisponibles_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Le module est accessible à la fois sur le site web LMS et sur les applications mo" +
                    "biles si disponibles.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
  testRunner.Given("je suis un apprenant sur le LMS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné que ");
#line hidden
#line 12
  testRunner.When("j’accède au module d’annuaire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 13
  testRunner.Then("je peux y accéder à la fois sur le site web LMS et sur l’application mobile si el" +
                        "le est disponible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 14
  testRunner.And("je peux y naviguer de manière similaire sur les différentes plateformes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Les interactions sont fluides avec des indications claires et des temps de répons" +
            "e rapides.")]
        [Xunit.TraitAttribute("FeatureTitle", "Accessibilité et UX/UI du module d’annuaire")]
        [Xunit.TraitAttribute("Description", "Les interactions sont fluides avec des indications claires et des temps de répons" +
            "e rapides.")]
        public void LesInteractionsSontFluidesAvecDesIndicationsClairesEtDesTempsDeReponseRapides_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Les interactions sont fluides avec des indications claires et des temps de répons" +
                    "e rapides.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
  testRunner.Given("je suis un apprenant sur le LMS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné que ");
#line hidden
#line 18
  testRunner.When("j’accède au module d’annuaire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 19
  testRunner.Then("les interactions avec le module sont fluides et réactives", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 20
  testRunner.And("les indications sont claires et compréhensibles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 21
  testRunner.And("les temps de réponse sont rapides lors de l’utilisation du module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AccessibiliteEtUXUIDuModuleDAnnuaireFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AccessibiliteEtUXUIDuModuleDAnnuaireFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
