@page "/"

@using PoAssistant.Front.Data
@using PoAssistant.Front.Services
@inject ThreadMoaMoeService threadService
@inject IJSRuntime JSRuntime
@inject NavigationService navigationService

<PageTitle>Assistant Product Owner</PageTitle>

<head>
</head>

<h4>Atelier de conception MOA/MOE : spécification du besoin</h4>

<div class="chat-wrapper">
    <div class="chat-container">
        @foreach (var message in messages.Where(m => isEditingLastMessage ? !m.IsLastThreadMessage : true))
        {
            <div class="@($"{(message.IsSender ? "message-source-sender" : "message-source-receiver")}")">
                @message.Source
                @if (message.DurationSeconds > 0)
                {
                    <text>(@message.DurationSeconds s.)</text>
                }
            </div>
            <div class="@($"message-bubble {(message.IsSender ? "message-sender" : "message-receiver")}")">@message.Content
                @if (!isWaitingForLLM && !isEditingLastMessage && message.IsLastThreadMessage)
                {
                    <div class="edit-button-wrapper">
                        <button @onclick="() => MakeLastMessageEditable()" class="edit-button"><span class="oi oi-pencil"></span></button>
                        <button @onclick="() => ValidateMoaAnswer()" class="next-button"><span class="oi oi-arrow-right"></span></button>
                    </div>
                }
            </div>
        }
        @if (isWaitingForLLM && !isEditingLastMessage)
        {
            <div class="@($"{(!messages.Last().IsSender ? "message-source-sender" : "message-source-receiver")}")">en cours de rédaction</div>
            <div class="@($"message-bubble {(!messages.Last().IsSender ? "message-sender" : "message-receiver")}")">
                <div class="loader">
                    <div class="circle"></div>
                    <div class="circle"></div>
                    <div class="circle"></div>
                    <div class="circle"></div>
                    <div class="circle"></div>
                </div>
            </div>
        }
        @if (isEditingLastMessage)
        {
            <div class="message-source-receiver" style="color:cornflowerblue">@messages.Last().Source</div>
            <div class="message-bubble message-receiver">
                <textarea @bind="messages.Last().Content" class="message-editable" placeholder="Décrivez ici le besoin à spécifier"></textarea>
                <button @onclick="() => ValidateMoaAnswer()" class="next-button" style="margin: 0px 0px;"><span class="oi oi-check"></span></button>
            </div>
        }
    </div> 
    @* <div class="input-area">
        @if (messages.Any() && messages.Last().IsLastThreadMessage)
        {
            <textarea class="input-text" @bind="messages.Last().Content"></textarea>
        }
        else
        {
            <textarea class="input-text" placeholder="Attendre le prochain message MOA à corriger" readonly></textarea>
        }
        <button class="send-button" disabled="@(messages.Any() && messages.Last().IsLastThreadMessage ? false : true)">Send</button>
    </div> *@

</div>

<body>
</body>


@code {
    private ThreadModel messages;
    private ElementReference textAreaElement;
    private bool isWaitingForLLM = true;
    private bool isEditingLastMessage = false;

    protected override async Task OnInitializedAsync()
    {
        messages = threadService.GetMoeMoaThread();
        isEditingLastMessage = threadService.IsEditingLastMessage();
        isWaitingForLLM = threadService.IsWaitingForLLM();
        threadService.OnThreadChanged += ReloadThread;
    }

    // private async Task AdjustTextAreaHeight()
    // {
    //     await JSRuntime.InvokeVoidAsync("adjustTextAreaHeight", textAreaElement);
    // }


    private void MakeLastMessageEditable()
    {
        isEditingLastMessage = true;
        threadService.EditingLastMessage();

        // Notify the component to re-render
        InvokeAsync(StateHasChanged);
    }

    private void ValidateMoaAnswer()
    {
        isEditingLastMessage = false;
        isWaitingForLLM = true;
        threadService.ValidateMoaAnswer();
        InvokeAsync(StateHasChanged);
    }

    private void ReloadThread()
    {
        messages = threadService.GetMoeMoaThread();
        isWaitingForLLM = threadService.IsWaitingForLLM();
        
        // Notify the component to re-render
        InvokeAsync(StateHasChanged);
    }

    // public void NavigateToPo(bool forceLoad = false)
    // {
    //     navigationService.Navigate("po", forceLoad);
    // }

    public void Dispose()
    {
        threadService.OnThreadChanged -= ReloadThread;
    }

}
