@page "/"

@using PoAssistant.Front.Data
@using PoAssistant.Front.Services
@inject ThreadMetierPoService threadService
@inject IJSRuntime JSRuntime
@inject NavigationService navigationService

<PageTitle>Assistant Product Owner</PageTitle>

<head>
</head>

<h4>Atelier de conception Métier/Chef de Projet : Cadrons le brief</h4>

<div class="chat-wrapper">
    <div class="chat-container">
        @foreach (var message in messages)
        {
            @* Display message bubble header *@
            <div class="@($"{(message.IsSender ? "message-source-sender" : "message-source-receiver")}")">
                @message.Source
                @if (message.DurationSeconds > 0)
                {
                    <span class="duration-text">(@message.DurationSeconds s.)</span>
                }
            </div>
            
            @* Display message bubble & its content *@
            <div class="@($"message-bubble {(message.IsSender ? "message-sender" : "message-receiver")}")" style="@(DisplayEditingButtons(message) ? "padding-bottom: 35px;" : "")">
                @if (!IsEditingMode(message))
                {
                    @* Display message for reading *@
                    @message.Content.Replace("[ENDS_EXCHANGE]", "- Fin de l'échange -")

                    @if (DisplayEditingButtons(message))
                    {
                        @* Display reading actions buttons*@
                        <div class="edit-button-wrapper">
                            <button title="Modifier la réponse" @onclick="() => EditLastMessage()" class="edit-button"><span class="oi oi-pencil"></span></button>

                            @if (!message.IsEndMessage)
                            {
                                <button title="Valider la réponse" @onclick="() => ValidateMetierAnswer()" class="next-button"><span class="oi oi-arrow-right"></span></button>
                            }
                            else
                            {
                                <button title="Terminer l'échange" @onclick="() => DoEndBusinessPoExchange()" class="end-exchange-button"><span class="oi oi-account-login"></span></button>
                            }
                        </div>
                    }
                }
                @if (DisplayLoader(message))
                {
                    <div class="loader">
                        <div class="circle"></div>
                        <div class="circle"></div>
                        <div class="circle"></div>
                    </div>
                }
                @if (IsEditingMode(message))
                {
                    @* Display message for editing *@
                    <textarea id="editingMessageTextarea" @onblur="HandleEditMessageExit" class="message-editable" placeholder="Décrivez ici le besoin à spécifier">
                        @message.Content
                    </textarea>

                    @* Display editing actions buttons *@
                    <div class="edit-button-wrapper">
                        <button title="Valider la réponse" @onclick="() => ValidateMetierAnswer()" class="next-button" style="@(message.IsEndMessage ? "right: 68px;" : "")"><span class="oi oi-check"></span></button>
                        @if (message.IsEndMessage)
                        {
                            <button title="Terminer l'échange" @onclick="() => DoEndBusinessPoExchange()" class="end-exchange-button"><span class="oi oi-account-login"></span></button>
                        }
                    </div>
                }
            </div>
        }
    </div> 
    @if (showMessageEmptyError)
    {
        <div class="notification">
            <span class="oi oi-circle-x" aria-hidden="true"></span>
            <span>Impossible d'envoyer un message vide</span>
        </div>
    }
    @if (showUserStoryNotification)
    {
        <div class="user-story-notification">
            <span class="oi oi-task" aria-hidden="true"></span>
            <span>La rédaction de la User Story est terminée</span>
            <span class="close-btn" @onclick="() => showUserStoryNotification = false">&times;</span>
        </div>
    }
</div>

<body>
</body>

@* <script>
    function scrollToBottom(id) {
        var element = document.getElementById(id);
        if (element) {
            console.error("Element '" + id + "' found!");
            // Vérifie si l'ascenseur est déjà tout en bas avant d'ajouter le nouveau contenu
            var isAtBottom = element.scrollHeight - element.scrollTop === element.clientHeight;
            console.error("Element '" + id + "' is at bottom = " + isAtBottom.valueOf())
            // Si l'élément existe et que l'ascenseur est tout en bas, alors on fait défiler vers le bas
            if (isAtBottom) {
                element.scrollTop = element.scrollHeight;
            }
        } else {
            console.error("Element '" + id + "' not found");
        }
    }
    function copyHeightTo(id1, id2) {
        var element1 = document.getElementById(id1);
        var element2 = document.getElementById(id2);
        if (element1 && element2) {
            console.error("Elements '" + id1 + "and " + id2 + "' found!");
            // Vérifie si l'ascenseur est déjà tout en bas avant d'ajouter le nouveau contenu
            id1.height = id2.height;
        }
    }
</script> *@
<script>
    function getTextareaValue(id) {
        return document.getElementById(id).value;
    }
    function autoResizeTextarea(id) {
        var textarea = document.getElementById(id);
        if (textarea) {
            console.error('testy!');
            textarea.style.height = 'auto';
            textarea.style.height = textarea.scrollHeight + 'px';
            textarea.addEventListener('input', function () {
                this.style.height = 'auto';
                this.style.height = this.scrollHeight + 'px';
            }, false);
        }
    }
</script>

@code {
    private ThreadModel messages = null!;
    private ElementReference textAreaElement;
    private bool isWaitingForLLM = true;
    private bool isEditingLastMessage = false;
    private bool showMessageEmptyError = false; 
    private bool showUserStoryNotification = false;
    public string modifiedMessageContent =string.Empty;

    private async Task HandleEditMessageExit()
    {
        modifiedMessageContent = await JSRuntime.InvokeAsync<string>("getTextareaValue", "editingMessageTextarea");
    }

    protected override async Task OnInitializedAsync()
    {
        messages = threadService.GetPoMetierThread();
        isEditingLastMessage = threadService.IsEditingLastMessage();
        isWaitingForLLM = threadService.IsWaitingForLLM();
        threadService.OnThreadChanged += ReloadThread;
        threadService.UserStoryReadyNotification += HandleUserStoryReadyNotification;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AutosizeEditingTextAreaAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AutosizeEditingTextAreaAsync()
    {
        await JSRuntime.InvokeVoidAsync("autoResizeTextarea", "editingMessageTextarea");
    }

    private bool DisplayEditingButtons(MessageModel message)
    {
        return !isEditingLastMessage && !isWaitingForLLM && message.IsLastThreadMessage && !message.IsSavedMessage;
    }

    private bool DisplayLoader(MessageModel message)
    {
        return !isEditingLastMessage && isWaitingForLLM && message.IsStreaming;
    }

    private bool IsEditingMode(MessageModel message)
    {
        return isEditingLastMessage && message.IsLastThreadMessage;
    }

    private async Task EditLastMessage()
    {
        isEditingLastMessage = true;
        threadService.EditingLastMessage();

        // Notify the component to re-render
        await AutosizeEditingTextAreaAsync();
        await InvokeAsync(StateHasChanged);

        await AutosizeEditingTextAreaAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void ShowMessageEmptyError()
    {
        showMessageEmptyError = true;
        var task = Task.Delay(4000).ContinueWith(t => { showMessageEmptyError = false; InvokeAsync(StateHasChanged); });
    }

    private async Task ValidateMetierAnswer()
    {
        if (isEditingLastMessage && string.IsNullOrEmpty(modifiedMessageContent))
        {
            ShowMessageEmptyError();
            return;
        }

        isEditingLastMessage = false;
        isWaitingForLLM = true;
        threadService.ValidateMetierAnswer(modifiedMessageContent);
        modifiedMessageContent = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    private void DoEndBusinessPoExchange()
    {
        isEditingLastMessage = false;
        isWaitingForLLM = true;
        threadService.DoEndBusinessPoExchange();
    }

    private async void ReloadThread()
    {
        messages = threadService.GetPoMetierThread();
        isWaitingForLLM = threadService.IsWaitingForLLM();
        await InvokeAsync(StateHasChanged);
    }

    private async void HandleUserStoryReadyNotification()
    {
        showUserStoryNotification = true;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        threadService.OnThreadChanged -= ReloadThread; 
        threadService.UserStoryReadyNotification -= HandleUserStoryReadyNotification;
    }
}
