{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V4/EventsV4Controller.cs",
    "index_shift_code": 570,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V4",
    "usings": [
        "System",
        "System.Collections.Generic",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Controllers.V3",
        "LMS.Data",
        "LMS.Models.BindingModels.V4.Events",
        "LMS.Models.CommonModels.EventModels",
        "LMS.Models.ViewModels",
        "LMS.Models.ViewModels.V3.Events",
        "LMS.ModelsDTOs.Event",
        "LMS.Services",
        "LMS.Utils",
        "Newtonsoft.Json",
        "Serilog"
    ],
    "access_modifier": "public",
    "struct_name": "EventsV4Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetUserLivesTaskAsync",
            "code_start_index": 1799,
            "method_name": "GetUserLivesTaskAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get user's lives\r\n        /// </summary>\r\n        /// <param name=\"page\">Page number</param>\r\n        /// <param name=\"pageSize\">Page size</param>\r\n        /// <param name=\"searchValue\">Value to search</param>\r\n        /// <param name=\"isReplay\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "page",
                    "param_name": "page",
                    "param_type": "int",
                    "has_default_value": true,
                    "default_value": "1",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "pageSize",
                    "param_name": "pageSize",
                    "param_type": "int",
                    "has_default_value": true,
                    "default_value": "50",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "searchValue",
                    "param_name": "searchValue",
                    "param_type": "string",
                    "has_default_value": true,
                    "default_value": "\"\"",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // Current User Info\r\n            var currentUser = User.Identity.GetUser();\r\n            var result = await _eventServices.GetLives(searchValue, page, pageSize, currentUser, EventsListScope.CurrentFormations);\r\n\r\n            return Ok(result);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Activate a service for the current school user by using a specified service code.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "page",
                        "param_name": "page",
                        "param_desc": "The page number for pagination. Default value is 1."
                    },
                    {
                        "name": "pageSize",
                        "param_name": "pageSize",
                        "param_desc": "The number of items per page. Default value is 50."
                    },
                    {
                        "name": "searchValue",
                        "param_name": "searchValue",
                        "param_desc": "The value used for searching. Default value is an empty string."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Activate a service for the current school user by using a specified service code.\n/// </summary>\n/// <param name=\"page\">The page number for pagination. Default value is 1.</param>\n/// <param name=\"pageSize\">The number of items per page. Default value is 50.</param>\n/// <param name=\"searchValue\">The value used for searching. Default value is an empty string.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetAllLivesTaskAsync",
            "code_start_index": 2616,
            "method_name": "GetAllLivesTaskAsync",
            "existing_summary": "\r\n\r\n\r\n        /// <summary>\r\n        /// Get all studi's lives\r\n        /// </summary>\r\n        /// <param name=\"page\">Page number</param>\r\n        /// <param name=\"pageSize\">Page size</param>\r\n        /// <param name=\"searchValue\">Value to search</param>\r\n        /// <param name=\"isReplay\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "page",
                    "param_name": "page",
                    "param_type": "int",
                    "has_default_value": true,
                    "default_value": "1",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "pageSize",
                    "param_name": "pageSize",
                    "param_type": "int",
                    "has_default_value": true,
                    "default_value": "50",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "searchValue",
                    "param_name": "searchValue",
                    "param_type": "string",
                    "has_default_value": true,
                    "default_value": "\"\"",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n            var result = await _eventServices.GetLives(searchValue, page, pageSize, currentUser, EventsListScope.Other);\r\n\r\n            return Ok(result);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Report service access for the current user and their associated school.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "page",
                        "param_name": "page",
                        "param_desc": "The page number for pagination. Defaults to 1."
                    },
                    {
                        "name": "pageSize",
                        "param_name": "pageSize",
                        "param_desc": "The number of items per page. Defaults to 50."
                    },
                    {
                        "name": "searchValue",
                        "param_name": "searchValue",
                        "param_desc": "The value to search for. Defaults to an empty string."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Report service access for the current user and their associated school.\n/// </summary>\n/// <param name=\"page\">The page number for pagination. Defaults to 1.</param>\n/// <param name=\"pageSize\">The number of items per page. Defaults to 50.</param>\n/// <param name=\"searchValue\">The value to search for. Defaults to an empty string.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetAllLivesAndReplaysAsync",
            "code_start_index": 3148,
            "method_name": "GetAllLivesAndReplaysAsync",
            "existing_summary": "\r\n\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "eventsBindingModel",
                    "param_name": "eventsBindingModel",
                    "param_type": "EventsBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n\r\n            try\r\n            {\r\n                #region Checks de securit\u00e9 pour \u00e9viter que des petits malins s'amusent \u00e0 mettre la base de donn\u00e9es en souffrance en appelant l'api \u00e0 leur sauce\r\n\r\n                #region Check sur la dur\u00e9e de r\u00e9cup\u00e9ration des \u00e9v\u00e8nements : pour le cas du calendrier, c'est un an maximum\r\n\r\n                if (eventsBindingModel.DisplayOnCalendar)\r\n                {\r\n                    if (eventsBindingModel.StartDate.HasValue && eventsBindingModel.EndDate.HasValue)\r\n                    {\r\n                        var timeDiffIsGreaterThanAYear = DateTimeExtensions.TimeDiffIsGreaterThanAYear(eventsBindingModel.StartDate.Value, eventsBindingModel.EndDate.Value);\r\n\r\n                        if (timeDiffIsGreaterThanAYear)\r\n                        {\r\n                            throw new ArgumentOutOfRangeException(\"When displaying data on calendar, we get a maximum of 1 year of replays/lives\");\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        throw new ArgumentNullException(\"When displaying data on calendar, we need a startDate Value and a EndDate Value\");\r\n                    }\r\n                }\r\n\r\n                #endregion\r\n\r\n                #region Check sur le nombre de derniers lives affich\u00e9s d\u00e9marrant \u00e0 la m\u00eame heure : LastEventsShownIds\r\n\r\n                if (eventsBindingModel.LastEventsShownIds?.Count > 100)\r\n                {\r\n                    // Le 31 janvier 2022 le maximum est de 20 lives commen\u00e7ant exactement au m\u00eame moment, j'ai donc fix\u00e9 la limite tr\u00e8s largement \u00e0 100 => A discuter\r\n                    throw new ArgumentOutOfRangeException(\"LastEventsShownIds must be inferior or equal to 100\");\r\n                }\r\n\r\n                #endregion\r\n\r\n                #region Check sur le nombre de selectedMatiereIds re\u00e7us pour le m\u00eame nom de matiere\r\n\r\n                if (eventsBindingModel.SelectedMatiereIds?.Count > 200)\r\n                {\r\n                    // Le 12 f\u00e9vrier 2022, le maximum est de 135 mati\u00e8res poss\u00e9dant le m\u00eame nom dans plusieurs parcours (avec la matiere \"Certificat Studi\"), j'ai donc fix\u00e9 la limite tr\u00e8s largement \u00e0 200 => A discuter\r\n                    throw new ArgumentOutOfRangeException(\"SelectedMatiereIds must be inferior or equal to 200\");\r\n                }\r\n\r\n                #endregion\r\n\r\n                #region Check sur LivesScope\r\n\r\n                bool scopeExists = Enum.TryParse(eventsBindingModel.LivesScope, out EventsListScope currentScope);\r\n\r\n                if (!scopeExists)\r\n                {\r\n                    throw new ArgumentException(\"LivesScope doesn't correspond to the allowed values\");\r\n                }\r\n\r\n                #endregion\r\n\r\n                #region Check sur EventViewType\r\n\r\n                bool viewTypeExists = Enum.TryParse(eventsBindingModel.EventViewType, out EventViewType currentEventViewType);\r\n\r\n                if (!viewTypeExists)\r\n                {\r\n                    throw new ArgumentException(\"EventViewType doesn't correspond to the allowed values\");\r\n                }\r\n                #endregion\r\n\r\n                #endregion\r\n\r\n                EventsFormDto eventFormDto = new EventsFormDto\r\n                {\r\n                    Scope = currentScope,\r\n                    CurrentEventViewType = currentEventViewType,\r\n                    LastEventsShownIds = eventsBindingModel.LastEventsShownIds,\r\n                    DisplayOnCalendar = eventsBindingModel.DisplayOnCalendar,\r\n                    StartDate = eventsBindingModel.StartDate,\r\n                    EndDate = eventsBindingModel.EndDate,\r\n                    LastEventShownDateDebut = eventsBindingModel.LastEventShownDateDebut,\r\n                    SelectOnlyReplays = eventsBindingModel.SelectOnlyReplays,\r\n                    SelectOnlyFavorites = eventsBindingModel.SelectOnlyFavorites,\r\n                    SearchValue = eventsBindingModel.SearchValue,\r\n                    SelectedParcoursId = eventsBindingModel.SelectedParcoursId,\r\n                    SelectedMatiereIds = eventsBindingModel.SelectedMatiereIds,\r\n                    PageSize = eventsBindingModel?.PageSize ?? 40,\r\n                    CurrentUser = currentUser\r\n                };\r\n\r\n                var result = await _eventServices.GetAllLives(eventFormDto);\r\n                return Ok(result);\r\n            }\r\n            catch (ArgumentException ae)\r\n            {\r\n                string errorMessage = JsonConvert.SerializeObject(new\r\n                {\r\n                    userId = currentUser.Id,\r\n                    ecoleId = currentUser.SchoolId,\r\n                    eventsBindingModel,\r\n                    ae.Message\r\n                });\r\n\r\n                Log.Error(ae, $\"Lives | {nameof(EventsV4Controller)} | {nameof(GetAllLivesAndReplaysAsync)} | {errorMessage}\");\r\n                return BadRequest();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                string errorMessage = JsonConvert.SerializeObject(new\r\n                {\r\n                    userId = currentUser.Id,\r\n                    ecoleId = currentUser.SchoolId,\r\n                    eventsBindingModel,\r\n                    ex.Message\r\n                });\r\n\r\n                Log.Error(ex, $\"Lives | {nameof(EventsV4Controller)} | {nameof(GetAllLivesAndReplaysAsync)} | {errorMessage}\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the lives task for the current user.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "eventsBindingModel",
                        "param_name": "eventsBindingModel",
                        "param_desc": "The EventsBindingModel parameter is used to bind events data for processing in the method. It contains information related to events."
                    },
                    {
                        "name": "GetAllLivesAndReplaysAsync",
                        "param_name": "GetAllLivesAndReplaysAsync",
                        "param_desc": "The GetAllLivesAndReplaysAsync parameter represents the method name itself, and it is used to identify the specific method to retrieve lives and replays asynchronously."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the lives task for the current user.\n/// </summary>\n/// <param name=\"eventsBindingModel\">The EventsBindingModel parameter is used to bind events data for processing in the method. It contains information related to events.</param>\n/// <param name=\"GetAllLivesAndReplaysAsync\">The GetAllLivesAndReplaysAsync parameter represents the method name itself, and it is used to identify the specific method to retrieve lives and replays asynchronously.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetCurrentFormations",
            "code_start_index": 8956,
            "method_name": "GetCurrentFormations",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            #region R\u00e9cup\u00e9ration userId et ecoleId\r\n\r\n            var currentUser = User.Identity.GetUser();\r\n            var userId = currentUser.Id;\r\n            var ecoleId = currentUser.SchoolId;\r\n\r\n            #endregion\r\n\r\n            try\r\n            {\r\n                EventParcoursListV3ViewModel result = await _eventServices.GetFormations(userId, ecoleId);\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                string errorMessage = JsonConvert.SerializeObject(new\r\n                {\r\n                    userId,\r\n                    ecoleId,\r\n                    ex.Message\r\n                });\r\n\r\n                Log.Fatal(ex, $\"Lives | {nameof(EventsV4Controller)} | {nameof(GetCurrentFormations)} | Erreur lors de la recuperation des parcours et matieres | {errorMessage}\");\r\n                return InternalServerError(ex);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve all live events for a specified user, based on search criteria, pagination, and specified event scope.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The name of the method (e.g., GetCurrentFormations)"
                    },
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "The context or purpose of the method (e.g., Retrieve all live events for a specified user, based on search criteria, pagination, and specified event scope.)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve all live events for a specified user, based on search criteria, pagination, and specified event scope.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">The name of the method (e.g., GetCurrentFormations)</param>\n/// <param name=\"context\">The context or purpose of the method (e.g., Retrieve all live events for a specified user, based on search criteria, pagination, and specified event scope.)</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "EventsV4Controller"
}