{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Common/AnnotationeerController.cs",
    "index_shift_code": 429,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.Common",
    "usings": [
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Models.BindingModels.Common.Annotationeer",
        "LMS.Models.ViewModels.Common.Annotationeer",
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Globalization",
        "System.IO",
        "System.Linq",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description"
    ],
    "access_modifier": "public",
    "struct_name": "AnnotationeerController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "InsertUpdateComment",
            "code_start_index": 997,
            "method_name": "InsertUpdateComment",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Insert or update a comment\r\n        /// </summary>\r\n        /// <param name=\"id\"></param>\r\n        /// <param name=\"comment\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "id",
                    "param_name": "id",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "comment",
                    "param_name": "comment",
                    "param_type": "CommentsBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            if (comment.Modified == \"insert\")\r\n            {\r\n                var commentnew = new AnnotationComment\r\n                {\r\n                    AnnotationId = id,\r\n                    Comment = comment.Comment,\r\n                    ParentId = comment.ParentId,\r\n                    Username = comment.Username,\r\n                    DateCreated = comment.DateCreated,\r\n                    DateModified = comment.DateModified,\r\n                };\r\n                _db.AnnotationComments.Add(commentnew);\r\n                await _db.SaveChangesAsync();\r\n                comment.Modified = \"\";\r\n                comment.OldId = comment.Id;\r\n                comment.Id = commentnew.Id;\r\n                return this.Ok(comment);\r\n            }\r\n\r\n            if (comment.Id > 0 || comment.Modified == \"update\")\r\n            {\r\n                var commentupdate = await _db.AnnotationComments.FirstOrDefaultAsync(ac => ac.Id == comment.Id);\r\n                commentupdate.AnnotationId = id;\r\n                commentupdate.Comment = comment.Comment;\r\n                commentupdate.Username = comment.Username;\r\n                commentupdate.DateCreated = comment.DateCreated;\r\n                commentupdate.DateModified = comment.DateModified;\r\n                await _db.SaveChangesAsync();\r\n                comment.Modified = \"\";\r\n                return this.Ok(comment);\r\n            }\r\n\r\n            return this.Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update or insert a comment into the database based on the provided conditions.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "id",
                        "param_name": "id",
                        "param_desc": "The id of the comment to be updated or inserted into the database."
                    },
                    {
                        "name": "comment",
                        "param_name": "comment",
                        "param_desc": "The binding model containing the details of the comment to be updated or inserted into the database."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update or insert a comment into the database based on the provided conditions.\n/// </summary>\n/// <param name=\"id\">The id of the comment to be updated or inserted into the database.</param>\n/// <param name=\"comment\">The binding model containing the details of the comment to be updated or inserted into the database.</param>\n",
            "code_chunks": null
        },
        {
            "name": "InsertUpdateAnnotation",
            "code_start_index": 2784,
            "method_name": "InsertUpdateAnnotation",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Insert or update an annotation\r\n        /// </summary>\r\n        /// <param name=\"annotations\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "annotations",
                    "param_name": "annotations",
                    "param_type": "AnnotationBindingModel[]",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                foreach (var annotation in annotations)\r\n                {\r\n                    if (annotation.Id <= 0 || annotation.Modified == \"insert\")\r\n                    {\r\n                        var annew = new Annotation\r\n                        {\r\n                            PageIndex = annotation.PageIndex,\r\n                            PageWidth = annotation.PageWidth,\r\n                            PageHeight = annotation.PageHeight,\r\n                            AnnotationTypeId = annotation.AnnotationType,\r\n                            Coordinate = annotation.OrigX +\r\n                                         \",\" + annotation.OrigY +\r\n                                         \",\" + annotation.OrigW +\r\n                                         \",\" + annotation.OrigH,\r\n                            FormFieldName = annotation.FormFieldName,\r\n                            FormFieldValue = annotation.FormFieldValue,\r\n                            Text = annotation.Text,\r\n                            FontSize = annotation.FontSize,\r\n                            Font = annotation.Font,\r\n                            Color = annotation.Color,\r\n                            BackgroundColor = annotation.BackgroundColor,\r\n                            DocId = annotation.DocId,\r\n                            MeasurementTypeId = annotation.MeasurementType,\r\n                            DateCreated = annotation.DateCreated,\r\n                            DateModified = annotation.DateModified,\r\n                            ReadOnly = new Byte[Convert.ToByte(annotation.ReadOnly)],\r\n                            ReadOnlyComment = new Byte[Convert.ToByte(annotation.ReadOnlyComment)]\r\n                        };\r\n\r\n                        if (annotation.IconSrc != null)\r\n                        {\r\n                            annew.Icon = annotation.IconSrc.StartsWith(\"data:image\")\r\n                                ? annotation.IconSrc\r\n                                : Path.GetFileName(annotation.IconSrc);\r\n                        }\r\n                        _db.Annotations.Add(annew);\r\n                        await _db.SaveChangesAsync();\r\n                        annotation.OldId = annotation.Id;\r\n                        annotation.Id = annew.Id;\r\n\r\n                        foreach (var drawingPosition in annotation.DrawingPositions)\r\n                        {\r\n                            var dp = new DrawingPosition\r\n                            {\r\n                                AnnotationId = annew.Id,\r\n                                Coordinate = drawingPosition.OrigX.ToString(CultureInfo.InvariantCulture) +\r\n                                             \",\" + drawingPosition.OrigY.ToString(CultureInfo.InvariantCulture),\r\n                            };\r\n                            _db.DrawingPositions.Add(dp);\r\n                            await _db.SaveChangesAsync();\r\n                            drawingPosition.OldId = drawingPosition.Id;\r\n                            drawingPosition.Id = dp.Id;\r\n                        }\r\n\r\n                        foreach (var highlightTextRect in annotation.HighlightTextRects)\r\n                        {\r\n                            var hltr = new HighlightTextRect\r\n                            {\r\n                                AnnotationId = annew.Id,\r\n                                Coordinate = highlightTextRect.OrigLeft.ToString(CultureInfo.InvariantCulture) + \",\"\r\n                                             + highlightTextRect.OrigTop.ToString(CultureInfo.InvariantCulture) + \",\"\r\n                                             + highlightTextRect.OrigWidth.ToString(CultureInfo.InvariantCulture) + \",\"\r\n                                             + highlightTextRect.OrigHeight.ToString(CultureInfo.InvariantCulture),\r\n                                DomRotateAngle = highlightTextRect.DomRotateAngle,\r\n                            };\r\n                            _db.HighlightTextRects.Add(hltr);\r\n                            await _db.SaveChangesAsync();\r\n                            highlightTextRect.OldId = highlightTextRect.Id;\r\n                            highlightTextRect.Id = hltr.Id;\r\n                        }\r\n\r\n                        long? firstCommentId = 0;\r\n                        foreach (var comment in annotation.Comments)\r\n                        {\r\n                            var com = new AnnotationComment\r\n                            {\r\n                                AnnotationId = annew.Id,\r\n                                Comment = comment.Comment,\r\n                                ParentId = firstCommentId > 0 ? firstCommentId : null,\r\n                                Username = comment.Username,\r\n                                DateCreated = comment.DateCreated,\r\n                                DateModified = comment.DateModified,\r\n                            };\r\n                            _db.AnnotationComments.Add(com);\r\n                            await _db.SaveChangesAsync();\r\n                            comment.OldId = comment.Id;\r\n                            comment.Id = com.Id;\r\n                            if (firstCommentId == 0)\r\n                            {\r\n                                firstCommentId = com.Id;\r\n                            }\r\n                            foreach (var reviewStatus in comment.ReviewStatuses)\r\n                            {\r\n                                if (reviewStatus.Id <= 0 || reviewStatus.Modified == \"insert\")\r\n                                {\r\n                                    var crh = new CommentReviewHistory\r\n                                    {\r\n                                        CommentId = comment.Id,\r\n                                        Status = reviewStatus.Status,\r\n                                        ReviewedBy = reviewStatus.ReviewedBy,\r\n                                        DateReviewed = reviewStatus.DateReviewed\r\n                                    };\r\n                                    _db.CommentReviewHistories.Add(crh);\r\n                                    await _db.SaveChangesAsync();\r\n                                    reviewStatus.OldId = reviewStatus.Id;\r\n                                    reviewStatus.Id = crh.Id;\r\n                                    reviewStatus.Modified = string.Empty;\r\n                                }\r\n                            }\r\n                        }\r\n                        annotation.OldId = annotation.Id;\r\n                        annotation.Id = annew.Id;\r\n                        annotation.OldModified = \"insert\";\r\n                        annotation.Modified = string.Empty;\r\n                    }\r\n                    else if (annotation.Id > 0)\r\n                    {\r\n                        if (annotation.Modified == \"delete\")\r\n                        {\r\n                            var annDel = await _db.Annotations.FirstOrDefaultAsync(an => an.Id == annotation.Id);\r\n                            _db.Annotations.Remove(annDel);\r\n                            await _db.SaveChangesAsync();\r\n                            annotation.OldModified = \"delete\";\r\n                            annotation.Modified = string.Empty;\r\n                        }\r\n                        else\r\n                        {\r\n                            var annotationUpdate = await _db.Annotations.FirstOrDefaultAsync(an => an.Id == annotation.Id);\r\n                            annotationUpdate.PageIndex = annotation.PageIndex;\r\n                            annotationUpdate.PageWidth = annotation.PageWidth;\r\n                            annotationUpdate.PageHeight = annotation.PageHeight;\r\n                            annotationUpdate.AnnotationTypeId = annotation.AnnotationType;\r\n                            annotationUpdate.Coordinate = annotation.OrigX +\r\n                                                          \",\" + annotation.OrigY +\r\n                                                          \",\" + annotation.OrigW +\r\n                                                          \",\" + annotation.OrigH;\r\n                            annotationUpdate.FormFieldName = annotation.FormFieldName;\r\n                            annotationUpdate.FormFieldValue = annotation.FormFieldValue;\r\n                            annotationUpdate.Text = annotation.Text;\r\n                            annotationUpdate.FontSize = annotation.FontSize;\r\n                            annotationUpdate.Font = annotation.Font;\r\n                            annotationUpdate.Color = annotation.Color;\r\n                            annotationUpdate.BackgroundColor = annotation.BackgroundColor;\r\n                            annotationUpdate.Icon = annotation.IconSrc.StartsWith(\"data:image\")\r\n                                ? annotation.IconSrc\r\n                                : Path.GetFileName(annotation.IconSrc);\r\n                            annotationUpdate.DocId = annotation.DocId;\r\n                            annotationUpdate.MeasurementTypeId = annotation.MeasurementType;\r\n                            annotationUpdate.DateCreated = annotation.DateCreated;\r\n                            annotationUpdate.DateModified = annotation.DateModified;\r\n                            await _db.SaveChangesAsync();\r\n\r\n                            foreach (var drawingPosition in annotation.DrawingPositions)\r\n                            {\r\n                                try\r\n                                {\r\n                                    var drawingUpdate = await _db.DrawingPositions.FirstOrDefaultAsync(dp => dp.Id == drawingPosition.Id);\r\n                                    drawingUpdate.Coordinate =\r\n                                        drawingPosition.OrigX.ToString(CultureInfo.InvariantCulture) + \",\" +\r\n                                        drawingPosition.OrigY.ToString(CultureInfo.InvariantCulture);\r\n                                    await _db.SaveChangesAsync();\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Serilog.Log.Error(\"Erreur lors de la modification de annotation\", ex);\r\n                                    throw;\r\n                                }\r\n                            }\r\n\r\n                            foreach (var highlightTextRect in annotation.HighlightTextRects)\r\n                            {\r\n                                try\r\n                                {\r\n                                    var highlightTextRectUpdate =\r\n                                        await _db.HighlightTextRects.FirstOrDefaultAsync(hltr => hltr.Id == highlightTextRect.Id);\r\n                                    highlightTextRectUpdate.Coordinate =\r\n                                        highlightTextRect.OrigLeft.ToString(CultureInfo.InvariantCulture) +\r\n                                        \",\" + highlightTextRect.OrigTop.ToString(CultureInfo.InvariantCulture)\r\n                                        + \",\" + highlightTextRect.OrigWidth.ToString(CultureInfo.InvariantCulture)\r\n                                        + \",\" + highlightTextRect.OrigHeight.ToString(CultureInfo.InvariantCulture);\r\n                                    await _db.SaveChangesAsync();\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Serilog.Log.Error(\"Erreur lors de la modification de annotation\", ex);\r\n                                    throw;\r\n                                }\r\n                            }\r\n\r\n                            long? firstCommentId = 0;\r\n                            foreach (var comment in annotation.Comments)\r\n                            {\r\n                                if (firstCommentId == 0)\r\n                                {\r\n                                    firstCommentId = comment.Id;\r\n                                }\r\n                                else\r\n                                {\r\n                                    comment.ParentId = (long)firstCommentId;\r\n                                }\r\n\r\n                                if (comment.Id <= 0 || comment.Modified == \"insert\")\r\n                                {\r\n                                    var com = new AnnotationComment\r\n                                    {\r\n                                        AnnotationId = annotation.Id,\r\n                                        Comment = comment.Comment,\r\n                                        ParentId = firstCommentId > 0 ? firstCommentId : null,\r\n                                        Username = comment.Username,\r\n                                        DateCreated = comment.DateCreated,\r\n                                        DateModified = comment.DateModified,\r\n                                    };\r\n                                    await _db.SaveChangesAsync();\r\n                                    comment.OldId = comment.Id;\r\n                                    comment.Id = com.Id;\r\n                                    comment.Modified = string.Empty;\r\n                                }\r\n                                else if (comment.Id > 0 || comment.Modified == \"update\")\r\n                                {\r\n                                    var commentUpdate =\r\n                                        await _db.AnnotationComments.FirstOrDefaultAsync(ac => ac.Id == comment.Id);\r\n                                    commentUpdate.AnnotationId = annotation.Id;\r\n                                    commentUpdate.Comment = comment.Comment;\r\n                                    commentUpdate.ParentId = firstCommentId;\r\n                                    commentUpdate.Username = comment.Username;\r\n                                    commentUpdate.DateCreated = comment.DateCreated;\r\n                                    commentUpdate.DateModified = comment.DateModified;\r\n                                    comment.Modified = string.Empty;\r\n                                    await _db.SaveChangesAsync();\r\n                                }\r\n\r\n                                foreach (var reviewStatus in comment.ReviewStatuses)\r\n                                {\r\n                                    if (reviewStatus.Id <= 0)\r\n                                    {\r\n                                        var crh = new CommentReviewHistory\r\n                                        {\r\n                                            CommentId = comment.Id,\r\n                                            Status = reviewStatus.Status,\r\n                                            ReviewedBy = reviewStatus.ReviewedBy,\r\n                                            DateReviewed = reviewStatus.DateReviewed\r\n                                        };\r\n                                        await _db.SaveChangesAsync();\r\n                                        reviewStatus.OldId = reviewStatus.Id;\r\n                                        reviewStatus.Id = crh.Id;\r\n                                        reviewStatus.Modified = string.Empty;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Serilog.Log.Error(\"Erreur lors de la modification de annotation\", ex);\r\n                return InternalServerError(ex);\r\n            }\r\n            return this.Ok(annotations);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update or insert annotations in the database based on their ID and modification status, including associated drawing positions, highlight text rectangles, comments, and review statuses.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "annotations",
                        "param_name": "annotations",
                        "param_desc": "An array of AnnotationBindingModel objects representing the annotations to be updated or inserted into the database."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update or insert annotations in the database based on their ID and modification status, including associated drawing positions, highlight text rectangles, comments, and review statuses.\n/// </summary>\n/// <param name=\"annotations\">An array of AnnotationBindingModel objects representing the annotations to be updated or inserted into the database.</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            try\r\n            {\r\n                foreach (var annotation in annotations)\r\n                {\r\n                    if (annotation.Id <= 0 || annotation.Modified == \"insert\")\r\n                    {\r\n                        var annew = new Annotation\r\n                        {\r\n                            PageIndex = annotation.PageIndex,\r\n                            PageWidth = annotation.PageWidth,\r\n                            PageHeight = annotation.PageHeight,\r\n                            AnnotationTypeId = annotation.AnnotationType,\r\n                            Coordinate = annotation.OrigX +\r\n                                         \",\" + annotation.OrigY +\r\n                                         \",\" + annotation.OrigW +\r\n                                         \",\" + annotation.OrigH,\r\n                            FormFieldName = annotation.FormFieldName,\r\n                            FormFieldValue = annotation.FormFieldValue,\r\n                            Text = annotation.Text,\r\n                            FontSize = annotation.FontSize,\r\n                            Font = annotation.Font,\r\n                            Color = annotation.Color,\r\n                            BackgroundColor = annotation.BackgroundColor,\r\n                            DocId = annotation.DocId,\r\n                            MeasurementTypeId = annotation.MeasurementType,\r\n                            DateCreated = annotation.DateCreated,\r\n                            DateModified = annotation.DateModified,\r\n                            ReadOnly = new Byte[Convert.ToByte(annotation.ReadOnly)],\r\n                            ReadOnlyComment = new Byte[Convert.ToByte(annotation.ReadOnlyComment)]\r\n                        };\r\n\r\n                        if (annotation.IconSrc != null)\r\n                        {\r\n                            annew.Icon = annotation.IconSrc.StartsWith(\"data:image\")\r\n                                ? annotation.IconSrc\r\n                                : Path.GetFileName(annotation.IconSrc);\r\n                        }\r\n                        _db.Annotations.Add(annew);\r\n                        await _db.SaveChangesAsync();\r\n                        annotation.OldId = annotation.Id;\r\n                        annotation.Id = annew.Id;\r\n\r\n                        foreach (var drawingPosition in annotation.DrawingPositions)\r\n                        {\r\n                            var dp = new DrawingPosition\r\n                            {\r\n                                AnnotationId = annew.Id,\r\n                                Coordinate = drawingPosition.OrigX.ToString(CultureInfo.InvariantCulture) +\r\n                                             \",\" + drawingPosition.OrigY.ToString(CultureInfo.InvariantCulture),\r\n                            };\r\n                            _db.DrawingPositions.Add(dp);\r\n                            await _db.SaveChangesAsync();\r\n                            drawingPosition.OldId = drawingPosition.Id;\r\n                            drawingPosition.Id = dp.Id;\r\n                        }\r\n\r\n                        foreach (var highlightTextRect in annotation.HighlightTextRects)\r\n                        {\r\n                            var hltr = new HighlightTextRect\r\n                            {\r\n                                AnnotationId = annew.Id,\r\n                                Coordinate = highlightTextRect.OrigLeft.ToString(CultureInfo.InvariantCulture) + \",\"\r\n                                             + highlightTextRect.OrigTop.ToString(CultureInfo.InvariantCulture) + \",\"\r\n                                             + highlightTextRect.OrigWidth.ToString(CultureInfo.InvariantCulture) + \",\"\r\n                                             + highlightTextRect.OrigHeight.ToString(CultureInfo.InvariantCulture),\r\n                                DomRotateAngle = highlightTextRect.DomRotateAngle,\r\n                            };\r\n                            _db.HighlightTextRects.Add(hltr);\r\n                            await _db.SaveChangesAsync();\r\n                            highlightTextRect.OldId = highlightTextRect.Id;\r\n                            highlightTextRect.Id = hltr.Id;\r\n                        }\r\n\r\n                        long? firstCommentId = 0;\r\n                        foreach (var comment in annotation.Comments)\r\n                        {\r\n                            var com = new AnnotationComment\r\n                            {\r\n                                AnnotationId = annew.Id,\r\n                                Comment = comment.Comment,\r\n                                ParentId = firstCommentId > 0 ? firstCommentId : null,\r\n                                Username = comment.Username,\r\n                                DateCreated = comment.DateCreated,\r\n                                DateModified = comment.DateModified,\r\n                            };\r\n                            _db.AnnotationComments.Add(com);\r\n                            await _db.SaveChangesAsync();\r\n                            comment.OldId = comment.Id;\r\n                            comment.Id = com.Id;\r\n                            if (firstCommentId == 0)\r\n                            {\r\n                                firstCommentId = com.Id;\r\n                            }\r\n                            foreach (var reviewStatus in comment.ReviewStatuses)\r\n                            {\r\n                                if (reviewStatus.Id <= 0 || reviewStatus.Modified == \"insert\")\r\n                                {\r\n                                    var crh = new CommentReviewHistory\r\n                                    {\r\n                                        CommentId = comment.Id,\r\n                                        Status = reviewStatus.Status,\r\n                                        ReviewedBy = reviewStatus.ReviewedBy,\r\n                                        DateReviewed = reviewStatus.DateReviewed\r\n                                    };\r\n                                    _db.CommentReviewHistories.Add(crh);\r\n                                    await _db.SaveChangesAsync();\r\n                                    reviewStatus.OldId = reviewStatus.Id;\r\n                                    reviewStatus.Id = crh.Id;\r\n                                    reviewStatus.Modified = string.Empty;\r\n                                }\r\n                            }\r\n                        }\r\n                        annotation.OldId = annotation.Id;\r\n                        annotation.Id = annew.Id;\r\n                        annotation.OldModified = \"insert\";\r\n                        annotation.Modified = string.Empty;\r\n                    }\r\n                    else if (annotation.Id > 0)\r\n                    {\r\n                        if (annotation.Modified == \"delete\")\r\n                        {\r\n                            var annDel = await _db.Annotations.FirstOrDefaultAsync(an => an.Id == annotation.Id);\r\n                            _db.Annotations.Remove(annDel);\r\n                            await _db.SaveChangesAsync();\r\n                            annotation.OldModified = \"delete\";\r\n                            annotation.Modified = string.Empty;\r\n                        }\r\n                        else\r\n                        {\r\n                            var annotationUpdate = await _db.Annotations.FirstOrDefaultAsync(an => an.Id == annotation.Id);\r\n                            annotationUpdate.PageIndex = annotation.PageIndex;\r\n                            annotationUpdate.PageWidth = annotation.PageWidth;\r\n                            annotationUpdate.PageHeight = annotation.PageHeight;\r\n                            annotationUpdate.AnnotationTypeId = annotation.AnnotationType;\r\n                            annotationUpdate.Coordinate = annotation.OrigX +\r\n                                                          \",\" + annotation.OrigY +",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": "\",\" + annotation.OrigW +\r\n                                                          \",\" + annotation.OrigH;\r\n                            annotationUpdate.FormFieldName = annotation.FormFieldName;\r\n                            annotationUpdate.FormFieldValue = annotation.FormFieldValue;\r\n                            annotationUpdate.Text = annotation.Text;\r\n                            annotationUpdate.FontSize = annotation.FontSize;\r\n                            annotationUpdate.Font = annotation.Font;\r\n                            annotationUpdate.Color = annotation.Color;\r\n                            annotationUpdate.BackgroundColor = annotation.BackgroundColor;\r\n                            annotationUpdate.Icon = annotation.IconSrc.StartsWith(\"data:image\")\r\n                                ? annotation.IconSrc\r\n                                : Path.GetFileName(annotation.IconSrc);\r\n                            annotationUpdate.DocId = annotation.DocId;\r\n                            annotationUpdate.MeasurementTypeId = annotation.MeasurementType;\r\n                            annotationUpdate.DateCreated = annotation.DateCreated;\r\n                            annotationUpdate.DateModified = annotation.DateModified;\r\n                            await _db.SaveChangesAsync();\r\n\r\n                            foreach (var drawingPosition in annotation.DrawingPositions)\r\n                            {\r\n                                try\r\n                                {\r\n                                    var drawingUpdate = await _db.DrawingPositions.FirstOrDefaultAsync(dp => dp.Id == drawingPosition.Id);\r\n                                    drawingUpdate.Coordinate =\r\n                                        drawingPosition.OrigX.ToString(CultureInfo.InvariantCulture) + \",\" +\r\n                                        drawingPosition.OrigY.ToString(CultureInfo.InvariantCulture);\r\n                                    await _db.SaveChangesAsync();\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Serilog.Log.Error(\"Erreur lors de la modification de annotation\", ex);\r\n                                    throw;\r\n                                }\r\n                            }\r\n\r\n                            foreach (var highlightTextRect in annotation.HighlightTextRects)\r\n                            {\r\n                                try\r\n                                {\r\n                                    var highlightTextRectUpdate =\r\n                                        await _db.HighlightTextRects.FirstOrDefaultAsync(hltr => hltr.Id == highlightTextRect.Id);\r\n                                    highlightTextRectUpdate.Coordinate =\r\n                                        highlightTextRect.OrigLeft.ToString(CultureInfo.InvariantCulture) +\r\n                                        \",\" + highlightTextRect.OrigTop.ToString(CultureInfo.InvariantCulture)\r\n                                        + \",\" + highlightTextRect.OrigWidth.ToString(CultureInfo.InvariantCulture)\r\n                                        + \",\" + highlightTextRect.OrigHeight.ToString(CultureInfo.InvariantCulture);\r\n                                    await _db.SaveChangesAsync();\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Serilog.Log.Error(\"Erreur lors de la modification de annotation\", ex);\r\n                                    throw;\r\n                                }\r\n                            }\r\n\r\n                            long? firstCommentId = 0;\r\n                            foreach (var comment in annotation.Comments)\r\n                            {\r\n                                if (firstCommentId == 0)\r\n                                {\r\n                                    firstCommentId = comment.Id;\r\n                                }\r\n                                else\r\n                                {\r\n                                    comment.ParentId = (long)firstCommentId;\r\n                                }\r\n\r\n                                if (comment.Id <= 0 || comment.Modified == \"insert\")\r\n                                {\r\n                                    var com = new AnnotationComment\r\n                                    {\r\n                                        AnnotationId = annotation.Id,\r\n                                        Comment = comment.Comment,\r\n                                        ParentId = firstCommentId > 0 ? firstCommentId : null,\r\n                                        Username = comment.Username,\r\n                                        DateCreated = comment.DateCreated,\r\n                                        DateModified = comment.DateModified,\r\n                                    };\r\n                                    await _db.SaveChangesAsync();\r\n                                    comment.OldId = comment.Id;\r\n                                    comment.Id = com.Id;\r\n                                    comment.Modified = string.Empty;\r\n                                }\r\n                                else if (comment.Id > 0 || comment.Modified == \"update\")\r\n                                {\r\n                                    var commentUpdate =\r\n                                        await _db.AnnotationComments.FirstOrDefaultAsync(ac => ac.Id == comment.Id);\r\n                                    commentUpdate.AnnotationId = annotation.Id;\r\n                                    commentUpdate.Comment = comment.Comment;\r\n                                    commentUpdate.ParentId = firstCommentId;\r\n                                    commentUpdate.Username = comment.Username;\r\n                                    commentUpdate.DateCreated = comment.DateCreated;\r\n                                    commentUpdate.DateModified = comment.DateModified;\r\n                                    comment.Modified = string.Empty;\r\n                                    await _db.SaveChangesAsync();\r\n                                }\r\n\r\n                                foreach (var reviewStatus in comment.ReviewStatuses)\r\n                                {\r\n                                    if (reviewStatus.Id <= 0)\r\n                                    {\r\n                                        var crh = new CommentReviewHistory\r\n                                        {\r\n                                            CommentId = comment.Id,\r\n                                            Status = reviewStatus.Status,\r\n                                            ReviewedBy = reviewStatus.ReviewedBy,\r\n                                            DateReviewed = reviewStatus.DateReviewed\r\n                                        };\r\n                                        await _db.SaveChangesAsync();\r\n                                        reviewStatus.OldId = reviewStatus.Id;\r\n                                        reviewStatus.Id = crh.Id;\r\n                                        reviewStatus.Modified = string.Empty;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Serilog.Log.Error(\"Erreur lors de la modification de annotation\", ex);\r\n                return InternalServerError(ex);\r\n            }\r\n            return this.Ok(annotations);\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "DeleteAnnotation",
            "code_start_index": 18735,
            "method_name": "DeleteAnnotation",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Delete an annotation by Id\r\n        /// </summary>\r\n        /// <param name=\"id\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "id",
                    "param_name": "id",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var element = await _db.Annotations.FirstOrDefaultAsync(an => an.Id == id);\r\n\r\n            if (element == null)\r\n            {\r\n                return this.Ok();\r\n            }\r\n\r\n            _db.Annotations.Remove(element);\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return this.Ok();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Serilog.Log.Logger.Error(ex, \"error lors de la supression de l'Annotation\");\r\n                return InternalServerError(ex);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Delete an annotation from the database.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "id",
                        "param_name": "id",
                        "param_desc": "The id of the annotation to be deleted from the database."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Delete an annotation from the database.\n/// </summary>\n/// <param name=\"id\">The id of the annotation to be deleted from the database.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetAnnotation",
            "code_start_index": 19615,
            "method_name": "GetAnnotation",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get an annotation by Id\r\n        /// </summary>\r\n        /// <param name=\"id\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "id",
                    "param_name": "id",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var annotation = await _db.Annotations\r\n                    .FirstOrDefaultAsync(an => an.Id == id);\r\n                return this.Ok(annotation);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Serilog.Log.Error(ex, \"Error lors de la lecture des annotatations\");\r\n                return InternalServerError(ex);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve an annotation by its ID from the database and return it, handling any potential errors.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "id",
                        "param_name": "id",
                        "param_desc": "The ID of the annotation to retrieve from the database."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve an annotation by its ID from the database and return it, handling any potential errors.\n/// </summary>\n/// <param name=\"id\">The ID of the annotation to retrieve from the database.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetAnnotations",
            "code_start_index": 20369,
            "method_name": "GetAnnotations",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get all annotations by document id. Include also settings.\r\n        /// </summary>\r\n        /// <param name=\"docId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "docId",
                    "param_name": "docId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var response = new AnnotationsViewModel();\r\n            try\r\n            {\r\n                response.Settings = await _db.Settings\r\n                    .Select(set => new SettingsViewModel\r\n                    {\r\n                        Key = set.Key,\r\n                        Value = set.Value\r\n                    })\r\n                    .ToListAsync();\r\n\r\n                var annotations = await _db.Annotations.Where(ann => ann.DocId == docId).ToListAsync();\r\n\r\n                var responseAnnotations = new List<AnnotationViewModel>();\r\n                foreach (var annotation in annotations)\r\n                {\r\n                    var annotationPush = new AnnotationViewModel\r\n                    {\r\n                        Id = annotation.Id,\r\n                        PageIndex = annotation.PageIndex,\r\n                        PageWidth = annotation.PageWidth,\r\n                        PageHeight = annotation.PageHeight,\r\n                        AnnotationType = annotation.AnnotationTypeId,\r\n                        Coordinate = annotation.Coordinate,\r\n                        FormFieldName = annotation.FormFieldName,\r\n                        FormFieldValue = annotation.FormFieldValue,\r\n                        Text = annotation.Text,\r\n                        FontSize = annotation.FontSize,\r\n                        Font = annotation.Font,\r\n                        Color = annotation.Color,\r\n                        BackgroundColor = annotation.BackgroundColor,\r\n                        Icon = annotation.Icon,\r\n                        DocId = docId,\r\n                        MeasurementType = annotation.MeasurementTypeId,\r\n                        DateCreated = annotation.DateCreated,\r\n                        DateModified = annotation.DateModified,\r\n                        ReadOnly = Convert.ToBoolean(annotation.ReadOnly[0]),\r\n                        ReadOnlyComment = Convert.ToBoolean(annotation.ReadOnlyComment[0]),\r\n                    };\r\n\r\n                    annotationPush.DrawingPositions = await _db.DrawingPositions\r\n                        .Where(dp => dp.AnnotationId == annotationPush.Id)\r\n                        .Select(dp => new DrawingPositionViewModel\r\n                        {\r\n                            Id = dp.Id,\r\n                            Coordinate = dp.Coordinate,\r\n                            AnnotationId = dp.AnnotationId\r\n                        })\r\n                        .ToListAsync();\r\n\r\n                    annotationPush.HighlightTextRects = await _db.HighlightTextRects\r\n                        .Where(hltr => hltr.AnnotationId == annotationPush.Id)\r\n                        .Select(hltr => new HighlightTextReactsViewModel\r\n                        {\r\n                            Id = hltr.Id,\r\n                            Coordinate = hltr.Coordinate,\r\n                            AnnotationId = hltr.AnnotationId,\r\n                            DomRotateAngle = hltr.DomRotateAngle\r\n                        })\r\n                        .ToListAsync();\r\n\r\n                    annotationPush.Comments = await _db.AnnotationComments\r\n                        .Where(com => com.AnnotationId == annotationPush.Id)\r\n                        .Select(com => new CommentsViewModel\r\n                        {\r\n                            Id = com.Id,\r\n                            AnnotationId = (int)com.AnnotationId,\r\n                            Comment = com.Comment,\r\n                            ParentId = com.ParentId,\r\n                            Username = com.Username,\r\n                            DateCreated = com.DateCreated,\r\n                            DateModified = com.DateModified,\r\n                        })\r\n                        .ToListAsync();\r\n\r\n                    foreach (var comment in annotationPush.Comments)\r\n                    {\r\n                        comment.ReviewStatuses = await _db.CommentReviewHistories\r\n                            .Where(rh => rh.CommentId == comment.Id)\r\n                            .Select(rh => new ReviewStatusViewModel\r\n                            {\r\n                                Id = rh.Id,\r\n                                CommentId = rh.CommentId,\r\n                                Status = rh.Status,\r\n                                ReviewedBy = rh.ReviewedBy,\r\n                                DateReviewed = rh.DateReviewed,\r\n                            })\r\n                            .ToListAsync();\r\n                    }\r\n                    responseAnnotations.Add(annotationPush);\r\n                }\r\n                response.Annotations = responseAnnotations.ToList();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Serilog.Log.Error(ex, \"Error lors de la lecture des annotataions\");\r\n                return InternalServerError(ex);\r\n            }\r\n            return this.Ok(response);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve annotations data for a specific document ID, including settings, annotations, drawing positions, highlight text rectangles, comments, and review statuses.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "docId",
                        "param_name": "docId",
                        "param_desc": "The document ID for which annotations data will be retrieved. It should be an integer."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve annotations data for a specific document ID, including settings, annotations, drawing positions, highlight text rectangles, comments, and review statuses.\n/// </summary>\n/// <param name=\"docId\">The document ID for which annotations data will be retrieved. It should be an integer.</param>\n",
            "code_chunks": null
        },
        {
            "name": "InsertUpdateAudio",
            "code_start_index": 25523,
            "method_name": "InsertUpdateAudio",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Insert or update audio\r\n        /// </summary>\r\n        /// <param name=\"id\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "id",
                    "param_name": "id",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            throw new NotImplementedException();\r\n            //return this.Ok();\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update or insert audio data, but the method implementation is not yet defined.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "id",
                        "param_name": "id",
                        "param_desc": "The id parameter is of type int and represents the identifier used to uniquely identify the audio data that needs to be updated or inserted."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update or insert audio data, but the method implementation is not yet defined.\n/// </summary>\n/// <param name=\"id\">The id parameter is of type int and represents the identifier used to uniquely identify the audio data that needs to be updated or inserted.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetAudioAnnotationId",
            "code_start_index": 25909,
            "method_name": "GetAudioAnnotationId",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get audio annotation by Id\r\n        /// </summary>\r\n        /// <param name=\"id\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "id",
                    "param_name": "id",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            throw new NotImplementedException();\r\n            //return this.Ok();\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Throw a NotImplementedException when attempting to retrieve an audio annotation ID.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "id",
                        "param_name": "id",
                        "param_desc": "The unique identifier of the audio annotation."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Throw a NotImplementedException when attempting to retrieve an audio annotation ID.\n/// </summary>\n/// <param name=\"id\">The unique identifier of the audio annotation.</param>\n",
            "code_chunks": null
        },
        {
            "name": "InsertSignature",
            "code_start_index": 26318,
            "method_name": "InsertSignature",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Insert digital signature based on username.\r\n        /// </summary>\r\n        /// <param name=\"signature\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "signature",
                    "param_name": "signature",
                    "param_type": "DigitalSignaturesBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ds = new DigitalSignature\r\n            {\r\n                Height = signature.Height,\r\n                Width = signature.Width,\r\n                Signature = signature.Signature,\r\n                Username = userId.ToString(),\r\n            };\r\n\r\n            try\r\n            {\r\n                _db.DigitalSignatures.Add(ds);\r\n                await _db.SaveChangesAsync();\r\n                return this.Ok(ds);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Serilog.Log.Logger.Error(ex, \"error lors de la insertion du digital signature\");\r\n                return InternalServerError(ex);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create and insert a digital signature into the database associated with the current user identity. If successful, return the inserted digital signature; otherwise, log an error.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "DigitalSignaturesBindingModel",
                        "param_name": "DigitalSignaturesBindingModel",
                        "param_desc": "The model containing the necessary data for the digital signature."
                    },
                    {
                        "name": "signature",
                        "param_name": "signature",
                        "param_desc": "The digital signature to be inserted into the database."
                    },
                    {
                        "name": "InsertSignature",
                        "param_name": "InsertSignature",
                        "param_desc": "The method responsible for creating and inserting digital signatures into the database associated with the current user identity."
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method 'InsertSignature' is to create and insert a digital signature into the database associated with the current user identity. If successful, it returns the inserted digital signature; otherwise, it logs an error."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create and insert a digital signature into the database associated with the current user identity. If successful, return the inserted digital signature; otherwise, log an error.\n/// </summary>\n/// <param name=\"DigitalSignaturesBindingModel\">The model containing the necessary data for the digital signature.</param>\n/// <param name=\"signature\">The digital signature to be inserted into the database.</param>\n/// <param name=\"InsertSignature\">The method responsible for creating and inserting digital signatures into the database associated with the current user identity.</param>\n/// <param name=\"methodPurpose\">The purpose of the method 'InsertSignature' is to create and insert a digital signature into the database associated with the current user identity. If successful, it returns the inserted digital signature; otherwise, it logs an error.</param>\n",
            "code_chunks": null
        },
        {
            "name": "DeleteSignatureById",
            "code_start_index": 27465,
            "method_name": "DeleteSignatureById",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Delete signature by id. The best way is to delete by username and id. This example deletes by id just for simplicity.\r\n        /// </summary>\r\n        /// <param name=\"id\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "id",
                    "param_name": "id",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ds = await _db.DigitalSignatures\r\n                .Where(digs => digs.Id == id && digs.Username == userId.ToString()).FirstOrDefaultAsync();\r\n\r\n            if (ds != null)\r\n            {\r\n                _db.DigitalSignatures.Remove(ds);\r\n                try\r\n                {\r\n                    await _db.SaveChangesAsync();\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    Serilog.Log.Logger.Error(ex, \"error lors de la supresion du digital signature\");\r\n                    return InternalServerError(ex);\r\n                }\r\n            }\r\n\r\n            return this.Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Delete a digital signature by its ID if it belongs to the currently logged in user.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "id",
                        "param_name": "id",
                        "param_desc": "The ID of the digital signature to be deleted. It should be an integer."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Delete a digital signature by its ID if it belongs to the currently logged in user.\n/// </summary>\n/// <param name=\"id\">The ID of the digital signature to be deleted. It should be an integer.</param>\n",
            "code_chunks": null
        },
        {
            "name": "ExportToPdf",
            "code_start_index": 28790,
            "method_name": "ExportToPdf",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Set the $path variable of the Java or C# command to use annotation exporter. After exporting, it will download\r\n        /// the output pdf file to the user with the format[username]_[id].pdf.This is only a sample rest service, you\r\n        /// are responsible for ensuring that old files are deleted or else your storage space will be eaten up in time.\r\n        /// </summary>\r\n        /// <param name=\"id\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "id",
                    "param_name": "id",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            //new AnnotationeerSaver().Process(1000); //IText\r\n            new AnnotationExporter.AsposeExporter.AnnotationeerSaver().Process(1000);\r\n            return this.Ok();\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Generate a PDF file from annotations and save it.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "id",
                        "param_name": "id",
                        "param_desc": "The unique identifier of the annotations to be included in the PDF."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Generate a PDF file from annotations and save it.\n/// </summary>\n/// <param name=\"id\">The unique identifier of the annotations to be included in the PDF.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "AnnotationeerController"
}