{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Studi.Api.Lms.User/StartupSettings/MediatorDependencyChecks.cs",
    "index_shift_code": 166,
    "struct_type": "Class",
    "namespace_name": "",
    "usings": [],
    "access_modifier": "public static",
    "struct_name": "MediatorDependencyChecks",
    "base_class_name": "",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetUnmatchedRequestsHandlers",
            "code_start_index": 232,
            "method_name": "GetUnmatchedRequestsHandlers",
            "existing_summary": "    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "assemblies",
                    "param_name": "assemblies",
                    "param_type": "Assembly[]",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        var requests = new List<Type>();\r\n        var handlerInterfaces = new List<Type>();\r\n\r\n        foreach (var assembly in assemblies)\r\n        {\r\n            requests.AddRange(assembly.GetTypes()\r\n                .Where(t => t.IsClass && !t.IsAbstract && t.IsClosedTypeOf(typeof(IRequest<>)) && !t.IsClosedTypeOf(typeof(IDomainEvent<>))));\r\n\r\n            handlerInterfaces.AddRange(assembly.GetTypes()\r\n                .Where(t => t.IsClass && !t.IsAbstract)\r\n                .Where(t => t.IsClosedTypeOf(typeof(IRequestHandler<>)) || t.IsClosedTypeOf(typeof(IRequestHandler<,>)))\r\n                //.Where(t => !t.IsClosedTypeOf(typeof(IDomainEventHandler<>)) // Should exclude domain events?\r\n                .SelectMany(t => t.GetInterfaces()));\r\n        }\r\n\r\n        return (from request in requests\r\n                let resultType = request.GetInterfaces()\r\n                    .First(i => i.IsClosedTypeOf(typeof(IRequest<>)) && i.GetGenericArguments().Any())\r\n                    .GetGenericArguments()\r\n                    .First()\r\n                let handlerType = resultType == typeof(Unit)\r\n                    ? typeof(IRequestHandler<>).MakeGenericType(request)\r\n                    : typeof(IRequestHandler<,>).MakeGenericType(request, resultType)\r\n                where handlerInterfaces.Any(t => t == handlerType) == false\r\n                select request).ToList();\r\n    }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the types of requests that do not have corresponding handler interfaces.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "assemblies",
                        "param_name": "assemblies",
                        "param_desc": "The list of Assembly objects representing the assemblies to be analyzed."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the types of requests that do not have corresponding handler interfaces.\n/// </summary>\n/// <param name=\"assemblies\">The list of Assembly objects representing the assemblies to be analyzed.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "MediatorDependencyChecks"
}