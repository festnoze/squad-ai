{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/MessageService.cs",
    "index_shift_code": 1355,
    "struct_type": "Class",
    "namespace_name": "",
    "usings": [
        "Hangfire",
        "Studi.Api.Core.Exceptions.Guards",
        "Studi.Api.Core.Infrastructure.Repository.UnitOfWork",
        "Studi.Api.Core.Services.DependencyInjection.Attributes",
        "Studi.Api.Lms.Messenger.Application.Services.ConversationService.Ato",
        "Studi.Api.Lms.Messenger.Application.Services.MessageAttachmentService",
        "Studi.Api.Lms.Messenger.Application.Services.MessageService.Ato",
        "Studi.Api.Lms.Messenger.Application.Services.MessageService.Mapping",
        "Studi.Api.Lms.Messenger.Application.Services.NotificationService",
        "Studi.Api.Lms.Messenger.Infra.Data.Repositories.ConversationRepository",
        "Studi.Api.Lms.Messenger.Infra.Data.Repositories.CorrespondantRepository",
        "Studi.Api.Lms.Messenger.Infra.Data.Repositories.MessageAttachmentRepository",
        "Studi.Api.Lms.Messenger.Infra.Data.Repositories.MessageRepository",
        "Studi.Api.Lms.Messenger.Infra.Data.Repositories.MessageRepository.Ito",
        "Studi.Api.Lms.Messenger.Infra.Data.Repositories.MessageRepository.Ito.Implementation",
        "Studi.Api.Lms.Messenger.Infra.External.Data.Repositories.UserRepository",
        "Studi.Api.Lms.Messenger.Localization.Error.GeneratedClasses",
        "Studi.Api.Core.ListingSelector.Untyped",
        "Studi.Api.Core.ListingSelector"
    ],
    "access_modifier": "public",
    "struct_name": "MessageService",
    "base_class_name": "",
    "interfaces_names": [
        "IMessageService"
    ],
    "related_structures": [],
    "methods": [
        {
            "name": "GetLastMessageDateByConversationIdExceptUserIdAsync",
            "code_start_index": 2658,
            "method_name": "GetLastMessageDateByConversationIdExceptUserIdAsync",
            "existing_summary": "\r\n    /// <summary>\r\n    /// description\r\n    /// </summary>\r\n    /// <param name=\"conversationId\"></param>\r\n    /// <param name=\"userId\"></param>\r\n    /// <returns></returns>\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 1,
            "code": "{\r\n        return await _messageRepository.GetLastMessageDateByConversationIdExceptUserIdAsync(conversationId, userId);\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the date of the last message in a conversation, excluding a specific user.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "GetLastMessageDateByConversationIdExceptUserIdAsync",
                        "param_name": "GetLastMessageDateByConversationIdExceptUserIdAsync",
                        "param_desc": "Retrieve the date of the last message in a conversation, excluding a specific user."
                    },
                    {
                        "name": "no parameters",
                        "param_name": "no parameters",
                        "param_desc": "N/A"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the date of the last message in a conversation, excluding a specific user.\n/// </summary>\n/// <param name=\"GetLastMessageDateByConversationIdExceptUserIdAsync\">Retrieve the date of the last message in a conversation, excluding a specific user.</param>\n/// <param name=\"no parameters\">N/A</param>\n"
        },
        {
            "name": "CountMessagesAsync",
            "code_start_index": 2982,
            "method_name": "CountMessagesAsync",
            "existing_summary": "\r\n    /// <inheritdoc/>\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 1,
            "code": "{\r\n        return await _messageRepository.CountMessagesWithFilterAndSort(userId, schoolsIds, listingSelector);\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Count the number of messages for a specified user with optional filters and sorting.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no parameters",
                        "param_name": "no parameters",
                        "param_desc": "The list of parameters is 'no parameters'."
                    },
                    {
                        "name": "method name",
                        "param_name": "method name",
                        "param_desc": "The name of the method is 'CountMessagesAsync'."
                    },
                    {
                        "name": "method purpose",
                        "param_name": "method purpose",
                        "param_desc": "The purpose of the method is to 'Count the number of messages for a specified user with optional filters and sorting.'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Count the number of messages for a specified user with optional filters and sorting.\n/// </summary>\n/// <param name=\"no parameters\">The list of parameters is 'no parameters'.</param>\n/// <param name=\"method name\">The name of the method is 'CountMessagesAsync'.</param>\n/// <param name=\"method purpose\">The purpose of the method is to 'Count the number of messages for a specified user with optional filters and sorting.'.</param>\n"
        },
        {
            "name": "CountFilteredMessagesByConversationIdAsync",
            "code_start_index": 3232,
            "method_name": "CountFilteredMessagesByConversationIdAsync",
            "existing_summary": "\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 1,
            "code": "{\r\n        return await _messageRepository.CountFilteredMessagesByConversationIdAsync(conversationId, listingSelector);\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the count of filtered messages by conversation ID asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "method_name",
                        "param_name": "method_name",
                        "param_desc": "The name of the existing method ('CountFilteredMessagesByConversationIdAsync')."
                    },
                    {
                        "name": "method_purpose",
                        "param_name": "method_purpose",
                        "param_desc": "The purpose of the existing method ('Retrieve the count of filtered messages by conversation ID asynchronously.')."
                    },
                    {
                        "name": "parameters",
                        "param_name": "parameters",
                        "param_desc": "The list of parameters for the method (in this case, 'no parameters')."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the count of filtered messages by conversation ID asynchronously.\n/// </summary>\n/// <param name=\"method_name\">The name of the existing method ('CountFilteredMessagesByConversationIdAsync').</param>\n/// <param name=\"method_purpose\">The purpose of the existing method ('Retrieve the count of filtered messages by conversation ID asynchronously.').</param>\n/// <param name=\"parameters\">The list of parameters for the method (in this case, 'no parameters').</param>\n"
        },
        {
            "name": "GetUnreadMessageCountByUserIdAndSchoolIdAsync",
            "code_start_index": 3501,
            "method_name": "GetUnreadMessageCountByUserIdAndSchoolIdAsync",
            "existing_summary": "\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 1,
            "code": "{\r\n        var unreadMessageCountByConversation = await _messageRepository.GetUnreadMessagesByUserIdAndSchoolIdAsync(userId, schoolId);\r\n\r\n        return unreadMessageCountByConversation.ToAto();\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the unread message count for a specific user and school ID asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The ID of the user for whom the unread message count is to be retrieved."
                    },
                    {
                        "name": "schoolId",
                        "param_name": "schoolId",
                        "param_desc": "The ID of the school for which the unread message count is to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the unread message count for a specific user and school ID asynchronously.\n/// </summary>\n/// <param name=\"userId\">The ID of the user for whom the unread message count is to be retrieved.</param>\n/// <param name=\"schoolId\">The ID of the school for which the unread message count is to be retrieved.</param>\n"
        },
        {
            "name": "GetPaginatedMessagesByConversationIdAsync",
            "code_start_index": 3823,
            "method_name": "GetPaginatedMessagesByConversationIdAsync",
            "existing_summary": "\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 1,
            "code": "{\r\n        var conversation = await _conversationRepository.GetConversationByIdAsync(conversationId);\r\n\r\n        Guard.Against.Null(conversation, ErrorCode.Api.Lms.Messenger.DataValidation.Query.Conversation.NotFoundById, paramsValues: conversationId.ToString());\r\n\r\n        var conversationUserIds = await _conversationRepository.GetCorrespondantsUserIdsByConversationIdAsync(conversationId);\r\n\r\n        Guard.Against.False(conversationUserIds.Contains(userId), ErrorCode.Api.Lms.Messenger.DataValidation.Query.Conversation.UserNotInCorrespondants, paramsValues: new string[] { userId.ToString(), conversationId.ToString() });\r\n\r\n        // Get total\r\n        var total = await CountFilteredMessagesByConversationIdAsync(conversationId);\r\n\r\n        var take = pageSize;\r\n        var skip = (pageNumber - 1) * take;\r\n\r\n        IEnumerable<IMessageRIto> messages = Enumerable.Empty<IMessageRIto>();\r\n\r\n        if (total > 0)\r\n        {\r\n            messages = (await _messageRepository.GetPaginatedMessagesByConversationIdAsync(conversationId, skip, take));\r\n        }\r\n\r\n        var usersIds = messages.Select(m => m.SenderCorrespondant.UserId).Distinct().ToList();\r\n\r\n        var users = await _userRepository.GetUsersByIdsAsync(usersIds);\r\n\r\n        var flattenUploadedFileGuids = messages\r\n            .SelectMany(m =>\r\n            {\r\n                var guids = new List<Guid>();\r\n\r\n                guids.AddRange(m.AttachmentsUploadedFiles.Select(a => a.UploadedFileGuid));\r\n\r\n                if (m.AudioMessageUploadedFile != null)\r\n                {\r\n                    guids.Add(m.AudioMessageUploadedFile.UploadedFileGuid);\r\n                }\r\n\r\n                return guids;\r\n            }).Distinct();\r\n\r\n        var flattenMessageAttachements = await _messageAttachmentService.GetMultipleMessageAttachmentbyGuidsAsync(flattenUploadedFileGuids);\r\n\r\n        var currentUser = await _userRepository.GetUserByIdAsync(userId);\r\n        Guard.Against.Null(currentUser, ErrorCode.Api.Lms.Messenger.DataValidation.Query.User.NotFoundById, paramsValues: userId.ToString());\r\n\r\n        // pagined data\r\n        var paginedData = new PaginedData<IMessageRAto>\r\n        {\r\n            Data = messages.Select(m => m.ToAto(users.Single(u => u.Id == m.SenderCorrespondant.UserId), currentUser, flattenMessageAttachements)),\r\n            PageNumber = pageNumber,\r\n            PageSize = pageSize,\r\n            Total = total,\r\n        };\r\n\r\n        return paginedData;\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve paginated messages for a conversation, including user information and message attachments, based on conversation ID, page number, and page size.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "conversationId",
                        "param_name": "conversationId",
                        "param_desc": "The ID of the conversation for which messages are being retrieved."
                    },
                    {
                        "name": "pageNumber",
                        "param_name": "pageNumber",
                        "param_desc": "The page number of the paginated results to retrieve."
                    },
                    {
                        "name": "pageSize",
                        "param_name": "pageSize",
                        "param_desc": "The number of messages to include per page in the paginated results."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve paginated messages for a conversation, including user information and message attachments, based on conversation ID, page number, and page size.\n/// </summary>\n/// <param name=\"conversationId\">The ID of the conversation for which messages are being retrieved.</param>\n/// <param name=\"pageNumber\">The page number of the paginated results to retrieve.</param>\n/// <param name=\"pageSize\">The number of messages to include per page in the paginated results.</param>\n"
        },
        {
            "name": "AddMessageAsync",
            "code_start_index": 6418,
            "method_name": "AddMessageAsync",
            "existing_summary": "\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 1,
            "code": "{\r\n        int messageCreatedId;\r\n        var currentUser = await _userRepository.GetUserByIdAsync(messageWAto.UserId);\r\n\r\n        await _unitOfWork.RegisterRepositoryAsync(_messageRepository);\r\n        await _unitOfWork.RegisterRepositoryAsync(_messageAttachmentRepository);\r\n        await _unitOfWork.RegisterRepositoryAsync(_correspondantRepository);\r\n\r\n        try\r\n        {\r\n            var conversationCorrespondants = (await _conversationRepository.GetCorrespondantsByConversationIdAsync(messageWAto.ConversationId));\r\n\r\n            Guard.Against.False(conversationCorrespondants.Any(corr => corr.UserId == messageWAto.UserId), ErrorCode.Api.Lms.Messenger.DataValidation.Query.Correspondant.MissingCorrespondantForMessageSender, paramsValues: messageWAto.UserId.ToString());\r\n\r\n            var senderCorrespondantId = conversationCorrespondants.First(corr => corr.UserId == messageWAto.UserId).CorrespondantId;\r\n\r\n            var messageWIto = MessageWIto.Create(messageWAto.ConversationId, senderCorrespondantId, messageWAto.MessageContent);\r\n\r\n            var messageRIto = await _messageRepository.AddMessageAsync(messageWIto, currentUser.Email);\r\n\r\n            await _messageAttachmentService.AddMessageAttachmentsAsync(messageRIto.Id, messageWAto.AttachmentsUploadedFilesGuids, messageWAto.AudioMessageGuid, currentUser.Email);\r\n\r\n            await _correspondantRepository.UpdateIsArchivedForAllCorrespondantsByConversationsIdsAsync(new int[] { messageWAto.ConversationId }, false, currentUser.Email);\r\n\r\n            messageCreatedId = messageRIto.Id;\r\n\r\n            await _unitOfWork.CommitAsync();\r\n        }\r\n        catch (Exception)\r\n        {\r\n            await _unitOfWork.RollbackAsync();\r\n            throw;\r\n        }\r\n\r\n        var guids = messageWAto.AttachmentsUploadedFilesGuids.ToList();\r\n        if (messageWAto.AudioMessageGuid != null)\r\n        {\r\n            guids.Add((Guid)messageWAto.AudioMessageGuid);\r\n        }\r\n\r\n        var flattenMessageAttachements = await _messageAttachmentService.GetMultipleMessageAttachmentbyGuidsAsync(guids);\r\n\r\n        var message = (await _messageRepository.GetMessageByIdAsync(messageCreatedId)).ToAto(currentUser, currentUser, flattenMessageAttachements);\r\n\r\n        if (enableNotification)\r\n        {\r\n            BackgroundJob.Enqueue<INotificationService>(service => service.SendNewMessageWebsocketsEventAsync(message.Id));\r\n\r\n            BackgroundJob.Enqueue<INotificationService>(service => service.SendNewMessageNotificationAsync(message.Id));\r\n        }\r\n\r\n        return message;\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create and add a new message to a conversation, including attachments, and send notifications if enabled.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "parameters",
                        "param_name": "parameters",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "named",
                        "param_name": "named",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "AddMessageAsync",
                        "param_name": "AddMessageAsync",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "purpose",
                        "param_name": "purpose",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "Create",
                        "param_name": "Create",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "add",
                        "param_name": "add",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "new",
                        "param_name": "new",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "message",
                        "param_name": "message",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "conversation",
                        "param_name": "conversation",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "attachments",
                        "param_name": "attachments",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "send",
                        "param_name": "send",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "notifications",
                        "param_name": "notifications",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "enabled",
                        "param_name": "enabled",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create and add a new message to a conversation, including attachments, and send notifications if enabled.\n/// </summary>\n/// <param name=\"no\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"parameters\">The generated description for the parameter</param>\n/// <param name=\"existing\">The generated description for the parameter</param>\n/// <param name=\"method\">The generated description for the parameter</param>\n/// <param name=\"named\">The generated description for the parameter</param>\n/// <param name=\"AddMessageAsync\">The generated description for the parameter</param>\n/// <param name=\"context\">The generated description for the parameter</param>\n/// <param name=\"method\">The generated description for the parameter</param>\n/// <param name=\"purpose\">The generated description for the parameter</param>\n/// <param name=\"Create\">The generated description for the parameter</param>\n/// <param name=\"add\">The generated description for the parameter</param>\n/// <param name=\"new\">The generated description for the parameter</param>\n/// <param name=\"message\">The generated description for the parameter</param>\n/// <param name=\"conversation\">The generated description for the parameter</param>\n/// <param name=\"attachments\">The generated description for the parameter</param>\n/// <param name=\"send\">The generated description for the parameter</param>\n/// <param name=\"notifications\">The generated description for the parameter</param>\n/// <param name=\"enabled\">The generated description for the parameter</param>\n"
        },
        {
            "name": "GetMessageByIdAsync",
            "code_start_index": 9047,
            "method_name": "GetMessageByIdAsync",
            "existing_summary": "\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 1,
            "code": "{\r\n        var messageRIto = await _messageRepository.GetMessageByIdAsync(messageId);\r\n\r\n        var currentUser = await _userRepository.GetUserByIdAsync(currentUserId);\r\n\r\n        var user = await _userRepository.GetUserByIdAsync(messageRIto.SenderCorrespondant.UserId);\r\n\r\n        var guids = messageRIto.AttachmentsUploadedFiles.Select(a => a.UploadedFileGuid).ToList();\r\n        if (messageRIto.AudioMessageUploadedFile != null)\r\n        {\r\n            guids.Add(messageRIto.AudioMessageUploadedFile.UploadedFileGuid);\r\n        }\r\n\r\n        var flattenMessageAttachements = await _messageAttachmentService.GetMultipleMessageAttachmentbyGuidsAsync(guids);\r\n\r\n        return messageRIto.ToAto(user, currentUser, flattenMessageAttachements);\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a message by its ID asynchronously, along with its sender and attachments, and format it for display.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The number of parameters"
                    },
                    {
                        "name": "parameters",
                        "param_name": "parameters",
                        "param_desc": "The list of parameters"
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "Indicates whether the method exists"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The name of the existing method"
                    },
                    {
                        "name": "purpose",
                        "param_name": "purpose",
                        "param_desc": "The purpose of the method"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a message by its ID asynchronously, along with its sender and attachments, and format it for display.\n/// </summary>\n/// <param name=\"no\">The number of parameters</param>\n/// <param name=\"parameters\">The list of parameters</param>\n/// <param name=\"existing\">Indicates whether the method exists</param>\n/// <param name=\"method\">The name of the existing method</param>\n/// <param name=\"purpose\">The purpose of the method</param>\n"
        },
        {
            "name": "UpdateIsArchivedForUserIdByConversationsIdsAsync",
            "code_start_index": 9876,
            "method_name": "UpdateIsArchivedForUserIdByConversationsIdsAsync",
            "existing_summary": "\r\n    /// <inheritdoc/>\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 1,
            "code": "{\r\n        var conversations = await _conversationRepository.GetConversationsByConversationIdsAndUserIdAsync(conversationIds, userId);\r\n                \r\n        List<string> conversationsIdsWhereUserIdDontBelongs = new();\r\n\r\n        foreach (var conversation in conversations)\r\n        {\r\n            var correspondants = await _conversationRepository.GetCorrespondantsByConversationIdAsync(conversation.Id);\r\n            if (!correspondants.Any(cor => cor.UserId == userId))\r\n                conversationsIdsWhereUserIdDontBelongs.Add(conversation.Id.ToString());\r\n        }\r\n\r\n        // Check if the user belongs to all the conversations he want to update\r\n        Guard.Against.NotEmpty(\r\n            conversationsIdsWhereUserIdDontBelongs, \r\n            ErrorCode.Api.Lms.Messenger.DataValidation.Command.Conversation.Archive.MissingRightOnEntity, \r\n            paramsValues: string.Join(\", \", conversationsIdsWhereUserIdDontBelongs));\r\n \r\n        // Check if the number of records persisted in the database correspond to the number of conversations to update\r\n        Guard.Against.NotEqual(conversationIds.Count(), conversations.Count(), ErrorCode.Api.Lms.Messenger.DataValidation.Command.Conversation.Archive.WrongEntityCount);\r\n\r\n        var currentUser = await _userRepository.GetUserByIdAsync(userId);\r\n\r\n        await _correspondantRepository.UpdateIsArchivedForUserIdByConversationsIdsAsync(conversationIds, userId, archived, currentUser.Email);\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the 'IsArchived' status for conversations by conversation IDs, ensuring the user has the necessary rights and validating the number of conversations to be updated.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "method_name",
                        "param_name": "method_name",
                        "param_desc": "The name of the existing method being documented. In this case, 'UpdateIsArchivedForUserIdByConversationsIdsAsync'."
                    },
                    {
                        "name": "method_purpose",
                        "param_name": "method_purpose",
                        "param_desc": "The purpose of the existing method being documented. In this case, 'Update the 'IsArchived' status for conversations by conversation IDs, ensuring the user has the necessary rights and validating the number of conversations to be updated.'."
                    },
                    {
                        "name": "params_list",
                        "param_name": "params_list",
                        "param_desc": "The list of parameters passed to the method. In this case, 'no parameters'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the 'IsArchived' status for conversations by conversation IDs, ensuring the user has the necessary rights and validating the number of conversations to be updated.\n/// </summary>\n/// <param name=\"method_name\">The name of the existing method being documented. In this case, 'UpdateIsArchivedForUserIdByConversationsIdsAsync'.</param>\n/// <param name=\"method_purpose\">The purpose of the existing method being documented. In this case, 'Update the 'IsArchived' status for conversations by conversation IDs, ensuring the user has the necessary rights and validating the number of conversations to be updated.'.</param>\n/// <param name=\"params_list\">The list of parameters passed to the method. In this case, 'no parameters'.</param>\n"
        }
    ],
    "properties": [],
    "name": "MessageService"
}