{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Studi.Api.Lms.Evaluation/Controllers/PlagiarismController.cs",
    "index_shift_code": 455,
    "struct_type": "Class",
    "namespace_name": "Studi.Api.Lms.Evaluation.Controllers",
    "usings": [
        "Microsoft.AspNetCore.Authorization",
        "Microsoft.AspNetCore.Mvc",
        "Microsoft.Extensions.Options",
        "Studi.Api.Lms.Evaluation.Application.Configuration",
        "Studi.Api.Lms.Evaluation.Application.Services",
        "Studi.Api.Lms.Evaluation.BindingModel",
        "Studi.Api.Lms.Evaluation.Mapper",
        "Studi.Api.Lms.Evaluation.ViewModel",
        "Swashbuckle.AspNetCore.Annotations"
    ],
    "access_modifier": "public",
    "struct_name": "PlagiarismController",
    "base_class_name": "BaseControllerWithAuthentication",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetPlagiarismFolderIdByCopyIdAsync",
            "code_start_index": 1683,
            "method_name": "GetPlagiarismFolderIdByCopyIdAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get plagiarism folderId by copyId. Will create it if necessary.\r\n        /// </summary>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var folderInfos = await _plagiarismService.GetCreateOrUpdatePlagiarismFolderByCopyIdAsync(copyId);\r\n            return folderInfos.Id!;\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the plagiarism folder ID associated with a specified copy ID.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The ID of the copy for which the plagiarism folder ID will be retrieved. It should be an integer."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the plagiarism folder ID associated with a specified copy ID.\n/// </summary>\n/// <param name=\"copyId\">The ID of the copy for which the plagiarism folder ID will be retrieved. It should be an integer.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetSavedAnalysisReportByCopyIdAsync",
            "code_start_index": 2447,
            "method_name": "GetSavedAnalysisReportByCopyIdAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get plagiarism analysis result by copyId. Will not update the status (no interactions with Compilatio, only informations from database)\r\n        /// </summary>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var analysisResultSto = await _plagiarismService.GetSavedPlagiarismAnalysisResultByCopyIdAsync(copyId);\r\n            return analysisResultSto.ToViewModel(copyId);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a saved plagiarism analysis report by copy ID asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The ID of the copy for which the saved plagiarism analysis report needs to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a saved plagiarism analysis report by copy ID asynchronously.\n/// </summary>\n/// <param name=\"copyId\">The ID of the copy for which the saved plagiarism analysis report needs to be retrieved.</param>\n",
            "code_chunks": null
        },
        {
            "name": "UpdateAnalysisReportByCopyIdAsync",
            "code_start_index": 3190,
            "method_name": "UpdateAnalysisReportByCopyIdAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Fecth and update, than get analysis result by copyId (same as GET, but with Compilatio interactions)\r\n        /// </summary>\r\n        /// <param name=\"copyId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            //TODO: is this endpoint useless (as AnalysisReport updation is done via batch process only) ?\r\n            var analysisResultSto = await _plagiarismService.FetchAndSaveLatestAnalysisResultFromPlagiarismServerByCopyIdAsync(copyId);\r\n            return analysisResultSto.ToViewModel(copyId);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve and update an analysis report based on a specified copy ID asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve and update an analysis report based on a specified copy ID asynchronously.\n/// </summary>\n/// <param name=\"copyId\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n",
            "code_chunks": null
        },
        {
            "name": "AddAnalysisResultWithNotImportedStatusForCopyIdAsync",
            "code_start_index": 4306,
            "method_name": "AddAnalysisResultWithNotImportedStatusForCopyIdAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Create analysis result with \"not_imported\" status by copyId\r\n        /// </summary>\r\n        /// <param name=\"copyId\">The copy identifier.</param>\r\n        /// <param name=\"isLateAnalysis\">True if the request comes from the Studi Intranet: where request for analysis comes after the evaluation (late)</param>\r\n        /// <returns>No content</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "isLateAnalysis",
                    "param_name": "isLateAnalysis",
                    "param_type": "bool",
                    "has_default_value": true,
                    "default_value": "false",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            await _plagiarismService.CreatePlagiarismAnalysisResultWithNotImportedStatusByCopyIdAsync(copyId, isLateAnalysis);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a plagiarism analysis result with a not imported status for a specified copy ID asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "isLateAnalysis",
                        "param_name": "isLateAnalysis",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a plagiarism analysis result with a not imported status for a specified copy ID asynchronously.\n/// </summary>\n/// <param name=\"copyId\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"isLateAnalysis\">The generated description for the parameter</param>\n",
            "code_chunks": null
        },
        {
            "name": "BatchImportCopiesDocumentsAsync",
            "code_start_index": 5007,
            "method_name": "BatchImportCopiesDocumentsAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Import batch of exam copies into Compilatio\r\n        /// </summary>\r\n        /// <param name=\"maxDuration\">the max duration for the batch</param>\r\n        /// <returns>The ids of proceeded copies</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "batchImportBM",
                    "param_name": "batchImportBM",
                    "param_type": "PlagiarismBatchBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // Check that batch duration doesn't exceed API time before timeout\r\n            var maxDuration = TimeSpan.Parse(batchImportBM.MaxDurationTimeSpan);\r\n            var apiTimeOut = TimeSpan.Parse(_config[\"CommandTimeout\"]);\r\n            if (apiTimeOut < maxDuration)\r\n            {\r\n                _logger.LogWarning($\"Misconfigured call to {nameof(BatchImportCopiesDocumentsAsync)} with maxDuration set to {maxDuration.ToString()} while API timeout is limited to {apiTimeOut.ToString()}\");\r\n                maxDuration = apiTimeOut;\r\n            }\r\n\r\n            var result = await _plagiarismService.BatchImportCopyDocumentsAndUpdateAnalysisStatusAsync(maxDuration, batchImportBM.MaxItemsToProceed);\r\n            return result;\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the analysis status of copied documents in batches, ensuring that the batch duration does not exceed the API timeout.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "PlagiarismBatchBindingModel",
                        "param_name": "PlagiarismBatchBindingModel",
                        "param_desc": "The model containing information about the batch of documents to be imported for plagiarism analysis."
                    },
                    {
                        "name": "batchImportBM",
                        "param_name": "batchImportBM",
                        "param_desc": "The model containing parameters for the batch import process, such as batch size and timeout settings."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the analysis status of copied documents in batches, ensuring that the batch duration does not exceed the API timeout.\n/// </summary>\n/// <param name=\"PlagiarismBatchBindingModel\">The model containing information about the batch of documents to be imported for plagiarism analysis.</param>\n/// <param name=\"batchImportBM\">The model containing parameters for the batch import process, such as batch size and timeout settings.</param>\n",
            "code_chunks": null
        },
        {
            "name": "BatchFetchAndUpdateUnfinishedAnalysisResultsAsync",
            "code_start_index": 6356,
            "method_name": "BatchFetchAndUpdateUnfinishedAnalysisResultsAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Batch fetch and update copies' analysis results with unfinished status\r\n        /// </summary>\r\n        /// <param name=\"maxDuration\">the max duration for the batch</param>\r\n        /// <returns>The ids of proceeded copies</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "batchImportBM",
                    "param_name": "batchImportBM",
                    "param_type": "PlagiarismBatchBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // Check that batch duration doesn't exceed API time before timeout\r\n            var maxDuration = TimeSpan.Parse(batchImportBM.MaxDurationTimeSpan);\r\n            var apiTimeOut = TimeSpan.Parse(_config[\"CommandTimeout\"]);\r\n            if (apiTimeOut < maxDuration)\r\n            {\r\n                _logger.LogWarning($\"Misconfigured call to {nameof(BatchFetchAndUpdateUnfinishedAnalysisResultsAsync)} with maxDuration set to {maxDuration.ToString()} while API timeout is limited to {apiTimeOut.ToString()}\");\r\n                maxDuration = apiTimeOut;\r\n            }\r\n\r\n            var result = await _plagiarismService.BatchFetchAndUpdateUnfinishedAnalysisResultsAsync(maxDuration, batchImportBM.MaxItemsToProceed);\r\n            return result;\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Fetch and update unfinished analysis results in batches, ensuring that the batch duration does not exceed the API timeout limit.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "PlagiarismBatchBindingModel",
                        "param_name": "PlagiarismBatchBindingModel",
                        "param_desc": "The binding model containing the necessary information for importing a batch of plagiarism data."
                    },
                    {
                        "name": "batchImportBM",
                        "param_name": "batchImportBM",
                        "param_desc": "The batch import binding model that holds the data to be imported in bulk."
                    },
                    {
                        "name": "BatchFetchAndUpdateUnfinishedAnalysisResultsAsync",
                        "param_name": "BatchFetchAndUpdateUnfinishedAnalysisResultsAsync",
                        "param_desc": "The method used to fetch and update unfinished analysis results in batches, ensuring that the batch duration does not exceed the API timeout limit."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Fetch and update unfinished analysis results in batches, ensuring that the batch duration does not exceed the API timeout limit.\n/// </summary>\n/// <param name=\"PlagiarismBatchBindingModel\">The binding model containing the necessary information for importing a batch of plagiarism data.</param>\n/// <param name=\"batchImportBM\">The batch import binding model that holds the data to be imported in bulk.</param>\n/// <param name=\"BatchFetchAndUpdateUnfinishedAnalysisResultsAsync\">The method used to fetch and update unfinished analysis results in batches, ensuring that the batch duration does not exceed the API timeout limit.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "PlagiarismController"
}