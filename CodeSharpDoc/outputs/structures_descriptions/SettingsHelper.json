{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Studi.Api.Lms.User/StartupSettings/SettingsHelper.cs",
    "index_shift_code": 131,
    "struct_type": "Class",
    "namespace_name": "",
    "usings": [],
    "access_modifier": "public static",
    "struct_name": "SettingsHelper",
    "base_class_name": "",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "CreateSerilogLogger",
            "code_start_index": 187,
            "method_name": "CreateSerilogLogger",
            "existing_summary": "    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "configuration",
                    "param_name": "configuration",
                    "param_type": "IConfiguration",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        return new LoggerConfiguration()\r\n            .MinimumLevel.Information()\r\n            .Enrich.WithProperty(\"ApplicationContext\", \"Studi.Api.Lms.User\")\r\n            .Enrich.FromLogContext()\r\n            .ReadFrom.Configuration(configuration)\r\n            .CreateLogger();\r\n    }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a Serilog logger with specified configuration settings and enrichments.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "IConfiguration",
                        "param_name": "IConfiguration",
                        "param_desc": "The IConfiguration object containing the configuration settings for Serilog logger."
                    },
                    {
                        "name": "configuration",
                        "param_name": "configuration",
                        "param_desc": "The specific configuration settings for Serilog logger."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a Serilog logger with specified configuration settings and enrichments.\n/// </summary>\n/// <param name=\"IConfiguration\">The IConfiguration object containing the configuration settings for Serilog logger.</param>\n/// <param name=\"configuration\">The specific configuration settings for Serilog logger.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AddDatabaseConfiguration",
            "code_start_index": 569,
            "method_name": "AddDatabaseConfiguration",
            "existing_summary": "\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "services",
                    "param_name": "services",
                    "param_type": "IServiceCollection",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "configuration",
                    "param_name": "configuration",
                    "param_type": "IConfiguration",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        if (services == null)\r\n        {\r\n            throw new ArgumentNullException(nameof(services));\r\n        }\r\n\r\n        //var connectionString = configuration.GetSection(\"ConnectionStrings\").GetChildren().FirstOrDefault().Get<string>();\r\n        var connectionString = configuration.GetConnectionString(\"DefaultConnectionString\");\r\n        var commandTimeOut = (int)TimeSpan.Parse(configuration[\"CommandTimeout\"]).TotalSeconds;\r\n\r\n        // Set CS to LMS DB and request timeout\r\n        services.AddDbContext<StudiLmsContext>(options =>\r\n            options.UseSqlServer(connectionString,\r\n            optionsBuilder => optionsBuilder.CommandTimeout(commandTimeOut)));\r\n    }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Add database configuration settings for a specified connection string and command timeout.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "services",
                        "param_name": "services",
                        "param_desc": "The IServiceCollection services parameter is used to register application services within the dependency injection container."
                    },
                    {
                        "name": "configuration",
                        "param_name": "configuration",
                        "param_desc": "The IConfiguration configuration parameter is used to access configuration settings such as connection strings and other application settings."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Add database configuration settings for a specified connection string and command timeout.\n/// </summary>\n/// <param name=\"services\">The IServiceCollection services parameter is used to register application services within the dependency injection container.</param>\n/// <param name=\"configuration\">The IConfiguration configuration parameter is used to access configuration settings such as connection strings and other application settings.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "SettingsHelper"
}