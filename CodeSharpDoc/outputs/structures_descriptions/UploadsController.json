{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Common/UploadsController.cs",
    "index_shift_code": 454,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.Common",
    "usings": [
        "LMS.Attributes",
        "LMS.Authentication",
        "LMS.Data",
        "Newtonsoft.Json",
        "Serilog",
        "System",
        "System.ComponentModel.DataAnnotations",
        "System.Data.Entity",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description"
    ],
    "access_modifier": "public",
    "struct_name": "UploadsController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "SaveUploadedFile",
            "code_start_index": 881,
            "method_name": "SaveUploadedFile",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "uploadedFile",
                    "param_name": "uploadedFile",
                    "param_type": "UploadedFileBm",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n\r\n            var existingFile = await _db.UploadedFiles\r\n                                        .AsNoTracking()\r\n                                        .FirstOrDefaultAsync(uf => uf.FileHash == uploadedFile.FileHash);\r\n\r\n            // If the file exists already then just return the GUID\r\n            if (existingFile != null)\r\n            {\r\n                return Ok(existingFile.FileGuid);\r\n            }\r\n\r\n            // If the file doesn't exist then save the info the return its GUID\r\n            var file = new UploadedFile\r\n            {\r\n                UserCreate = currentUser.Email,\r\n                DateCreate = DateTime.Now,\r\n\r\n                FileHash = uploadedFile.FileHash,\r\n                FileName = uploadedFile.FileName,\r\n                FileUrl = uploadedFile.FileUrl,\r\n                FileSize = uploadedFile.FileSize,\r\n            };\r\n\r\n            this._db.UploadedFiles.Add(file);\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return Ok(file.FileGuid);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error saving an uploaded file\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Save the uploaded file information and return its unique identifier if it's a new file, otherwise return the existing file's unique identifier.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "UploadedFileBm",
                        "param_name": "UploadedFileBm",
                        "param_desc": "The uploaded file object that contains information about the file to be saved."
                    },
                    {
                        "name": "uploadedFile",
                        "param_name": "uploadedFile",
                        "param_desc": "The unique identifier of the uploaded file, used to determine if the file is new or already exists in the system."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Save the uploaded file information and return its unique identifier if it's a new file, otherwise return the existing file's unique identifier.\n/// </summary>\n/// <param name=\"UploadedFileBm\">The uploaded file object that contains information about the file to be saved.</param>\n/// <param name=\"uploadedFile\">The unique identifier of the uploaded file, used to determine if the file is new or already exists in the system.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "UploadsController"
}