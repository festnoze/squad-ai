{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Studi.Api.Lms.User/Controllers/AccessRightController.cs",
    "index_shift_code": 490,
    "struct_type": "Class",
    "namespace_name": "",
    "usings": [
        "Microsoft.AspNetCore.Authorization",
        "Microsoft.AspNetCore.Mvc",
        "Newtonsoft.Json",
        "Newtonsoft.Json.Converters",
        "Studi.Api.Core.Security.Authentication",
        "Studi.Api.Lms.User.Application.Interfaces",
        "Studi.Api.Lms.User.Domain.Aggregates.User.Models",
        "Studi.Api.Lms.User.ExchangeDataContract.v1.AcessRight.ResponseModels",
        "Studi.Api.Lms.User.Mapper",
        "Swashbuckle.AspNetCore.Annotations"
    ],
    "access_modifier": "public",
    "struct_name": "AccessRightController",
    "base_class_name": "ControllerWithAuthenticationBase",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetUserAccessRight",
            "code_start_index": 1199,
            "method_name": "GetUserAccessRight",
            "existing_summary": "\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "userId",
                    "param_name": "userId",
                    "param_type": "int?",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "schoolId",
                    "param_name": "schoolId",
                    "param_type": "int?",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        var userAccessRights = await _accessRightQueryingService.GetUserAccessRightByUserIdAndSchoolIdAsync(userId ?? User.StudiIdentity().LmsUserId, schoolId ?? User.StudiIdentity().LmsSchoolId);\r\n\r\n        var userAccessRightsResponseModel = userAccessRights.Select(enumValue => enumValue.ToResponseModel()).ToList();\r\n\r\n        return Ok(userAccessRightsResponseModel);\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the access rights for a specified user and school.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The ID of the user for whom access rights are to be retrieved."
                    },
                    {
                        "name": "schoolId",
                        "param_name": "schoolId",
                        "param_desc": "The ID of the school for which access rights are to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the access rights for a specified user and school.\n/// </summary>\n/// <param name=\"userId\">The ID of the user for whom access rights are to be retrieved.</param>\n/// <param name=\"schoolId\">The ID of the school for which access rights are to be retrieved.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "AccessRightController"
}