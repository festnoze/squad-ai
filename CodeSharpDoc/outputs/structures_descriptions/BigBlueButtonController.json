{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Common/BigBlueButtonController.cs",
    "index_shift_code": 724,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.Common",
    "usings": [],
    "access_modifier": "public",
    "struct_name": "BigBlueButtonController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "CreateNewMeetingAsync",
            "code_start_index": 1562,
            "method_name": "CreateNewMeetingAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Create Meeting and join in Big Blue Button\r\n        /// </summary>\r\n        /// <param name=\"meetingBm\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "meetingBm",
                    "param_name": "meetingBm",
                    "param_type": "MeetingInfoBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // Sanity check.\r\n            if (meetingBm == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(meetingBm));\r\n            }\r\n\r\n            var userId = User.Identity.GetUserId();\r\n            var currentUser = User.Identity.GetUser();\r\n            var schoolId = currentUser.SchoolId;\r\n            var currentSchool = DataCache.GetSchools(_db)\r\n                                            .First(e => e.Id == schoolId);\r\n\r\n            var organizationCode = currentSchool.Organisme?.Code ?? string.Empty;\r\n\r\n            // Fetch the event from the db if it exists and if the current user is the event host.\r\n            LiveInfoDto evnt = await _eventsService.GetLiveInfo(eventId: meetingBm.EventId, userId: userId);\r\n\r\n            // If the event doesn't exist then return a 404.\r\n            if (evnt == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"This event doesn't exist or was deleted\");\r\n            }\r\n\r\n            // Create the meeting on the BBB server.\r\n            try\r\n            {\r\n                string hookId = await _eventsService.CreateBBBMeeting(\r\n                    liveInfo: evnt,\r\n                    schoolId: schoolId,\r\n                    schoolDns: currentSchool.DnsConfig.Dns,\r\n                    organizationCode: organizationCode,\r\n                    ownerUserId: userId);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error creating a live meeting session\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            try\r\n            {\r\n                // Create the wall posts to announce that the live is about to start.\r\n                List<Post> posts = await _eventsService.CreateAndSavePostsForLiveStart(evnt, userId, currentUser.Email, schoolId);\r\n\r\n                // Check whether at least one post was created.\r\n                if (posts != null && posts.Any())\r\n                {\r\n                    // Get the wall post that refers to the current school.\r\n                    var curentSchoolPost = posts\r\n                        .FirstOrDefault(p => p.EcoleId == schoolId);\r\n\r\n                    // Publish notifications.\r\n                    if (curentSchoolPost != null)\r\n                    {\r\n                        await _eventsService.PublishNotificationsForLiveStart(curentSchoolPost.Id, evnt, userId, schoolId);\r\n                    }\r\n                }\r\n            }\r\n            catch\r\n            {\r\n                // Ignore the wall posts errors or notification errors.\r\n                // The errors should already be logged through the service.\r\n            }\r\n\r\n            return Ok(\"CREATE\");\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a new meeting asynchronously, including setting up the meeting on the server and creating wall posts for live announcements.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "meetingBm",
                        "param_name": "meetingBm",
                        "param_desc": "The MeetingInfoBindingModel parameter contains information about the meeting to be created, such as the meeting title, description, date, and participants."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a new meeting asynchronously, including setting up the meeting on the server and creating wall posts for live announcements.\n/// </summary>\n/// <param name=\"meetingBm\">The MeetingInfoBindingModel parameter contains information about the meeting to be created, such as the meeting title, description, date, and participants.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CloseSessionMeeting",
            "code_start_index": 4708,
            "method_name": "CloseSessionMeeting",
            "existing_summary": "\r\n        /// <summary>\r\n        /// closing session\r\n        /// </summary>\r\n        /// <param name=\"meetingInfoBindingModel\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "meetingInfoBindingModel",
                    "param_name": "meetingInfoBindingModel",
                    "param_type": "MeetingInfoBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n            var userId = currentUser.Id;\r\n            var schoolId = this.GetSchoolId(_db);\r\n            var currentSchool = DataCache.GetSchools(_db)\r\n                .First(e => e.Id == schoolId);\r\n\r\n            var organizationCode = currentSchool.Organisme?.Code ?? string.Empty;\r\n\r\n            // Fetch the event from the db if it exists and if the current user is the event host\r\n            var evnt = await _db.Events.AsNoTracking()\r\n                                .Where(e => e.Id == meetingInfoBindingModel.EventId && e.OwnerUserId == userId && e.DateDelete == null)\r\n                                .Select(e => new\r\n                                {\r\n                                    e.Id,\r\n                                    e.ServerUrl\r\n                                })\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (evnt == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"This event does not exist\");\r\n            }\r\n\r\n            try\r\n            {\r\n                BigBlueButtonClient client = _eventsService.GetBBBClient(evnt.ServerUrl);\r\n                bool result = await client.EndAsync($\"{evnt.Id}_{organizationCode}\");\r\n\r\n                // Supprime le bouton pour acc\u00e9der au live\r\n                GlobalHost.ConnectionManager\r\n                          .GetHubContext<LiveHub>()\r\n                          .Clients\r\n                          .All\r\n                          .denyJoiningMeeting(evnt.Id);\r\n\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Erreur lors de la fermeture de meeting\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "End a session meeting by closing the event and denying access to the live meeting.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "MeetingInfoBindingModel",
                        "param_name": "MeetingInfoBindingModel",
                        "param_desc": "The model containing information about the meeting."
                    },
                    {
                        "name": "meetingInfoBindingModel",
                        "param_name": "meetingInfoBindingModel",
                        "param_desc": "The instance of the MeetingInfoBindingModel to be used for closing the session meeting."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// End a session meeting by closing the event and denying access to the live meeting.\n/// </summary>\n/// <param name=\"MeetingInfoBindingModel\">The model containing information about the meeting.</param>\n/// <param name=\"meetingInfoBindingModel\">The instance of the MeetingInfoBindingModel to be used for closing the session meeting.</param>\n",
            "code_chunks": null
        },
        {
            "name": "JoinMeetingAsync",
            "code_start_index": 6925,
            "method_name": "JoinMeetingAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Join a Meeting Big Blue Button\r\n        /// </summary>\r\n        /// <param name=\"meetingInfoBindingModel\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "meetingInfoBindingModel",
                    "param_name": "meetingInfoBindingModel",
                    "param_type": "MeetingInfoBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var user = User.Identity.GetUser();\r\n            var schoolId = this.GetSchoolId(_db);\r\n            var currentSchool = DataCache.GetSchools(_db)\r\n                .First(e => e.Id == schoolId);\r\n\r\n            var organizationCode = currentSchool.Organisme?.Code ?? string.Empty;\r\n\r\n            var eventToJoin = await _db.Events.AsNoTracking()\r\n                                       .Where(e => e.Id == meetingInfoBindingModel.EventId)\r\n                                       .Select(e => new\r\n                                       {\r\n                                           e.Id,\r\n                                           e.ServerUrl,\r\n                                           e.OwnerUserId\r\n                                       })\r\n                                       .FirstOrDefaultAsync();\r\n\r\n            if (eventToJoin == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"This event does not exist\");\r\n            }\r\n\r\n            var eventsUsersEcole = await _db.EventUserEcoles\r\n                                            .Where(eue => eue.UserId == user.Id && eue.EventId == meetingInfoBindingModel.EventId && eue.DateDelete == null)\r\n                                            .FirstOrDefaultAsync();\r\n\r\n            if (eventsUsersEcole == null)\r\n            {\r\n                eventsUsersEcole = new EventUserEcole\r\n                {\r\n                    UserId = user.Id,\r\n                    EcoleId = schoolId,\r\n                    EventId = meetingInfoBindingModel.EventId,\r\n                    Presence = true,\r\n                    DateCreate = DateTime.Now,\r\n                    UserCreate = user.Email\r\n                };\r\n\r\n                _db.EventUserEcoles.Add(eventsUsersEcole);\r\n            }\r\n            else\r\n            {\r\n                if (!eventsUsersEcole.Presence.HasValue || !eventsUsersEcole.Presence.Value)\r\n                {\r\n                    eventsUsersEcole.Presence = true;\r\n                    _db.Entry(eventsUsersEcole).State = EntityState.Modified;\r\n                }\r\n            }\r\n\r\n            try\r\n            {\r\n                BigBlueButtonClient client = _eventsService.GetBBBClient(eventToJoin.ServerUrl);\r\n                var result = await client.JoinAsync(user.Pseudo, $\"{eventToJoin.Id}_{organizationCode}\", eventToJoin.OwnerUserId, user.Id, user.PhotoProfil);\r\n\r\n                await _db.SaveChangesAsync();\r\n\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Erreur de joindre un meeting Big Blue Button\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Join a user to a specified event in Big Blue Button, creating a new user entry if necessary and updating their presence status.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "meetingInfoBindingModel",
                        "param_name": "meetingInfoBindingModel",
                        "param_desc": "The MeetingInfoBindingModel parameter contains information about the meeting to which the user is joining. It includes details such as the meeting ID, user ID, and any additional metadata related to the meeting."
                    },
                    {
                        "name": "JoinMeetingAsync",
                        "param_name": "JoinMeetingAsync",
                        "param_desc": "The JoinMeetingAsync parameter represents the method used to join a user to a specified event in Big Blue Button. It handles the process of creating a new user entry if necessary and updating their presence status within the event."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Join a user to a specified event in Big Blue Button, creating a new user entry if necessary and updating their presence status.\n/// </summary>\n/// <param name=\"meetingInfoBindingModel\">The MeetingInfoBindingModel parameter contains information about the meeting to which the user is joining. It includes details such as the meeting ID, user ID, and any additional metadata related to the meeting.</param>\n/// <param name=\"JoinMeetingAsync\">The JoinMeetingAsync parameter represents the method used to join a user to a specified event in Big Blue Button. It handles the process of creating a new user entry if necessary and updating their presence status within the event.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetInfoMeetingAsync",
            "code_start_index": 9970,
            "method_name": "GetInfoMeetingAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get Info Meeting\r\n        /// </summary>\r\n        /// <param name=\"meetingInfoBindingModel\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "meetingInfoBindingModel",
                    "param_name": "meetingInfoBindingModel",
                    "param_type": "MeetingInfoBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var schoolId = this.GetSchoolId(_db);\r\n            var currentSchool = DataCache.GetSchools(_db)\r\n                .First(e => e.Id == schoolId);\r\n\r\n            var organizationCode = currentSchool.Organisme?.Code ?? string.Empty;\r\n\r\n            var eventInfo = await this._db.Events.AsNoTracking()\r\n                                      .Where(e => e.Id == meetingInfoBindingModel.EventId && e.DateDelete == null)\r\n                                      .Select(e => new\r\n                                      {\r\n                                          e.Id,\r\n                                          e.ServerUrl\r\n                                      })\r\n                                      .FirstOrDefaultAsync();\r\n\r\n            if (eventInfo == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"This event does not exist\");\r\n            }\r\n\r\n            try\r\n            {\r\n                BigBlueButtonClient client = _eventsService.GetBBBClient(eventInfo.ServerUrl);\r\n                var meetings = await client.GetMeetingInfoAsync($\"{eventInfo.Id}_{organizationCode}\");\r\n\r\n                if (meetings == null)\r\n                {\r\n                    return Content(HttpStatusCode.NotFound, \"This meeting does not exist\");\r\n                }\r\n\r\n                return Ok(new\r\n                {\r\n                    meetingName = meetings.MeetingName,\r\n                    meetingID = int.TryParse(meetings.MeetingId, out var meetingId) ? meetingId : 0,\r\n                    createTime = meetings.CreateTime,\r\n                    createDate = string.Empty,\r\n                    running = bool.TryParse(meetings.Running, out bool running) && running,\r\n                    duration = int.TryParse(meetings.Duration, out int duration) ? duration : 0,\r\n                    recording = false,\r\n                    startTime = string.Empty,\r\n                    participantCount = int.TryParse(meetings.ParticipantCount, out var participantsCount) ? participantsCount : 0,\r\n                    maxUsers = int.TryParse(meetings.MaxUsers, out var maxUsers) ? maxUsers : 0,\r\n                    moderatorCount = 0,\r\n                    attendees = meetings.Attendees.Select(a => new\r\n                    {\r\n                        fullName = a.FullName,\r\n                        role = a.Role,\r\n                        userID = a.UserId\r\n                    }).ToList()\r\n                });\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Erreur de r\u00e9cup\u00e9ration d'un information d'un meeting Big Blue Button\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve information about a meeting from Big Blue Button, including meeting name, ID, creation time, running status, duration, participant count, max users, moderators, and attendees.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "meetingInfoBindingModel",
                        "param_name": "meetingInfoBindingModel",
                        "param_desc": "The binding model containing information about the meeting."
                    },
                    {
                        "name": "GetInfoMeetingAsync",
                        "param_name": "GetInfoMeetingAsync",
                        "param_desc": "The method used to retrieve information about a meeting from Big Blue Button."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve information about a meeting from Big Blue Button, including meeting name, ID, creation time, running status, duration, participant count, max users, moderators, and attendees.\n/// </summary>\n/// <param name=\"meetingInfoBindingModel\">The binding model containing information about the meeting.</param>\n/// <param name=\"GetInfoMeetingAsync\">The method used to retrieve information about a meeting from Big Blue Button.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "BigBlueButtonController"
}