{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/v1/CoursesController.cs",
    "index_shift_code": 447,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V1",
    "usings": [
        "LMS.Authentication",
        "LMS.Data",
        "LMS.ModelsDTOs.Courses",
        "LMS.ModelsDTOs.User",
        "LMS.Repositories",
        "LMS.Utils",
        "Serilog",
        "System",
        "System.Data.Entity",
        "System.Linq",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description",
        "Studi.QuizResultParser"
    ],
    "access_modifier": "public",
    "struct_name": "CoursesController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetPromotionsAsync",
            "code_start_index": 1141,
            "method_name": "GetPromotionsAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        ///     R\u00e9cupere les promotions\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var userId = User.Identity.GetUserId();\r\n                var schoolIdsList = User.Identity.GetSchoolIdsList();\r\n\r\n                var promotions = await _coursesRepository.GetPromotionsFromInscriptionsMatieresAsync(userId, schoolIdsList);\r\n\r\n                return Ok(promotions);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error get Parcours on GetPromotion\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve promotions asynchronously based on the user's identity and school IDs list, handling exceptions and logging errors if necessary.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "identity",
                        "param_name": "identity",
                        "param_desc": "The user's identity used to retrieve promotions."
                    },
                    {
                        "name": "schoolIDs",
                        "param_name": "schoolIDs",
                        "param_desc": "The list of school IDs for which promotions need to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve promotions asynchronously based on the user's identity and school IDs list, handling exceptions and logging errors if necessary.\n/// </summary>\n/// <param name=\"identity\">The user's identity used to retrieve promotions.</param>\n/// <param name=\"schoolIDs\">The list of school IDs for which promotions need to be retrieved.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AddReportCoursesAsync",
            "code_start_index": 1951,
            "method_name": "AddReportCoursesAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// add activity report courses\r\n        /// </summary>\r\n        /// <param name=\"listReport\"></param>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "listReport",
                    "param_name": "listReport",
                    "param_type": "ConnReportInfo<CourseConnectionReportRow>",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var ecoleUserDevice = await _db.EcoleUserDevices.FirstOrDefaultAsync(x => x.Udid == listReport.UDID);\r\n            if (ecoleUserDevice == null)\r\n            {\r\n                Log.Warning(\"Ecole User Device not found for UDID: {0}\", listReport.UDID);\r\n                return NotFound();\r\n            }\r\n\r\n            var activitiesReports = listReport.ReportRows\r\n                .Select(rr => new ReportActivite\r\n                {\r\n                    DateCreate = DateTime.Now,\r\n                    DateDebut = rr.CreationDateTime,\r\n                    UserId = userId,\r\n                    EcoleId = ecoleId,\r\n                    Duree = TimeSpan.FromMilliseconds(rr.Time).TotalSeconds,\r\n                    EcoleUserDeviceId = ecoleUserDevice.Id,\r\n                    RessourceObjectId = rr.ResourceObjectId == 0 ? null : rr.ResourceObjectId,\r\n                    RessourceId = rr.RessourceId,\r\n                    EventId = rr.EventId,\r\n                    RessourceVersionId = rr.RessourceVersionId ?? GetLatestRessourceVersionId(rr.ResourceObjectId),\r\n                })\r\n                .ToList();\r\n\r\n            _db.ReportActivites.AddRange(activitiesReports);\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return Ok(true);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error saving the courses activites reports: {0}, {1}\", listReport, activitiesReports);\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Add courses activities reports for a specific user and school, based on the provided data, and save them in the database. If an error occurs during the process, log the error and return an internal server error response.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "listReport",
                        "param_name": "listReport",
                        "param_desc": "The list of ConnReportInfo<CourseConnectionReportRow> containing the courses activities reports to be added for a specific user and school."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Add courses activities reports for a specific user and school, based on the provided data, and save them in the database. If an error occurs during the process, log the error and return an internal server error response.\n/// </summary>\n/// <param name=\"listReport\">The list of ConnReportInfo<CourseConnectionReportRow> containing the courses activities reports to be added for a specific user and school.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetLatestRessourceVersionId",
            "code_start_index": 3743,
            "method_name": "GetLatestRessourceVersionId",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "resourceObjectId",
                    "param_name": "resourceObjectId",
                    "param_type": "int?",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            if (resourceObjectId == 0 || resourceObjectId == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _db.RessourcesObjectRessourcesVersions.AsNoTracking()\r\n                .Where(obj => obj.RessourcesObjectId == resourceObjectId\r\n                              && (obj.RessourceVersion.DateDelete == null || obj.RessourceVersion.DateDelete > DateTime.Now) && obj.RessourceVersion.Publication.Value\r\n                              && obj.RessourceVersion.DateDispo < DateTime.Now)\r\n                .OrderByDescending(obj => obj.RessourceVersion.VersionMajeure)\r\n                .ThenBy(obj => obj.RessourceVersion.VersionMineure)\r\n                .ThenBy(obj => obj.RessourceVersion.VersionCorrection)\r\n                .Select(obj => obj.RessourcesVersionId)\r\n                .FirstOrDefault();\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the latest version ID for a specified resource object that meets certain criteria.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "resourceObjectId",
                        "param_name": "resourceObjectId",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "int",
                        "param_name": "int",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the latest version ID for a specified resource object that meets certain criteria.\n/// </summary>\n/// <param name=\"resourceObjectId\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"int\">The generated description for the parameter</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetQuizInfoAsync",
            "code_start_index": 4735,
            "method_name": "GetQuizInfoAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "ressourceObjectIds",
                    "param_name": "ressourceObjectIds",
                    "param_type": "int[]",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var ros = await _db.RessourceObjects.AsNoTracking()\r\n                .Include(ro => ro.ResourceType)\r\n                .Where(ro => ressourceObjectIds.Contains(ro.Id) && ro.ResourceType.Code == \"quiz\")\r\n                .Select(ro => ro.Id)\r\n                .ToListAsync();\r\n\r\n            var data = await _db.ReportActivites.AsNoTracking()\r\n                        .Where(ra => ros.Contains(ra.RessourceObjectId.Value)\r\n                                     && ra.UserId == userId\r\n                                     && ra.EcoleId == ecoleId\r\n                                     && ra.QuizResultJson != null\r\n                                     && ra.Duree != 0.0)\r\n                        .Select(ra => new\r\n                        {\r\n                            id = ra.Id,\r\n                            score = ra.Score,\r\n                            duree = ra.Duree,\r\n                            date_create = ra.DateCreate,\r\n                            ressource_object_id = ra.RessourceObjectId\r\n                        }).ToListAsync();\r\n\r\n            return Ok(data);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve quiz information for a specific user based on their school and identity, including score, duration, creation date, and resource object ID.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "ressourceObjectIds",
                        "param_name": "ressourceObjectIds",
                        "param_desc": "The array of integers representing the IDs of the resource objects related to the quiz."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve quiz information for a specific user based on their school and identity, including score, duration, creation date, and resource object ID.\n/// </summary>\n/// <param name=\"ressourceObjectIds\">The array of integers representing the IDs of the resource objects related to the quiz.</param>\n",
            "code_chunks": null
        },
        {
            "name": "SaveQuizzAsync",
            "code_start_index": 6397,
            "method_name": "SaveQuizzAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Save the quiz result\r\n        /// </summary>\r\n        /// <param name=\"st\">st version (unused)</param>\r\n        /// <param name=\"roid\">ressource object id</param>\r\n        /// <param name=\"rvid\">ressource version id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "st",
                    "param_name": "st",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "roid",
                    "param_name": "roid",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "rvid",
                    "param_name": "rvid",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            string quizDataObj = await this.Request.Content.ReadAsStringAsync();\r\n\r\n            var currentUser = User.Identity.GetUser();\r\n            var userId = currentUser.Id;\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            try\r\n            {\r\n                var resObject = await _db.RessourceObjects.AsNoTracking().FirstOrDefaultAsync(ro => ro.Id == roid);\r\n                if (resObject == null)\r\n                {\r\n                    Log.Warning($\"Resource Object with Id = {roid} was not found.\");\r\n                    return BadRequest(\"ResourceObjectId not found\");\r\n                }\r\n\r\n                var reportActivity = new ReportActivite\r\n                {\r\n                    DateCreate = DateTime.Now,\r\n                    DateDebut = DateTimeOffset.Now,\r\n                    UserId = userId,\r\n                    EcoleId = ecoleId,\r\n                    RessourceObjectId = roid,\r\n                    RessourceId = resObject.RessourceId,\r\n                    RessourceVersionId = rvid,\r\n                    EventId = null,\r\n                    QuizResultJson = quizDataObj\r\n                };\r\n\r\n                _db.ReportActivites.Add(reportActivity);\r\n                await _db.SaveChangesAsync();\r\n\r\n                var processor = new QuizProcessor();\r\n                var result = processor.Process(quizDataObj);\r\n\r\n                if (!result.Processed)\r\n                {\r\n                    return Ok();\r\n                } \r\n\r\n                reportActivity.Score = result.Score ?? 0;\r\n                reportActivity.Duree = result.Duree ?? 0;\r\n\r\n                if (reportActivity.Duree > 0)\r\n                    await _db.SaveChangesAsync();\r\n\r\n                return Ok();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error trying to save the quiz score '{0}', RoID: {1}, RvID: {2}\", quizDataObj, roid, rvid);\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Save quiz data and score for a user, school, and resource object, processing the quiz data if needed.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "st",
                        "param_name": "st",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "roid",
                        "param_name": "roid",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "rvid",
                        "param_name": "rvid",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Save quiz data and score for a user, school, and resource object, processing the quiz data if needed.\n/// </summary>\n/// <param name=\"st\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"roid\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"rvid\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "CoursesController"
}