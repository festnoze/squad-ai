{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Common/RosettaStoneController.cs",
    "index_shift_code": 318,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.Common",
    "usings": [
        "LMS.Authentication",
        "LMS.Data",
        "LMS.RosettaStone",
        "LMS.Utils",
        "Serilog",
        "System",
        "System.Data.Entity",
        "System.Linq",
        "System.Net",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description"
    ],
    "access_modifier": "public",
    "struct_name": "RosettaStoneController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "UserAccountConnectionAsync",
            "code_start_index": 797,
            "method_name": "UserAccountConnectionAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "idgroup",
                    "param_name": "idgroup",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "endUrl",
                    "param_name": "endUrl",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "langue",
                    "param_name": "langue",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // On check si l'utilisateur a des credentials dans inscriptions services avec l'id du groupe donn\u00e9\r\n            var currentUser = User.Identity.GetUser();\r\n            var ecoleUserId = User.Identity.GetSchoolUserId();\r\n\r\n            try\r\n            {\r\n                var schoolCode = this.GetSchoolCode(_db);\r\n\r\n                var groupeId = int.Parse(idgroup);\r\n\r\n                var inscriptionService = await _db.InscriptionsServices\r\n                                                  .AsNoTracking()\r\n                                                  .Where(inscriptionsService => inscriptionsService.EcoleUserId == ecoleUserId\r\n                                                                                && inscriptionsService.Service.IdGroupRosetta == groupeId)\r\n                                                  .Select(isrv => new\r\n                                                                  {\r\n                                                                      Login = isrv.Login,\r\n                                                                      Password = isrv.Password,\r\n                                                                  })\r\n                                                  .FirstOrDefaultAsync();\r\n\r\n                //if (inscriptionService == null)\r\n                //{\r\n                //    return Content(HttpStatusCode.Forbidden, string.Empty);\r\n                //}\r\n\r\n                // On check si cette inscription service a des credentials\r\n                string result;\r\n                if (inscriptionService?.Login != null && inscriptionService.Password != null)\r\n                {\r\n                    result = await _clientApi.UserAcountConnectionAsync(schoolCode, inscriptionService.Login, inscriptionService.Password,\r\n                                                                        currentUser.Prenom, currentUser.Nom, currentUser.Email, endUrl, idgroup, langue);\r\n                }\r\n                else\r\n                {\r\n                    result = await _clientApi.UserAcountConnectionAsync(schoolCode, currentUser.Email, currentUser.Password,\r\n                                                                        currentUser.Prenom, currentUser.Nom, currentUser.Email, endUrl, idgroup, langue);\r\n                }\r\n\r\n                if (result.Contains(\"Connexion impossible\"))\r\n                {\r\n                    return Content(HttpStatusCode.Forbidden, \"Impossible d'acc\u00e9der \u00e0 RosettaStone\");\r\n                }\r\n\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Erreur lors de la connexion \u00e0 Rosetta Stone.\");\r\n                return InternalServerError(ex);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Connects a user account to a specified group in Rosetta Stone by checking and using credentials from Inscriptions Services. If credentials are valid, the user is connected; otherwise, an error message is returned.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "idgroup",
                        "param_name": "idgroup",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "endUrl",
                        "param_name": "endUrl",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "langue",
                        "param_name": "langue",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Connects a user account to a specified group in Rosetta Stone by checking and using credentials from Inscriptions Services. If credentials are valid, the user is connected; otherwise, an error message is returned.\n/// </summary>\n/// <param name=\"idgroup\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"endUrl\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"langue\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "RosettaStoneController"
}