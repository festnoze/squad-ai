{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/v1/IsogradController.cs",
    "index_shift_code": 297,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V1",
    "usings": [
        "System",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Results",
        "LMS.Attributes",
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Models.ViewModels.V2.Isograd",
        "LMS.Services.Interfaces",
        "Serilog"
    ],
    "access_modifier": "public",
    "struct_name": "IsogradController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetisogradEvaluationAsync",
            "code_start_index": 1099,
            "method_name": "GetisogradEvaluationAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "evaluationId",
                    "param_name": "evaluationId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n            var schoolUserId = User.Identity.GetSchoolUserId();\r\n\r\n            IsogradViewModel isogradViewModel = null;\r\n\r\n            try\r\n            {\r\n                isogradViewModel = await isogradCopyService.GetEvaluation(currentUser, schoolUserId, evaluationId);\r\n            }\r\n            catch(Exception)\r\n            {\r\n                return InternalServerError();\r\n            }\r\n\r\n            return Ok(isogradViewModel);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the Isograd evaluation data asynchronously for the current user and school.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "evaluationId",
                        "param_name": "evaluationId",
                        "param_desc": "The ID of the evaluation to retrieve."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the Isograd evaluation data asynchronously for the current user and school.\n/// </summary>\n/// <param name=\"evaluationId\">The ID of the evaluation to retrieve.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetIsoGradLinkAsync",
            "code_start_index": 1916,
            "method_name": "GetIsoGradLinkAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get the isograd link\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "evaluationId",
                    "param_name": "evaluationId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var auth = Request.Headers.Authorization;\r\n            // Current user info\r\n            var user = User.Identity.GetUser();\r\n            var ecoleUserId = User.Identity.GetSchoolUserId();\r\n\r\n            try\r\n            {\r\n                CopieUser copieUser = await isogradCopyService.GetOrCreateIfNotExistCopyUser(evaluationId, user, ecoleUserId);\r\n\r\n                bool haveCPFFundingAgreement = await isogradService.DetectIfCPFAgreementAsync(copieUser.CopieId, copieUser.EcoleUserId);\r\n\r\n                string result = await isogradService.CreateCandidateAndTakeTest(copieUser, user, evaluationId, haveCPFFundingAgreement);\r\n\r\n                await isogradCopyService.CreateCopieAvancementStarted(copieUser);\r\n\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Unable to get isograd link\");\r\n                return InternalServerError();\r\n            }\r\n\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve and create a link for the current user to take a test on Isograd platform, handling authentication and user information.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "evaluationId",
                        "param_name": "evaluationId",
                        "param_desc": "The identifier of the evaluation for which the link is to be generated. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve and create a link for the current user to take a test on Isograd platform, handling authentication and user information.\n/// </summary>\n/// <param name=\"evaluationId\">The identifier of the evaluation for which the link is to be generated. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "EndTest",
            "code_start_index": 3153,
            "method_name": "EndTest",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Action when the user finish the test\r\n        /// </summary>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            const string SourceIdNodeName = \"sourcedId\";\r\n            var data = await Request.Content.ReadAsStringAsync();\r\n\r\n            // Process xml\r\n            string sourceId = xmlService.GetSingleNodeValue(data, SourceIdNodeName);\r\n            if(sourceId == null) { return BadRequest(\"Data parameters is missing\"); }\r\n\r\n            try\r\n            {\r\n                // Get copie user\r\n                Log.Information(\"ISOGRAD - EndTest() - ISOGRAD ID : \" + sourceId);\r\n                CopieUser copieUser = await isogradCopyService.GetCompleteCopyUserByTestIdAnCreateCopieOriginaleAndCorrigee(sourceId);\r\n\r\n                // Check if copy correponding to CPF funding agreement\r\n                bool haveCPFFundingAgreement = await isogradService.DetectIfCPFAgreementAsync(copieUser.CopieId, copieUser.EcoleUserId);\r\n\r\n                // get results json\r\n                await isogradService.GetResultAsJson(copieUser, haveCPFFundingAgreement);\r\n\r\n                // get results pdf\r\n                await isogradService.GetResultAsPdf(copieUser, sourceId, haveCPFFundingAgreement);\r\n\r\n                // SignalR\r\n                await isogradCopyService.SendCopieUserWithSignalR(copieUser);\r\n\r\n                return Ok($\"Isograd test ID {sourceId} has been updated\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex,$\"Unable to update the test {sourceId}\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the Isograd test results and send notifications using SignalR based on the provided Isograd ID.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "IsogradID",
                        "param_name": "IsogradID",
                        "param_desc": "The Isograd ID for which the test results will be updated and notifications will be sent."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the Isograd test results and send notifications using SignalR based on the provided Isograd ID.\n/// </summary>\n/// <param name=\"IsogradID\">The Isograd ID for which the test results will be updated and notifications will be sent.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "IsogradController"
}