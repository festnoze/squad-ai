{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/MediaRecorderController.cs",
    "index_shift_code": 249,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Configuration",
        "Serilog",
        "System",
        "System.Threading.Tasks",
        "System.Web.Http"
    ],
    "access_modifier": "public",
    "struct_name": "MediaRecorderController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "SaveVideoFileToDbAsync",
            "code_start_index": 736,
            "method_name": "SaveVideoFileToDbAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "fileName",
                    "param_name": "fileName",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var forumObject = new ForumUpload\r\n            {\r\n                CreationDate = DateTime.Now,\r\n                FilePath = this._config.GetResourcesServerUrl() + \"/contenus/live-videos/\" + fileName,\r\n                Filename = $\"{User.Identity.GetUserId()}_lms_liverec.webm\",\r\n                FileGuid = Guid.NewGuid()\r\n            };\r\n\r\n            this._db.ForumUploads.Add(forumObject);\r\n\r\n            try\r\n            {\r\n                await this._db.SaveChangesAsync();\r\n                return Ok(forumObject.FileGuid);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Failed to save the video file to the database\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Save a video file to the database asynchronously, including creation date, file path, filename, and a unique file identifier, with error handling in case of failure.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "fileName",
                        "param_name": "fileName",
                        "param_desc": "The name of the file to be saved to the database. It should include the extension (e.g., .mp4, .avi) and be a valid file name."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Save a video file to the database asynchronously, including creation date, file path, filename, and a unique file identifier, with error handling in case of failure.\n/// </summary>\n/// <param name=\"fileName\">The name of the file to be saved to the database. It should include the extension (e.g., .mp4, .avi) and be a valid file name.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "MediaRecorderController"
}