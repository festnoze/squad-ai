{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V3/NewsfeedV3Controller.cs",
    "index_shift_code": 604,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V3",
    "usings": [
        "System",
        "System.Data.Entity",
        "System.Linq",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Domains.ActivityReport",
        "LMS.Models.ViewModels.V3.Newsfeed",
        "LMS.Services.Interfaces",
        "LMS.Utils",
        "LMS.Utils.Cache"
    ],
    "access_modifier": "public",
    "struct_name": "NewsfeedV3Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetDevMembersAsync",
            "code_start_index": 1437,
            "method_name": "GetDevMembersAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Return a list of all the members of the wall. \r\n        /// </summary>\r\n        /// <returns>A viewmodel.</returns>\r\n        /// <remarks>THIS ROUTE IS USED BY MOBILE APPS, PLEASE DO NOT REMOVE.</remarks>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var res = await TCache<GroupMembersInfoV3ViewModel>.GetAsync(\"GetDevMembersAsync\", 3600, async () =>\r\n            {\r\n                var currentUser = User.Identity.GetUser();\r\n                var userId = currentUser.Id;\r\n                var ecoleId = User.Identity.GetSchoolId();\r\n\r\n                var workgroups = await _workgroupService.GetUserWorkgroupsAsync(userId, false, ecoleId);\r\n\r\n                var usersFromIm = _db.Workgroups.AsNoTracking()\r\n                                      .Where(wg => workgroups.Contains(wg.WorkgroupId) && wg.SchoolId == ecoleId)\r\n                                      .SelectMany(wg => wg.Matiere.InscriptionMatieres)\r\n                                      .Where(im => im.DateDelete == null)\r\n                                      .Select(im => im.UserId);\r\n\r\n                var usersFromIp = _db.Workgroups.AsNoTracking()\r\n                                      .Where(wg => workgroups.Contains(wg.WorkgroupId) && wg.SchoolId == ecoleId)\r\n                                      .SelectMany(wg => wg.Promotion.InscriptionPromotions)\r\n                                      .Where(inscriptionsPromo => !inscriptionsPromo.User.Interne\r\n                                                                  && inscriptionsPromo.User.EcoleUsers.Any(eu => eu.EcoleId == ecoleId && eu.UserTypeId < 3)\r\n                                                                  && ((inscriptionsPromo.DateDelete == null) || (inscriptionsPromo.DateDelete > DateTime.Now))\r\n                                                                  && ((inscriptionsPromo.DateFinAcces == null && inscriptionsPromo.Promotion.DateFinPromo > DateTime.Now) || inscriptionsPromo.DateFinAcces > DateTime.Now))\r\n                                      .Select(im => im.UserId);\r\n\r\n                var usersFromParcs = _db.Workgroups.AsNoTracking()\r\n                                         .Where(wg => workgroups.Contains(wg.WorkgroupId) && wg.SchoolId == ecoleId)\r\n                                         .SelectMany(wg => wg.WorkgroupParcours)\r\n                                         .SelectMany(wg => wg.Parcour.Promotions)\r\n                                         .SelectMany(wg => wg.InscriptionPromotions)\r\n                                         .Where(ip => !ip.User.Interne\r\n                                                      && ip.User.EcoleUsers.Any(eu => eu.EcoleId == ecoleId && eu.UserTypeId == 2)\r\n                                                      && ((ip.DateDelete == null) || (ip.DateDelete > DateTime.Now))\r\n                                                      && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now))\r\n                                         .Select(im => im.UserId);\r\n\r\n                var allUsersIds = usersFromParcs.Union(usersFromIp).Union(usersFromIm);\r\n\r\n                var users = await _db.Users\r\n                    .AsNoTracking()\r\n                    .Include(u => u.UploadedFile_FileIdPhotoProfil)\r\n                    .Include(u => u.UploadedFile_FileIdHeaderProfil)\r\n                    .Where(user => !user.Interne && user.EcoleUsers.FirstOrDefault(eu => eu.EcoleId == ecoleId).UserStatutId == 1) // Active user\r\n                    .Where(user => allUsersIds.Contains(user.Id))\r\n                    .Select(wp => new GroupInfoUserV3ViewModel\r\n                    {\r\n                        UserId = wp.Id,\r\n                        Pseudo = wp.Pseudo,\r\n                        ProfilePicture = (wp.FileIdPhotoProfil != null) ? wp.UploadedFile_FileIdPhotoProfil.FileUrl : wp.PhotoProfil,\r\n                        CoverPicture = (wp.FileIdHeaderProfil != null) ? wp.UploadedFile_FileIdHeaderProfil.FileUrl : wp.HeaderProfil,\r\n                        Internal = wp.Interne,\r\n                        IsOnline = false,\r\n                        LastConnectionDate = wp.EcoleUsers\r\n                            .Where(eu => eu.EcoleId == ecoleId)\r\n                            .Select(eu => eu.LastConnectionDate)\r\n                            .FirstOrDefault(),\r\n                        LastDisconnectionDate = wp.EcoleUsers\r\n                            .Where(eu => eu.EcoleId == ecoleId)\r\n                            .Select(eu => eu.LastDisconnectionDate)\r\n                            .FirstOrDefault(),\r\n                        UserType = wp.EcoleUsers\r\n                            .Where(eu => eu.EcoleId == ecoleId)\r\n                            .Select(eu => new NewsfeedUserTypeV3ViewModel\r\n                            {\r\n                                Code = eu.UserType.Code,\r\n                                Label = eu.UserType.Libelle\r\n                            })\r\n                            .FirstOrDefault(),\r\n                        Promotions = wp.InscriptionPromotions\r\n                            .Where(inscriptionPromotion =>\r\n                                inscriptionPromotion.EcoleId == ecoleId\r\n                                && (inscriptionPromotion.DateDelete == null\r\n                                    || inscriptionPromotion.DateDelete > DateTime.Now)\r\n                                && ((inscriptionPromotion.DateFinAcces == null\r\n                                    && inscriptionPromotion.Promotion.DateFinPromo > DateTime.Now)\r\n                                    || inscriptionPromotion.DateFinAcces > DateTime.Now))\r\n                            .Select(ip => ip.PromotionId)\r\n                            .ToList()\r\n                    })\r\n                    .ToListAsync();\r\n\r\n                foreach (var user in users)\r\n                {\r\n                    user.IsOnline = ConnectionsListHolder.OnlineUsers.ContainsKey(user.UserId);\r\n                }\r\n\r\n                var promotionsIds = users.SelectMany(u => u.Promotions).Distinct().ToList();\r\n\r\n                var promotions = _db.Promotions.AsNoTracking()\r\n                                           .Include(p => p.Parcour)\r\n                                           .Where(p => promotionsIds.Contains(p.Id))\r\n                                           .Select(ip => new NewsfeedUserPromotionV3ViewModel\r\n                                           {\r\n                                               PromotionId = ip.Id,\r\n                                               Promotion = ip.Libelle,\r\n                                               Session = ip.Session,\r\n                                               Parcours = ip.Parcour.Titre,\r\n                                               CodeParcours = ip.Parcour.Code\r\n                                           }).ToList();\r\n\r\n                return new GroupMembersInfoV3ViewModel\r\n                {\r\n                    Users = users.Where(u => u.Promotions.Count > 0).ToList(),\r\n                    Promotions = promotions\r\n                };\r\n            });\r\n\r\n            return Ok(res);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve user ranks from cache for a specified list of schools based on a weekly start period, or fetch and store them if not found in cache.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method, in this case, 'GetDevMembersAsync'."
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method: 'Retrieve user ranks from cache for a specified list of schools based on a weekly start period, or fetch and store them if not found in cache.'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve user ranks from cache for a specified list of schools based on a weekly start period, or fetch and store them if not found in cache.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method, in this case, 'GetDevMembersAsync'.</param>\n/// <param name=\"methodPurpose\">The purpose of the method: 'Retrieve user ranks from cache for a specified list of schools based on a weekly start period, or fetch and store them if not found in cache.'.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "NewsfeedV3Controller"
}