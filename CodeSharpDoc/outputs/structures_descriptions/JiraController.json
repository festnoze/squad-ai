{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V4/JiraController.cs",
    "index_shift_code": 445,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V4",
    "usings": [],
    "access_modifier": "public",
    "struct_name": "JiraController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "CreateIssue",
            "code_start_index": 1555,
            "method_name": "CreateIssue",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Creates an issue in JIRA.\r\n        /// </summary>\r\n        /// <param name=\"payload\">The payload.</param>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "payload",
                    "param_name": "payload",
                    "param_type": "StudiContentFactoryIssueLmsFrontPayload",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                // Retrieve all the issue data.\r\n                var (schoolCode, schoolName) = GetSchoolInfo(payload.SchoolId);\r\n                var (studentFirstName, studentLastName) = GetUserInfo(payload.StudentId);\r\n                var (trainerFirstName, trainerLastName) = GetUserInfo(payload.TrainerId);\r\n                var (cursusTitle, jiraSectorName) = GetCursusAndSectorInfo(payload.CodeParcours);\r\n                var dnsConfig = GetDns(schoolCode);\r\n\r\n                var contentFactoryErrorLmsPayload = new ContentFactoryErrorLmsPayload\r\n                {\r\n                    Description = payload.Description,\r\n                    ForumPostId = payload.ForumPostId,\r\n                    CursusTitle = cursusTitle,\r\n                    SchoolCode = schoolCode,\r\n                    SchoolName = schoolName,\r\n                    StudentFirstName = studentFirstName,\r\n                    StudentLastName = studentLastName,\r\n                    TrainerFirstName = trainerFirstName,\r\n                    TrainerLastName = trainerLastName,\r\n                    Dns = dnsConfig.Dns,\r\n                    JiraSectorName = jiraSectorName\r\n                };\r\n\r\n                _jiraService.CreateContentFactoryIssueAsync(contentFactoryErrorLmsPayload);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Logger.Error(ex, $\"{ex}\");\r\n                throw;\r\n            }\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the current forum parcours for the logged in user based on their user ID and school ID. If an error occurs during the retrieval process, log the error and return an internal server error.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "StudiContentFactoryIssueLmsFrontPayload",
                        "param_name": "StudiContentFactoryIssueLmsFrontPayload",
                        "param_desc": "The payload for creating an issue in the StudiContentFactoryIssueLmsFrontPayload format."
                    },
                    {
                        "name": "payload",
                        "param_name": "payload",
                        "param_desc": "The payload for creating an issue in the StudiContentFactoryIssueLmsFrontPayload format."
                    },
                    {
                        "name": "CreateIssue",
                        "param_name": "CreateIssue",
                        "param_desc": "The method to create an issue in the system."
                    },
                    {
                        "name": "Retrieve the current forum parcours for the logged in user based on their user ID and school ID. If an error occurs during the retrieval process, log the error and return an internal server error.",
                        "param_name": "Retrieve the current forum parcours for the logged in user based on their user ID and school ID. If an error occurs during the retrieval process, log the error and return an internal server error.",
                        "param_desc": "The purpose of the CreateIssue method."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the current forum parcours for the logged in user based on their user ID and school ID. If an error occurs during the retrieval process, log the error and return an internal server error.\n/// </summary>\n/// <param name=\"StudiContentFactoryIssueLmsFrontPayload\">The payload for creating an issue in the StudiContentFactoryIssueLmsFrontPayload format.</param>\n/// <param name=\"payload\">The payload for creating an issue in the StudiContentFactoryIssueLmsFrontPayload format.</param>\n/// <param name=\"CreateIssue\">The method to create an issue in the system.</param>\n/// <param name=\"Retrieve the current forum parcours for the logged in user based on their user ID and school ID. If an error occurs during the retrieval process, log the error and return an internal server error.\">The purpose of the CreateIssue method.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetSchoolInfo",
            "code_start_index": 3363,
            "method_name": "GetSchoolInfo",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Retrieves the school information.\r\n        /// </summary>\r\n        /// <param name=\"schoolId\">The school identifier.</param>\r\n        /// <returns>A named tuple that contains the school information.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "schoolId",
                    "param_name": "schoolId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                return _studiLmsContext.Ecoles\r\n                    .AsNoTracking()\r\n                    .Where(s => s.Id == schoolId)\r\n                    .Select(s => new { s.Code, s.Libelle })\r\n                    .AsEnumerable()\r\n                    .Select(s => (SchoolCode: s.Code, SchoolName: s.Libelle))\r\n                    .FirstOrDefault();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Logger.Error($\"{ex}\");\r\n                throw;\r\n            }\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the dynamic access URI for a global exam based on the current user's information and role.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "schoolId",
                        "param_name": "schoolId",
                        "param_desc": "The ID of the school for which the information needs to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the dynamic access URI for a global exam based on the current user's information and role.\n/// </summary>\n/// <param name=\"schoolId\">The ID of the school for which the information needs to be retrieved.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetUserInfo",
            "code_start_index": 4240,
            "method_name": "GetUserInfo",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Retrieves the user information.\r\n        /// </summary>\r\n        /// <param name=\"userId\">The user identifier.</param>\r\n        /// <returns>A named tuple that contains the user information.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "userId",
                    "param_name": "userId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                return _studiLmsContext.Users\r\n                    .AsNoTracking()\r\n                    .Where(u => u.Id == userId)\r\n                    .Select(u => new { u.Prenom, u.Nom })\r\n                    .AsEnumerable()\r\n                    .Select(u => (FirstName: u.Prenom, LastName: u.Nom))\r\n                    .FirstOrDefault();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Logger.Error($\"{ex}\");\r\n                throw;\r\n            }\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create an issue with relevant data from school, student, trainer, cursus, and sector information for content factory error in LMS.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The identifier of the user for whom the information is to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create an issue with relevant data from school, student, trainer, cursus, and sector information for content factory error in LMS.\n/// </summary>\n/// <param name=\"userId\">The identifier of the user for whom the information is to be retrieved.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetCursusAndSectorInfo",
            "code_start_index": 5128,
            "method_name": "GetCursusAndSectorInfo",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Retrieves the cursus and sector information.\r\n        /// </summary>\r\n        /// <param name=\"parcoursCode\">The cursus code.</param>\r\n        /// <returns>A named tuple that contains the cursus and sector information.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "parcoursCode",
                    "param_name": "parcoursCode",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var query = from parcours in _studiLmsContext.Parcours.AsNoTracking()\r\n                            where parcours.Code == parcoursCode\r\n                            let sector = parcours.Sector\r\n                            select new\r\n                            {\r\n                                parcours.Titre,\r\n                                sector.JiraName\r\n                            };\r\n\r\n                return query\r\n                    .AsEnumerable()\r\n                    .Select(info => (CursusTitle: info.Titre, JiraSectorName: info.JiraName))\r\n                    .FirstOrDefault();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Logger.Error($\"{ex}\");\r\n                throw;\r\n            }\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the code and name of a specific school.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "string",
                        "param_name": "string",
                        "param_desc": "The input string parameter."
                    },
                    {
                        "name": "parcoursCode",
                        "param_name": "parcoursCode",
                        "param_desc": "The code used to identify the specific school parcours."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the code and name of a specific school.\n/// </summary>\n/// <param name=\"string\">The input string parameter.</param>\n/// <param name=\"parcoursCode\">The code used to identify the specific school parcours.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetDns",
            "code_start_index": 6256,
            "method_name": "GetDns",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Retrieves the DNS configuration.\r\n        /// </summary>\r\n        /// <param name=\"code\">The school code.</param>\r\n        /// <returns>The DNS configuration.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "code",
                    "param_name": "code",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                return DataCache.GetDnsConfigs(_studiLmsContext).SingleOrDefault(dnsC => dnsC.Code == code);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Logger.Error($\"{ex}\");\r\n                throw;\r\n            }\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the first name and last name of a specific user.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "string",
                        "param_name": "string",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "code",
                        "param_name": "code",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "GetDns",
                        "param_name": "GetDns",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "Retrieve",
                        "param_name": "Retrieve",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "the",
                        "param_name": "the",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "first",
                        "param_name": "first",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "name",
                        "param_name": "name",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "and",
                        "param_name": "and",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "last",
                        "param_name": "last",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "name",
                        "param_name": "name",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "of",
                        "param_name": "of",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "a",
                        "param_name": "a",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "specific",
                        "param_name": "specific",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "user.",
                        "param_name": "user.",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the first name and last name of a specific user.\n/// </summary>\n/// <param name=\"string\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"code\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"GetDns\">The generated description for the parameter</param>\n/// <param name=\"Retrieve\">The generated description for the parameter</param>\n/// <param name=\"the\">The generated description for the parameter</param>\n/// <param name=\"first\">The generated description for the parameter</param>\n/// <param name=\"name\">The generated description for the parameter</param>\n/// <param name=\"and\">The generated description for the parameter</param>\n/// <param name=\"last\">The generated description for the parameter</param>\n/// <param name=\"name\">The generated description for the parameter</param>\n/// <param name=\"of\">The generated description for the parameter</param>\n/// <param name=\"a\">The generated description for the parameter</param>\n/// <param name=\"specific\">The generated description for the parameter</param>\n/// <param name=\"user.\">The generated description for the parameter</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "JiraController"
}