{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/LiveV2Controller.cs",
    "index_shift_code": 942,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [],
    "access_modifier": "public",
    "struct_name": "LiveV2Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetEventById",
            "code_start_index": 2038,
            "method_name": "GetEventById",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "eventId",
                    "param_name": "eventId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var lmsEvent = await _db.Events\r\n                .AsNoTracking()\r\n                .Include(p => p.User)\r\n                .Include(p => p.EventPromotions)\r\n                .Include(p => p.EventMatieres.Select(eue => eue.Matiere))\r\n                .Include(p => p.EventObjects.Select(eue => eue.ResourceType))\r\n                .Include(p => p.EventUserEcoles.Select(eue => eue.User))\r\n                .Where(e => e.Id == eventId)\r\n                .Where(predicateEvent)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (lmsEvent == null) return NotFound();\r\n\r\n            // User comme dans les newsfeed\r\n            var eventOwnerUser = await GetUsers(_db)\r\n                .Where(user => user.Id == lmsEvent.OwnerUserId)\r\n                .Select(GetUserMapExpression(ecoleId))\r\n                .FirstOrDefaultAsync();\r\n\r\n            // Nombres de vues\r\n            int? reportActivityCount = null;\r\n            if (lmsEvent.UrlReplay != null)\r\n            {\r\n                reportActivityCount = _db.ReportActivites.Count(ra => ra.EventId == lmsEvent.Id && ra.Duree >= 60);\r\n            }\r\n\r\n            // Statut de la participation de l'user ayant fait la requ\u00eate\r\n            var participationStatus = lmsEvent.EventUserEcoles.Where(\r\n                e => e.EventId == lmsEvent.Id && e.UserId == userId && e.EcoleId == ecoleId).Select(eue => eue.Participation).FirstOrDefault();\r\n\r\n            // Pr\u00e9sence au live de l'user ayant fait la requ\u00eate\r\n            var presenceStatus = lmsEvent.EventUserEcoles.Where(\r\n                    e => e.EventId == lmsEvent.Id && e.UserId == userId && e.EcoleId == ecoleId)\r\n                .Select(eue => eue.Presence)\r\n                .FirstOrDefault();\r\n\r\n            // Si l'user a vu ou a particip\u00e9\r\n            var viewStatus = presenceStatus != null && (presenceStatus.Value || await _db.ReportActivites.AsNoTracking()\r\n                                                                                         .AnyAsync(ra => ra.EventId == lmsEvent.Id\r\n                                                                                                         && ra.Duree >= 60\r\n                                                                                                         && ra.UserId == userId\r\n                                                                                                         && ra.EcoleId == ecoleId));\r\n\r\n            var matvignettes = DataCache.GetMatieresThumbnails(_db, _customWebResources);\r\n\r\n            string image = _customWebResources.ContentsBaseUrl + \"live_default.jpg\";\r\n\r\n            if (lmsEvent.EventMatieres.Count > 0)\r\n            {\r\n                int matId = lmsEvent.EventMatieres.First().MatiereId;\r\n                image = matvignettes.ContainsKey(matId) ? matvignettes[matId].Filename : _customWebResources.ContentsBaseUrl + \"live_default.jpg\";\r\n            }\r\n\r\n            // Objet retourn\u00e9\r\n            var returnedEvent = new EventViewModel\r\n            {\r\n                Id = lmsEvent.Id,\r\n                Title = lmsEvent.Titre,\r\n                StartDate = lmsEvent.DateDebut,\r\n                EndDate = lmsEvent.DateFin,\r\n                Description = lmsEvent.Description,\r\n                ReplayUrl = lmsEvent.UrlReplay,\r\n                Image = image, // todo Associer l'image de la premi\u00e8re mati\u00e8re li\u00e9e ou mettre une image par d\u00e9faut quand il n'y en a pas (ajouter une image par d\u00e9faut dans l'eventType)\r\n                ServerUrl = lmsEvent.ServerUrl,\r\n                ParticipationStatus = participationStatus,\r\n                ViewStatus = viewStatus,\r\n                TimeBeforeStart = lmsEvent.EventType.TimeAvantAcces,\r\n                OwnerUser = eventOwnerUser,\r\n                EventObjects = lmsEvent.EventObjects\r\n                    .Where(eo => !eo.DateDelete.HasValue || eo.DateDelete > DateTime.Now)\r\n                    .Select(eo => new EventObjectViewModel\r\n                    {\r\n                        Id = eo.Id,\r\n                        Title = eo.Libelle,\r\n                        Filename = eo.Filename,\r\n                        StartAccessDate = eo.DateAccesObject,\r\n                        Order = eo.Ordre,\r\n                        TypeCode = eo.ResourceType.Code,\r\n                    })\r\n                    .ToList(),\r\n                Views = reportActivityCount,\r\n                EventMatieres = lmsEvent.EventMatieres\r\n                    .Select(em => new EventMatiereViewModel\r\n                    {\r\n                        Name = em.Matiere.Libelle,\r\n                    })\r\n                    .ToList(),\r\n            };\r\n\r\n            // Remplissage de EventUserParticipation\r\n            foreach (var eventsUsersEcole in lmsEvent.EventUserEcoles)\r\n            {\r\n                var eventsUsersEcoleUser = await GetUsers(_db)\r\n                    .Where(user => user.Id == eventsUsersEcole.UserId)\r\n                    .Select(GetUserMapExpression(ecoleId))\r\n                    .FirstOrDefaultAsync();\r\n\r\n                returnedEvent.EventUserParticipation.Add(new EventUserParticipationViewModel\r\n                {\r\n                    User = eventsUsersEcoleUser,\r\n                    Participation = eventsUsersEcole.Participation,\r\n                    Presence = eventsUsersEcole.Presence\r\n                });\r\n            }\r\n\r\n            return Ok(returnedEvent);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve an event by its ID, including various related information such as user details, participation status, view status, event objects, and event matieres, and return it as an EventViewModel object.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "eventId",
                        "param_name": "eventId",
                        "param_desc": "The ID of the event to retrieve. It is an integer value that uniquely identifies the event in the system."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve an event by its ID, including various related information such as user details, participation status, view status, event objects, and event matieres, and return it as an EventViewModel object.\n/// </summary>\n/// <param name=\"eventId\">The ID of the event to retrieve. It is an integer value that uniquely identifies the event in the system.</param>\n",
            "code_chunks": null
        },
        {
            "name": "SetEventParticipationAsync",
            "code_start_index": 8035,
            "method_name": "SetEventParticipationAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// set participate Events\r\n        /// 0: No\r\n        /// 1: Yes\r\n        /// 2: Maybe\r\n        /// </summary>\r\n        /// <param name=\"eventId\"></param>\r\n        /// <param name=\"state\"></param>\r\n        /// <returns>List JSON</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "eventId",
                    "param_name": "eventId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "state",
                    "param_name": "state",
                    "param_type": "ParticipationState",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var eventUserEcoleAlreadyExist = false;\r\n            try\r\n            {\r\n                var eventUserEcole = await\r\n                    _db.EventUserEcoles.FirstOrDefaultAsync(\r\n                        p => p.EcoleId == ecoleId && p.UserId == userId && p.EventId == eventId);\r\n\r\n                if (eventUserEcole == null)\r\n                {\r\n                    eventUserEcole = new EventUserEcole()\r\n                    {\r\n                        UserId = userId,\r\n                        EcoleId = ecoleId,\r\n                        Participation = (int)state,\r\n                        EventId = eventId\r\n                    };\r\n\r\n                    _db.EventUserEcoles.Add(eventUserEcole);\r\n                }\r\n                else\r\n                {\r\n                    eventUserEcoleAlreadyExist = true;\r\n                    eventUserEcole.Participation = (int)state;\r\n                    _db.Entry(eventUserEcole).State = EntityState.Modified;\r\n                }\r\n\r\n                await _db.SaveChangesAsync();\r\n\r\n                await _db.Entry(eventUserEcole).Reference(e => e.User).LoadAsync();\r\n\r\n                var hub = GlobalHost.ConnectionManager.GetHubContext<LiveHub>();\r\n                hub.Clients.All.addOrModifyParticipant(new EventUserParticipationViewModel\r\n                {\r\n                    User = await GetUsers(_db)\r\n                        .Where(user => user.Id == eventUserEcole.UserId)\r\n                        .Select(GetUserMapExpression(ecoleId))\r\n                        .FirstOrDefaultAsync(),\r\n                    Participation = eventUserEcole.Participation,\r\n                    Presence = eventUserEcole.Presence\r\n                }, eventUserEcoleAlreadyExist);\r\n\r\n                return Ok();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Set Event Ecole User\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the participation status of a user in a specific event for a school, creating a new entry if necessary.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "eventId",
                        "param_name": "eventId",
                        "param_desc": "The ID of the event for which the participation status needs to be updated."
                    },
                    {
                        "name": "state",
                        "param_name": "state",
                        "param_desc": "The new participation state to be set for the user in the specified event."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the participation status of a user in a specific event for a school, creating a new entry if necessary.\n/// </summary>\n/// <param name=\"eventId\">The ID of the event for which the participation status needs to be updated.</param>\n/// <param name=\"state\">The new participation state to be set for the user in the specified event.</param>\n",
            "code_chunks": null
        },
        {
            "name": "SetEventParticipationFromMailAync",
            "code_start_index": 10700,
            "method_name": "SetEventParticipationFromMailAync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// set participate Events\r\n        /// 0: No\r\n        /// 1: Yes\r\n        /// 2: Maybe\r\n        /// </summary>\r\n        /// <param name=\"eventId\"></param>\r\n        /// <param name=\"state\"></param>\r\n        /// <param name=\"token\"></param>\r\n        /// <returns>List JSON</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "eventId",
                    "param_name": "eventId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "state",
                    "param_name": "state",
                    "param_type": "ParticipationState",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "token",
                    "param_name": "token",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentSchoolCode = _config.GetSchoolCode();\r\n\r\n\r\n            PasswordSetupToken payload;\r\n            try\r\n            {\r\n                // On d\u00e9code le token avec le secret et on le transforme en objet\r\n                payload = JWT.Decode<PasswordSetupToken>(token, _config.GetPasswordSetupKey(), JwsAlgorithm.HS256);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Warning(e, \"Error decoding the token\");\r\n                return BadRequest(\"Error decoding the token\");\r\n            }\r\n\r\n            DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(payload.Expiration);\r\n\r\n            if (dateTimeOffset.UtcDateTime < DateTime.Now)\r\n            {\r\n                return BadRequest(\"Token has expired.\");\r\n            }\r\n\r\n            // On retourne false si le client du token n'est pas parsable\r\n            if (payload.UserId == 0)\r\n            {\r\n                return BadRequest(\"Client id is null (0)\");\r\n            }\r\n\r\n            // On retourne false si le client du token n'est pas parsable\r\n            if (payload.SchoolId == 0)\r\n            {\r\n                return BadRequest(\"School id is null (0)\");\r\n            }\r\n\r\n            // On r\u00e9cup\u00e8re l'utilisateur\r\n            var user = await _db.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == payload.UserId);\r\n\r\n            if (user == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"No user was found.\");\r\n            }\r\n\r\n            var school = DataCache.GetSchools(_db).First(e => e.Id == payload.SchoolId);\r\n\r\n            if (school == null) return Content(HttpStatusCode.NotFound, \"No school was found.\");\r\n\r\n            // On g\u00e8re si le token est utilis\u00e9 sur une autre \u00e9cole\r\n            if (currentSchoolCode != school.Code)\r\n            {\r\n                return BadRequest(\"This token was issued for another school.\");\r\n            }\r\n\r\n            var eventUserEcoleAlreadyExist = false;\r\n            try\r\n            {\r\n                var eventUserEcole = await _db.EventUserEcoles.FirstOrDefaultAsync(p => p.EcoleId == school.Id && p.UserId == user.Id && p.EventId == eventId);\r\n\r\n                if (eventUserEcole == null)\r\n                {\r\n                    eventUserEcole = new EventUserEcole()\r\n                    {\r\n                        UserId = user.Id,\r\n                        EcoleId = school.Id,\r\n                        Participation = (int)state,\r\n                        EventId = eventId\r\n                    };\r\n\r\n                    _db.EventUserEcoles.Add(eventUserEcole);\r\n                }\r\n                else\r\n                {\r\n                    eventUserEcoleAlreadyExist = true;\r\n                    eventUserEcole.Participation = (int)state;\r\n                    _db.Entry(eventUserEcole).State = EntityState.Modified;\r\n                }\r\n\r\n                await _db.SaveChangesAsync();\r\n\r\n                await _db.Entry(eventUserEcole).Reference(e => e.User).LoadAsync();\r\n\r\n                var hub = GlobalHost.ConnectionManager.GetHubContext<LiveHub>();\r\n                hub.Clients.All.addOrModifyParticipant(new EventUserParticipationViewModel\r\n                {\r\n                    User = await GetUsers(_db)\r\n                        .Where(u => u.Id == eventUserEcole.UserId)\r\n                        .Select(GetUserMapExpression(school.Id))\r\n                        .FirstOrDefaultAsync(),\r\n                    Participation = eventUserEcole.Participation,\r\n                    Presence = eventUserEcole.Presence\r\n                }, eventUserEcoleAlreadyExist);\r\n\r\n                return Ok();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Set Event Ecole User\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the participation of an event user from an email token, handling various validation checks and notifications.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "eventId",
                        "param_name": "eventId",
                        "param_desc": "The ID of the event for which the participation needs to be updated."
                    },
                    {
                        "name": "state",
                        "param_name": "state",
                        "param_desc": "The state to set for the participation (e.g., 'Active', 'Pending', 'Cancelled')."
                    },
                    {
                        "name": "token",
                        "param_name": "token",
                        "param_desc": "The token received from the email to verify and update the event participation."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the participation of an event user from an email token, handling various validation checks and notifications.\n/// </summary>\n/// <param name=\"eventId\">The ID of the event for which the participation needs to be updated.</param>\n/// <param name=\"state\">The state to set for the participation (e.g., 'Active', 'Pending', 'Cancelled').</param>\n/// <param name=\"token\">The token received from the email to verify and update the event participation.</param>\n",
            "code_chunks": null
        },
        {
            "name": "HasFormateurUserClickedAsync",
            "code_start_index": 14987,
            "method_name": "HasFormateurUserClickedAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Retourne si le ownerUser de l'\u00e9v\u00e9nement a cliqu\u00e9 sur l'alerte\r\n        /// </summary>\r\n        /// <param name=\"eventId\">Id de l'\u00e9v\u00e9menent</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "eventId",
                    "param_name": "eventId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            var hasFormateurUserClicked = await _db.EventUserEcoles\r\n                                               .AsNoTracking()\r\n                                              .Where(eue => eue.UserId == userId && eue.EventId == eventId)\r\n                                              .Select(eue => eue.UserHasClicked)\r\n                                              .FirstOrDefaultAsync();\r\n\r\n            return Ok(hasFormateurUserClicked);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve whether a specific user has clicked on a formateur event asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "eventId",
                        "param_name": "eventId",
                        "param_desc": "The unique identifier of the event for which the click status needs to be checked. It should be of type integer."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve whether a specific user has clicked on a formateur event asynchronously.\n/// </summary>\n/// <param name=\"eventId\">The unique identifier of the event for which the click status needs to be checked. It should be of type integer.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AcceptAlertAsync",
            "code_start_index": 15686,
            "method_name": "AcceptAlertAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "eventId",
                    "param_name": "eventId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var eventsUsersEcole = await _db.EventUserEcoles\r\n                                       .Where(eue => eue.UserId == userId && eue.EventId == eventId)\r\n                                       .FirstOrDefaultAsync();\r\n\r\n            eventsUsersEcole.UserHasClicked = true;\r\n\r\n            _db.Entry(eventsUsersEcole).State = EntityState.Modified;\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return StatusCode(HttpStatusCode.NoContent);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"AcceptAlert\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the user's click status for a specific event in the database.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "eventId",
                        "param_name": "eventId",
                        "param_desc": "The ID of the event for which the user's click status is being updated."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the user's click status for a specific event in the database.\n/// </summary>\n/// <param name=\"eventId\">The ID of the event for which the user's click status is being updated.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetUpcomingEventAsync",
            "code_start_index": 16680,
            "method_name": "GetUpcomingEventAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "days",
                    "param_name": "days",
                    "param_type": "int",
                    "has_default_value": true,
                    "default_value": "7",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var endDate = DateTime.Now.AddDays(days);\r\n\r\n            #region Upcoming Modules\r\n\r\n            var inscriptionsMatieresIds = _db.InscriptionMatieres\r\n                                             .AsNoTracking()\r\n                                             .Include(e => e.Matiere)\r\n                                             .Where(e => e.EcoleId == ecoleId && e.UserId == userId && e.DateDemarrage != null && e.DateDemarrage < DateTime.Now && e.DateDelete == null)\r\n                                             .Select(im => im.Id);\r\n\r\n            var upcomingModules = await _db.InscriptionModules\r\n                                           .AsNoTracking()\r\n                                           .Where(im => inscriptionsMatieresIds.Contains(im.InscriptionMatiereId)\r\n                                                        && im.DateDemarrage != null\r\n                                                        && im.DateDemarrage > DateTime.Now\r\n                                                        && im.DateDemarrage < endDate\r\n                                                        && im.DateDelete == null)\r\n                                           .Select(im => new UpcomingModulesViewModel\r\n                                           {\r\n                                               Type = \"Module\",\r\n                                               Module = im.Module.Libelle,\r\n                                               Matiere = im.InscriptionMatiere.Matiere.Libelle,\r\n                                               StartDate = im.DateDemarrage.Value,\r\n                                           })\r\n                                           .ToListAsync();\r\n\r\n            #endregion\r\n\r\n            #region Upcoming Events\r\n\r\n            var startDate = DateTime.Now.AddHours(-1);\r\n\r\n            var upcomingUserEvents = await (await _eventsService.GetUsersEvents(_db, userId, ecoleId, string.Empty))\r\n                                           .Where(e => e.DateDebut > startDate\r\n                                                       && e.DateDebut < endDate\r\n                                                       && e.DateFin > DateTime.Now)\r\n                                           .Select(e => new UpcomingEventViewModel\r\n                                           {\r\n                                               Type = \"Event\",\r\n                                               EventId = e.Id,\r\n                                               Title = e.Titre,\r\n                                               StartDate = e.DateDebut,\r\n                                               EndDate = e.DateFin,\r\n                                               Description = e.Description,\r\n                                               EventType = new EventTypeViewModel\r\n                                               {\r\n                                                   EventTypeId = e.EventTypeId,\r\n                                                   Code = e.EventType.Code,\r\n                                                   Label = e.EventType.Libelle\r\n                                               },\r\n                                           })\r\n                                           .ToListAsync();\r\n\r\n            #endregion\r\n\r\n            var result = new List<IUpcoming>();\r\n            result.AddRange(upcomingUserEvents);\r\n            result.AddRange(upcomingModules);\r\n\r\n            return Ok(result.GroupBy(e => e.StartDate.ToString(\"yyyy/MM/dd\"))\r\n                            .OrderBy(e => e.Key)\r\n                            .ToDictionary(e => e.Key));\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve upcoming modules and events for a specified user within a certain time frame, grouping them by start date.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "days",
                        "param_name": "days",
                        "param_desc": "The number of days within which to retrieve upcoming modules and events. Default value is 7."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve upcoming modules and events for a specified user within a certain time frame, grouping them by start date.\n/// </summary>\n/// <param name=\"days\">The number of days within which to retrieve upcoming modules and events. Default value is 7.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetUserMapExpression",
            "code_start_index": 20523,
            "method_name": "GetUserMapExpression",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "ecoleId",
                    "param_name": "ecoleId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            return user => new NewsfeedUserViewModel\r\n            {\r\n                UserId = user.Id,\r\n                Pseudo = user.Pseudo,\r\n                ProfilePicture = (user.FileIdPhotoProfil != null) ? user.UploadedFile_FileIdPhotoProfil.FileUrl : user.PhotoProfil,\r\n                CoverPicture = (user.FileIdHeaderProfil != null) ? user.UploadedFile_FileIdHeaderProfil.FileUrl : user.HeaderProfil,\r\n                Internal = user.Interne,\r\n                UserType =\r\n                    user.EcoleUsers.Where(eu => eu.EcoleId == ecoleId)\r\n                        .Select(eux => new NewsfeedUserTypeViewModel\r\n                        {\r\n                            Code = eux.UserType.Code,\r\n                            Label = eux.UserType.Libelle\r\n                        }).FirstOrDefault(),\r\n                Promotions =\r\n                    user.InscriptionPromotions\r\n                        .Where(inscriptionPromotion =>\r\n                            inscriptionPromotion.EcoleId == ecoleId\r\n                            && (inscriptionPromotion.DateDelete == null || inscriptionPromotion.DateDelete > DateTime.Now)\r\n                            && ((inscriptionPromotion.DateFinAcces == null\r\n                                 && inscriptionPromotion.Promotion.DateFinPromo > DateTime.Now)\r\n                                || inscriptionPromotion.DateFinAcces > DateTime.Now))\r\n                        .Select(ip => new NewsfeedUserPromotionViewModel\r\n                        {\r\n                            PromotionId = ip.PromotionId,\r\n                            Promotion = ip.Promotion.Libelle,\r\n                            Parcours = ip.Promotion.Parcour.Titre,\r\n                            CodeParcours = ip.Promotion.Parcour.Code,\r\n                            Session = ip.Promotion.Session\r\n                        })\r\n            };\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a mapped expression for a user in the newsfeed view model, including user details, profile and cover pictures, user type, and promotions relevant to a specific school.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "int",
                        "param_name": "int",
                        "param_desc": "The parameter representing an integer value."
                    },
                    {
                        "name": "ecoleId",
                        "param_name": "ecoleId",
                        "param_desc": "The parameter representing the unique identifier of a school (ecoleId)."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a mapped expression for a user in the newsfeed view model, including user details, profile and cover pictures, user type, and promotions relevant to a specific school.\n/// </summary>\n/// <param name=\"int\">The parameter representing an integer value.</param>\n/// <param name=\"ecoleId\">The parameter representing the unique identifier of a school (ecoleId).</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetUsers",
            "code_start_index": 22512,
            "method_name": "GetUsers",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "db",
                    "param_name": "db",
                    "param_type": "IStudiDbCtx",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            return db.Users.AsNoTracking()\r\n                .Include(u => u.UploadedFile_FileIdPhotoProfil)\r\n                .Include(u => u.UploadedFile_FileIdHeaderProfil)\r\n                .Include(u => u.EcoleUsers.Select(eu => eu.UserType))\r\n                .Include(u => u.InscriptionPromotions.Select(eu => eu.Promotion.Parcour));\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve all users with associated uploaded profile photos, school information, and promotion details.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "db",
                        "param_name": "db",
                        "param_desc": "IStudiDbCtx: The database context interface for accessing the Studi database."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve all users with associated uploaded profile photos, school information, and promotion details.\n/// </summary>\n/// <param name=\"db\">IStudiDbCtx: The database context interface for accessing the Studi database.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "LiveV2Controller"
}