{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/EvaluationsFormateurV2Controller.cs",
    "index_shift_code": 808,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "Lms.Common.Enumerations",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Configuration",
        "LMS.Controllers.V3",
        "LMS.Data",
        "LMS.Data.Extensions",
        "LMS.EvaluationQuizParser",
        "LMS.Models.ViewModels.V2.Evaluations",
        "LMS.ModelsDTOs.User",
        "LMS.PDFGenerator",
        "LMS.Services.Interfaces",
        "LMS.Utils",
        "LMS.Utils.Cache",
        "Serilog",
        "Swashbuckle.Swagger.Annotations",
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Linq",
        "System.Net",
        "System.Net.Http",
        "System.Net.Http.Headers",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description",
        "System.Web.Http.Results"
    ],
    "access_modifier": "public",
    "struct_name": "EvaluationsFormateurV2Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetEvaluationsListAsync",
            "code_start_index": 1678,
            "method_name": "GetEvaluationsListAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// List of copies awaiting correction from the trainers\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            // On r\u00e9cup\u00e8re ecoleUser pour check si l'appelant est bien un formateur\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (!estFormateur)\r\n            {\r\n                return StatusCode(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            try\r\n            {\r\n                //Inscriptions Parcours non n\u00e9cessaires :\r\n                var coursesCodesToAvoid = new List<string>() { \"Competences\", \"Options\", \"OptionsMetiers\", \"ApprentissageAugmente\"};\r\n\r\n                //Get the active userStatusId.\r\n                var actifStatusId = DataCache.GetUserStatuses(_db)\r\n                                             .First(s => s.Code == nameof(UserStatusCodeEnum.ACTIF))\r\n                                             .Id;\r\n\r\n                #region Get Json Evaluations Courses\r\n\r\n                //Get evaluations codes\r\n                var ressourcesCodes = await _db.AffectationCorrecteurs\r\n                                               .AsNoTracking()\r\n                                               .Where(af => af.CorrecteurId == userId\r\n                                                         && (af.DateDelete == null || af.DateDelete > DateTime.Now))\r\n                                               .Select(af => af.RessourcesObjectRessourcesVersion.RessourceVersion.Ressource.Code)\r\n                                               .Distinct()\r\n                                               .ToListAsync();\r\n\r\n                //Get evaluations formations\r\n                var json = await _parcoursReader.GetCoursesAndEvaluationsAsync(_db, ressourcesCodes);\r\n\r\n                #endregion\r\n\r\n                //Get list to display\r\n                var copiesToDisplay = await _db.Copies\r\n                                               .AsNoTracking()\r\n                                               .Where(copy => copy.CopieUsers.Any(cu => cu.EcoleUser.UserStatutId == actifStatusId))\r\n                                               .Where(copy => copy.LastCopieAvancementCode == nameof(CopyStatusCode.ENCOURS)\r\n                                                           && copy.DateDelete == null\r\n                                                           && !copy.ModeBrouillon\r\n                                                           && !copy.DispoLms\r\n                                                           && copy.CopieOriginales\r\n                                                                  .Where(co => (co.DateDelete == null || co.DateDelete > DateTime.Now)\r\n                                                                            && co.DateValidation < DateTime.Now)\r\n                                                                  .Where(co => !co.CopieCorrigees.Any(cc => cc.DateDelete == null || cc.DateDelete > DateTime.Now)\r\n                                                                            || co.CopieCorrigees.Any(cc => cc.CorrecteurId == userId\r\n                                                                                                        && (cc.DateDelete == null || cc.DateDelete > DateTime.Now))\r\n                                                                        )\r\n                                                                  .Any(co => co.RessourcesObjectRessourcesVersion\r\n                                                                               .AffectationCorrecteurs\r\n                                                                               .Any(ac => ac.CorrecteurId == userId\r\n                                                                                       && (ac.DateDelete == null || ac.DateDelete > DateTime.Now)))\r\n                                                           && copy.CopieUsers\r\n                                                                  .Any(cu => cu.EcoleUser\r\n                                                                               .User\r\n                                                                               .InscriptionPromotions\r\n                                                                               .Any(ip => ip.UserId == cu.EcoleUser.UserId\r\n                                                                                         && ip.EcoleId == cu.EcoleUser.EcoleId\r\n                                                                                         && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                                                                         && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now)\r\n                                                                                         && !coursesCodesToAvoid.Contains(ip.Promotion.Parcour.Code))\r\n                                                                  )\r\n                                               )\r\n                                               .Select(copy => new\r\n                                               {\r\n                                                   CopyId = copy.Id,\r\n                                                   Reference = copy.Reference,\r\n                                                   EvaluationTitle = copy.RessourceVersion.Ressource.Titre,\r\n                                                   EvaluationCode = copy.RessourceVersion.Ressource.Code,\r\n                                                   StudentName = copy.CopieUsers.Select(cu => cu.EcoleUser.User.Prenom + \" \" + cu.EcoleUser.User.Nom).FirstOrDefault(),\r\n\r\n                                                   UserInscriptions = copy.CopieUsers\r\n                                                                          .FirstOrDefault()\r\n                                                                          .EcoleUser\r\n                                                                          .User\r\n                                                                          .InscriptionPromotions\r\n                                                                          .Where(iprom => iprom.UserId == copy.CopieUsers.FirstOrDefault().EcoleUser.UserId\r\n                                                                                  && iprom.EcoleId == copy.CopieUsers.FirstOrDefault().EcoleUser.EcoleId\r\n                                                                                  && (iprom.DateDelete == null || iprom.DateDelete > DateTime.Now)\r\n                                                                                  && ((iprom.DateFinAcces == null && iprom.Promotion.DateFinPromo > DateTime.Now) || iprom.DateFinAcces > DateTime.Now)\r\n                                                                                  && !coursesCodesToAvoid.Contains(iprom.Promotion.Parcour.Code)\r\n                                                                           )\r\n                                                                          .Select(iprom => new\r\n                                                                          {\r\n                                                                              courseCode = iprom.Promotion.Parcour.Code,\r\n                                                                              promotionId = iprom.PromotionId,\r\n                                                                              ipromDateCreate = iprom.DateCreate,\r\n                                                                              blocsEvalsCodes = iprom.User\r\n                                                                                                     .EcoleUsers\r\n                                                                                                     .FirstOrDefault(eu => eu.EcoleId == iprom.EcoleId)\r\n                                                                                                     .InscriptionsBlocCompetences\r\n                                                                                                     .Where(ibc => ibc.PromotionId == iprom.PromotionId\r\n                                                                                                                && (ibc.DateDelete == null || ibc.DateDelete > DateTime.Now))\r\n                                                                                                     .Select(ibc => ibc.BlocCompetence.Code)\r\n                                                                                                     .ToList()\r\n                                                                          })\r\n                                                                          .ToList(),\r\n\r\n                                                   DateDebut = copy.CopieAvancements\r\n                                                                   .Where(ca => ca.DateDelete == null)\r\n                                                                   .OrderByDescending(ca => ca.DateDebut)\r\n                                                                   .FirstOrDefault()\r\n                                                                   .DateDebut,\r\n\r\n                                                   EcoleUserId = copy.CopieUsers\r\n                                                                     .Select(cu => cu.EcoleUserId)\r\n                                                                     .FirstOrDefault(),\r\n\r\n                                                   DateLimiteCorrection = copy.CopieOriginales\r\n                                                                              .Where(co => co.DateDelete == null)\r\n                                                                              .Max(co => co.DateLimiteCorrection),\r\n\r\n                                                   CopieOriginaleStatus = copy.CopieOriginales\r\n                                                                              .Where(co => co.DateDelete == null)\r\n                                                                              .Where(co => co.RessourcesObjectRessourcesVersion\r\n                                                                                             .AffectationCorrecteurs\r\n                                                                                             .Any(ac => ac.CorrecteurId == userId\r\n                                                                                                     && (ac.DateDelete == null || ac.DateDelete > DateTime.Now)))\r\n                                                                              .Select(co => co.CopieOriginaleAvancements\r\n                                                                                              .OrderByDescending(ca => ca.DateDebut)\r\n                                                                                              .Select(ca => ca.CopieStatut.Code)\r\n                                                                                              .FirstOrDefault())\r\n                                                                              .FirstOrDefault(),\r\n\r\n                                                   CategoryCode = copy.RessourceVersion.Ressource.ResourcesCategory.Code,\r\n                                               })\r\n                                               .Where(c => c.CopieOriginaleStatus == nameof(CopyStatusCode.ENCOURS))\r\n                                               .ToListAsync();\r\n\r\n                var result = copiesToDisplay\r\n                             .Where(copy => json.Any(j => j.EvaluationCode == copy.EvaluationCode\r\n                                                       && copy.UserInscriptions.Any(ui => ui.courseCode == j.CourseCode)))\r\n                             .Select(c => new CopyListItemViewModel\r\n                             {\r\n                                 CopyId = c.CopyId,\r\n                                 DateDebut = c.DateDebut,\r\n                                 StudentName = c.StudentName,\r\n                                 EvaluationName = c.EvaluationTitle,\r\n                                 Reference = c.Reference,\r\n                                 Parcours = c.UserInscriptions\r\n                                             .Where(ui => json.Any(j => j.CourseCode == ui.courseCode\r\n                                                                     && ui.blocsEvalsCodes.Contains(j.BlocCode)\r\n                                                                     && j.EvaluationCode == c.EvaluationCode)\r\n                                                   )\r\n                                             .OrderBy(ui => ui.ipromDateCreate)\r\n                                             .Select(ui => json.Where(j => j.CourseCode == ui.courseCode)\r\n                                                               .Select(j => j.CourseTitle)\r\n                                                               .FirstOrDefault())\r\n                                             .FirstOrDefault(),\r\n                                 Bloc = string.Empty,\r\n                                 IsLate = EvaluationsFormateurV3Controller.GetCopyRetard(c.DateLimiteCorrection.Value.DateTime) > 0,\r\n                                 Retard = EvaluationsFormateurV3Controller.GetCopyRetard(c.DateLimiteCorrection.Value.DateTime),\r\n                                 CategoryCode = c.CategoryCode\r\n                             })\r\n                             .OrderByDescending(c => c.Retard)\r\n                             .ThenByDescending(c => c.DateDebut)\r\n                             .ToList();\r\n\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error getting the trainer's evaluations list\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a list of evaluations for a trainer, filtering out unnecessary courses and displaying relevant information about ongoing evaluations.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "parameters",
                        "param_name": "parameters",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "named",
                        "param_name": "named",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a list of evaluations for a trainer, filtering out unnecessary courses and displaying relevant information about ongoing evaluations.\n/// </summary>\n/// <param name=\"no\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"parameters\">The generated description for the parameter</param>\n/// <param name=\"existing\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"method\">The generated description for the parameter</param>\n/// <param name=\"named\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"context\">The generated description for the parameter</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            // On r\u00e9cup\u00e8re ecoleUser pour check si l'appelant est bien un formateur\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (!estFormateur)\r\n            {\r\n                return StatusCode(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            try\r\n            {\r\n                //Inscriptions Parcours non n\u00e9cessaires :\r\n                var coursesCodesToAvoid = new List<string>() { \"Competences\", \"Options\", \"OptionsMetiers\", \"ApprentissageAugmente\"};\r\n\r\n                //Get the active userStatusId.\r\n                var actifStatusId = DataCache.GetUserStatuses(_db)\r\n                                             .First(s => s.Code == nameof(UserStatusCodeEnum.ACTIF))\r\n                                             .Id;\r\n\r\n                #region Get Json Evaluations Courses\r\n\r\n                //Get evaluations codes\r\n                var ressourcesCodes = await _db.AffectationCorrecteurs\r\n                                               .AsNoTracking()\r\n                                               .Where(af => af.CorrecteurId == userId\r\n                                                         && (af.DateDelete == null || af.DateDelete > DateTime.Now))\r\n                                               .Select(af => af.RessourcesObjectRessourcesVersion.RessourceVersion.Ressource.Code)\r\n                                               .Distinct()\r\n                                               .ToListAsync();\r\n\r\n                //Get evaluations formations\r\n                var json = await _parcoursReader.GetCoursesAndEvaluationsAsync(_db, ressourcesCodes);\r\n\r\n                #endregion\r\n\r\n                //Get list to display\r\n                var copiesToDisplay = await _db.Copies\r\n                                               .AsNoTracking()\r\n                                               .Where(copy => copy.CopieUsers.Any(cu => cu.EcoleUser.UserStatutId == actifStatusId))\r\n                                               .Where(copy => copy.LastCopieAvancementCode == nameof(CopyStatusCode.ENCOURS)\r\n                                                           && copy.DateDelete == null\r\n                                                           && !copy.ModeBrouillon\r\n                                                           && !copy.DispoLms\r\n                                                           && copy.CopieOriginales\r\n                                                                  .Where(co => (co.DateDelete == null || co.DateDelete > DateTime.Now)\r\n                                                                            && co.DateValidation < DateTime.Now)\r\n                                                                  .Where(co => !co.CopieCorrigees.Any(cc => cc.DateDelete == null || cc.DateDelete > DateTime.Now)\r\n                                                                            || co.CopieCorrigees.Any(cc => cc.CorrecteurId == userId\r\n                                                                                                        && (cc.DateDelete == null || cc.DateDelete > DateTime.Now))\r\n                                                                        )\r\n                                                                  .Any(co => co.RessourcesObjectRessourcesVersion\r\n                                                                               .AffectationCorrecteurs\r\n                                                                               .Any(ac => ac.CorrecteurId == userId\r\n                                                                                       && (ac.DateDelete == null || ac.DateDelete > DateTime.Now)))\r\n                                                           && copy.CopieUsers\r\n                                                                  .Any(cu => cu.EcoleUser\r\n                                                                               .User\r\n                                                                               .InscriptionPromotions\r\n                                                                               .Any(ip => ip.UserId == cu.EcoleUser.UserId\r\n                                                                                         && ip.EcoleId == cu.EcoleUser.EcoleId\r\n                                                                                         && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                                                                         && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now)\r\n                                                                                         && !coursesCodesToAvoid.Contains(ip.Promotion.Parcour.Code))\r\n                                                                  )\r\n                                               )\r\n                                               .Select(copy => new\r\n                                               {\r\n                                                   CopyId = copy.Id,\r\n                                                   Reference = copy.Reference,\r\n                                                   EvaluationTitle = copy.RessourceVersion.Ressource.Titre,\r\n                                                   EvaluationCode = copy.RessourceVersion.Ressource.Code,\r\n                                                   StudentName = copy.CopieUsers.Select(cu => cu.EcoleUser.User.Prenom + \" \" + cu.EcoleUser.User.Nom).FirstOrDefault(),\r\n\r\n                                                   UserInscriptions = copy.CopieUsers\r\n                                                                          .FirstOrDefault()\r\n                                                                          .EcoleUser\r\n                                                                          .User\r\n                                                                          .InscriptionPromotions\r\n                                                                          .Where(iprom => iprom.UserId == copy.CopieUsers.FirstOrDefault().EcoleUser.UserId\r\n                                                                                  && iprom.EcoleId == copy.CopieUsers.FirstOrDefault().EcoleUser.EcoleId\r\n                                                                                  && (iprom.DateDelete == null || iprom.DateDelete > DateTime.Now)\r\n                                                                                  && ((iprom.DateFinAcces == null && iprom.Promotion.DateFinPromo > DateTime.Now) || iprom.DateFinAcces > DateTime.Now)\r\n                                                                                  && !coursesCodesToAvoid.Contains(iprom.Promotion.Parcour.Code)\r\n                                                                           )\r\n                                                                          .Select(iprom => new\r\n                                                                          {\r\n                                                                              courseCode = iprom.Promotion.Parcour.Code,\r\n                                                                              promotionId = iprom.PromotionId,\r\n                                                                              ipromDateCreate = iprom.DateCreate,\r\n                                                                              blocsEvalsCodes = iprom.User\r\n                                                                                                     .EcoleUsers\r\n                                                                                                     .FirstOrDefault(eu => eu.EcoleId == iprom.EcoleId)\r\n                                                                                                     .InscriptionsBlocCompetences",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": ".Where(ibc => ibc.PromotionId == iprom.PromotionId\r\n                                                                                                                && (ibc.DateDelete == null || ibc.DateDelete > DateTime.Now))\r\n                                                                                                     .Select(ibc => ibc.BlocCompetence.Code)\r\n                                                                                                     .ToList()\r\n                                                                          })\r\n                                                                          .ToList(),\r\n\r\n                                                   DateDebut = copy.CopieAvancements\r\n                                                                   .Where(ca => ca.DateDelete == null)\r\n                                                                   .OrderByDescending(ca => ca.DateDebut)\r\n                                                                   .FirstOrDefault()\r\n                                                                   .DateDebut,\r\n\r\n                                                   EcoleUserId = copy.CopieUsers\r\n                                                                     .Select(cu => cu.EcoleUserId)\r\n                                                                     .FirstOrDefault(),\r\n\r\n                                                   DateLimiteCorrection = copy.CopieOriginales\r\n                                                                              .Where(co => co.DateDelete == null)\r\n                                                                              .Max(co => co.DateLimiteCorrection),\r\n\r\n                                                   CopieOriginaleStatus = copy.CopieOriginales\r\n                                                                              .Where(co => co.DateDelete == null)\r\n                                                                              .Where(co => co.RessourcesObjectRessourcesVersion\r\n                                                                                             .AffectationCorrecteurs\r\n                                                                                             .Any(ac => ac.CorrecteurId == userId\r\n                                                                                                     && (ac.DateDelete == null || ac.DateDelete > DateTime.Now)))\r\n                                                                              .Select(co => co.CopieOriginaleAvancements\r\n                                                                                              .OrderByDescending(ca => ca.DateDebut)\r\n                                                                                              .Select(ca => ca.CopieStatut.Code)\r\n                                                                                              .FirstOrDefault())\r\n                                                                              .FirstOrDefault(),\r\n\r\n                                                   CategoryCode = copy.RessourceVersion.Ressource.ResourcesCategory.Code,\r\n                                               })\r\n                                               .Where(c => c.CopieOriginaleStatus == nameof(CopyStatusCode.ENCOURS))\r\n                                               .ToListAsync();\r\n\r\n                var result = copiesToDisplay\r\n                             .Where(copy => json.Any(j => j.EvaluationCode == copy.EvaluationCode\r\n                                                       && copy.UserInscriptions.Any(ui => ui.courseCode == j.CourseCode)))\r\n                             .Select(c => new CopyListItemViewModel\r\n                             {\r\n                                 CopyId = c.CopyId,\r\n                                 DateDebut = c.DateDebut,\r\n                                 StudentName = c.StudentName,\r\n                                 EvaluationName = c.EvaluationTitle,\r\n                                 Reference = c.Reference,\r\n                                 Parcours = c.UserInscriptions\r\n                                             .Where(ui => json.Any(j => j.CourseCode == ui.courseCode\r\n                                                                     && ui.blocsEvalsCodes.Contains(j.BlocCode)\r\n                                                                     && j.EvaluationCode == c.EvaluationCode)\r\n                                                   )\r\n                                             .OrderBy(ui => ui.ipromDateCreate)\r\n                                             .Select(ui => json.Where(j => j.CourseCode == ui.courseCode)\r\n                                                               .Select(j => j.CourseTitle)\r\n                                                               .FirstOrDefault())\r\n                                             .FirstOrDefault(),\r\n                                 Bloc = string.Empty,\r\n                                 IsLate = EvaluationsFormateurV3Controller.GetCopyRetard(c.DateLimiteCorrection.Value.DateTime) > 0,\r\n                                 Retard = EvaluationsFormateurV3Controller.GetCopyRetard(c.DateLimiteCorrection.Value.DateTime),\r\n                                 CategoryCode = c.CategoryCode\r\n                             })\r\n                             .OrderByDescending(c => c.Retard)\r\n                             .ThenByDescending(c => c.DateDebut)\r\n                             .ToList();\r\n\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error getting the trainer's evaluations list\");\r\n                return InternalServerError();\r\n            }\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "GetQcmAnswersAsync",
            "code_start_index": 15734,
            "method_name": "GetQcmAnswersAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // On r\u00e9cup\u00e8re ecoleUser pour check si l'appelant est bien un formateur\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (!estFormateur)\r\n            {\r\n                return new HttpResponseMessage(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            // Make sure that the user has a copy\r\n            var copyUser = await _db.CopieUsers\r\n                                    .Include(cu => cu.Copy.RessourceVersion)\r\n                                    .Include(cu => cu.Copy.CopieOriginales.Select(co => co.CopieCorrigees))\r\n                                    .Where(cu =>\r\n                                               cu.CopieId == copyId && !cu.Copy.DispoLms\r\n                                                                    && !cu.Copy.ModeBrouillon) // copie en cours de correction uniquement\r\n                                    .FirstOrDefaultAsync();\r\n\r\n            if (copyUser == null)\r\n            {\r\n                return new HttpResponseMessage(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            var copieOriginale = copyUser.Copy.CopieOriginales.FirstOrDefault(co => co.DateDelete == null && co.Filename != null);\r\n\r\n            if (copieOriginale == null)\r\n            {\r\n                return new HttpResponseMessage(HttpStatusCode.InternalServerError);\r\n            }\r\n\r\n            var copieCorrigee = copieOriginale.CopieCorrigees.FirstOrDefault(cc => cc.DateDelete == null && cc.QcmXmlResult != null);\r\n\r\n            if (copieCorrigee == null)\r\n            {\r\n                return new HttpResponseMessage(HttpStatusCode.InternalServerError);\r\n            }\r\n\r\n            try\r\n            {\r\n                // parse the detailed results XML\r\n                //var quizReport = QuizParser.Parse(xmlFile);\r\n                var quizReport = QuizParser.Parse(copieCorrigee.QcmXmlResult);\r\n\r\n                var pdfGen = new QuizResultsPdfGenerator(quizReport);\r\n\r\n                var response = new HttpResponseMessage(HttpStatusCode.OK)\r\n                               {\r\n                                   Content = pdfGen.GeneratePdfByteArrayContent(true)\r\n                               };\r\n\r\n                response.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/pdf\");\r\n                return response;\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Erreur lors du parsing du XML du QCM\");\r\n                return new HttpResponseMessage(HttpStatusCode.InternalServerError);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve and generate a PDF report for a corrected quiz from a specified user's copy, only if the caller is a teacher and the copy is in correction process.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The ID of the copy for which the PDF report will be generated. It should be an integer."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve and generate a PDF report for a corrected quiz from a specified user's copy, only if the caller is a teacher and the copy is in correction process.\n/// </summary>\n/// <param name=\"copyId\">The ID of the copy for which the PDF report will be generated. It should be an integer.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetEvaluationGridInfoAsync",
            "code_start_index": 19033,
            "method_name": "GetEvaluationGridInfoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Returns information about an empty JotForm's evaluation's grid, or null.\r\n        /// </summary>\r\n        /// <param name=\"userId\">The identifier of the user who takes the evaluation.</param>\r\n        /// <param name=\"evaluationId\">The evaluation identifier.</param>\r\n        /// <returns>Information about a JotForm's evaluation's grid, or null.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "userId",
                    "param_name": "userId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "evaluationId",
                    "param_name": "evaluationId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                // Retrieve the empty evaluation grid information.\r\n                var evalGridInfoDto = await _formsService.GetEvaluationGridInfoAsync(userId, evaluationId);\r\n\r\n                // Build the viewmodel.\r\n                var evalGridInfoVm = evalGridInfoDto is null\r\n                    ? null\r\n                    : new EvaluationGridInfosViewModel(\r\n                        userId,\r\n                        evalGridInfoDto.ParcoursId,\r\n                        evalGridInfoDto.ParcoursCode,\r\n                        evalGridInfoDto.ParcoursName,\r\n                        evalGridInfoDto.EmptyEvaluationGridUrl);\r\n\r\n                // Return the viewmodel.\r\n                return Ok(evalGridInfoVm);\r\n            }\r\n            catch\r\n            {\r\n                string errorMsg = $\"Error while searching for an evaluation grid information. UserId = {userId}, EvaluationId = {evaluationId}.\";\r\n                Log.Error(errorMsg);\r\n                return BadRequest(errorMsg);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the evaluation grid information asynchronously and return the corresponding viewmodel, handling errors if necessary.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "evaluationId",
                        "param_name": "evaluationId",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the evaluation grid information asynchronously and return the corresponding viewmodel, handling errors if necessary.\n/// </summary>\n/// <param name=\"userId\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"evaluationId\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "EvaluationsFormateurV2Controller"
}