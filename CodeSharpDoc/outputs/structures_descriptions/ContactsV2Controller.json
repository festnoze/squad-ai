{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/ContactsV2Controller.cs",
    "index_shift_code": 356,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Models.ViewModels.V2.Newsfeed",
        "LMS.Utils",
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Linq",
        "System.Web.Http",
        "System.Web.Http.Description"
    ],
    "access_modifier": "public",
    "struct_name": "ContactsV2Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetContactsList",
            "code_start_index": 1153,
            "method_name": "GetContactsList",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Returns a list of all the users matching the following conditions \r\n        /// * Same school \r\n        /// * Not suspended\r\n        /// * Not test accounts and not\r\n        /// * Not official\r\n        /// * Not the current user\r\n        /// * Promo not over and not deleted\r\n        /// </summary>\r\n        /// <returns>Users list</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var usersList = _db.Users.AsNoTracking()\r\n                .Include(u => u.UploadedFile_FileIdPhotoProfil)\r\n                .Include(u => u.UploadedFile_FileIdHeaderProfil)\r\n                .Include(m => m.EcoleUsers.Select(eu => eu.UserType))\r\n                .Include(m => m.InscriptionPromotions.Select(ip => ip.Promotion.Parcour))\r\n                .Where(user => user.EcoleUsers.Any(eu => eu.EcoleId == ecoleId && !eu.Suspension && user.Id != userId && !user.Test))\r\n                .Where(u => !u.InscriptionPromotions.All(inscriptionPromotion =>\r\n                        inscriptionPromotion.EcoleId == ecoleId\r\n                        && (inscriptionPromotion.DateDelete == null || inscriptionPromotion.DateDelete > DateTime.Now)\r\n                        && ((inscriptionPromotion.DateFinAcces == null\r\n                             && inscriptionPromotion.Promotion.DateFinPromo > DateTime.Now)\r\n                            || inscriptionPromotion.DateFinAcces > DateTime.Now)))\r\n                .Select(user => new NewsfeedUserViewModel\r\n                {\r\n                    UserId = user.Id,\r\n                    Pseudo = user.Pseudo,\r\n                    ProfilePicture = (user.FileIdPhotoProfil != null) ? user.UploadedFile_FileIdPhotoProfil.FileUrl : user.PhotoProfil,\r\n                    CoverPicture = (user.FileIdHeaderProfil != null) ? user.UploadedFile_FileIdHeaderProfil.FileUrl : user.HeaderProfil,\r\n                    Internal = user.Interne,\r\n\r\n                    UserType =\r\n                        user.EcoleUsers.Where(eu => eu.EcoleId == ecoleId)\r\n                            .Select(eu => new NewsfeedUserTypeViewModel\r\n                            {\r\n                                Code = eu.UserType.Code,\r\n                                Label = eu.UserType.Libelle\r\n                            }).FirstOrDefault(),\r\n                    Promotions =\r\n                        user.InscriptionPromotions.Where(inscriptionPromotion =>\r\n                                inscriptionPromotion.EcoleId == ecoleId\r\n                                && (inscriptionPromotion.DateDelete == null || inscriptionPromotion.DateDelete > DateTime.Now)\r\n                                && ((inscriptionPromotion.DateFinAcces == null\r\n                                     && inscriptionPromotion.Promotion.DateFinPromo > DateTime.Now)\r\n                                    || inscriptionPromotion.DateFinAcces > DateTime.Now))\r\n                            .Select(ip => new NewsfeedUserPromotionViewModel\r\n                            {\r\n                                PromotionId = ip.PromotionId,\r\n                                Promotion = ip.Promotion.Libelle,\r\n                                Parcours = ip.Promotion.Parcour.Titre,\r\n                                CodeParcours = ip.Promotion.Parcour.Code,\r\n                                Session = ip.Promotion.Session\r\n                            })\r\n                })\r\n                .ToList();\r\n\r\n            return Ok(usersList);\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a list of contacts for the current user from the database, filtering out suspended, test, and unauthorized users, and including their profile and cover pictures, user type, and promotions.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The list of parameters is 'no parameters'."
                    },
                    {
                        "name": "method_name",
                        "param_name": "method_name",
                        "param_desc": "The existing method named 'GetContactsList'."
                    },
                    {
                        "name": "method_purpose",
                        "param_name": "method_purpose",
                        "param_desc": "The method purpose is 'Retrieve a list of contacts for the current user from the database, filtering out suspended, test, and unauthorized users, and including their profile and cover pictures, user type, and promotions'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a list of contacts for the current user from the database, filtering out suspended, test, and unauthorized users, and including their profile and cover pictures, user type, and promotions.\n/// </summary>\n/// <param name=\"no\">The list of parameters is 'no parameters'.</param>\n/// <param name=\"method_name\">The existing method named 'GetContactsList'.</param>\n/// <param name=\"method_purpose\">The method purpose is 'Retrieve a list of contacts for the current user from the database, filtering out suspended, test, and unauthorized users, and including their profile and cover pictures, user type, and promotions'.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "ContactsV2Controller"
}