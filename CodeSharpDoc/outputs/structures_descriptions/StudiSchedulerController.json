{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/StudiSchedulerController.cs",
    "index_shift_code": 912,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Data.Entity.Core",
        "System.Linq",
        "System.Net",
        "System.Threading.Tasks",
        "System.Web.Http",
        "Hangfire",
        "Lms.Common.Enumerations",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Configuration",
        "LMS.Controllers.V3",
        "LMS.Data",
        "LMS.Models.BindingModels.V2",
        "LMS.Models.ViewModels.V2.StudiScheduler",
        "LMS.Notifications",
        "LMS.Notifications.V2",
        "LMS.Notifications.V3",
        "LMS.Notifications.V3.NotificationDtoModels",
        "LMS.Services.Interfaces",
        "LMS.Utils",
        "LMS.Utils.BBCollaborate",
        "LMS.Utils.Cache",
        "Newtonsoft.Json",
        "Serilog",
        "Studi.Scheduler.Dto",
        "Studi.SchedulerApiClient",
        "Studi.SchedulerApiClient.Exceptions"
    ],
    "access_modifier": "public",
    "struct_name": "StudiSchedulerController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetExistingAppointmentAsync",
            "code_start_index": 2296,
            "method_name": "GetExistingAppointmentAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// R\u00e9cup\u00e8re les missions pour une liste de promotion\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "evaluationId",
                    "param_name": "evaluationId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n            var schoolUserId = User.Identity.GetSchoolUserId();\r\n\r\n            // Make sure that the user has access to evals\r\n            var parcoursCodes = await _db.InscriptionPromotions\r\n                .Include(ip => ip.Promotion.Parcour)\r\n                .Where(ip => ip.Evaluation)\r\n                .Where(RepositoryV3.InscriptionsPromotionsAreInProgressForThisUserAndSchool(currentUser.Id, currentUser.SchoolId))\r\n                .Select(ip => ip.Promotion.Parcour.Code)\r\n                .Distinct()\r\n                .ToListAsync();\r\n\r\n            if (parcoursCodes == null)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"cette \u00e9valuation n'est pas pr\u00e9sente dans votre parcours de formation\");\r\n            }\r\n\r\n            var parcoursJson = await _parcoursReader.GetParcoursJsonAsync(_db, currentUser.Id, currentUser.SchoolId);\r\n\r\n            var jsonEvaluation = parcoursJson\r\n                .Where(e => parcoursCodes.Contains(e.Key))\r\n                .Select(e => e.Value)\r\n                .SelectMany(e => e.Blocs)\r\n                .SelectMany(b => b.Evaluations)\r\n                .FirstOrDefault(e => e.Id == evaluationId);\r\n\r\n            if (jsonEvaluation == null)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"cette \u00e9valuation n'est pas pr\u00e9sente dans votre parcours de formation\");\r\n            }\r\n\r\n            var evalInfo = await _db.Ressources\r\n                .Where(q => q.Id == evaluationId)\r\n                .Select(q => new\r\n                {\r\n                    q.Titre,\r\n                    q.Descriptif,\r\n                    q.EvaluationCategorie.Code\r\n                })\r\n                .FirstOrDefaultAsync();\r\n\r\n            var data = await _db.CopieUsers\r\n                .AsNoTracking()\r\n                .Where(q => q.EcoleUserId == schoolUserId && q.Copy.RessourceVersion.RessourceId == evaluationId && q.Copy.DateDelete == null)\r\n                .Select(q => new\r\n                {\r\n                    Appointment = new Appointment\r\n                    {\r\n                        BeginDateTime = q.Copy.Session.StartTime,\r\n                        EndDateTime = q.Copy.Session.EndTime,\r\n                        Url = q.Copy.Session.UserSessions\r\n                            .Where(us => us.EcoleUserId == schoolUserId)\r\n                            .Select(us => us.Url)\r\n                            .FirstOrDefault()\r\n                    },\r\n                    Copy = new OralCopy\r\n                    {\r\n                        Reference = q.Copy.Reference,\r\n                        Score = q.Copy.NoteFinale,\r\n                        LastAdvancementCode = q.Copy.LastCopieAvancementCode,\r\n                        CorrectedCopy = q.Copy.CopieOriginales\r\n                            .Select(co => co.CopieCorrigees\r\n                                .Where(cc => cc.DateDelete == null)\r\n                                .Select(cc => new OralCopyCorrection\r\n                                {\r\n                                    Id = cc.Id,\r\n                                    AudioFile = cc.UploadedFile_AudioFileId != null ? cc.UploadedFile_AudioFileId.FileUrl : cc.AudioFile,\r\n                                    FileUrl = cc.UploadFile.FileUrl,\r\n                                    FileName = cc.UploadFile.FileName,\r\n                                    Commentaire = cc.Commentaire\r\n                                })\r\n                                .FirstOrDefault())\r\n                            .FirstOrDefault(),\r\n                        CategoryCode = q.Copy.RessourceVersion.Ressource.EvaluationCategorie.Code,\r\n                        RenduTypeCode = q.Copy.RessourceVersion.Ressource.EvaluationTypeRendu.Code\r\n                    }\r\n                })\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (data != null)\r\n            {\r\n                if (!jsonEvaluation.DeliveryNote)\r\n                {\r\n                    if (jsonEvaluation.InfoNote && data.Copy.Score != null)\r\n                    {\r\n                        data.Copy.MarkDescription = data.Copy.Score >= 10 ? \"Vous avez obtenu une note sup\u00e9rieure \u00e0 la moyenne.\" : \"Vous avez obtenu une note inf\u00e9rieure \u00e0 la moyenne.\";\r\n                    }\r\n\r\n                    data.Copy.Score = null;\r\n                }\r\n\r\n                if (!jsonEvaluation.DeliveryCopy)\r\n                {\r\n                    data.Copy.LastAdvancementCode = \"\";\r\n                    data.Copy.CorrectedCopy = null;\r\n                }\r\n            }\r\n\r\n            return Ok(new StudiSchedulerOralInfoViewModel\r\n            {\r\n                EvalTitle = evalInfo.Titre,\r\n                EvalDescriptif = evalInfo.Descriptif,\r\n                EvalCategorieCode = evalInfo.Code,\r\n                Appointment = data?.Appointment,\r\n                Copy = data?.Copy,\r\n                EvalCorrectionType = null,\r\n                ScoreInfo = jsonEvaluation.InfoNote\r\n            });\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve information about an existing appointment for a specific evaluation within a user's training program, including appointment details, score, and correction information.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "evaluationId",
                        "param_name": "evaluationId",
                        "param_desc": "The ID of the evaluation for which information about an existing appointment needs to be retrieved. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve information about an existing appointment for a specific evaluation within a user's training program, including appointment details, score, and correction information.\n/// </summary>\n/// <param name=\"evaluationId\">The ID of the evaluation for which information about an existing appointment needs to be retrieved. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetSessions",
            "code_start_index": 7612,
            "method_name": "GetSessions",
            "existing_summary": "\r\n        /// <summary>\r\n        /// R\u00e9cup\u00e8re les missions pour une liste de promotion\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "day",
                    "param_name": "day",
                    "param_type": "DateTime",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var startDate = day.Date;\r\n            var endDate = startDate.AddDays(1);\r\n\r\n            var userId = User.Identity.GetUserId();\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            var evalCategories = DataCache.GetEvaluationCategories(_db);\r\n\r\n            var finalExamCategoryId = evalCategories.Where(ec => ec.Code == \"EVAL_FINAL\")\r\n                .Select(ec => ec.Id).FirstOrDefault();\r\n\r\n            var sessions = await this._db.UserSessions.AsNoTracking()\r\n                .Where(q => q.Session.DateDelete == null\r\n                            && q.EcoleUser.UserId == userId\r\n                            && q.Session.StartTime >= startDate\r\n                            && q.Session.StartTime < endDate\r\n                            && q.Session.Copies.Any())\r\n                .Select(q => new SessionViewModel\r\n                {\r\n                    Name = q.Session.Name,\r\n                    StartTime = q.Session.StartTime,\r\n                    EndTime = q.Session.EndTime,\r\n                    Url = q.Url,\r\n                    IsExam = q.Session.Copies.FirstOrDefault().RessourceVersion.Ressource.EvaluationCategorieId == finalExamCategoryId,\r\n                    Attendees = q.Session.UserSessions\r\n                        .Where(us => us.EcoleUserId != q.EcoleUserId)\r\n                        .Select(us => new SessionAttendeeViewModel\r\n                        {\r\n                            LastName = us.EcoleUser.User.Nom,\r\n                            FirstName = us.EcoleUser.User.Prenom,\r\n                            parcoursCode = us.EcoleUser.User.InscriptionPromotions\r\n                                .Where(ip => ip.EcoleId == us.EcoleUser.EcoleId\r\n                                    && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                    && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now))\r\n                                .Select(ip => ip.Promotion.Parcour.Code)\r\n                                .ToList(),\r\n                            PhoneNumbers = us.EcoleUser.User.UserPhoneNumbers\r\n                                .Select(upn => upn.PhoneNumber)\r\n                                .ToList(),\r\n                            IsJury = us.AttendeeRoleId == (int)BBUserRole.Moderator\r\n                        })\r\n                        .ToList(),\r\n                    Evaluation = q.Session.Copies\r\n                        .Select(c => new EvaluationViewModel\r\n                        {\r\n                            EvaluationId = c.RessourceVersion.RessourceId,\r\n                            EvaluationGrid = (estFormateur) ? c.RessourceVersion.RessourcesObjectRessourcesVersions\r\n                                .Where(rorv => rorv.RessourceObject.ResourceType.Code == EvaluationGridResourceTypeCode)\r\n                                .Where(rorv => rorv.RessourceObject.DateDelete == null)\r\n                                .Select(rorv => new EvaluationGrid\r\n                                {\r\n                                    OldFileName = rorv.RessourceObject.ResourceType.Url + rorv.RessourceObject.Filename,\r\n                                    UploadedFileUrl = rorv.RessourceObject.UploadedFile.FileUrl,\r\n                                    UploadedFilename = rorv.RessourceObject.UploadedFile.FileName\r\n                                })\r\n                                .FirstOrDefault() : null\r\n                        })\r\n                        .FirstOrDefault()\r\n                })\r\n                .OrderBy(q => q.StartTime)\r\n                .ToListAsync();\r\n\r\n            var parcoursCodes = sessions.SelectMany(q => q.Attendees.SelectMany(a => a.parcoursCode)).Distinct().ToList();\r\n            var parcoursJson = await _parcoursReader.GetParcoursJsonAsync(this._db, parcoursCodes);\r\n\r\n            foreach (var session in sessions)\r\n            {\r\n                foreach (var attendee in session.Attendees)\r\n                {\r\n                    attendee.parcoursTitle = parcoursJson\r\n                        .Where(p => attendee.parcoursCode.Contains(p.Key))\r\n                        .Select(p => p.Value)\r\n                        .Where(p => p.Blocs.Any(bl => bl.Evaluations.Any(ev => ev.Id == session.Evaluation.EvaluationId)))\r\n                        .Select(p => p.Titre)\r\n                        .FirstOrDefault();\r\n                }\r\n            }\r\n\r\n            return Ok(sessions);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve sessions data for a specific user, including session details, attendees, evaluations, and related information.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "DateTime",
                        "param_name": "DateTime",
                        "param_desc": "The date for which sessions data is requested. It should be in the format of 'YYYY-MM-DD'."
                    },
                    {
                        "name": "day",
                        "param_name": "day",
                        "param_desc": "The day of the week for which sessions data is requested. It should be a valid day name (e.g., 'Monday', 'Tuesday')."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve sessions data for a specific user, including session details, attendees, evaluations, and related information.\n/// </summary>\n/// <param name=\"DateTime\">The date for which sessions data is requested. It should be in the format of 'YYYY-MM-DD'.</param>\n/// <param name=\"day\">The day of the week for which sessions data is requested. It should be a valid day name (e.g., 'Monday', 'Tuesday').</param>\n",
            "code_chunks": null
        },
        {
            "name": "CreateBBCollaborateAsync",
            "code_start_index": 12356,
            "method_name": "CreateBBCollaborateAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Create Oral\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "createCollaborateBm",
                    "param_name": "createCollaborateBm",
                    "param_type": "CreateCollaborateBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // get user info\r\n            var userId = User.Identity.GetUserId();\r\n            var currentSchoolId = this.GetSchoolId(_db);\r\n            var currentSchoolCode = this.GetSchoolCode(_db);\r\n            var schoolUserId = User.Identity.GetSchoolUserId();\r\n\r\n            var ressource = await _db.Ressources\r\n                .AsNoTracking()\r\n                .Include(r => r.RessourceVersions)\r\n                .Where(r => r.Id == createCollaborateBm.EvaluationId)\r\n                .FirstOrDefaultAsync();\r\n            int teacherSchoolId = await _db.EcoleUsers\r\n                .Where(q => q.UserId == createCollaborateBm.TeacherId)\r\n                .Select(q => q.EcoleUserId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            // new method with a list of userInfo\r\n            var result = await _bbAction.CreateInterviewAsync\r\n            (\r\n                name: ressource.Titre,\r\n                description: ressource.Descriptif,\r\n                startTime: createCollaborateBm.StartDate,\r\n                endTime: createCollaborateBm.EndDate,\r\n                userInfo: new List<BBUserInfo>()\r\n                {\r\n                    new BBUserInfo(createCollaborateBm.TeacherId, teacherSchoolId, BBUserRole.Moderator),\r\n                    new BBUserInfo(userId, schoolUserId, BBUserRole.Presenter)\r\n                }\r\n            );\r\n\r\n            // if no sucess, exit and return a 500 status code\r\n            if (!result.Success)\r\n            {\r\n                Log.Error(result.ErrorMessage);\r\n                return InternalServerError();\r\n            }\r\n\r\n            // Current user info\r\n            var user = User.Identity.GetUser();\r\n\r\n            var copyUser = await this.CreateOralCopyForUser(user.Email, user.SchoolUserId, result.SessionId, createCollaborateBm.EvaluationId, createCollaborateBm.StartDate.ToLocalTime(), createCollaborateBm.TeacherId);\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n\r\n                await this.CreateOralNotificationAsync(userId, schoolUserId, currentSchoolId, currentSchoolCode, copyUser.Id, createCollaborateBm.EvaluationId,\r\n                    createCollaborateBm.StartDate, createCollaborateBm.EndDate, ressource.Titre, ressource.TempsPreparation, result.SessionId);\r\n\r\n                return Ok(result.StudentUrl);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error creating the user copy\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a collaborative interview session with specified user roles and details, handling errors and notifications accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "CreateCollaborateBindingModel",
                        "param_name": "CreateCollaborateBindingModel",
                        "param_desc": "The model containing the necessary data to create a collaborative interview session."
                    },
                    {
                        "name": "createCollaborateBm",
                        "param_name": "createCollaborateBm",
                        "param_desc": "The data structure representing the details and user roles for the collaborative interview session."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a collaborative interview session with specified user roles and details, handling errors and notifications accordingly.\n/// </summary>\n/// <param name=\"CreateCollaborateBindingModel\">The model containing the necessary data to create a collaborative interview session.</param>\n/// <param name=\"createCollaborateBm\">The data structure representing the details and user roles for the collaborative interview session.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CreateBBCollaborateJuryAsync",
            "code_start_index": 15212,
            "method_name": "CreateBBCollaborateJuryAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// CreateOralForGroup\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "createCollaborateBm",
                    "param_name": "createCollaborateBm",
                    "param_type": "CreateCollaborateJuryBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentSchoolId = this.GetSchoolId(_db);\r\n            var currentSchoolCode = this.GetSchoolCode(_db);\r\n\r\n            var ressource = await _db.Ressources\r\n                .AsNoTracking()\r\n                .Include(r => r.RessourceVersions)\r\n                .Where(r => r.Id == createCollaborateBm.EvaluationId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            var userIds = createCollaborateBm.Participants.Concat(createCollaborateBm.Trainers).ToList();\r\n\r\n            var ecoleUserTemporaryDictionnary = await this._db.EcoleUsers\r\n                .AsNoTracking()\r\n                .Where(q => userIds.Contains(q.UserId))\r\n                .Select(q => new\r\n                {\r\n                    q.UserId,\r\n                    q.EcoleUserId,\r\n                    q.EcoleId\r\n                })\r\n                .GroupBy(q => q.UserId)\r\n                .ToDictionaryAsync(q => q.Key, q => q.ToList());\r\n\r\n            var ecoleUserIdUserIdDict = new Dictionary<int, int>();\r\n\r\n            foreach (var userId in userIds)\r\n            {\r\n                var schoolUserId = ecoleUserTemporaryDictionnary[userId].Where(q => q.EcoleId == currentSchoolId).FirstOrDefault()?.EcoleUserId;\r\n\r\n                if (schoolUserId == null)\r\n                {\r\n                    schoolUserId = ecoleUserTemporaryDictionnary[userId].FirstOrDefault().EcoleUserId;\r\n                }\r\n\r\n                ecoleUserIdUserIdDict.Add(userId, schoolUserId.Value);\r\n            }\r\n\r\n            var userInfos = new List<BBUserInfo>();\r\n\r\n            foreach (var userId in createCollaborateBm.Participants)\r\n            {\r\n                var bbUserInfo = new BBUserInfo(userId, ecoleUserIdUserIdDict[userId], BBUserRole.Presenter);\r\n                userInfos.Add(bbUserInfo);\r\n            }\r\n\r\n            foreach (var userId in createCollaborateBm.Trainers)\r\n            {\r\n                var bbUserInfo = new BBUserInfo(userId, ecoleUserIdUserIdDict[userId], BBUserRole.Moderator);\r\n                userInfos.Add(bbUserInfo);\r\n            }\r\n\r\n            // new method with a list of userInfo\r\n            var result = await _bbAction.CreateInterviewAsync\r\n            (\r\n                name: ressource.Titre,\r\n                description: ressource.Descriptif,\r\n                startTime: createCollaborateBm.StartDate,\r\n                endTime: createCollaborateBm.EndDate,\r\n                userInfo: userInfos\r\n            );\r\n\r\n            // if no sucess, exit and return a 500 status code\r\n            if (!result.Success)\r\n            {\r\n                Log.Error(result.ErrorMessage);\r\n                return InternalServerError();\r\n            }\r\n\r\n            // Current user info\r\n            var userEmail = User.Identity.GetUser().Email;\r\n            var ecoleUserIdCopieUserDict = new Dictionary<int, CopieUser>();\r\n            foreach (var participantId in createCollaborateBm.Participants)\r\n            {\r\n                var schoolUserId = ecoleUserIdUserIdDict[participantId];\r\n                var copyUser = await this.CreateOralCopyForUser(userEmail, schoolUserId, result.SessionId, createCollaborateBm.EvaluationId, createCollaborateBm.StartDate.ToLocalTime(), createCollaborateBm.Trainers.First());\r\n                ecoleUserIdCopieUserDict.Add(schoolUserId, copyUser);\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n\r\n                foreach (var participantId in createCollaborateBm.Participants)\r\n                {\r\n                    var schoolUserId = ecoleUserIdUserIdDict[participantId];\r\n                    var copyUserId = ecoleUserIdCopieUserDict[schoolUserId].Id;\r\n                    await this.CreateOralNotificationAsync(participantId, schoolUserId, currentSchoolId, currentSchoolCode, copyUserId, createCollaborateBm.EvaluationId,\r\n                        createCollaborateBm.StartDate, createCollaborateBm.EndDate, ressource.Titre, ressource.TempsPreparation, result.SessionId);\r\n                }\r\n\r\n                return Ok(result.StudentUrl);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error creating the user copy\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a collaborative session with participants and trainers, handle user information, and create related copies and notifications.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "CreateCollaborateJuryBindingModel",
                        "param_name": "CreateCollaborateJuryBindingModel",
                        "param_desc": "This parameter represents the binding model for creating a collaborative jury session. It includes information about the participants, trainers, and related copies and notifications."
                    },
                    {
                        "name": "createCollaborateBm",
                        "param_name": "createCollaborateBm",
                        "param_desc": "This parameter represents the binding model for creating a collaborative session. It includes information about the participants, trainers, and related copies and notifications."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a collaborative session with participants and trainers, handle user information, and create related copies and notifications.\n/// </summary>\n/// <param name=\"CreateCollaborateJuryBindingModel\">This parameter represents the binding model for creating a collaborative jury session. It includes information about the participants, trainers, and related copies and notifications.</param>\n/// <param name=\"createCollaborateBm\">This parameter represents the binding model for creating a collaborative session. It includes information about the participants, trainers, and related copies and notifications.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CreateOralCopyForUser",
            "code_start_index": 19609,
            "method_name": "CreateOralCopyForUser",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "userCreate",
                    "param_name": "userCreate",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "schoolUserId",
                    "param_name": "schoolUserId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "sessionId",
                    "param_name": "sessionId",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "evaluationId",
                    "param_name": "evaluationId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "dateValidation",
                    "param_name": "dateValidation",
                    "param_type": "DateTime",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "teacherId",
                    "param_name": "teacherId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // if copy exists\r\n            var copyExists = await _db.CopieUsers\r\n                .AnyAsync(cu => cu.EcoleUserId == schoolUserId && cu.Copy.RessourceVersion.RessourceId == evaluationId && cu.Copy.DateDelete == null);\r\n\r\n            if (copyExists)\r\n            {\r\n                throw new Exception(\"Copy exists\");\r\n            }\r\n\r\n            var candidateUserId = await _db.EcoleUsers\r\n                               .AsNoTracking()\r\n                               .Where(eu => eu.EcoleUserId == schoolUserId)\r\n                               .Select(eu => eu.UserId)\r\n                               .FirstOrDefaultAsync();\r\n\r\n            if (candidateUserId == default)\r\n            {\r\n                throw new Exception($\"Candidat_User_Id corresponding to ecoleUserId {schoolUserId} not found in database\");\r\n            }\r\n\r\n            var ressource = await _db.Ressources\r\n                .AsNoTracking()\r\n                .Include(r => r.RessourceVersions)\r\n                .Where(r => r.Id == evaluationId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (ressource == null)\r\n            {\r\n                throw new Exception(\"Ressource does not exist\");\r\n            }\r\n\r\n            int latestVersionId = ressource.RessourceVersions\r\n                .Where(obj => obj.DatePublication != null && obj.DatePublication <= DateTimeOffset.Now)\r\n                .OrderByDescending(rv => rv.VersionMajeure)\r\n                .ThenByDescending(rv => rv.VersionMineure)\r\n                .ThenByDescending(rv => rv.VersionCorrection)\r\n                .FirstOrDefault()\r\n                ?.Id ?? -1;\r\n\r\n            if (latestVersionId == -1)\r\n            {\r\n                Log.Error(\"Evaluation with Id {0} doesn't have any resource version\", ressource.Id);\r\n                throw new Exception();\r\n            }\r\n\r\n            var ressourceObjectRessourceVersionId = await _db.RessourcesObjectRessourcesVersions\r\n                .AsNoTracking()\r\n                .Where(rorv => rorv.RessourcesVersionId == latestVersionId\r\n                            && rorv.RessourceObject.ResourceType.Code == \"enonce\"\r\n                            && rorv.AffectationCorrecteurs.Any(ac => ac.CorrecteurId == teacherId\r\n                                                                  && ac.DateDelete == null))\r\n                .Select(rorv => rorv.Id)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (ressourceObjectRessourceVersionId == default)\r\n            {\r\n                var errorMessage = $\"No ressourceObjectRessourceVersionId linked to TeacherId {teacherId} and EvaluationId {ressource.Id} and VersionId {latestVersionId} has been found.\";\r\n                Log.Error(errorMessage);\r\n                throw new Exception(errorMessage);\r\n            }\r\n\r\n            // Get copie status REALISATION\r\n            var copyStatus = DataCache.GetCopyStatuses(_db).FirstOrDefault(c => c.Code == nameof(CopyStatusCode.ENCOURS));\r\n            if (copyStatus == null)\r\n            {\r\n                var ex = new ObjectNotFoundException($\"CopyStatus = '{nameof(CopyStatusCode.ENCOURS)}' was not found in the database\");\r\n                Log.Fatal(ex, ex.Message);\r\n                throw new Exception();\r\n            }\r\n\r\n            var random = new Random(DateTime.Now.Millisecond);\r\n\r\n            var typeEnvoiPlateformId = DataCache.GetTypeEnvoi(_db)\r\n                .Where(te => te.Code == \"PLATEFORME\")\r\n                .Select(te => te.Id)\r\n                .FirstOrDefault();\r\n\r\n            var evalOralCategory = DataCache.GetEvaluationCategories(_db)\r\n                .Where(ec => ec.Code == \"EVAL_ORAL\")\r\n                .FirstOrDefault();\r\n\r\n            var copyUser = new CopieUser\r\n            {\r\n                UserCreate = userCreate,\r\n                DateCreate = DateTime.Now,\r\n                EcoleUserId = schoolUserId,\r\n                Copy = new Copy\r\n                {\r\n                    UserCreate = userCreate,\r\n                    DateCreate = DateTime.Now,\r\n                    BbcollabSessionId = sessionId,\r\n                    DispoLms = false,\r\n                    ModeBrouillon = false,\r\n                    EvaluationVersionId = latestVersionId,\r\n                    LastCopieAvancementCode = nameof(CopyStatusCode.ENCOURS),\r\n                    Reference = $\"{ressource.Reference ?? ressource.Code}_{candidateUserId}_{dateValidation:yyyyMMddHHmmss}\",\r\n                    CopieAvancements = new List<CopieAvancement>(1)\r\n                    {\r\n                        new CopieAvancement\r\n                        {\r\n                            UserCreate = userCreate,\r\n                            DateDebut = DateTimeOffset.Now,\r\n                            CopieStatutId = copyStatus.Id,\r\n                            DateCreate = DateTime.Now,\r\n                        }\r\n                    },\r\n                    CopieOriginales = new List<CopieOriginale>(1)\r\n                    {\r\n                        new CopieOriginale\r\n                        {\r\n                            UserCreate = userCreate,\r\n                            DateCreate = DateTime.Now,\r\n                            DateEnvoi = dateValidation,\r\n                            DateValidation = dateValidation,\r\n                            DateLimiteCorrection = dateValidation.AddDays(evalOralCategory.NbJoursCorrection.HasValue ? evalOralCategory.NbJoursCorrection.Value : 7),\r\n                            CopieTypeEnvoiId = typeEnvoiPlateformId,\r\n                            RessourceVersionRessourceObjectId = ressourceObjectRessourceVersionId,\r\n                            CopieOriginaleAvancements = new List<CopieOriginaleAvancement>(1)\r\n                            {\r\n                                new CopieOriginaleAvancement\r\n                                {\r\n                                    CopieStatutId = copyStatus.Id,\r\n                                    DateDebut = DateTime.Now,\r\n                                    UserCreate = userCreate,\r\n                                    DateCreate = DateTime.Now,\r\n                                }\r\n                            },\r\n                            CopieCorrigees = new List<CopieCorrigee>(1)\r\n                            {\r\n                                new CopieCorrigee\r\n                                {\r\n                                    UserCreate = userCreate,\r\n                                    DateCreate = DateTime.Now,\r\n                                    CorrecteurId = teacherId,\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            _db.CopieUsers.Add(copyUser);\r\n            return copyUser;\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create an oral copy for a specified user based on certain conditions and data checks, and return the newly created copy.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "userCreate",
                        "param_name": "userCreate",
                        "param_desc": "The name of the user who is creating the oral copy."
                    },
                    {
                        "name": "schoolUserId",
                        "param_name": "schoolUserId",
                        "param_desc": "The unique identifier of the user in the school system."
                    },
                    {
                        "name": "sessionId",
                        "param_name": "sessionId",
                        "param_desc": "The session ID related to the oral copy creation."
                    },
                    {
                        "name": "evaluationId",
                        "param_name": "evaluationId",
                        "param_desc": "The evaluation ID associated with the oral copy."
                    },
                    {
                        "name": "dateValidation",
                        "param_name": "dateValidation",
                        "param_desc": "The date and time when the oral copy was validated."
                    },
                    {
                        "name": "teacherId",
                        "param_name": "teacherId",
                        "param_desc": "The ID of the teacher responsible for the oral copy creation."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create an oral copy for a specified user based on certain conditions and data checks, and return the newly created copy.\n/// </summary>\n/// <param name=\"userCreate\">The name of the user who is creating the oral copy.</param>\n/// <param name=\"schoolUserId\">The unique identifier of the user in the school system.</param>\n/// <param name=\"sessionId\">The session ID related to the oral copy creation.</param>\n/// <param name=\"evaluationId\">The evaluation ID associated with the oral copy.</param>\n/// <param name=\"dateValidation\">The date and time when the oral copy was validated.</param>\n/// <param name=\"teacherId\">The ID of the teacher responsible for the oral copy creation.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CreateOralNotificationAsync",
            "code_start_index": 26548,
            "method_name": "CreateOralNotificationAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "userId",
                    "param_name": "userId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "schoolUserId",
                    "param_name": "schoolUserId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "currentSchoolId",
                    "param_name": "currentSchoolId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "currentSchoolCode",
                    "param_name": "currentSchoolCode",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "copiUserId",
                    "param_name": "copiUserId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "evaluationId",
                    "param_name": "evaluationId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "startDate",
                    "param_name": "startDate",
                    "param_type": "DateTime",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "endDate",
                    "param_name": "endDate",
                    "param_type": "DateTime",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "title",
                    "param_name": "title",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "tempsPreparation",
                    "param_name": "tempsPreparation",
                    "param_type": "int?",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "sessionId",
                    "param_name": "sessionId",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // Notification to former\r\n            var learningDeptName = _dnsConfig.GetLearningDepartmentName();\r\n\r\n            BackgroundJob.Enqueue(() =>\r\n                NotificationSenderManager.SendOralReservedNotificationAsync(userId, currentSchoolId, currentSchoolCode, copiUserId, learningDeptName));\r\n\r\n            // Notification to student before oral starting\r\n            var delay = _db.JobDelays.AsNoTracking().Where(jd => jd.Code == \"BEFORE_ORAL\").FirstOrDefault();\r\n            var enqueueAt = startDate.AddMinutes(delay.Minutes);\r\n\r\n            if (tempsPreparation.HasValue)\r\n            {\r\n                enqueueAt = enqueueAt.AddMinutes(-tempsPreparation.Value);\r\n            }\r\n\r\n            var notificationId = await NotificationSenderManager.CreateInformBeforeOralNotificationAsync(userId, currentSchoolCode, copiUserId, learningDeptName);\r\n\r\n            string jobId = BackgroundJob.Schedule(() => NotificationSenderManager.HandleNotificationAsync(notificationId, currentSchoolId, false, false), enqueueAt);\r\n\r\n            var dnsConfig = _dnsConfig.GetDnsConfig();\r\n            var servicePedagoUserId = await _userService.GetPedagoUserIdFromEmailAsync(dnsConfig.EmailPedagogie);\r\n\r\n            // START Remind 48 hours before oral\r\n            var remind48HourDate = startDate.AddDays(-2);\r\n            var serializedData = JsonConvert.SerializeObject(new NotificationOralDtoModel\r\n            {\r\n                Title = title,\r\n                StartDate = startDate,\r\n                EndDate = endDate\r\n            });\r\n\r\n            BackgroundJob.Schedule(() => new NotificationSenderManagerV3()\r\n                .SendNotificationAsync(\r\n                    NotificationTypesHelper.Remind48HoursBeforeOral,\r\n                    new List<int>() { schoolUserId },\r\n                    servicePedagoUserId,\r\n                    evaluationId.ToString(),\r\n                    learningDeptName,\r\n                    serializedData\r\n                ), remind48HourDate\r\n            );\r\n            // END Remind 48 hours before oral\r\n\r\n            SessionJob job = new SessionJob()\r\n            {\r\n                JobDelayId = delay.Id,\r\n                JobId = jobId,\r\n                SessionId = sessionId,\r\n                EcoleId = currentSchoolId\r\n            };\r\n\r\n            _db.SessionJobs.Add(job);\r\n\r\n            await this._db.SaveChangesAsync();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Schedule and send various oral notifications to users before and during an oral evaluation session, including reminders 48 hours before the oral.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The ID of the user for whom the notification is being created."
                    },
                    {
                        "name": "schoolUserId",
                        "param_name": "schoolUserId",
                        "param_desc": "The ID of the user within the school system."
                    },
                    {
                        "name": "currentSchoolId",
                        "param_name": "currentSchoolId",
                        "param_desc": "The ID of the current school for the user."
                    },
                    {
                        "name": "currentSchoolCode",
                        "param_name": "currentSchoolCode",
                        "param_desc": "The code representing the current school."
                    },
                    {
                        "name": "copiUserId",
                        "param_name": "copiUserId",
                        "param_desc": "The ID of the user responsible for the COPi (Central Office for the Protection of Individuals) system."
                    },
                    {
                        "name": "evaluationId",
                        "param_name": "evaluationId",
                        "param_desc": "The ID of the evaluation session for which the notification is related."
                    },
                    {
                        "name": "startDate",
                        "param_name": "startDate",
                        "param_desc": "The start date and time of the notification or evaluation session."
                    },
                    {
                        "name": "endDate",
                        "param_name": "endDate",
                        "param_desc": "The end date and time of the notification or evaluation session."
                    },
                    {
                        "name": "title",
                        "param_name": "title",
                        "param_desc": "The title or subject of the notification."
                    },
                    {
                        "name": "tempsPreparation",
                        "param_name": "tempsPreparation",
                        "param_desc": "The optional time in minutes for preparation before the session."
                    },
                    {
                        "name": "sessionId",
                        "param_name": "sessionId",
                        "param_desc": "The ID of the session for which the notification is being created."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Schedule and send various oral notifications to users before and during an oral evaluation session, including reminders 48 hours before the oral.\n/// </summary>\n/// <param name=\"userId\">The ID of the user for whom the notification is being created.</param>\n/// <param name=\"schoolUserId\">The ID of the user within the school system.</param>\n/// <param name=\"currentSchoolId\">The ID of the current school for the user.</param>\n/// <param name=\"currentSchoolCode\">The code representing the current school.</param>\n/// <param name=\"copiUserId\">The ID of the user responsible for the COPi (Central Office for the Protection of Individuals) system.</param>\n/// <param name=\"evaluationId\">The ID of the evaluation session for which the notification is related.</param>\n/// <param name=\"startDate\">The start date and time of the notification or evaluation session.</param>\n/// <param name=\"endDate\">The end date and time of the notification or evaluation session.</param>\n/// <param name=\"title\">The title or subject of the notification.</param>\n/// <param name=\"tempsPreparation\">The optional time in minutes for preparation before the session.</param>\n/// <param name=\"sessionId\">The ID of the session for which the notification is being created.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CreateSchedulerOwner",
            "code_start_index": 29544,
            "method_name": "CreateSchedulerOwner",
            "existing_summary": "\r\n        /// <summary>\r\n        /// R\u00e9cup\u00e8re les missions pour une liste de promotion\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "createSchedulerOwnerModel",
                    "param_name": "createSchedulerOwnerModel",
                    "param_type": "CreateSchedulerOwnerModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var user = User.Identity.GetUser();\r\n\r\n            var evalCategories = DataCache.GetEvaluationCategories(_db);\r\n            var evalOralCategoryId = evalCategories\r\n                .Where(ec => ec.Code == \"EVAL_ORAL\")\r\n                .Select(ec => ec.Id).FirstOrDefault();\r\n\r\n            var ressources = await _db.AffectationCorrecteurs\r\n                .AsNoTracking()\r\n                .Where(q => q.CorrecteurId == user.Id\r\n                    && q.DateDelete == null\r\n                    && q.RessourcesObjectRessourcesVersion.RessourceVersion.Ressource.EvaluationCategorieId == evalOralCategoryId\r\n                    && q.RessourcesObjectRessourcesVersion.RessourceVersion.DatePublication != null)\r\n                .Select(q => q.RessourcesObjectRessourcesVersion.RessourceVersion.Ressource)\r\n                .Distinct()\r\n                .ToListAsync();\r\n\r\n            var studiSchedulerSetupOwner = new SetupOwnerDto\r\n            {\r\n                Account = new AccountDto\r\n                {\r\n                    CalendarTitle = $\"Calendrier de {user.Prenom} {user.Nom}\",\r\n                    FirstName = user.Prenom,\r\n                    LastName = user.Nom,\r\n                    Email = user.Email,\r\n                    ExternalId = user.Id.ToString(),\r\n                    ExternalIdRef = \"LMS_USER\",\r\n                    ScopeCode = \"TRAINING\",\r\n                    IsOwner = true\r\n                },\r\n                AppointmentTypes = ressources\r\n                    .Select(q => new AppointmentTypeDto\r\n                    {\r\n                        ScopeCode = \"TRAINING\",\r\n                        Title = q.Titre,\r\n                        DurationMinutes = q.Duree ?? 60,\r\n                        PreBookingDurationDays = q.DelaiReservation ?? 0,\r\n                        PostBlockDurationMinutes = 10,\r\n                        Description = q.Descriptif,\r\n                        ExternalId = q.Id.ToString(),\r\n                        ExternalIdRef = \"LMS_RESSOURCE\",\r\n                        IsOwner = true\r\n                    })\r\n                    .ToList()\r\n            };\r\n            await _schedulerApiClient.SetupOwnerAsync\r\n            (\r\n                token: createSchedulerOwnerModel.Token,\r\n                absoluteUri: new Uri(_config.GetStudiSchedulerUrl()),\r\n                setupOwnerDto: studiSchedulerSetupOwner\r\n            );\r\n\r\n            var appointments = studiSchedulerSetupOwner.AppointmentTypes\r\n                .Select(q => new\r\n                {\r\n                    q.ExternalId,\r\n                    q.ScopeCode,\r\n                    q.ExternalIdRef\r\n                })\r\n                .ToList();\r\n\r\n            return Ok(appointments);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a scheduler owner with specific setup details and appointments for a user based on evaluation categories.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "CreateSchedulerOwnerModel",
                        "param_name": "CreateSchedulerOwnerModel",
                        "param_desc": "The model containing the setup details and appointments for creating a scheduler owner."
                    },
                    {
                        "name": "createSchedulerOwnerModel",
                        "param_name": "createSchedulerOwnerModel",
                        "param_desc": "The model containing the setup details and appointments for creating a scheduler owner."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a scheduler owner with specific setup details and appointments for a user based on evaluation categories.\n/// </summary>\n/// <param name=\"CreateSchedulerOwnerModel\">The model containing the setup details and appointments for creating a scheduler owner.</param>\n/// <param name=\"createSchedulerOwnerModel\">The model containing the setup details and appointments for creating a scheduler owner.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CreateSchedulerAttendee",
            "code_start_index": 32777,
            "method_name": "CreateSchedulerAttendee",
            "existing_summary": "\r\n        /// <summary>\r\n        /// R\u00e9cup\u00e8re les missions pour une liste de promotion\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "model",
                    "param_name": "model",
                    "param_type": "CreateSchedulerAttendeeModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var user = User.Identity.GetUser();\r\n\r\n            var currentUser = User.Identity.GetUser();\r\n            var schoolUserId = User.Identity.GetSchoolUserId();\r\n\r\n            // Make sure that the user has access to evals\r\n            var parcoursCodes = await this._db.InscriptionPromotions\r\n                .Include(ip => ip.Promotion.Parcour)\r\n                .Where(ip => ip.Evaluation)\r\n                .Where(RepositoryV3.InscriptionsPromotionsAreInProgressForThisUserAndSchool(currentUser.Id, currentUser.SchoolId))\r\n                .Select(ip => ip.Promotion.Parcour.Code)\r\n                .Distinct()\r\n                .ToListAsync();\r\n\r\n            if (parcoursCodes == null)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"cette \u00e9valuation n'est pas pr\u00e9sente dans votre parcours de formation\");\r\n            }\r\n\r\n            var parcoursJson = await _parcoursReader.GetParcoursJsonAsync(this._db, currentUser.Id, currentUser.SchoolId);\r\n\r\n            var jsonEvaluation = parcoursJson\r\n                .Where(e => parcoursCodes.Contains(e.Key))\r\n                .Select(e => e.Value)\r\n                .SelectMany(e => e.Blocs)\r\n                .SelectMany(b => b.Evaluations)\r\n                .FirstOrDefault(e => e.Id == model.EvaluationId);\r\n\r\n            if (jsonEvaluation == null)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"cette \u00e9valuation n'est pas pr\u00e9sente dans votre parcours de formation\");\r\n            }\r\n\r\n            // utilisation du paquet nuget Studi.SchedulerApiClient\r\n            var studiSchedulerParticipantOwner = new SetupParticipantDto\r\n            {\r\n                Account = new AccountDto\r\n                {\r\n                    CalendarTitle = $\"Calendrier de {user.Nom}\",\r\n                    FirstName = user.Prenom,\r\n                    LastName = user.Nom,\r\n                    Email = user.Email,\r\n                    ExternalId = user.Id.ToString(),\r\n                    ExternalIdRef = \"LMS_USER\",\r\n                    ScopeCode = \"TRAINING\",\r\n                    IsOwner = true\r\n                },\r\n                AppointmentTypeLinks = new List<AppointmentTypeLinkDto>()\r\n                {\r\n                    new AppointmentTypeLinkDto\r\n                    {\r\n                        ScopeCode = \"TRAINING\",\r\n                        ExternalId = model.EvaluationId.ToString(),\r\n                        ExternalIdRef = \"LMS_RESSOURCE\",\r\n                    }\r\n                }\r\n            };\r\n\r\n            try\r\n            {\r\n                var result = await _schedulerApiClient.SetupParticipantAsync\r\n                (\r\n                    token: model.Token,\r\n                    absoluteUri: new Uri(_config.GetStudiSchedulerUrl()),\r\n                    setupParticipantDto: studiSchedulerParticipantOwner\r\n                );\r\n            }\r\n            catch (WebServiceException e)\r\n            {\r\n                if (e.StatusCode == HttpStatusCode.BadRequest)\r\n                {\r\n                    return BadRequest();\r\n                }\r\n                else\r\n                {\r\n                    Log.Error(\"Unable to setup participant\", e);\r\n                    return InternalServerError(e);\r\n                }\r\n                throw;\r\n            }\r\n\r\n            return Ok(studiSchedulerParticipantOwner.AppointmentTypeLinks.First());\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a scheduler attendee for a specific user, based on their evaluation and training information.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "model",
                        "param_name": "model",
                        "param_desc": "The CreateSchedulerAttendeeModel object containing the necessary information to create a scheduler attendee. This object should include details such as user evaluation and training information."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a scheduler attendee for a specific user, based on their evaluation and training information.\n/// </summary>\n/// <param name=\"model\">The CreateSchedulerAttendeeModel object containing the necessary information to create a scheduler attendee. This object should include details such as user evaluation and training information.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "StudiSchedulerController"
}