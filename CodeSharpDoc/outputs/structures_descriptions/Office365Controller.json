{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Common/Office365Controller.cs",
    "index_shift_code": 579,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.Common",
    "usings": [
        "LMS.Authentication",
        "LMS.Configuration",
        "LMS.Data",
        "LMS.Utils",
        "Microsoft.IdentityModel.Clients.ActiveDirectory",
        "Newtonsoft.Json",
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Linq",
        "System.Net",
        "System.Net.Http",
        "System.Text",
        "System.Text.RegularExpressions",
        "System.Threading.Tasks",
        "System.Web.Http",
        "LMS.Attributes",
        "LMS.Utils.Cache",
        "Serilog",
        "System.Web",
        "LMS.Services.Interfaces"
    ],
    "access_modifier": "public",
    "struct_name": "Office365Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "Office365IsActivatedAsync",
            "code_start_index": 1182,
            "method_name": "Office365IsActivatedAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = this.User.Identity.GetUser();\r\n            \r\n            var svc = await this._db.InscriptionsServices.AsNoTracking()\r\n                                .Where(s => s.DateDelete == null && s.Service.Code == \"OFFICE_365\" && s.EcoleUserId == currentUser.SchoolUserId)\r\n                                .Select(s => new { s.Login, s.Password, s.DateActivation })\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (svc == null)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"Vous n'avez pas d'inscription pour ce service\");\r\n            }\r\n\r\n            if (svc.DateActivation != null)\r\n            {\r\n                return Ok(new\r\n                          {\r\n                              Hostname = \"https://portal.office.com/\",\r\n                              Email = svc.Login,\r\n                              Password = svc.Password\r\n                          });\r\n            }\r\n\r\n            return Ok(false);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if the Office 365 service is activated for the current user and return the necessary login information if it is activated.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "Office365IsActivatedAsync"
                    },
                    {
                        "name": "purpose",
                        "param_name": "purpose",
                        "param_desc": "Check if the Office 365 service is activated for the current user and return the necessary login information if it is activated."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if the Office 365 service is activated for the current user and return the necessary login information if it is activated.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">Office365IsActivatedAsync</param>\n/// <param name=\"purpose\">Check if the Office 365 service is activated for the current user and return the necessary login information if it is activated.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetOffice365Async",
            "code_start_index": 2321,
            "method_name": "GetOffice365Async",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = this.User.Identity.GetUser();\r\n            \r\n            var svc = await this._db.InscriptionsServices\r\n                                .Where(s => s.DateDelete == null && s.Service.Code == \"OFFICE_365\" && s.EcoleUserId == currentUser.SchoolUserId)\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (svc == null)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"Vous n'avez pas d'inscription pour ce service\");\r\n            }\r\n\r\n            // office 365 domain name\r\n            string hostname = _config.GetOffice365Hostname();\r\n\r\n            if (svc.DateActivation != null)\r\n            {\r\n                return Ok(new\r\n                {\r\n                    Hostname = \"https://portal.office.com/\",\r\n                    Email = svc.Login,\r\n                    Password = svc.Password\r\n                });\r\n            }\r\n\r\n            var env = _config.GetLmsEnv();\r\n            string organisme = null;\r\n\r\n            // current school\r\n            var school = DataCache.GetSchools(_db)\r\n                .First(e => e.Id == currentUser.SchoolId);\r\n\r\n            if (env == Environments.Dev)\r\n            {\r\n                organisme = school.Organisme.Code.ToLowerInvariant() + \"testing\";\r\n            }\r\n            else\r\n            {\r\n                organisme = school.Organisme.Code.ToLowerInvariant();\r\n            }\r\n\r\n            \r\n            \r\n            // login that will be used for the office 365 account\r\n            var login = $\"{organisme}{currentUser.Id}@{hostname}\";\r\n\r\n            // temporary password\r\n            var password = GetTempPassword();\r\n\r\n            var regex = new Regex(\"[^A-Za-z0-9]\");\r\n            var firstName = regex.Replace(Helpers.RemoveDiacritics(currentUser.Prenom).ToLowerInvariant(), string.Empty);\r\n            var lastName = regex.Replace(Helpers.RemoveDiacritics(currentUser.Nom).ToLowerInvariant(), string.Empty);\r\n            var mailnickname = $\"{firstName}.{lastName}\";\r\n\r\n            try\r\n            {\r\n                string authority = _config.GetOffice365Authority();\r\n                string clientId = _config.GetOffice365ClientId();\r\n                string clientSecret = _config.GetOffice365ClientSecret();\r\n                var licenseId = Guid.Parse(_config.GetOffice365LicenseId());\r\n\r\n                var client = new MsGraphClient(clientId, clientSecret, authority, hostname);\r\n\r\n                var createdUser = await client.CreateUserAsync(currentUser.Id,\r\n                                                               organisme,\r\n                                                               firstName:currentUser.Prenom,\r\n                                                               lastName:currentUser.Nom,\r\n                                                               mailNickname: mailnickname,\r\n                                                               password: password,\r\n                                                               usageLocation: \"FR\"\r\n                                                              );\r\n\r\n                await client.AssignLicense(createdUser.Id, licenseId);\r\n\r\n                svc.DateActivation = DateTimeOffset.Now;\r\n                svc.DateDebutService = DateTimeOffset.Now;\r\n                svc.DateFinService = DateTimeOffset.Now.AddYears(1);\r\n                svc.Login = login;\r\n                svc.Password = password;\r\n\r\n                svc.UserUpdate = currentUser.Email;\r\n                svc.DateUpdate = DateTime.Now;\r\n\r\n                await _db.SaveChangesAsync();\r\n\r\n                return Ok(new\r\n                          {\r\n                              Hostname = \"https://portal.office.com/\",\r\n                              Email = login,\r\n                              Password = password\r\n                          });\r\n\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error activating the Office 365 service for user {0}\", currentUser.Id);\r\n                return InternalServerError();\r\n            }\r\n\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the Office 365 account information for the current user, including login credentials, and activate the service if necessary.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method_name",
                        "param_name": "method_name",
                        "param_desc": "GetOffice365Async - Retrieve the Office 365 account information for the current user, including login credentials, and activate the service if necessary."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the Office 365 account information for the current user, including login credentials, and activate the service if necessary.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method_name\">GetOffice365Async - Retrieve the Office 365 account information for the current user, including login credentials, and activate the service if necessary.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetTempPassword",
            "code_start_index": 6495,
            "method_name": "GetTempPassword",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            const string chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n            var random = new Random(Guid.NewGuid().GetHashCode());\r\n            return new string(Enumerable.Repeat(chars, 8)\r\n                                        .Select(s => s[random.Next(s.Length)])\r\n                                        .ToArray()) + \"!@#123\";\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Generate a temporary password with a length of 8 characters containing letters, numbers, and special characters.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method which is 'GetTempPassword'"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method which is 'Generate a temporary password with a length of 8 characters containing letters, numbers, and special characters.'"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Generate a temporary password with a length of 8 characters containing letters, numbers, and special characters.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method which is 'GetTempPassword'</param>\n/// <param name=\"methodPurpose\">The purpose of the method which is 'Generate a temporary password with a length of 8 characters containing letters, numbers, and special characters.'</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "Office365Controller"
}