{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/ServicesV2Controller.cs",
    "index_shift_code": 343,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Data",
        "Serilog",
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Linq",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description"
    ],
    "access_modifier": "public",
    "struct_name": "ServicesV2Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "SetActivationDateByServiceCode",
            "code_start_index": 746,
            "method_name": "SetActivationDateByServiceCode",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "code",
                    "param_name": "code",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var whiteList = new List<string>()\r\n                            {\r\n                                \"CEGID\",\r\n                                \"CIEL_COMPTA\",\r\n                                \"SAGE100\",\r\n                                \"SAGE_RH\",\r\n                            };\r\n\r\n            if (!whiteList.Contains(code))\r\n            {\r\n                return BadRequest();\r\n            }\r\n\r\n            var ecoleUserId = User.Identity.GetSchoolUserId();\r\n\r\n            if (ecoleUserId == 0)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            var inscriptionService = await _db.InscriptionsServices\r\n                .Include(insservice => insservice.Service)\r\n                .Where(insservice => insservice.EcoleUserId == ecoleUserId && insservice.Service.Code == code)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (inscriptionService == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (inscriptionService.DateActivation == null)\r\n            {\r\n                inscriptionService.DateActivation = DateTime.Now;\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return Ok();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(\"Erreur lors de le maj des inscriptions services\", e);\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the activation date for a specific service code, only if it is in the whitelist of allowed codes and the user is authorized, returning appropriate HTTP responses based on the outcome.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "code",
                        "param_name": "code",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "string",
                        "param_name": "string",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the activation date for a specific service code, only if it is in the whitelist of allowed codes and the user is authorized, returning appropriate HTTP responses based on the outcome.\n/// </summary>\n/// <param name=\"code\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"string\">The generated description for the parameter</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "ServicesV2Controller"
}