{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Studi.Api.Lms.Messenger/StartupHelpers.cs",
    "index_shift_code": 1442,
    "struct_type": "Class",
    "namespace_name": "",
    "usings": [
        "Hangfire",
        "Hangfire.MemoryStorage",
        "Microsoft.EntityFrameworkCore",
        "Microsoft.EntityFrameworkCore.Migrations",
        "Microsoft.Extensions.Options",
        "Studi.Api.Core.Exceptions.Guards",
        "Studi.Api.Core.Security.Dependencyinjection",
        "Studi.Api.Core.Services.DependencyInjection",
        "Studi.Api.Lms.Messenger.Application",
        "Studi.Api.Lms.Messenger.Controllers.Contact.ListingSelector",
        "Studi.Api.Lms.Messenger.Controllers.Conversation.ListingSelector",
        "Studi.Api.Lms.Messenger.Controllers.Message.ListingSelector",
        "Studi.Api.Lms.Messenger.Data.DataContext",
        "Studi.Api.Lms.Messenger.Data.Migrations.Configuration",
        "Studi.Api.Lms.Messenger.Infra.Data",
        "Studi.Api.Lms.Messenger.Infra.External.Data",
        "Studi.Api.Lms.Messenger.Shared.ContactListing",
        "Studi.Api.Lms.Messenger.Shared.ConversationListing",
        "Studi.Api.Lms.Messenger.Shared.MessageListing",
        "Studi.Api.Core.ListingSelector.Filtering.AvailableFilters",
        "Studi.Api.Core.ListingSelector.JsonConversion",
        "Studi.Api.Core.ListingSelector.Sorting.AvailableSortings",
        "Studi.Api.WebSockets.Client",
        "Studi.EmailTemplateClient",
        "Studi.LmsDatabase.Models",
        "System.Reflection"
    ],
    "access_modifier": "public static",
    "struct_name": "StartupHelpers",
    "base_class_name": "",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "SetIocContainerDependencies",
            "code_start_index": 1829,
            "method_name": "SetIocContainerDependencies",
            "existing_summary": "    /// <summary>\r\n    /// Configures and sets up various services for the application and adds them to the IOC container.\r\n    /// </summary>\r\n    /// <param name=\"services\">The IServiceCollection to add the services to.</param>\r\n    /// <param name=\"config\">The configuration manager to retrieve configuration settings.</param>\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "services",
                    "param_name": "services",
                    "param_type": "IServiceCollection",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "config",
                    "param_name": "config",
                    "param_type": "ConfigurationManager",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        // Add services to the container.\r\n        var apiCoreOptions = Options.Create(new ApiCoreServicesOptions(\r\n                            isUsingCqrsRequestWithMediator: false,\r\n                            isUsingDomainEventsWithMediator: false,\r\n                            isUsingCqrsRequestDataValidation: false));\r\n        services.AddApiCoreServices(apiCoreOptions);\r\n        services.AddApplicationServices();\r\n        services.AddInfrastructureServices();\r\n        services.AddControllerServices();\r\n        services.AddUserInfrastructureServices();\r\n        services.AddScoped<IEmailTemplating>(jwt => new EmailTemplating(config[\"EmailTemplateUrl\"]));\r\n        services.AddControllers().AddNewtonsoftJson(options =>\r\n        {\r\n            var jsonConverterForConversation = new ListingSelectorJsonConverter<IConversationListing>(\r\n                    (Activator.CreateInstance(typeof(AvailableFiltersForConversation)) as IAvailableFilters<IConversationListing>)!,\r\n                    (Activator.CreateInstance(typeof(AvailableSortingsForConversation)) as IAvailableSortings<IConversationListing>)!);\r\n\r\n            var jsonConverterForContact = new ListingSelectorJsonConverter<IContactListing>(\r\n                    (Activator.CreateInstance(typeof(AvailableFiltersForContact)) as IAvailableFilters<IContactListing>)!,\r\n                    null);\r\n            var jsonConverterForMessage = new ListingSelectorJsonConverter<IMessageListing>(\r\n                    (Activator.CreateInstance(typeof(AvailableFiltersForMessage)) as IAvailableFilters<IMessageListing>)!,\r\n                    null);\r\n\r\n            options.SerializerSettings.Converters.Add(jsonConverterForConversation);\r\n            options.SerializerSettings.Converters.Add(jsonConverterForContact);\r\n            options.SerializerSettings.Converters.Add(jsonConverterForMessage);\r\n        });\r\n        services.AddSwaggerGenNewtonsoftSupport();\r\n\r\n        services.AddSwaggerGen(c =>\r\n        {\r\n            var mainProjectXmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\r\n            var mainProjectXmlPath = Path.Combine(AppContext.BaseDirectory, mainProjectXmlFile);\r\n\r\n            c.IncludeXmlComments(mainProjectXmlPath);\r\n\r\n            var nugetPackageXmlPath = Path.Combine(AppContext.BaseDirectory, \"Studi.Api.Lms.Messenger.ExchangeDataContract.xml\");\r\n            if (File.Exists(nugetPackageXmlPath))\r\n            {\r\n                c.IncludeXmlComments(nugetPackageXmlPath);\r\n            }\r\n        });\r\n\r\n        services.AddEndpointsApiExplorer();\r\n\r\n        Application.Notifications.ServiceCollectionApplicationExtension.AddApplicationServices(services);\r\n\r\n        var unifiedApiUri = config.GetValue<string>(\"UnifiedApiUri\");\r\n        services.AddStudiSecurity(unifiedApiUri);\r\n        services.AddWebSocketsServiceByClient(webSocketsInstancesOption: options => config.Bind(\"WebsocketsConfiguration\", options));\r\n\r\n        services.AddHangfire(config => config.UseMemoryStorage());\r\n        services.AddHangfireServer();\r\n    }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Configure and set up dependencies for the IoC container, including API core, application, infrastructure, controller, user infrastructure, email templating, JSON converters for conversation, contact, and message listings, Swagger generation, endpoint API explorer, notifications, Studi security, websockets service, and Hangfire.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "services",
                        "param_name": "services",
                        "param_desc": "IServiceCollection services - The parameter 'services' is of type IServiceCollection and is used to configure and set up dependencies for the IoC container. It is responsible for registering services such as API core, application, infrastructure, controller, user infrastructure, email templating, JSON converters for conversation, contact, and message listings, Swagger generation, endpoint API explorer, notifications, Studi security, websockets service, and Hangfire."
                    },
                    {
                        "name": "config",
                        "param_name": "config",
                        "param_desc": "ConfigurationManager config - The parameter 'config' is of type ConfigurationManager and is used to provide configuration settings for the method 'SetIocContainerDependencies'. It may contain configurations related to database connections, API keys, environment settings, and other parameters required for the proper functioning of the IoC container and its dependencies."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Configure and set up dependencies for the IoC container, including API core, application, infrastructure, controller, user infrastructure, email templating, JSON converters for conversation, contact, and message listings, Swagger generation, endpoint API explorer, notifications, Studi security, websockets service, and Hangfire.\n/// </summary>\n/// <param name=\"services\">IServiceCollection services - The parameter 'services' is of type IServiceCollection and is used to configure and set up dependencies for the IoC container. It is responsible for registering services such as API core, application, infrastructure, controller, user infrastructure, email templating, JSON converters for conversation, contact, and message listings, Swagger generation, endpoint API explorer, notifications, Studi security, websockets service, and Hangfire.</param>\n/// <param name=\"config\">ConfigurationManager config - The parameter 'config' is of type ConfigurationManager and is used to provide configuration settings for the method 'SetIocContainerDependencies'. It may contain configurations related to database connections, API keys, environment settings, and other parameters required for the proper functioning of the IoC container and its dependencies.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AddDatabaseConfiguration",
            "code_start_index": 5357,
            "method_name": "AddDatabaseConfiguration",
            "existing_summary": "\r\n    /// <summary>\r\n    /// Configures the application's database context with the provided connection string and other settings.\r\n    /// </summary>\r\n    /// <param name=\"services\">The IServiceCollection to add the database configuration to.</param>\r\n    /// <param name=\"configuration\">The configuration to retrieve the database connection settings.</param>\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "services",
                    "param_name": "services",
                    "param_type": "IServiceCollection",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "configuration",
                    "param_name": "configuration",
                    "param_type": "IConfiguration",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        var connectionString = configuration.GetConnectionString(\"LMSConnection\");\r\n        var commandTimeOut = (int)TimeSpan.Parse(configuration[\"CommandTimeout\"]).TotalSeconds;\r\n\r\n        // Set CS for Messenger datacontext and set request timeout\r\n        services.AddDbContext<MessengerDbContext>(options =>\r\n            options.UseSqlServer(connectionString,\r\n            optionsBuilder =>\r\n            {\r\n                optionsBuilder.CommandTimeout(commandTimeOut);\r\n                optionsBuilder.MigrationsHistoryTable(\r\n                    HistoryRepository.DefaultTableName, Data.DataContext.Helper.MessengerSchema);\r\n            }));\r\n\r\n        // Set CS for LMS datacontext and set request timeout\r\n        services.AddDbContext<StudiLmsContext>(options =>\r\n            options.UseSqlServer(connectionString,\r\n            optionsBuilder =>\r\n            {\r\n                optionsBuilder.CommandTimeout(commandTimeOut);\r\n            }));\r\n    }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Configure database connections and request timeouts for Messenger and LMS datacontexts.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "services",
                        "param_name": "services",
                        "param_desc": "IServiceCollection services - The collection of service descriptors. This parameter is used to register application services."
                    },
                    {
                        "name": "configuration",
                        "param_name": "configuration",
                        "param_desc": "IConfiguration configuration - The configuration settings. This parameter is used to access application configuration settings."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Configure database connections and request timeouts for Messenger and LMS datacontexts.\n/// </summary>\n/// <param name=\"services\">IServiceCollection services - The collection of service descriptors. This parameter is used to register application services.</param>\n/// <param name=\"configuration\">IConfiguration configuration - The configuration settings. This parameter is used to access application configuration settings.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AddMigrationConfiguration",
            "code_start_index": 6791,
            "method_name": "AddMigrationConfiguration",
            "existing_summary": "\r\n    /// <summary>\r\n    /// Configures the application's database migration settings based on the provided configuration.\r\n    /// </summary>\r\n    /// <param name=\"services\">The IServiceCollection to add the migration configuration to.</param>\r\n    /// <param name=\"configuration\">The configuration to retrieve the database migration settings.</param>\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "services",
                    "param_name": "services",
                    "param_type": "IServiceCollection",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "configuration",
                    "param_name": "configuration",
                    "param_type": "IConfiguration",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        // Set 'DatabaseKind' migration property\r\n        var databaseKind = configuration[\"DatabaseKind\"];\r\n\r\n        if (Enum.TryParse(databaseKind, out DatabaseKindEnum currentDatabaseKind))\r\n            MigrationConfiguration.DatabaseKind = currentDatabaseKind;\r\n        else\r\n            MigrationConfiguration.DatabaseKind = DatabaseKindEnum.NEW_DB;\r\n\r\n        Console.WriteLine($\"<<<< DatabaseKind = {MigrationConfiguration.DatabaseKind} >>>>\");\r\n\r\n        // Set 'DatabaseEnvironment' migration property\r\n        var databaseEnvironment = configuration[\"DatabaseEnvironment\"];\r\n\r\n        if (Enum.TryParse(databaseEnvironment, out DatabaseEnvironmentEnum currentDatabaseEnvironment))\r\n            MigrationConfiguration.DatabaseEnvironment = currentDatabaseEnvironment;\r\n        else\r\n            Guard.Throw($\"Unhandled database environment entitled '{databaseEnvironment}'. Fix the value setted for 'DatabaseEnvironment' property in the application settings.\");\r\n\r\n        Console.WriteLine($\"---/ DatabaseEnvironment = {MigrationConfiguration.DatabaseEnvironment} /---\");\r\n    }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the migration configuration properties 'DatabaseKind' and 'DatabaseEnvironment' based on the values retrieved from the application settings, with error handling for unsupported values.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "services",
                        "param_name": "services",
                        "param_desc": "An instance of the IServiceCollection interface, used for configuring the application's services."
                    },
                    {
                        "name": "configuration",
                        "param_name": "configuration",
                        "param_desc": "An instance of the IConfiguration interface, used for accessing application settings and configuration values."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the migration configuration properties 'DatabaseKind' and 'DatabaseEnvironment' based on the values retrieved from the application settings, with error handling for unsupported values.\n/// </summary>\n/// <param name=\"services\">An instance of the IServiceCollection interface, used for configuring the application's services.</param>\n/// <param name=\"configuration\">An instance of the IConfiguration interface, used for accessing application settings and configuration values.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AddSettingsCors",
            "code_start_index": 8314,
            "method_name": "AddSettingsCors",
            "existing_summary": "\r\n    /// <summary>\r\n    /// Configures CORS (Cross-Origin Resource Sharing) settings for the application.\r\n    /// </summary>\r\n    /// <param name=\"services\">The IServiceCollection to add the CORS settings to.</param>\r\n    /// <param name=\"config\">The configuration manager to retrieve CORS settings.</param>\r\n    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "services",
                    "param_name": "services",
                    "param_type": "IServiceCollection",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "config",
                    "param_name": "config",
                    "param_type": "ConfigurationManager",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        services.AddCors(options =>\r\n        {\r\n            var allowedCorsOrigins = config.GetSection(\"AllowedCorsOrigins\").Get<string[]>();\r\n            options.AddDefaultPolicy(\r\n                builder =>\r\n                {\r\n                    builder\r\n                    .WithOrigins(allowedCorsOrigins)\r\n                    .AllowAnyHeader()\r\n                    .AllowAnyMethod()\r\n                    .AllowCredentials();\r\n                });\r\n        });\r\n    }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Configure allowed CORS origins for adding settings.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "services",
                        "param_name": "services",
                        "param_desc": "IServiceCollection services - Represents the collection of service descriptors. This parameter is used to register services within the application's service container."
                    },
                    {
                        "name": "config",
                        "param_name": "config",
                        "param_desc": "ConfigurationManager config - Represents the configuration manager instance. This parameter is used to access and manage application settings and configurations."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Configure allowed CORS origins for adding settings.\n/// </summary>\n/// <param name=\"services\">IServiceCollection services - Represents the collection of service descriptors. This parameter is used to register services within the application's service container.</param>\n/// <param name=\"config\">ConfigurationManager config - Represents the configuration manager instance. This parameter is used to access and manage application settings and configurations.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "StartupHelpers"
}