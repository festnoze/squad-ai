{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/EmploiV2Controller.cs",
    "index_shift_code": 334,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Services.Interfaces",
        "LMS.Utils",
        "LMS.Utils.Cache",
        "Newtonsoft.Json",
        "System.Linq",
        "System.Web",
        "System.Web.Http",
        "System.Web.Http.Description"
    ],
    "access_modifier": "public",
    "struct_name": "EmploiV2Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetEmploiInfos",
            "code_start_index": 1015,
            "method_name": "GetEmploiInfos",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Retourne les infos du service emploi pour une \u00e9cole donn\u00e9e\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var dnsConfig = _dnsConfig.GetDnsConfig();\r\n\r\n            var ecole = DataCache.GetSchools(_db)\r\n                .Where(e => e.Id == ecoleId)\r\n                .Select(e => new EmploiInfosViewModel\r\n                {\r\n                    Email = dnsConfig.EmailRecrutement,\r\n                    Url = dnsConfig.UrlJobboard,\r\n                    UrlTuto = dnsConfig.UrlJobboardTuto,\r\n                    UrlEntreprise = dnsConfig.UrlJobboardEntreprise,\r\n                    UrlFicheMetiers = dnsConfig.UrlFicheMetiers\r\n                })\r\n                .FirstOrDefault();\r\n\r\n            if (ecole == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            ecole.UserEmploiDescription = _db.Users.Where(u => u.Email == ecole.Email).Select(u => u.DescriptionProfil).FirstOrDefault();\r\n\r\n            return Ok(ecole);\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve employment information for a specific school, including email, URLs, and user job descriptions.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "GetEmploiInfos",
                        "param_name": "GetEmploiInfos",
                        "param_desc": "Retrieve employment information for a specific school, including email, URLs, and user job descriptions."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve employment information for a specific school, including email, URLs, and user job descriptions.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"GetEmploiInfos\">Retrieve employment information for a specific school, including email, URLs, and user job descriptions.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "EmploiV2Controller"
}