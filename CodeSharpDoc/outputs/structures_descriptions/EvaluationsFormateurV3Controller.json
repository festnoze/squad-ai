{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V3/EvaluationsV3Controller.cs",
    "index_shift_code": 643,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V3",
    "usings": [
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Utils",
        "LMS.Utils.Cache",
        "Newtonsoft.Json",
        "Serilog",
        "System",
        "System.Collections.Generic",
        "System.ComponentModel.DataAnnotations",
        "System.Data.Entity",
        "System.IO",
        "System.Linq",
        "System.Net",
        "System.Threading.Tasks",
        "System.Web.Http",
        "System.Web.Http.Description",
        "LMS.Configuration",
        "LMS.Notifications.V2",
        "Lms.Common.Enumerations",
        "LMS.Services.Interfaces",
        "LMS.ModelsDTOs.Evaluation"
    ],
    "access_modifier": "public",
    "struct_name": "EvaluationsFormateurV3Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetStudentCopyDetailsAsync",
            "code_start_index": 1544,
            "method_name": "GetStudentCopyDetailsAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "studentCopyId",
                    "param_name": "studentCopyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentTeacher = User.Identity.GetUser();\r\n\r\n            // make sure the current user is a trainer\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (!estFormateur)\r\n            {\r\n                return StatusCode(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            var isStudentVideo = await (from r in _db.Ressources\r\n                join rv in _db.RessourceVersions on r.Id equals rv.RessourceId\r\n                join tr in _db.EvaluationTypeRendus on r.EvaluationTypeRenduAutoriseId equals tr.Id\r\n                join c in _db.Copies on rv.Id equals c.EvaluationVersionId\r\n                where c.Id == studentCopyId &&\r\n                      tr.Code == \"VIDEO\"\r\n                select r.EvaluationTypeRenduAutoriseId).AnyAsync();\r\n\r\n            //Inscriptions Parcours non n\u00e9cessaires :\r\n            var coursesCodesToAvoid = new List<string>() { \"Competences\", \"Options\", \"OptionsMetiers\", \"ApprentissageAugmente\" };\r\n\r\n            var copy = await _db.Copies\r\n                                .Where(c => c.Id == studentCopyId\r\n                                         && c.DateDelete == null\r\n                                         && !c.DispoLms\r\n                                         && !c.ModeBrouillon\r\n                                         && c.RessourceVersion\r\n                                             .RessourcesObjectRessourcesVersions\r\n                                             .Any(rorv => rorv.AffectationCorrecteurs\r\n                                                              .Any(ac => ac.DateDelete == null && ac.CorrecteurId == currentTeacher.Id))\r\n                                )\r\n                                .Select(c => new CopyDetailV3ViewModel\r\n                                {\r\n                                    CopyId = c.Id,\r\n                                    Reference = c.Reference,\r\n                                    // infos sur les \u00e9l\u00e8ves\r\n                                    Students = c.CopieUsers\r\n                                                .Where(cu => cu.DateDelete == null)\r\n                                                .Select(cu => cu.EcoleUser)\r\n                                                .Select(u => new CopyUserV3ViewModel\r\n                                                {\r\n                                                    SchoolId = u.EcoleId,\r\n                                                    UserId = u.User.Id,\r\n                                                    ProfilePicture = (u.User.FileIdPhotoProfil != null) ? u.User.UploadedFile_FileIdPhotoProfil.FileUrl : u.User.PhotoProfil,\r\n                                                    Genre = u.User.Civilite,\r\n                                                    LastName = u.User.Nom,\r\n                                                    FirstName = u.User.Prenom,\r\n                                                    DateOfBirth = u.User.DateNaissance\r\n                                                })\r\n                                                .ToList(),\r\n                                    // info sur l'\u00e9valuation rattach\u00e9 \u00e0 la copie\r\n                                    Evaluation = new EvaluationV3ViewModel\r\n                                    {\r\n                                        ResourceVersionId = c.RessourceVersion.Id,\r\n                                        ResourceId = c.RessourceVersion.RessourceId,\r\n                                        Title = c.RessourceVersion.Ressource.Titre,\r\n                                        // Cat\u00e9gorie de l'\u00e9valuation\r\n                                        Category = new EvaluationV3Category\r\n                                        {\r\n                                            Code = c.RessourceVersion.Ressource.EvaluationCategorie.Code,\r\n                                            Label = c.RessourceVersion.Ressource.EvaluationCategorie.Libelle,\r\n                                        },\r\n                                        RenduCode = c.RessourceVersion.Ressource.EvaluationTypeRendu.Code\r\n                                    },\r\n                                    History = c.CopieAvancements\r\n                                               .Select(ca => new CopyHistoryV3ViewModel\r\n                                               {\r\n                                                   Code = ca.CopieStatut.Code,\r\n                                                   Label = ca.CopieStatut.Libelle,\r\n                                                   StartDate = ca.DateDebut\r\n                                               })\r\n                                               .OrderByDescending(ca => ca.StartDate)\r\n                                               .ToList(),\r\n                                    // Copies originales\r\n                                    Copies = c.CopieOriginales\r\n                                              .Where(co => co.DateDelete == null\r\n                                                        && co.DateValidation != null\r\n                                                        && co.RessourcesObjectRessourcesVersion\r\n                                                             .AffectationCorrecteurs\r\n                                                             .Any(ac => ac.DateDelete == null && ac.CorrecteurId == currentTeacher.Id)\r\n                                              )\r\n                                              .Where(co => !co.CopieCorrigees.Any(cc => cc.DateDelete == null) \r\n                                                        || co.CopieCorrigees.Any(cc => cc.DateDelete == null && cc.CorrecteurId == currentTeacher.Id))\r\n                                              .Select(oc => new OriginalCopyV3ViewModel\r\n                                              {\r\n                                                  OriginalCopyId = oc.Id,\r\n                                                  SubmissionDate = oc.DateEnvoi,\r\n                                                  ValidationDate = oc.DateValidation,\r\n                                                  CorrectionDeadline = oc.DateLimiteCorrection,\r\n                                                  LastStatus = oc.CopieOriginaleAvancements\r\n                                                                 .OrderByDescending(ca => ca.DateDebut)\r\n                                                                 .Select(ca => ca.CopieStatut.Code)\r\n                                                                 .FirstOrDefault(),\r\n                                                  // Student turned-in paper (oc.UploadFileId)\r\n                                                  File = new FileV3ViewModel\r\n                                                  {\r\n                                                      OldFileName = oc.Filename,\r\n                                                      UploadedFilename = oc.UploadFile.FileName,\r\n                                                      UploadedFileUrl = oc.UploadFile.FileUrl,\r\n                                                  },\r\n                                                  // Student voice message\r\n                                                  VoiceMessage = oc.AudioFileId == null ? null : new FileV3ViewModel\r\n                                                  {\r\n                                                      OldFileName = null,\r\n                                                      UploadedFilename = oc.AudioFile.FileName,\r\n                                                      UploadedFileUrl = oc.AudioFile.FileUrl,\r\n                                                  },\r\n                                                  // Info sur l'\u00e9nonc\u00e9\r\n                                                  Evaluation = new EvaluationSubject\r\n                                                  {\r\n                                                      Id = oc.RessourceVersionRessourceObjectId,\r\n                                                      ResourceLabel = oc.RessourcesObjectRessourcesVersion.RessourceObject.Libelle,\r\n                                                      OldFileName = oc.RessourcesObjectRessourcesVersion.RessourceObject.ResourceType.Url + oc.RessourcesObjectRessourcesVersion.RessourceObject.Filename,\r\n                                                      UploadedFileUrl = oc.RessourcesObjectRessourcesVersion.RessourceObject.UploadedFile.FileUrl,\r\n                                                      UploadedFilename = oc.RessourcesObjectRessourcesVersion.RessourceObject.UploadedFile.FileName,\r\n                                                      Corrections = oc.RessourcesObjectRessourcesVersion.RessourceObject.RessourceObjects.Select(x => new EvaluationCorrection\r\n                                                      {\r\n                                                          Id = x.Id,\r\n                                                          ResourceLabel = x.Libelle,\r\n                                                          OldFileName = x.ResourceType.Url + x.Filename,\r\n                                                          UploadedFileUrl = x.UploadedFile.FileUrl,\r\n                                                          UploadedFilename = x.UploadedFile.FileName,\r\n                                                          RessourceTypeCode = x.ResourceType.Code\r\n                                                      })\r\n                                                      .ToList(),\r\n                                                      EvaluationGrid = c.RessourceVersion.RessourcesObjectRessourcesVersions\r\n                                                                        .Where(rorv => rorv.RessourceObject.ResourceType.Code == EvaluationGridResourceTypeCode)\r\n                                                                        .Where(rorv => rorv.RessourceObject.DateDelete == null)\r\n                                                                        .Select(rorv => new EvaluationGrid\r\n                                                                        {\r\n                                                                            OldFileName = rorv.RessourceObject.ResourceType.Url + rorv.RessourceObject.Filename,\r\n                                                                            UploadedFileUrl = rorv.RessourceObject.UploadedFile.FileUrl,\r\n                                                                            UploadedFilename = rorv.RessourceObject.UploadedFile.FileName\r\n                                                                        })\r\n                                                                        .FirstOrDefault()\r\n                                                  },\r\n                                                  History = oc.CopieOriginaleAvancements\r\n                                                              .Select(ca => new CopyHistoryV3ViewModel\r\n                                                              {\r\n                                                                  Code = ca.CopieStatut.Code,\r\n                                                                  Label = ca.CopieStatut.Libelle,\r\n                                                                  StartDate = ca.DateDebut,\r\n                                                              })\r\n                                                              .OrderByDescending(ca => ca.StartDate)\r\n                                                              .ToList(),\r\n                                                  // Copie corrig\u00e9 (si elle existe)\r\n                                                  CorrectedCopy = oc.CopieCorrigees\r\n                                                                    .Where(cc => cc.DateDelete == null)\r\n                                                                    .Select(cc => new CorrectedCopyV3ViewModel\r\n                                                                    {\r\n                                                                        CorrectedCopyId = cc.Id,\r\n                                                                        CorrectionDate = cc.DateCorrection,\r\n                                                                        Grade = cc.Note,\r\n                                                                        Comment = cc.Commentaire,\r\n                                                                        VoiceMessage = cc.UploadedFile_AudioFileId != null ? new FileV3ViewModel\r\n                                                                        {\r\n                                                                            OldFileName = null,\r\n                                                                            UploadedFilename = \"message_correcteur.mp3\",\r\n                                                                            UploadedFileUrl = cc.UploadedFile_AudioFileId.FileUrl\r\n                                                                        } : (cc.AudioFile == null ? null : new FileV3ViewModel\r\n                                                                        {\r\n                                                                            OldFileName = null,\r\n                                                                            UploadedFilename = \"message_correcteur.mp3\",\r\n                                                                            UploadedFileUrl = cc.AudioFile\r\n                                                                        }),\r\n                                                                        File = (cc.Filename ?? cc.UploadFile.FileName) == null ? null : new FileV3ViewModel\r\n                                                                        {\r\n                                                                            OldFileName = cc.Filename,\r\n                                                                            UploadedFilename = cc.UploadFile.FileName,\r\n                                                                            UploadedFileUrl = cc.UploadFile.FileUrl,\r\n                                                                        },\r\n                                                                        Corrector = new CopyCorrectorV3ViewModel\r\n                                                                        {\r\n                                                                            UserId = cc.CorrecteurId,\r\n                                                                            Fullname = cc.User.Pseudo\r\n                                                                        },\r\n                                                                        PublicComment = cc.Commentaire,\r\n                                                                        InternalComment = cc.CommentaireInterne,\r\n                                                                    })\r\n                                                                    .FirstOrDefault()\r\n                                              })\r\n                                              .ToList()\r\n                                })\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (copy == null || copy.Copies.Count == 0)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            var studentInfo = copy.Students.Select(s => new\r\n            {\r\n                s.UserId,\r\n                s.SchoolId\r\n            }).First();\r\n\r\n            #region Get Json Evaluations Courses\r\n\r\n            //Je r\u00e9cup\u00e8re le code de l'\u00e9valuation \u00e0 part. De cette mani\u00e8re, je n'ajoute pas le code de l'\u00e9valuation dans l'objet final envoy\u00e9 au front\r\n            var codeEval = await _db.Ressources\r\n                                    .AsNoTracking()\r\n                                    .Where(res => res.Id == copy.Evaluation.ResourceId)\r\n                                    .Select(res => res.Code)\r\n                                    .FirstOrDefaultAsync();\r\n\r\n            //////Get evaluations formations\r\n            List<EvalAndBlocAndCourseDto> json = await _parcoursReader.GetCoursesAndEvaluationsAsync(_db, codeEval);\r\n\r\n            var userInscriptions = await _db.InscriptionPromotions\r\n                                            .AsNoTracking()\r\n                                            .Where(iprom => iprom.UserId == studentInfo.UserId\r\n                                                         && iprom.EcoleId == studentInfo.SchoolId\r\n                                                         && (iprom.DateDelete == null || iprom.DateDelete > DateTime.Now)\r\n                                                         && ((iprom.DateFinAcces == null && iprom.Promotion.DateFinPromo > DateTime.Now) || iprom.DateFinAcces > DateTime.Now)\r\n                                                         && !coursesCodesToAvoid.Contains(iprom.Promotion.Parcour.Code))\r\n                                            .Select(iprom => new\r\n                                            {\r\n                                                courseCode = iprom.Promotion.Parcour.Code,\r\n                                                promotionId = iprom.PromotionId,\r\n                                                ipromDateCreate = iprom.DateCreate,\r\n                                                blocsEvalsCodes = iprom.User\r\n                                                                       .EcoleUsers\r\n                                                                       .FirstOrDefault(eu => eu.EcoleId == iprom.EcoleId)\r\n                                                                       .InscriptionsBlocCompetences\r\n                                                                       .Where(ibc => ibc.PromotionId == iprom.PromotionId\r\n                                                                                  && (ibc.DateDelete == null || ibc.DateDelete > DateTime.Now))\r\n                                                                       .OrderBy(ibc => ibc.DateCreate)\r\n                                                                       .Select(ibc => ibc.BlocCompetence.Code)\r\n                                                                       .ToList()\r\n                                            })\r\n                                            .OrderBy(ui => ui.ipromDateCreate)\r\n                                            .ToListAsync();\r\n\r\n            #endregion\r\n\r\n            foreach (var ui in userInscriptions)\r\n            {\r\n                var test = json.FirstOrDefault(j => j.CourseCode == ui.courseCode\r\n                                        && ui.blocsEvalsCodes.Contains(j.BlocCode));\r\n\r\n                if (test != null)\r\n                {\r\n                    copy.Parcours = test.CourseTitle;\r\n                    copy.BlocCompetence = test.BlocTitle;\r\n                    copy.Evaluation.IsGraded = !test.NotRated;\r\n                    goto outer;\r\n                }\r\n            }\r\n        outer:\r\n\r\n            var mostRecentValidationDate = copy.Copies.Max(c => c.CorrectionDeadline);\r\n            if (mostRecentValidationDate == null)\r\n            {\r\n                copy.Retard = 0;\r\n            }\r\n            else\r\n            {\r\n                copy.Retard = GetCopyRetard(mostRecentValidationDate.Value.DateTime);\r\n            }\r\n\r\n            if (isStudentVideo)\r\n            {\r\n                foreach (var copie in copy.Copies)\r\n                {\r\n                    copie.File.UploadedFileUrl = await JwPlayerHelper.GetVideoUrlAsync(_config, copie.File.UploadedFileUrl);\r\n                }\r\n            }\r\n\r\n            return Ok(copy);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the resource path associated with a forum post ID, ensuring the caller is a teacher or internal user, and returning the relevant resource details if found.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "studentCopyId",
                        "param_name": "studentCopyId",
                        "param_desc": "The ID of the student copy for which details are to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the resource path associated with a forum post ID, ensuring the caller is a teacher or internal user, and returning the relevant resource details if found.\n/// </summary>\n/// <param name=\"studentCopyId\">The ID of the student copy for which details are to be retrieved.</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            var currentTeacher = User.Identity.GetUser();\r\n\r\n            // make sure the current user is a trainer\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (!estFormateur)\r\n            {\r\n                return StatusCode(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            var isStudentVideo = await (from r in _db.Ressources\r\n                join rv in _db.RessourceVersions on r.Id equals rv.RessourceId\r\n                join tr in _db.EvaluationTypeRendus on r.EvaluationTypeRenduAutoriseId equals tr.Id\r\n                join c in _db.Copies on rv.Id equals c.EvaluationVersionId\r\n                where c.Id == studentCopyId &&\r\n                      tr.Code == \"VIDEO\"\r\n                select r.EvaluationTypeRenduAutoriseId).AnyAsync();\r\n\r\n            //Inscriptions Parcours non n\u00e9cessaires :\r\n            var coursesCodesToAvoid = new List<string>() { \"Competences\", \"Options\", \"OptionsMetiers\", \"ApprentissageAugmente\" };\r\n\r\n            var copy = await _db.Copies\r\n                                .Where(c => c.Id == studentCopyId\r\n                                         && c.DateDelete == null\r\n                                         && !c.DispoLms\r\n                                         && !c.ModeBrouillon\r\n                                         && c.RessourceVersion\r\n                                             .RessourcesObjectRessourcesVersions\r\n                                             .Any(rorv => rorv.AffectationCorrecteurs\r\n                                                              .Any(ac => ac.DateDelete == null && ac.CorrecteurId == currentTeacher.Id))\r\n                                )\r\n                                .Select(c => new CopyDetailV3ViewModel\r\n                                {\r\n                                    CopyId = c.Id,\r\n                                    Reference = c.Reference,\r\n                                    // infos sur les \u00e9l\u00e8ves\r\n                                    Students = c.CopieUsers\r\n                                                .Where(cu => cu.DateDelete == null)\r\n                                                .Select(cu => cu.EcoleUser)\r\n                                                .Select(u => new CopyUserV3ViewModel\r\n                                                {\r\n                                                    SchoolId = u.EcoleId,\r\n                                                    UserId = u.User.Id,\r\n                                                    ProfilePicture = (u.User.FileIdPhotoProfil != null) ? u.User.UploadedFile_FileIdPhotoProfil.FileUrl : u.User.PhotoProfil,\r\n                                                    Genre = u.User.Civilite,\r\n                                                    LastName = u.User.Nom,\r\n                                                    FirstName = u.User.Prenom,\r\n                                                    DateOfBirth = u.User.DateNaissance\r\n                                                })\r\n                                                .ToList(),\r\n                                    // info sur l'\u00e9valuation rattach\u00e9 \u00e0 la copie\r\n                                    Evaluation = new EvaluationV3ViewModel\r\n                                    {\r\n                                        ResourceVersionId = c.RessourceVersion.Id,\r\n                                        ResourceId = c.RessourceVersion.RessourceId,\r\n                                        Title = c.RessourceVersion.Ressource.Titre,\r\n                                        // Cat\u00e9gorie de l'\u00e9valuation\r\n                                        Category = new EvaluationV3Category\r\n                                        {\r\n                                            Code = c.RessourceVersion.Ressource.EvaluationCategorie.Code,\r\n                                            Label = c.RessourceVersion.Ressource.EvaluationCategorie.Libelle,\r\n                                        },\r\n                                        RenduCode = c.RessourceVersion.Ressource.EvaluationTypeRendu.Code\r\n                                    },\r\n                                    History = c.CopieAvancements\r\n                                               .Select(ca => new CopyHistoryV3ViewModel\r\n                                               {\r\n                                                   Code = ca.CopieStatut.Code,\r\n                                                   Label = ca.CopieStatut.Libelle,\r\n                                                   StartDate = ca.DateDebut\r\n                                               })\r\n                                               .OrderByDescending(ca => ca.StartDate)\r\n                                               .ToList(),\r\n                                    // Copies originales\r\n                                    Copies = c.CopieOriginales\r\n                                              .Where(co => co.DateDelete == null\r\n                                                        && co.DateValidation != null\r\n                                                        && co.RessourcesObjectRessourcesVersion\r\n                                                             .AffectationCorrecteurs\r\n                                                             .Any(ac => ac.DateDelete == null && ac.CorrecteurId == currentTeacher.Id)\r\n                                              )\r\n                                              .Where(co => !co.CopieCorrigees.Any(cc => cc.DateDelete == null) \r\n                                                        || co.CopieCorrigees.Any(cc => cc.DateDelete == null && cc.CorrecteurId == currentTeacher.Id))\r\n                                              .Select(oc => new OriginalCopyV3ViewModel\r\n                                              {\r\n                                                  OriginalCopyId = oc.Id,\r\n                                                  SubmissionDate = oc.DateEnvoi,\r\n                                                  ValidationDate = oc.DateValidation,\r\n                                                  CorrectionDeadline = oc.DateLimiteCorrection,\r\n                                                  LastStatus = oc.CopieOriginaleAvancements\r\n                                                                 .OrderByDescending(ca => ca.DateDebut)\r\n                                                                 .Select(ca => ca.CopieStatut.Code)\r\n                                                                 .FirstOrDefault(),\r\n                                                  // Student turned-in paper (oc.UploadFileId)\r\n                                                  File = new FileV3ViewModel\r\n                                                  {\r\n                                                      OldFileName = oc.Filename,\r\n                                                      UploadedFilename = oc.UploadFile.FileName,\r\n                                                      UploadedFileUrl = oc.UploadFile.FileUrl,\r\n                                                  },\r\n                                                  // Student voice message\r\n                                                  VoiceMessage = oc.AudioFileId == null ? null : new FileV3ViewModel\r\n                                                  {\r\n                                                      OldFileName = null,\r\n                                                      UploadedFilename = oc.AudioFile.FileName,\r\n                                                      UploadedFileUrl = oc.AudioFile.FileUrl,\r\n                                                  },\r\n                                                  // Info sur l'\u00e9nonc\u00e9\r\n                                                  Evaluation = new EvaluationSubject\r\n                                                  {\r\n                                                      Id = oc.RessourceVersionRessourceObjectId,",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": "ResourceLabel = oc.RessourcesObjectRessourcesVersion.RessourceObject.Libelle,\r\n                                                      OldFileName = oc.RessourcesObjectRessourcesVersion.RessourceObject.ResourceType.Url + oc.RessourcesObjectRessourcesVersion.RessourceObject.Filename,\r\n                                                      UploadedFileUrl = oc.RessourcesObjectRessourcesVersion.RessourceObject.UploadedFile.FileUrl,\r\n                                                      UploadedFilename = oc.RessourcesObjectRessourcesVersion.RessourceObject.UploadedFile.FileName,\r\n                                                      Corrections = oc.RessourcesObjectRessourcesVersion.RessourceObject.RessourceObjects.Select(x => new EvaluationCorrection\r\n                                                      {\r\n                                                          Id = x.Id,\r\n                                                          ResourceLabel = x.Libelle,\r\n                                                          OldFileName = x.ResourceType.Url + x.Filename,\r\n                                                          UploadedFileUrl = x.UploadedFile.FileUrl,\r\n                                                          UploadedFilename = x.UploadedFile.FileName,\r\n                                                          RessourceTypeCode = x.ResourceType.Code\r\n                                                      })\r\n                                                      .ToList(),\r\n                                                      EvaluationGrid = c.RessourceVersion.RessourcesObjectRessourcesVersions\r\n                                                                        .Where(rorv => rorv.RessourceObject.ResourceType.Code == EvaluationGridResourceTypeCode)\r\n                                                                        .Where(rorv => rorv.RessourceObject.DateDelete == null)\r\n                                                                        .Select(rorv => new EvaluationGrid\r\n                                                                        {\r\n                                                                            OldFileName = rorv.RessourceObject.ResourceType.Url + rorv.RessourceObject.Filename,\r\n                                                                            UploadedFileUrl = rorv.RessourceObject.UploadedFile.FileUrl,\r\n                                                                            UploadedFilename = rorv.RessourceObject.UploadedFile.FileName\r\n                                                                        })\r\n                                                                        .FirstOrDefault()\r\n                                                  },\r\n                                                  History = oc.CopieOriginaleAvancements\r\n                                                              .Select(ca => new CopyHistoryV3ViewModel\r\n                                                              {\r\n                                                                  Code = ca.CopieStatut.Code,\r\n                                                                  Label = ca.CopieStatut.Libelle,\r\n                                                                  StartDate = ca.DateDebut,\r\n                                                              })\r\n                                                              .OrderByDescending(ca => ca.StartDate)\r\n                                                              .ToList(),\r\n                                                  // Copie corrig\u00e9 (si elle existe)\r\n                                                  CorrectedCopy = oc.CopieCorrigees\r\n                                                                    .Where(cc => cc.DateDelete == null)\r\n                                                                    .Select(cc => new CorrectedCopyV3ViewModel\r\n                                                                    {\r\n                                                                        CorrectedCopyId = cc.Id,\r\n                                                                        CorrectionDate = cc.DateCorrection,\r\n                                                                        Grade = cc.Note,\r\n                                                                        Comment = cc.Commentaire,\r\n                                                                        VoiceMessage = cc.UploadedFile_AudioFileId != null ? new FileV3ViewModel\r\n                                                                        {\r\n                                                                            OldFileName = null,\r\n                                                                            UploadedFilename = \"message_correcteur.mp3\",\r\n                                                                            UploadedFileUrl = cc.UploadedFile_AudioFileId.FileUrl\r\n                                                                        } : (cc.AudioFile == null ? null : new FileV3ViewModel\r\n                                                                        {\r\n                                                                            OldFileName = null,\r\n                                                                            UploadedFilename = \"message_correcteur.mp3\",\r\n                                                                            UploadedFileUrl = cc.AudioFile\r\n                                                                        }),\r\n                                                                        File = (cc.Filename ?? cc.UploadFile.FileName) == null ? null : new FileV3ViewModel\r\n                                                                        {\r\n                                                                            OldFileName = cc.Filename,\r\n                                                                            UploadedFilename = cc.UploadFile.FileName,\r\n                                                                            UploadedFileUrl = cc.UploadFile.FileUrl,\r\n                                                                        },\r\n                                                                        Corrector = new CopyCorrectorV3ViewModel\r\n                                                                        {\r\n                                                                            UserId = cc.CorrecteurId,\r\n                                                                            Fullname = cc.User.Pseudo\r\n                                                                        },\r\n                                                                        PublicComment = cc.Commentaire,\r\n                                                                        InternalComment = cc.CommentaireInterne,\r\n                                                                    })\r\n                                                                    .FirstOrDefault()\r\n                                              })\r\n                                              .ToList()\r\n                                })\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (copy == null || copy.Copies.Count == 0)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            var studentInfo = copy.Students.Select(s => new\r\n            {\r\n                s.UserId,\r\n                s.SchoolId\r\n            }).First();\r\n\r\n            #region Get Json Evaluations Courses\r\n\r\n            //Je r\u00e9cup\u00e8re le code de l'\u00e9valuation \u00e0 part. De cette mani\u00e8re, je n'ajoute pas le code de l'\u00e9valuation dans l'objet final envoy\u00e9 au front\r\n            var codeEval = await _db.Ressources\r\n                                    .AsNoTracking()",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": ".Where(res => res.Id == copy.Evaluation.ResourceId)\r\n                                    .Select(res => res.Code)\r\n                                    .FirstOrDefaultAsync();\r\n\r\n            //////Get evaluations formations\r\n            List<EvalAndBlocAndCourseDto> json = await _parcoursReader.GetCoursesAndEvaluationsAsync(_db, codeEval);\r\n\r\n            var userInscriptions = await _db.InscriptionPromotions\r\n                                            .AsNoTracking()\r\n                                            .Where(iprom => iprom.UserId == studentInfo.UserId\r\n                                                         && iprom.EcoleId == studentInfo.SchoolId\r\n                                                         && (iprom.DateDelete == null || iprom.DateDelete > DateTime.Now)\r\n                                                         && ((iprom.DateFinAcces == null && iprom.Promotion.DateFinPromo > DateTime.Now) || iprom.DateFinAcces > DateTime.Now)\r\n                                                         && !coursesCodesToAvoid.Contains(iprom.Promotion.Parcour.Code))\r\n                                            .Select(iprom => new\r\n                                            {\r\n                                                courseCode = iprom.Promotion.Parcour.Code,\r\n                                                promotionId = iprom.PromotionId,\r\n                                                ipromDateCreate = iprom.DateCreate,\r\n                                                blocsEvalsCodes = iprom.User\r\n                                                                       .EcoleUsers\r\n                                                                       .FirstOrDefault(eu => eu.EcoleId == iprom.EcoleId)\r\n                                                                       .InscriptionsBlocCompetences\r\n                                                                       .Where(ibc => ibc.PromotionId == iprom.PromotionId\r\n                                                                                  && (ibc.DateDelete == null || ibc.DateDelete > DateTime.Now))\r\n                                                                       .OrderBy(ibc => ibc.DateCreate)\r\n                                                                       .Select(ibc => ibc.BlocCompetence.Code)\r\n                                                                       .ToList()\r\n                                            })\r\n                                            .OrderBy(ui => ui.ipromDateCreate)\r\n                                            .ToListAsync();\r\n\r\n            #endregion\r\n\r\n            foreach (var ui in userInscriptions)\r\n            {\r\n                var test = json.FirstOrDefault(j => j.CourseCode == ui.courseCode\r\n                                        && ui.blocsEvalsCodes.Contains(j.BlocCode));\r\n\r\n                if (test != null)\r\n                {\r\n                    copy.Parcours = test.CourseTitle;\r\n                    copy.BlocCompetence = test.BlocTitle;\r\n                    copy.Evaluation.IsGraded = !test.NotRated;\r\n                    goto outer;\r\n                }\r\n            }\r\n        outer:\r\n\r\n            var mostRecentValidationDate = copy.Copies.Max(c => c.CorrectionDeadline);\r\n            if (mostRecentValidationDate == null)\r\n            {\r\n                copy.Retard = 0;\r\n            }\r\n            else\r\n            {\r\n                copy.Retard = GetCopyRetard(mostRecentValidationDate.Value.DateTime);\r\n            }\r\n\r\n            if (isStudentVideo)\r\n            {\r\n                foreach (var copie in copy.Copies)\r\n                {\r\n                    copie.File.UploadedFileUrl = await JwPlayerHelper.GetVideoUrlAsync(_config, copie.File.UploadedFileUrl);\r\n                }\r\n            }\r\n\r\n            return Ok(copy);\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "AffectCopyToFormateur",
            "code_start_index": 21941,
            "method_name": "AffectCopyToFormateur",
            "existing_summary": "\r\n\r\n        /// <summary>\r\n        /// Cette m\u00e9thode permet d'affecter une copie \u00e0 un correcteur.\r\n        /// Pour cela, on ajoute une entr\u00e9e dans la table CopiesCorrigees en renseignant l'id de la copie originale ainsi que l'id du correcteur\r\n        /// </summary>\r\n        /// <param name=\"copyId\"></param>\r\n        /// <param name=\"copyOriginaleId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "copyOriginaleId",
                    "param_name": "copyOriginaleId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            bool canDownload = false;\r\n\r\n            try\r\n            {\r\n                var currentformateur = User.Identity.GetUser();\r\n                // make sure the current user is a trainer\r\n                var isFormateur = await this.IsTeacher(_db);\r\n\r\n                if (!isFormateur)\r\n                {\r\n                    return StatusCode(HttpStatusCode.Forbidden);\r\n                }\r\n\r\n                var currentCopieOriginale = await this._db.CopieOriginales\r\n                    .Include(co => co.CopieCorrigees)\r\n                    .Where(co => co.Id == copyOriginaleId && (co.DateDelete == null || co.DateDelete > DateTime.Now))\r\n                    .FirstOrDefaultAsync();\r\n\r\n                if (currentCopieOriginale == null)\r\n                {\r\n                    throw new Exception(\"Unable to find current copie originale\");\r\n                }\r\n\r\n                var copieCorrigee = currentCopieOriginale.CopieCorrigees.Where(cc => cc.DateDelete == null || cc.DateDelete > DateTime.Now).FirstOrDefault();\r\n\r\n                if (copieCorrigee == null)\r\n                {\r\n                    var newCopieCorrigee = new CopieCorrigee\r\n                    {\r\n                        CopieOriginaleId = copyOriginaleId,\r\n                        DateCreate = DateTime.Now,\r\n                        UserCreate = currentformateur.Email,\r\n                        CorrecteurId = currentformateur.Id\r\n                    };\r\n                    currentCopieOriginale.CopieCorrigees.Add(newCopieCorrigee);\r\n\r\n                    await _db.SaveChangesAsync();\r\n                    canDownload = true;\r\n                }\r\n\r\n                if (copieCorrigee?.CorrecteurId == currentformateur.Id)\r\n                {\r\n                    canDownload = true;\r\n                }\r\n\r\n                return Ok(canDownload);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error while affecting the copy {0}\", copyId);\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve all active services for a user, check if they have access to specific services like Scholarvox, RosettaStone, or GoFluent, and return the information in a course service view model.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The unique identifier of the copy to be affected to the formateur."
                    },
                    {
                        "name": "copyOriginaleId",
                        "param_name": "copyOriginaleId",
                        "param_desc": "The unique identifier of the original copy that is being affected to the formateur."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve all active services for a user, check if they have access to specific services like Scholarvox, RosettaStone, or GoFluent, and return the information in a course service view model.\n/// </summary>\n/// <param name=\"copyId\">The unique identifier of the copy to be affected to the formateur.</param>\n/// <param name=\"copyOriginaleId\">The unique identifier of the original copy that is being affected to the formateur.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AddCorrectedCopyAsync",
            "code_start_index": 24197,
            "method_name": "AddCorrectedCopyAsync",
            "existing_summary": "\r\n\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "correctedCopy",
                    "param_name": "correctedCopy",
                    "param_type": "CorrectedCopyBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentTeacher = User.Identity.GetUser();\r\n\r\n            // make sure the current user is a trainer\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (!estFormateur)\r\n            {\r\n                return StatusCode(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            if (await this.CanCorrectCopyAsync(currentTeacher.Id, correctedCopy.CopyId, correctedCopy.OriginalCopyId) == false)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"La copie originale n'existe pas, a d\u00e9j\u00e0 \u00e9t\u00e9 corrig\u00e9 ou vous n'avez pas le droit de la corriger.\");\r\n            }\r\n\r\n            var copieOriginal = await this._db.CopieOriginales\r\n                .Include(co => co.CopieCorrigees.Select(cc => cc.UploadFile))\r\n                .Include(co => co.CopieCorrigees.Select(cc => cc.UploadedFile_AudioFileId))\r\n                .Include(co => co.CopieCorrigees.Select(cc => cc.EvaluationGridSubmissions))\r\n                .Where(co => co.Id == correctedCopy.OriginalCopyId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            var latestCorrectedCopy = copieOriginal.CopieCorrigees\r\n                                                   .Where(cc => cc.DateDelete == null)\r\n                                                   .OrderByDescending(cc => cc.DateCreate)\r\n                                                   .FirstOrDefault();\r\n\r\n            var hasLatestCorrectedCopyAnEvaluationGridSubmission = latestCorrectedCopy.EvaluationGridSubmissions.Any(egs => egs.DateDelete == null);\r\n            EvaluationGridSubmission evaluationGridSubmission = null;\r\n            double? ratingFromSubmission = 0d;\r\n            if (hasLatestCorrectedCopyAnEvaluationGridSubmission)\r\n            {\r\n                evaluationGridSubmission = latestCorrectedCopy.EvaluationGridSubmissions.Where(egs => egs.DateDelete == null).OrderByDescending(egs => egs.DateCreate).First();\r\n                ratingFromSubmission = latestCorrectedCopy.Note;\r\n            }\r\n\r\n            // S'il y a d\u00e9j\u00e0 des copies corrig\u00e9 on les marque comme supprim\u00e9\r\n            if (copieOriginal.CopieCorrigees.Count > 0)\r\n            {\r\n                foreach (var cc in copieOriginal.CopieCorrigees)\r\n                {\r\n                    cc.DateDelete = DateTime.Now;\r\n                    cc.UserDelete = currentTeacher.Email;\r\n                }\r\n            }\r\n\r\n            UploadedFile newCorrectedCopyFile;\r\n            UploadedFile newAudioMessageFile = null;\r\n\r\n            if (correctedCopy.CorrectedCopyFile == null)\r\n            {\r\n                newCorrectedCopyFile = correctedCopy.KeepCorrection ? latestCorrectedCopy?.UploadFile : null;\r\n            }\r\n            else\r\n            {\r\n                newCorrectedCopyFile = await _db.UploadedFiles\r\n                                                .AsNoTracking()\r\n                                                .FirstOrDefaultAsync(uf => uf.FileGuid == correctedCopy.CorrectedCopyFile);\r\n            }\r\n\r\n            if (correctedCopy.TrainerAudioFile == null)\r\n            {\r\n                newAudioMessageFile = correctedCopy.KeepAudioMessage ? latestCorrectedCopy?.UploadedFile_AudioFileId : null;\r\n            } else\r\n            {\r\n                newAudioMessageFile = await _db.UploadedFiles\r\n                                               .AsNoTracking()\r\n                                               .Where(uf => uf.FileGuid == correctedCopy.TrainerAudioFile)\r\n                                               .FirstOrDefaultAsync();\r\n            }\r\n\r\n\r\n            var copieCorrige = new CopieCorrigee\r\n            {\r\n                CopieOriginaleId = copieOriginal.Id,\r\n                Note = correctedCopy.Grade,\r\n                DateCreate = DateTime.Now,\r\n                UserCreate = currentTeacher.Email,\r\n                CorrecteurId = currentTeacher.Id,\r\n                Commentaire = correctedCopy.PublicComment,\r\n                CommentaireInterne = correctedCopy.InternalComment,\r\n            };\r\n\r\n            if (hasLatestCorrectedCopyAnEvaluationGridSubmission)\r\n            {\r\n                // Mark old corrected copy's EvaluationGridSubmissions as deleted\r\n                var now = DateTime.Now.ToUniversalTime();\r\n                latestCorrectedCopy.EvaluationGridSubmissions.Where(egs => egs.DateDelete == null).ToList()\r\n                    .ForEach(egs =>\r\n                    {\r\n                        egs.DateDelete = now;\r\n                        egs.UserDelete = evaluationGridSubmission.UserCreate;\r\n\r\n                    });\r\n\r\n                // Create a new EvaluationGridSubmission\r\n                var newEvaluationGridSubmission = new EvaluationGridSubmission\r\n                {\r\n                    FormId = evaluationGridSubmission.FormId,\r\n                    SubmissionId = evaluationGridSubmission.SubmissionId,\r\n                    SubmissionDate = now,\r\n                    SubmittedFormPdfUploadedFileId = evaluationGridSubmission.SubmittedFormPdfUploadedFileId,\r\n                    SubmissionStatus = evaluationGridSubmission.SubmissionStatus,\r\n                    //\r\n                    DateCreate = now,\r\n                    UserCreate = evaluationGridSubmission.UserCreate,\r\n                };\r\n\r\n                // Copy rating from latest corrected copy\r\n                copieCorrige.Note = ratingFromSubmission;\r\n\r\n                // Attach the new EvaluationGridSubmission to the new corrected copy\r\n                copieCorrige.EvaluationGridSubmissions.Add(newEvaluationGridSubmission);\r\n            }\r\n\r\n            if (newAudioMessageFile != null)\r\n            {\r\n                copieCorrige.AudioFileId = newAudioMessageFile.Id;\r\n            }\r\n\r\n            if (newCorrectedCopyFile != null)\r\n            {\r\n                copieCorrige.UploadFileId = newCorrectedCopyFile.Id;\r\n                copieCorrige.Filename = newCorrectedCopyFile.FileName;\r\n            }\r\n\r\n            if(copieCorrige.Id == 0)\r\n            {\r\n                copieOriginal.CopieCorrigees.Add(copieCorrige);\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error saving changes\");\r\n                return InternalServerError(ex);\r\n            }\r\n\r\n            return Ok(new CorrectedCopyV3ViewModel\r\n            {\r\n                CorrectedCopyId = copieCorrige.Id,\r\n                CorrectionDate = copieCorrige.DateCorrection,\r\n                Grade = copieCorrige.Note,\r\n                Comment = copieCorrige.Commentaire,\r\n                VoiceMessage = newAudioMessageFile == null ? null : new FileV3ViewModel\r\n                {\r\n                    OldFileName = null,\r\n                    UploadedFilename = \"audio_\" + copieCorrige.Id,\r\n                    UploadedFileUrl = newAudioMessageFile.FileUrl,\r\n                },\r\n                File = newCorrectedCopyFile == null ? null : new FileV3ViewModel\r\n                {\r\n                    OldFileName = null,\r\n                    UploadedFilename = newCorrectedCopyFile.FileName,\r\n                    UploadedFileUrl = newCorrectedCopyFile.FileUrl,\r\n                },\r\n                Corrector = new CopyCorrectorV3ViewModel\r\n                {\r\n                    UserId = currentTeacher.Id,\r\n                    Fullname = currentTeacher.Pseudo\r\n                },\r\n                PublicComment = copieCorrige.Commentaire,\r\n                InternalComment = copieCorrige.CommentaireInterne\r\n            });\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve detailed information about a student's copy, including student details, evaluation information, history, original copies, corrected copies, and related courses and evaluations.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "CorrectedCopyBindingModel",
                        "param_name": "CorrectedCopyBindingModel",
                        "param_desc": "The CorrectedCopyBindingModel parameter represents the model containing the corrected copy data."
                    },
                    {
                        "name": "correctedCopy",
                        "param_name": "correctedCopy",
                        "param_desc": "The correctedCopy parameter contains the corrected copy information that needs to be added."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve detailed information about a student's copy, including student details, evaluation information, history, original copies, corrected copies, and related courses and evaluations.\n/// </summary>\n/// <param name=\"CorrectedCopyBindingModel\">The CorrectedCopyBindingModel parameter represents the model containing the corrected copy data.</param>\n/// <param name=\"correctedCopy\">The correctedCopy parameter contains the corrected copy information that needs to be added.</param>\n",
            "code_chunks": null
        },
        {
            "name": "ValidateCorrectedCopy",
            "code_start_index": 31940,
            "method_name": "ValidateCorrectedCopy",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "originalCopyId",
                    "param_name": "originalCopyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentTeacher = User.Identity.GetUser();\r\n\r\n            // make sure the current user is a trainer\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (!estFormateur)\r\n            {\r\n                return StatusCode(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            if (await this.CanCorrectCopyAsync(currentTeacher.Id, copyId, originalCopyId) == false)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"La copie originale n'existe pas, a d\u00e9j\u00e0 \u00e9t\u00e9 corrig\u00e9 ou vous n'avez pas le droit de la corriger.\");\r\n            }\r\n\r\n            var copieOriginal = await this._db.CopieOriginales\r\n                .Include(co => co.CopieOriginaleAvancements.Select(ca => ca.CopieStatut))\r\n                .Include(co => co.CopieCorrigees)\r\n                .Include(co => co.RessourcesObjectRessourcesVersion.RessourceVersion.Ressource)\r\n                .Where(co => co.Id == originalCopyId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            // v\u00e9rifier si la copie n'est pas corrig\u00e9e\r\n            var lastStatus = copieOriginal.CopieOriginaleAvancements.OrderByDescending(ca => ca.DateDebut).FirstOrDefault();\r\n\r\n            if (lastStatus != null && lastStatus.CopieStatut.Code == nameof(CopyStatusCode.CORRIGE))\r\n            {\r\n                return BadRequest(\"Cette correction \u00e0 d\u00e9j\u00e0 \u00e9t\u00e9 valid\u00e9e\");\r\n            }\r\n\r\n            // v\u00e9rifier si la copie originale \u00e0 au moins une copie corrig\u00e9e\r\n            if (copieOriginal.CopieCorrigees.All(cc => cc.DateDelete != null))\r\n            {\r\n                return BadRequest(\"Aucune copie corrig\u00e9e \u00e0 valider\");\r\n            }\r\n\r\n            // on r\u00e9cupere la copie corrig\u00e9e (une par copie originale).\r\n            var correctedCopy = copieOriginal.CopieCorrigees.First(cc => cc.DateDelete == null);\r\n\r\n            var evalOralCategoryId = DataCache.GetEvaluationCategories(_db)\r\n                .Where(ec => ec.Code == \"EVAL_ORAL\")\r\n                .Select(ec => ec.Id).FirstOrDefault();\r\n\r\n            bool needCopyFile = copieOriginal.RessourcesObjectRessourcesVersion.RessourceVersion.Ressource.EvaluationCategorieId != evalOralCategoryId;\r\n\r\n            // Si pas de fichier de copie corrig\u00e9e\r\n            if (correctedCopy.Filename == null && correctedCopy.UploadFile == null && needCopyFile)\r\n            {\r\n                return BadRequest(\"La correction ne contient pas de copie corrig\u00e9e\");\r\n            }\r\n\r\n            // Si c'est pas le correcteur\r\n            if (correctedCopy.CorrecteurId != currentTeacher.Id)\r\n            {\r\n                return BadRequest(\"Vous ne pouvez pas valider une correction que vous n'avez pas faite.\");\r\n            }\r\n\r\n            // Si pas d'appreciation\r\n            if (string.IsNullOrWhiteSpace(correctedCopy.Commentaire))\r\n            {\r\n                return BadRequest(\"La correction ne contient pas de commentaire\");\r\n            }\r\n\r\n            // Si l'eval doit etre not\u00e9\r\n            var studentInfo = _db.CopieUsers\r\n                .Where(cu => cu.CopieId == copyId)\r\n                .Select(cu => new\r\n                {\r\n                    cu.Copy.RessourceVersion.RessourceId,\r\n                    cu.EcoleUser.EcoleId,\r\n                    cu.EcoleUser.UserId,\r\n                })\r\n                .First();\r\n\r\n            // Retrieve the empty evaluation grid information (to know if the evaluation is rated and/or linked to an evaluation grid).\r\n            EvaluationGridInfoDto evalGridInfoDto;\r\n\r\n            try\r\n            {\r\n                evalGridInfoDto = await _formsService.GetEvaluationGridInfoAsync(studentInfo.UserId, studentInfo.RessourceId, studentInfo.EcoleId);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e.Message);\r\n                return BadRequest(\"Les informations li\u00e9es \u00e0 l'\u00e9valuation sont introuvables\");\r\n            }\r\n\r\n            // Determine whether an evaluation grid is linked or not.\r\n            if (string.IsNullOrWhiteSpace(evalGridInfoDto.EmptyEvaluationGridUrl))\r\n            {\r\n                if (evalGridInfoDto.IsRated)\r\n                {\r\n                    // A score has to be provided only if there is NO linked evaluation grid.\r\n                    // Otherwise, the score is computed through the JotForm workflow somewhere else.\r\n                    if (correctedCopy.Note == null)\r\n                    {\r\n                        // No grid and no score: error.\r\n                        return BadRequest(\"La correction ne contient pas de note\");\r\n                    }\r\n\r\n                    if (correctedCopy.Note < 0 || correctedCopy.Note > 20)\r\n                    {\r\n                        // No grid and invalid score: error.\r\n                        return BadRequest(\"La note n'est pas valide\");\r\n                    }\r\n                }\r\n\r\n                // An audio comment has to be provided only if there is NO linked evaluation grid.\r\n                if (correctedCopy.AudioFileId == null && correctedCopy.AudioFile == null && needCopyFile)\r\n                {\r\n                    // No grid and no audio file: error.\r\n                    return BadRequest(\"La correction ne contient pas de message audio\");\r\n                }\r\n            }\r\n\r\n            var localeNow = DateTime.Now;\r\n            var localeNowOffset = DateTimeOffset.Now;\r\n\r\n            correctedCopy.DateCorrection = localeNowOffset;\r\n            correctedCopy.DateUpdate = localeNow;\r\n            correctedCopy.UserUpdate = currentTeacher.Email;\r\n            correctedCopy.CorrecteurId = currentTeacher.Id;\r\n\r\n            var correctedStatus = DataCache.GetCopyStatuses(_db).First(ca => ca.Code == nameof(CopyStatusCode.CORRIGE));\r\n\r\n            copieOriginal.CopieOriginaleAvancements.Add(new CopieOriginaleAvancement\r\n            {\r\n                CopieStatutId = correctedStatus.Id,\r\n                DateCreate = localeNow,\r\n                UserCreate = currentTeacher.Email,\r\n                DateDebut = localeNow\r\n            });\r\n\r\n            // v\u00e9rifi\u00e9 si c'est la derniere copie originale \u00e0 corrig\u00e9 dans la copie et mettre \r\n            // la copie en corrig\u00e9e et remettre \u00e0 l'\u00e9l\u00e8ve\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                await CloseCopyAsync(copyId, currentTeacher.Email, currentTeacher.Id);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Erreur lors de la validation de la correction de copie\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            return Ok(true);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update a corrected copy for a trainer, allow download if authorized, handle exceptions.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The ID of the copy that needs to be updated with corrections."
                    },
                    {
                        "name": "originalCopyId",
                        "param_name": "originalCopyId",
                        "param_desc": "The ID of the original copy that is being corrected."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update a corrected copy for a trainer, allow download if authorized, handle exceptions.\n/// </summary>\n/// <param name=\"copyId\">The ID of the copy that needs to be updated with corrections.</param>\n/// <param name=\"originalCopyId\">The ID of the original copy that is being corrected.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CloseCopyAsync",
            "code_start_index": 38646,
            "method_name": "CloseCopyAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "currentUserEmail",
                    "param_name": "currentUserEmail",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "userId",
                    "param_name": "userId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var corrigeStatus = DataCache.GetCopyStatuses(_db).First(c => c.Code == nameof(CopyStatusCode.CORRIGE));\r\n\r\n            var copy = await this._db.Copies.Where(c => c.Id == copyId)\r\n                .Include(c => c.CopieOriginales.Select(co => co.CopieOriginaleAvancements))\r\n                .Include(c => c.CopieOriginales.Select(co => co.CopieCorrigees))\r\n                .FirstOrDefaultAsync();\r\n\r\n            var canValidateCopy = copy.CopieOriginales\r\n                .Where(co => co.DateDelete == null)\r\n                .GroupBy(co => co.RessourceVersionRessourceObjectId)\r\n                .All(gb => gb\r\n                    .Any(co => co.CopieOriginaleAvancements\r\n                        .OrderByDescending(coa => coa.DateDebut)\r\n                        .First()\r\n                        .CopieStatutId == corrigeStatus.Id\r\n                    )\r\n                );\r\n\r\n            if (!canValidateCopy)\r\n            {\r\n                return;\r\n            }\r\n\r\n            copy.LastCopieAvancementCode = corrigeStatus.Code;\r\n            copy.DateUpdate = DateTime.Now;\r\n            copy.UserUpdate = currentUserEmail;\r\n            copy.NoteFinale = copy.CopieOriginales\r\n                                .Where(co => co.DateDelete == null)\r\n                                .SelectMany(co => co.CopieCorrigees)\r\n                                .Where(cc => cc.DateDelete == null)\r\n                                .Average(cc => cc.Note);\r\n\r\n            copy.DispoLms = true;\r\n            copy.DispoLms = true;\r\n\r\n            copy.CopieAvancements.Add(new CopieAvancement\r\n            {\r\n                DateDebut = DateTimeOffset.Now,\r\n                CopieStatutId = corrigeStatus.Id,\r\n                UserCreate = currentUserEmail,\r\n                DateCreate = DateTime.Now\r\n\r\n            });\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                await NotificationSenderManager.SendCorrectedCopyNotificationAsync(userId, copyId);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error validating a copy\");\r\n                throw;\r\n            }\r\n\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Add a corrected copy to the database, updating existing records if necessary, and return the details of the newly added corrected copy.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The ID of the copy to be closed."
                    },
                    {
                        "name": "currentUserEmail",
                        "param_name": "currentUserEmail",
                        "param_desc": "The email address of the current user performing the operation."
                    },
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The ID of the user requesting the copy closure."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Add a corrected copy to the database, updating existing records if necessary, and return the details of the newly added corrected copy.\n/// </summary>\n/// <param name=\"copyId\">The ID of the copy to be closed.</param>\n/// <param name=\"currentUserEmail\">The email address of the current user performing the operation.</param>\n/// <param name=\"userId\">The ID of the user requesting the copy closure.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CanCorrectCopyAsync",
            "code_start_index": 40919,
            "method_name": "CanCorrectCopyAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "teacherId",
                    "param_name": "teacherId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "originalCopyId",
                    "param_name": "originalCopyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // les affections du formateur\r\n            var affectation = this._db.AffectationCorrecteurs\r\n                .Where(ac => ac.DateDelete == null && ac.CorrecteurId == teacherId)\r\n                .Select(ac => ac.RessourcesObjectRessourcesVersion.RessourcesVersionId);\r\n\r\n            // r\u00e9cuperer la copie et verifier si la copie existe et si le formateur \u00e0 le droit de la corriger\r\n            var copyExists = await _db.Copies\r\n                .Where(c => c.Id == copyId\r\n                            && c.DateDelete == null\r\n                            && affectation.Contains(c.EvaluationVersionId)\r\n                            && c.LastCopieAvancementCode == nameof(CopyStatusCode.ENCOURS)\r\n                )\r\n                .AnyAsync();\r\n\r\n            // Si la copie est null \u00e7a veut que la copie n'exsite pas, a \u00e9t\u00e9 supprimer, ou le formateur n'est pas affecter \u00e0 l'\u00e9val rattach\u00e9e\r\n            if (!copyExists)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            // dans le cas de plusieur correcteur par copie on v\u00e9rifie que la copie original existe, qu'elle n'est pas supprim\u00e9 \r\n            // et que le formateur a le droit de la corriger\r\n            var affectationsRoRv = this._db.AffectationCorrecteurs\r\n                .Where(ac => ac.DateDelete == null && ac.CorrecteurId == teacherId)\r\n                .Select(ac => ac.RessourceVersionRessourceObjectId);\r\n\r\n            var copieOriginal = await _db.CopieOriginales\r\n                .Include(co => co.CopieCorrigees)\r\n                .Where(co => co.CopieId == copyId\r\n                                && co.Id == originalCopyId\r\n                                && co.DateDelete == null\r\n                                && affectationsRoRv.Contains(co.RessourceVersionRessourceObjectId))\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (copieOriginal == null)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            var lastCopyStatus = await _db.CopieOriginaleAvancements\r\n                                .Where(ca => ca.CopieOrignaleId == originalCopyId && ca.DateDelete == null)\r\n                                .OrderByDescending(ca => ca.DateDebut)\r\n                                .Select(ca => ca.CopieStatut.Code)\r\n                    .FirstOrDefaultAsync();\r\n\r\n            if (string.IsNullOrEmpty(lastCopyStatus) || lastCopyStatus != nameof(CopyStatusCode.ENCOURS))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            // On v\u00e9rifie pour la copie originale que la copie corrig\u00e9e existe. Si elle existe mais qu'elle est affect\u00e9e \u00e0 un autre correcteur, alors ce correcteur n'a pas le droit de la corriger.\r\n            var copieCorrigee = copieOriginal.CopieCorrigees.Where(cc => cc.DateDelete == null || cc.DateDelete > DateTime.Now).FirstOrDefault();\r\n\r\n            if (copieCorrigee != null && copieCorrigee?.CorrecteurId != teacherId)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Validate a corrected copy and update its status, ensuring all necessary information is provided and the corrector is authorized to validate it.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "teacherId",
                        "param_name": "teacherId",
                        "param_desc": "The ID of the teacher who is validating the corrected copy."
                    },
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The ID of the corrected copy that needs to be validated."
                    },
                    {
                        "name": "originalCopyId",
                        "param_name": "originalCopyId",
                        "param_desc": "The ID of the original copy that was corrected and needs validation."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Validate a corrected copy and update its status, ensuring all necessary information is provided and the corrector is authorized to validate it.\n/// </summary>\n/// <param name=\"teacherId\">The ID of the teacher who is validating the corrected copy.</param>\n/// <param name=\"copyId\">The ID of the corrected copy that needs to be validated.</param>\n/// <param name=\"originalCopyId\">The ID of the original copy that was corrected and needs validation.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetCopyRetard",
            "code_start_index": 44285,
            "method_name": "GetCopyRetard",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get the the number of days until/after the due correction date\r\n        /// </summary>\r\n        /// <param name=\"dueDate\">The date at which the copy should be corrected</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "dueDate",
                    "param_name": "dueDate",
                    "param_type": "DateTime",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var nextWorkingDay = DateTime.Now.Date.AddWorkingDays(1);\r\n\r\n            int retard;\r\n\r\n            if (dueDate <= nextWorkingDay)\r\n            {\r\n                retard = dueDate.NbWorkingDaysBetwen(nextWorkingDay);\r\n            }\r\n            else\r\n            {\r\n                retard = -nextWorkingDay.NbWorkingDaysBetwen(dueDate);\r\n            }\r\n            return retard;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the status and details of a copy, calculate final note, and send notifications if validation is successful.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "DateTime",
                        "param_name": "DateTime",
                        "param_desc": "The due date for the task or action to be completed."
                    },
                    {
                        "name": "dueDate",
                        "param_name": "dueDate",
                        "param_desc": "The specific date and time by which the task or action must be completed."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the status and details of a copy, calculate final note, and send notifications if validation is successful.\n/// </summary>\n/// <param name=\"DateTime\">The due date for the task or action to be completed.</param>\n/// <param name=\"dueDate\">The specific date and time by which the task or action must be completed.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "EvaluationsFormateurV3Controller"
}