{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Common/AdobeController.cs",
    "index_shift_code": 332,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.Common",
    "usings": [
        "LMS.Attributes",
        "LMS.Authentication",
        "LMS.Configuration",
        "LMS.Data",
        "LMS.Models.CommonModels.AdobeModels",
        "Serilog",
        "System",
        "System.Data.Entity",
        "System.Linq",
        "System.Net",
        "System.Threading.Tasks",
        "System.Web.Http"
    ],
    "access_modifier": "public",
    "struct_name": "AdobeController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "Office365IsActivatedAsync",
            "code_start_index": 801,
            "method_name": "Office365IsActivatedAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = this.User.Identity.GetUser();\r\n\r\n            var svc = await this._db.InscriptionsServices.AsNoTracking()\r\n                                .Where(s => s.DateDelete == null && s.Service.Code == \"ADOBE_CC\" && s.EcoleUserId == currentUser.SchoolUserId)\r\n                                .Select(s => new { s.Login, s.DateFinService, s.DateActivation })\r\n                                .FirstOrDefaultAsync();\r\n\r\n            AdobeState adobeState = null;\r\n            if (svc == null)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"Vous n'avez pas d'inscription pour ce service\");\r\n            }\r\n\r\n            if (svc.DateActivation != null)\r\n            {\r\n                if (svc.Login == null)\r\n                {\r\n                    adobeState = new AdobeState(\"PENDING_VALIDATION\", svc.DateActivation, svc.DateFinService);\r\n                    return Ok(adobeState);\r\n                }\r\n\r\n                adobeState = new AdobeState(\"VALIDATED\", svc.DateActivation, svc.DateFinService);\r\n                return Ok(adobeState);\r\n            }\r\n\r\n            adobeState = new AdobeState(\"PENDING_ACTIVATION\", svc.DateActivation, svc.DateFinService);\r\n            return Ok(adobeState);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if the user's Office 365 account is activated asynchronously and return the corresponding state.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "Office365IsActivatedAsync - Check if the user's Office 365 account is activated asynchronously and return the corresponding state."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if the user's Office 365 account is activated asynchronously and return the corresponding state.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">Office365IsActivatedAsync - Check if the user's Office 365 account is activated asynchronously and return the corresponding state.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetOffice365Async",
            "code_start_index": 2191,
            "method_name": "GetOffice365Async",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = this.User.Identity.GetUser();\r\n\r\n            var svc = await this._db.InscriptionsServices\r\n                                .Where(s => s.DateDelete == null && s.Service.Code == \"ADOBE_CC\" && s.EcoleUserId == currentUser.SchoolUserId)\r\n                                .FirstOrDefaultAsync();\r\n            \r\n            AdobeState adobeState = null;\r\n            if (svc == null)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"Vous n'avez pas d'inscription pour ce service\");\r\n            }\r\n\r\n            if (svc.DateActivation != null)\r\n            {\r\n                if (svc.Login == null)\r\n                {\r\n                    adobeState = new AdobeState(\"PENDING_ACTIVATION\", svc.DateActivation, svc.DateFinService);\r\n                    return Ok(adobeState);\r\n                }\r\n\r\n                adobeState = new AdobeState(\"VALIDATED\", svc.DateActivation, svc.DateFinService);\r\n                return Ok(adobeState);\r\n            }\r\n\r\n            try\r\n            {\r\n                svc.DateActivation = DateTimeOffset.Now;\r\n                svc.UserUpdate = currentUser.Email;\r\n                svc.DateUpdate = DateTime.Now;\r\n\r\n                await _db.SaveChangesAsync();\r\n\r\n                adobeState = new AdobeState(\"PENDING_VALIDATION\", svc.DateActivation, svc.DateFinService);\r\n                return Ok(adobeState);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error activating the Office 365 service for user {0}\", currentUser.Id);\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the Office 365 service status and activation information for the current user.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method being called. In this case, it is 'GetOffice365Async'."
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method 'GetOffice365Async' is to retrieve the Office 365 service status and activation information for the current user."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the Office 365 service status and activation information for the current user.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method being called. In this case, it is 'GetOffice365Async'.</param>\n/// <param name=\"methodPurpose\">The purpose of the method 'GetOffice365Async' is to retrieve the Office 365 service status and activation information for the current user.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "AdobeController"
}