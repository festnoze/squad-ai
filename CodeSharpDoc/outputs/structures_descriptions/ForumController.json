{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/v1/ForumController.cs",
    "index_shift_code": 1070,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V1",
    "usings": [],
    "access_modifier": "public",
    "struct_name": "ForumController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "AnswerAcceptAsync",
            "code_start_index": 1971,
            "method_name": "AnswerAcceptAsync",
            "existing_summary": "\r\n        #region Answers\r\n\r\n        /// <summary>\r\n        /// Casts an accept vote on the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            var answer = await _db.ForumPosts.Include(a => a.ForumPost_ParentId)\r\n                .FirstOrDefaultAsync(a => a.Id == answerId);\r\n\r\n            if (answer == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (answer.ForumPost_ParentId == null)\r\n            {\r\n                return BadRequest(\"Wrong object type\");\r\n            }\r\n\r\n            if (answer.ForumPost_ParentId.OwnerUserId != userId)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"You can only accept answers for your own questions\");\r\n            }\r\n\r\n            answer.ForumPost_ParentId.AcceptedAnswerId = answerId;\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return Ok();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error accepting an answer\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Accept an answer for a forum post, checking ownership and type before updating the accepted answer ID.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer that needs to be accepted. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Accept an answer for a forum post, checking ownership and type before updating the accepted answer ID.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer that needs to be accepted. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerAcceptUndoAsync",
            "code_start_index": 3345,
            "method_name": "AnswerAcceptUndoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Undoes an accept vote on the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            var answer = await _db.ForumPosts.Include(a => a.ForumPost_ParentId)\r\n                .FirstOrDefaultAsync(a => a.Id == answerId);\r\n\r\n            if (answer == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (answer.ForumPost_ParentId == null)\r\n            {\r\n                return BadRequest(\"Wrong object type\");\r\n            }\r\n\r\n            if (answer.ForumPost_ParentId.OwnerUserId != userId)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"You can only accept answers for your own questions\");\r\n            }\r\n\r\n            answer.ForumPost_ParentId.AcceptedAnswerId = null;\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return Ok();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error unaccepting an answer\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Undo the acceptance of a forum post answer by the owner of the parent question, handling error cases appropriately.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer that needs to have its acceptance undone. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Undo the acceptance of a forum post answer by the owner of the parent question, handling error cases appropriately.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer that needs to have its acceptance undone. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerCertifyAsync",
            "code_start_index": 4716,
            "method_name": "AnswerCertifyAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Casts a certify vote on the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var user = User.Identity.GetUser();\r\n\r\n            var answer = await _db.ForumPosts\r\n                .Include(a => a.ForumPost_ParentId)\r\n                .FirstOrDefaultAsync(a => a.Id == answerId);\r\n\r\n             var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (answer == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (answer.ForumPost_ParentId == null)\r\n            {\r\n                return BadRequest(\"Wrong object type\");\r\n            }\r\n\r\n            if (!user.Interne && !estFormateur)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"Only a moderator can mark answers as certified.\");\r\n            }\r\n\r\n            answer.ForumPost_ParentId.ModApproved = true;\r\n            answer.ApprovingModeratorId = user.Id;\r\n            answer.ModApproved = true;\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return Ok();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error certifying an answer\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Certify an answer as approved by a moderator, with conditions for user status and object type.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer that needs to be certified as approved. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Certify an answer as approved by a moderator, with conditions for user status and object type.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer that needs to be certified as approved. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerCertifyUndoAsync",
            "code_start_index": 6233,
            "method_name": "AnswerCertifyUndoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Casts a certify vote on the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var user = User.Identity.GetUser();\r\n\r\n            var answer = await _db.ForumPosts.Include(a => a.ForumPost_ParentId)\r\n                .FirstOrDefaultAsync(a => a.Id == answerId);\r\n\r\n            int certCount = await _db.ForumPosts\r\n                .Where(obj => obj.ParentId == answer.ParentId && obj.ModApproved != null && obj.ModApproved.Value)\r\n                .CountAsync();\r\n\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            if (answer == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (answer.ForumPost_ParentId == null)\r\n            {\r\n                return BadRequest(\"Wrong object type\");\r\n            }\r\n\r\n            if (!user.Interne && !estFormateur)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"Only a moderator can mark answers as certified.\");\r\n            }\r\n\r\n\r\n            answer.ForumPost_ParentId.ModApproved = certCount > 1;\r\n            answer.ApprovingModeratorId = null;\r\n            answer.ModApproved = false;\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return Ok();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error undoing a certify on an answer\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Undo the certification of an answer, checking if the user has the appropriate permissions and updating the certification status accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer to undo the certification for."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Undo the certification of an answer, checking if the user has the appropriate permissions and updating the certification status accordingly.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer to undo the certification for.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerGetCommentsAsync",
            "code_start_index": 7934,
            "method_name": "AnswerGetCommentsAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get comments on the answer\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // todo improve this\r\n            var answerDeletionDate = await _db.ForumPosts.AsNoTracking()\r\n                .Where(q => q.Id == answerId)\r\n                .Select(q => q.DeletionDate)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (answerDeletionDate == null || !answerDeletionDate.HasValue) return NotFound();\r\n\r\n            var comments = _db.ForumComments.AsNoTracking()\r\n                .Include(fc => fc.ForumCommentVotes)\r\n                .Include(fc => fc.User)\r\n                .Include(fc => fc.User.UploadedFile_FileIdPhotoProfil)\r\n                .Include(fc => fc.User.UploadedFile_FileIdHeaderProfil)\r\n                .Where(fc => fc.ForumPostId == answerId && fc.DeletionDate == null);\r\n\r\n            var mappedComments = await comments.Select(\r\n                    c => new FCommentDetail\r\n                    {\r\n                        Id = c.Id,\r\n                        ForumPostId = c.ForumPostId,\r\n                        OwnerUserId = c.OwnerUserId,\r\n                        CreationDate = c.CreationDate,\r\n\r\n                        // IsUpvoted = c.,\r\n                        Score = c.Score,\r\n                        Text = c.Text,\r\n                        OwnerUser =\r\n                            new FUser\r\n                            {\r\n                                id = c.User.Id,\r\n                                photo_profil = (c.User.FileIdPhotoProfil != null) ? c.User.UploadedFile_FileIdPhotoProfil.FileUrl : c.User.PhotoProfil,\r\n                                pseudo = c.User.Pseudo,\r\n                                test = c.User.Test,\r\n                                header_profil = (c.User.FileIdHeaderProfil != null) ? c.User.UploadedFile_FileIdHeaderProfil.FileUrl : c.User.HeaderProfil,\r\n                                interne = c.User.Interne\r\n                            }\r\n                    })\r\n                .ToListAsync();\r\n\r\n            return Ok(mappedComments);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve comments related to a specific answer, including user information and vote details, and return them in a mapped format.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer for which comments will be retrieved. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve comments related to a specific answer, including user information and vote details, and return them in a mapped format.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer for which comments will be retrieved. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerDeleteAsync",
            "code_start_index": 10229,
            "method_name": "AnswerDeleteAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Deletes the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns>bool</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var user = User.Identity.GetUser();\r\n            var userId = user.Id;\r\n\r\n            var answer = await _db.ForumPosts.Where(q => q.Id == answerId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (answer == null || answer.DeletionDate != null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (answer.ParentId == null)\r\n            {\r\n                return BadRequest(\"if you're trying to delete an question. Use the appropriate API call for that.\");\r\n            }\r\n\r\n            if ((answer.OwnerUserId != userId) && !user.Interne)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"You can't delete this post\");\r\n            }\r\n\r\n            // Variable permettant de savoir si la r\u00e9ponse que l'on veut supprimer est la r\u00e9ponse accept\u00e9e dans le post parent\r\n            bool isAnswerAccepted = false;\r\n\r\n            // On cherche le post parent\r\n            var parentPost = await _db.ForumPosts.FirstOrDefaultAsync(fp => fp.Id == answer.ParentId);\r\n\r\n            // Si la r\u00e9ponse que l'on veut supprimer est la r\u00e9ponse accept\u00e9e\r\n            if (parentPost.AcceptedAnswerId == answer.Id)\r\n            {\r\n                isAnswerAccepted = true;\r\n            }\r\n\r\n            try\r\n            {\r\n                parentPost.AcceptedAnswerId = null;\r\n                parentPost.AnswersCount--;\r\n                answer.DeletionDate = answer.DeletionDate ?? DateTime.Now;\r\n                await _db.SaveChangesAsync();\r\n                return Ok(isAnswerAccepted);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error trying to delete a question\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Delete an answer in a forum post, with appropriate validations and updating parent post details if necessary.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer to be deleted. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Delete an answer in a forum post, with appropriate validations and updating parent post details if necessary.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer to be deleted. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerDownvoteAsync",
            "code_start_index": 12319,
            "method_name": "AnswerDownvoteAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Casts a downvote on the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            if (await PostDeletedOrNotExistAsync(answerId))\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"the question doesn't exist or it was deleted\");\r\n            }\r\n\r\n            var answer = await _db.ForumPosts.Include(q => q.ForumPostVotes)\r\n                .Where(q => q.Id == answerId)\r\n                .FirstOrDefaultAsync();\r\n            if (answer.ParentId == null)\r\n            {\r\n                return BadRequest(\"You're trying to downvote an answer using the wrong API\");\r\n            }\r\n\r\n            var postVote = answer.ForumPostVotes.FirstOrDefault(\r\n                fv => fv.UserId == userId && (fv.ForumVoteTypeId == (int)VoteTypes.Downvote\r\n                                              || fv.ForumVoteTypeId == (int)VoteTypes.Upvote));\r\n\r\n            if (answer.ForumPostVotes.Count == 0 || postVote == null)\r\n            {\r\n                answer.Score--;\r\n                answer.ForumPostVotes.Add(\r\n                    new ForumPostVote { ForumVoteTypeId = (int)VoteTypes.Downvote, UserId = userId });\r\n            }\r\n            else\r\n            {\r\n                switch (postVote.ForumVoteTypeId)\r\n                {\r\n                    case 1:\r\n                        answer.Score -= 2;\r\n                        postVote.ForumVoteTypeId = (int)VoteTypes.Downvote;\r\n                        break;\r\n                    case 2:\r\n                        return Content(HttpStatusCode.Forbidden, \"You can't downvote a post more than once\");\r\n                }\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                answer.SetCurrentUser(userId);\r\n                return Ok(ConvertToPostAnswerViewModel(answer));\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(\"Error downvoting a answer\", e);\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Downvote an answer and update its score, handling various scenarios such as post deletion, incorrect API usage, and preventing multiple downvotes by the same user.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer to be downvoted. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Downvote an answer and update its score, handling various scenarios such as post deletion, incorrect API usage, and preventing multiple downvotes by the same user.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer to be downvoted. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerDownvoteUndoAsync",
            "code_start_index": 14645,
            "method_name": "AnswerDownvoteUndoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Undoes a downvote on the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            if (await PostDeletedOrNotExistAsync(answerId))\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"the answer doesn't exist or it was deleted\");\r\n            }\r\n\r\n            var answer = await _db.ForumPosts.Include(q => q.ForumPostVotes)\r\n                .Where(q => q.Id == answerId)\r\n                .FirstOrDefaultAsync();\r\n            if (answer.ParentId == null)\r\n            {\r\n                return BadRequest(\"You're trying to downvote a question using the wrong API\");\r\n            }\r\n\r\n            var postVote =\r\n                answer.ForumPostVotes.FirstOrDefault(\r\n                    fv => fv.UserId == userId && fv.ForumVoteTypeId == (int)VoteTypes.Downvote);\r\n\r\n            try\r\n            {\r\n                if (postVote != null)\r\n                {\r\n                    _db.ForumPostVotes.Remove(postVote);\r\n                    answer.Score++;\r\n                    await _db.SaveChangesAsync();\r\n                }\r\n\r\n                answer.SetCurrentUser(userId);\r\n                return Ok(ConvertToPostAnswerViewModel(answer));\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error while trying to undo a downvote\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Undo a downvote on a forum post answer, with error handling for non-existing or deleted posts and incorrect API usage.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer post on the forum."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Undo a downvote on a forum post answer, with error handling for non-existing or deleted posts and incorrect API usage.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer post on the forum.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerUpvoteAsync",
            "code_start_index": 16337,
            "method_name": "AnswerUpvoteAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Casts an upvote on the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            if (await PostDeletedOrNotExistAsync(answerId))\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"the post doesn't exist or it was deleted\");\r\n            }\r\n\r\n            var answer = await _db.ForumPosts.Include(q => q.ForumPostVotes)\r\n                .Where(q => q.Id == answerId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (answer.ParentId == null)\r\n            {\r\n                return BadRequest(\"You're trying to downvote a question using the answer API\");\r\n            }\r\n\r\n            var postVote = answer.ForumPostVotes.FirstOrDefault(\r\n                fv => fv.UserId == userId && (fv.ForumVoteTypeId == (int)VoteTypes.Downvote\r\n                                              || fv.ForumVoteTypeId == (int)VoteTypes.Upvote));\r\n\r\n            if (answer.ForumPostVotes.Count == 0 || postVote == null)\r\n            {\r\n                answer.Score++;\r\n                answer.ForumPostVotes.Add(\r\n                    new ForumPostVote { ForumVoteTypeId = (int)VoteTypes.Upvote, UserId = userId });\r\n            }\r\n            else\r\n            {\r\n                switch (postVote.ForumVoteTypeId)\r\n                {\r\n                    case (int)VoteTypes.Upvote:\r\n                        return Content(HttpStatusCode.Forbidden, \"You can't upvote a post more than once\");\r\n\r\n                    case (int)VoteTypes.Downvote:\r\n                        answer.Score += 2;\r\n                        postVote.ForumVoteTypeId = (int)VoteTypes.Upvote;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                answer.SetCurrentUser(userId);\r\n                return Ok(ConvertToPostAnswerViewModel(answer));\r\n            }\r\n            catch (Exception)\r\n            {\r\n                Log.Error(\"Error upvoting a question\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Upvote an answer and handle different scenarios such as checking for post existence, preventing multiple upvotes, and updating the answer's score accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer to be upvoted. It is expected to be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Upvote an answer and handle different scenarios such as checking for post existence, preventing multiple upvotes, and updating the answer's score accordingly.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer to be upvoted. It is expected to be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "AnswerUpvoteUndoAsync",
            "code_start_index": 18691,
            "method_name": "AnswerUpvoteUndoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Undoes an upvote on the given answer.\r\n        /// </summary>\r\n        /// <param name=\"answerId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "answerId",
                    "param_name": "answerId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            if (await PostDeletedOrNotExistAsync(answerId))\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"the answer doesn't exist or it was deleted\");\r\n            }\r\n\r\n            var answer = await _db.ForumPosts.Include(q => q.ForumPostVotes)\r\n                .Where(q => q.Id == answerId)\r\n                .FirstOrDefaultAsync();\r\n            if (answer.ParentId == null)\r\n            {\r\n                return BadRequest(\"You're trying to downvote a question using the answer API\");\r\n            }\r\n\r\n            var postVote =\r\n                answer.ForumPostVotes.FirstOrDefault(\r\n                    fv => fv.UserId == userId && fv.ForumVoteTypeId == (int)VoteTypes.Upvote);\r\n\r\n            try\r\n            {\r\n                if (postVote != null)\r\n                {\r\n                    _db.ForumPostVotes.Remove(postVote);\r\n                    answer.Score--;\r\n                    await _db.SaveChangesAsync();\r\n                }\r\n\r\n                answer.SetCurrentUser(userId);\r\n                return Ok(ConvertToPostAnswerViewModel(answer));\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error while trying to undo an upvote\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Undo an upvote on a forum post answer if the user has previously upvoted it, handling error cases and logging exceptions.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "answerId",
                        "param_name": "answerId",
                        "param_desc": "The ID of the answer for which the upvote needs to be undone. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Undo an upvote on a forum post answer if the user has previously upvoted it, handling error cases and logging exceptions.\n/// </summary>\n/// <param name=\"answerId\">The ID of the answer for which the upvote needs to be undone. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "LastActivityAsync",
            "code_start_index": 20350,
            "method_name": "LastActivityAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// send last posted answers on the forum\r\n        /// </summary>\r\n        /// <returns>list of FAnswer formatted in JSON</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var answers = await _db.ForumPosts.AsNoTracking()\r\n                .Include(fp => fp.ForumPost_ParentId)\r\n                .Include(fp => fp.OwnerUser)\r\n                .Where(fp => fp.ParentId != null)\r\n                .OrderByDescending(fp => fp.CreationDate)\r\n                .TakeDynamic(5)\r\n                .ToListAsync();\r\n\r\n            var mappedData = answers.Select(\r\n                a => new FAnswer\r\n                {\r\n                    Id = a.Id,\r\n                    OwnerUser =\r\n                        new PUsers\r\n                        {\r\n                            id = a.OwnerUser.Id,\r\n                            pseudo = a.OwnerUser.Pseudo,\r\n                            test = a.OwnerUser.Test,\r\n                            interne = a.OwnerUser.Interne,\r\n                            civilite = a.OwnerUser.Civilite\r\n                        },\r\n                    CreationDate = a.CreationDate,\r\n                    Body = a.Body,\r\n                    Title = a.Title,\r\n                    ParentPost =\r\n                        new FAnswer\r\n                        {\r\n                            Id = a.ForumPost_ParentId?.Id ?? 0,\r\n                            CreationDate =\r\n                                a.ForumPost_ParentId?.CreationDate\r\n                                ?? DateTime.MinValue,\r\n                            Body = a.ForumPost_ParentId?.Body,\r\n                            Title = a.ForumPost_ParentId?.Title\r\n                        }\r\n                });\r\n\r\n            return Ok(mappedData);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the last 5 forum post answers with their corresponding details.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no parameters",
                        "param_name": "no parameters",
                        "param_desc": "The list of parameters is empty for the method LastActivityAsync, as it does not require any input."
                    },
                    {
                        "name": "method name",
                        "param_name": "method name",
                        "param_desc": "The name of the method, which is 'LastActivityAsync', used to retrieve the last 5 forum post answers with their corresponding details."
                    },
                    {
                        "name": "method purpose",
                        "param_name": "method purpose",
                        "param_desc": "The purpose of the method 'LastActivityAsync' is to retrieve the last 5 forum post answers with their corresponding details."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the last 5 forum post answers with their corresponding details.\n/// </summary>\n/// <param name=\"no parameters\">The list of parameters is empty for the method LastActivityAsync, as it does not require any input.</param>\n/// <param name=\"method name\">The name of the method, which is 'LastActivityAsync', used to retrieve the last 5 forum post answers with their corresponding details.</param>\n/// <param name=\"method purpose\">The purpose of the method 'LastActivityAsync' is to retrieve the last 5 forum post answers with their corresponding details.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CommentDeleteAsync",
            "code_start_index": 22293,
            "method_name": "CommentDeleteAsync",
            "existing_summary": "\r\n        #endregion\r\n\r\n        #region Comments\r\n\r\n        /// <summary>\r\n        /// Delete a comment identified by its id.\r\n        /// </summary>\r\n        /// <param name=\"commentId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "commentId",
                    "param_name": "commentId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            var comment = await _db.ForumComments.FirstOrDefaultAsync(c => c.Id == commentId);\r\n\r\n            if (comment == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"The comment doesn't exist\");\r\n            }\r\n\r\n            if (comment.OwnerUserId == userId)\r\n            {\r\n                comment.DeletionDate = comment.DeletionDate ?? DateTime.UtcNow;\r\n                try\r\n                {\r\n                    await _db.SaveChangesAsync();\r\n                    return Ok();\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Log.Error(e, \"Error deleting a comment\");\r\n                    return InternalServerError();\r\n                }\r\n            }\r\n\r\n            return Content(HttpStatusCode.Forbidden, \"You can't delete a comment you don't own\");\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Delete a comment if the user is the owner, otherwise return an error message.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "int",
                        "param_name": "int",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "commentId",
                        "param_name": "commentId",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Delete a comment if the user is the owner, otherwise return an error message.\n/// </summary>\n/// <param name=\"int\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"commentId\">The generated description for the parameter</param>\n",
            "code_chunks": null
        },
        {
            "name": "CommentUpvoteAsync",
            "code_start_index": 23545,
            "method_name": "CommentUpvoteAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Casts an upvote on the given comment.\r\n        /// </summary>\r\n        /// <param name=\"commentId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "commentId",
                    "param_name": "commentId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            var comment = await _db.ForumComments.Include(q => q.ForumCommentVotes)\r\n                .Include(q => q.User)\r\n                .Include(q => q.User.UploadedFile_FileIdPhotoProfil)\r\n                .Include(q => q.User.UploadedFile_FileIdHeaderProfil)\r\n                .Where(q => q.Id == commentId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            var commentVote = comment.ForumCommentVotes.FirstOrDefault(fv => fv.UserId == userId);\r\n\r\n            if (comment.ForumCommentVotes.Count == 0 || commentVote == null)\r\n            {\r\n                comment.Score++;\r\n                comment.ForumCommentVotes.Add(new ForumCommentVote { UserId = userId });\r\n            }\r\n            else\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"You can't upvote a post more than once\");\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                comment.SetCurrentUser(userId);\r\n\r\n                return Ok(\r\n                    new FCommentDetail\r\n                    {\r\n                        Id = comment.Id,\r\n                        ForumPostId = comment.ForumPostId,\r\n                        OwnerUserId = comment.OwnerUserId,\r\n                        CreationDate = comment.CreationDate,\r\n\r\n                        IsUpvoted = true,\r\n                        Score = comment.Score,\r\n                        Text = comment.Text,\r\n                        OwnerUser = new FUser\r\n                        {\r\n                            id = comment.User.Id,\r\n                            photo_profil = (comment.User.FileIdPhotoProfil != null) ? comment.User.UploadedFile_FileIdPhotoProfil.FileUrl : comment.User.PhotoProfil,\r\n                            pseudo = comment.User.Pseudo,\r\n                            test = comment.User.Test,\r\n                            header_profil = (comment.User.FileIdHeaderProfil != null) ? comment.User.UploadedFile_FileIdHeaderProfil.FileUrl : comment.User.HeaderProfil,\r\n                            interne = comment.User.Interne\r\n                        }\r\n                    });\r\n            }\r\n            catch (Exception)\r\n            {\r\n                Log.Error(\"Error upvoting a question\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Upvote a forum comment and handle the logic for upvoting, including checking if the user has already upvoted the comment.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "commentId",
                        "param_name": "commentId",
                        "param_desc": "The unique identifier of the forum comment that the user wants to upvote."
                    },
                    {
                        "name": "int",
                        "param_name": "int",
                        "param_desc": "The type of data representing the ID of the comment to be upvoted."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Upvote a forum comment and handle the logic for upvoting, including checking if the user has already upvoted the comment.\n/// </summary>\n/// <param name=\"commentId\">The unique identifier of the forum comment that the user wants to upvote.</param>\n/// <param name=\"int\">The type of data representing the ID of the comment to be upvoted.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CommentUpvoteUndoAsync",
            "code_start_index": 26253,
            "method_name": "CommentUpvoteUndoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Undoes an upvote on the given comment.\r\n        /// </summary>\r\n        /// <param name=\"commentId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "commentId",
                    "param_name": "commentId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            var comment = await _db.ForumComments.Include(q => q.ForumCommentVotes)\r\n                .Include(q => q.User)\r\n                .Include(q => q.User.UploadedFile_FileIdPhotoProfil)\r\n                .Include(q => q.User.UploadedFile_FileIdHeaderProfil)\r\n                .Where(q => q.Id == commentId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            var postVote = comment.ForumCommentVotes.FirstOrDefault(fv => fv.UserId == userId);\r\n\r\n            try\r\n            {\r\n                if (postVote != null)\r\n                {\r\n                    _db.ForumCommentVotes.Remove(postVote);\r\n                    comment.Score--;\r\n                    await _db.SaveChangesAsync();\r\n                }\r\n\r\n                comment.SetCurrentUser(userId);\r\n\r\n                return Ok(\r\n                    new FCommentDetail\r\n                    {\r\n                        Id = comment.Id,\r\n                        ForumPostId = comment.ForumPostId,\r\n                        OwnerUserId = comment.OwnerUserId,\r\n                        CreationDate = comment.CreationDate,\r\n\r\n                        IsUpvoted = false,\r\n                        Score = comment.Score,\r\n                        Text = comment.Text,\r\n                        OwnerUser = new FUser\r\n                        {\r\n                            id = comment.User.Id,\r\n                            photo_profil = (comment.User.FileIdPhotoProfil != null) ? comment.User.UploadedFile_FileIdPhotoProfil.FileUrl : comment.User.PhotoProfil,\r\n                            pseudo = comment.User.Pseudo,\r\n                            test = comment.User.Test,\r\n                            header_profil = (comment.User.FileIdHeaderProfil != null) ? comment.User.UploadedFile_FileIdHeaderProfil.FileUrl : comment.User.HeaderProfil,\r\n                            interne = comment.User.Interne\r\n                        }\r\n                    });\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error while trying to undo an upvote\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Undo an upvote on a forum comment and update the comment's score accordingly, while handling errors appropriately.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "int",
                        "param_name": "int",
                        "param_desc": "The unique identifier of the comment for which the upvote needs to be undone."
                    },
                    {
                        "name": "commentId",
                        "param_name": "commentId",
                        "param_desc": "The unique identifier of the upvote on the comment that needs to be undone."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Undo an upvote on a forum comment and update the comment's score accordingly, while handling errors appropriately.\n/// </summary>\n/// <param name=\"int\">The unique identifier of the comment for which the upvote needs to be undone.</param>\n/// <param name=\"commentId\">The unique identifier of the upvote on the comment that needs to be undone.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionAskAsync",
            "code_start_index": 28910,
            "method_name": "QuestionAskAsync",
            "existing_summary": "\r\n        #endregion\r\n\r\n        #region Questions\r\n\r\n        /// <summary>\r\n        /// Create a new question.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var resourcesServer = _config.GetResourcesServerUrl();\r\n            try\r\n            {\r\n                string rootFolder = HostingEnvironment.MapPath(\"~/App_Data\");\r\n\r\n                // read form data\r\n                var provider = new MultipartFormDataStreamProvider(rootFolder);\r\n\r\n                await Request.Content.ReadAsMultipartAsync(provider);\r\n                var questionJsonString = provider.FormData.Get(\"content\");\r\n                var question = JsonConvert.DeserializeObject<AddQuestionViewModel>(questionJsonString);\r\n                Validate(question);\r\n\r\n                var result = this.CheckMultipleUploadRequest(\r\n                    provider,\r\n                    WebsiteConfiguration.ForumAllowedFileExtensions,\r\n                    out List<FileDetails> filesDetails);\r\n                if (result != null)\r\n                {\r\n                    return result;\r\n                }\r\n\r\n                List<ForumUpload> forumUploads = new List<ForumUpload>();\r\n                foreach (var file in filesDetails)\r\n                {\r\n                    var uploadResponse = await this.UploadToRessourcesServerAsync(file, \"forum\", userId, ecoleId, _config.GetResourcesServerUrl());\r\n\r\n                    if (uploadResponse == null)\r\n                    {\r\n                        Log.Warning(\r\n                            \"Error uploading a file to the file server. File: {0}, Upload Source: {1}, UserID: {2}, ecoleID: {3}\",\r\n                            file,\r\n                            \"forum\",\r\n                            userId,\r\n                            ecoleId);\r\n                        return InternalServerError();\r\n                    }\r\n\r\n                    if (!uploadResponse.Success)\r\n                    {\r\n                        Log.Warning(\r\n                            \"Failed to upload a file to the ressources server with the following error\",\r\n                            uploadResponse.ErrorMessage);\r\n                        return InternalServerError();\r\n                    }\r\n\r\n                    forumUploads.Add(\r\n                        new ForumUpload\r\n                        {\r\n                            FilePath = resourcesServer + uploadResponse.FileUrl,\r\n                            Filename = file.Filename\r\n                        });\r\n                }\r\n\r\n                var tags = await RepositoryV3.GetTagsIdsAsync(_db, question.Tags.Split(';').ToList());\r\n\r\n                var forumPostTags = tags.Select(t => new ForumPostTag { TagId = t.Id })\r\n                    .ToList();\r\n\r\n                var post = new ForumPost\r\n                {\r\n                    CreationDate = DateTime.Now,\r\n                    UpdateDate = DateTime.Now,\r\n                    Title = question.Title,\r\n                    Body = question.Body,\r\n                    Tags = question.Tags,\r\n                    OwnerUserId = userId,\r\n                    OwnerSchoolId = ecoleId,\r\n                    ForumUploads = forumUploads,\r\n                    CategoryId = question.Category,\r\n                    RessourceVersionId = question.RessourceVersionId,\r\n                    ForumPostTags = forumPostTags,\r\n                    PageUrl = question.PageUrl\r\n                };\r\n\r\n                _db.ForumPosts.Add(post);\r\n                await _db.SaveChangesAsync();\r\n\r\n                BackgroundJob.Enqueue(\r\n                    () => NotificationSenderManager.SendForumPostNotificationAsync(userId, ecoleId, post.Id));\r\n\r\n                return Ok(post.Id);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error during the file upload/Error while saving new question\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a new forum post with a question, tags, and optional attachments, and send a notification to the user and school upon successful submission.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "parameters",
                        "param_name": "parameters",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "named",
                        "param_name": "named",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "QuestionAskAsync",
                        "param_name": "QuestionAskAsync",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "purpose",
                        "param_name": "purpose",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "Create",
                        "param_name": "Create",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "new",
                        "param_name": "new",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "forum",
                        "param_name": "forum",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "post",
                        "param_name": "post",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "question",
                        "param_name": "question",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "tags",
                        "param_name": "tags",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "attachments",
                        "param_name": "attachments",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "notification",
                        "param_name": "notification",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "user",
                        "param_name": "user",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "school",
                        "param_name": "school",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "successful",
                        "param_name": "successful",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "submission",
                        "param_name": "submission",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a new forum post with a question, tags, and optional attachments, and send a notification to the user and school upon successful submission.\n/// </summary>\n/// <param name=\"no\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"parameters\">The generated description for the parameter</param>\n/// <param name=\"existing\">The generated description for the parameter</param>\n/// <param name=\"method\">The generated description for the parameter</param>\n/// <param name=\"named\">The generated description for the parameter</param>\n/// <param name=\"QuestionAskAsync\">The generated description for the parameter</param>\n/// <param name=\"context\">The generated description for the parameter</param>\n/// <param name=\"method\">The generated description for the parameter</param>\n/// <param name=\"purpose\">The generated description for the parameter</param>\n/// <param name=\"Create\">The generated description for the parameter</param>\n/// <param name=\"new\">The generated description for the parameter</param>\n/// <param name=\"forum\">The generated description for the parameter</param>\n/// <param name=\"post\">The generated description for the parameter</param>\n/// <param name=\"question\">The generated description for the parameter</param>\n/// <param name=\"tags\">The generated description for the parameter</param>\n/// <param name=\"attachments\">The generated description for the parameter</param>\n/// <param name=\"notification\">The generated description for the parameter</param>\n/// <param name=\"user\">The generated description for the parameter</param>\n/// <param name=\"school\">The generated description for the parameter</param>\n/// <param name=\"successful\">The generated description for the parameter</param>\n/// <param name=\"submission\">The generated description for the parameter</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionGetAllAsync",
            "code_start_index": 33774,
            "method_name": "QuestionGetAllAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get all questions \r\n        /// </summary>\r\n        /// <param name=\"start\">Start Date</param>\r\n        /// <param name=\"sort\">sort method (new, popular, favorites, activity)</param>\r\n        /// <param name=\"tags\">tag ids</param>\r\n        /// <param name=\"category\">int category id</param>\r\n        /// <param name=\"accepted\">nullable boolean</param>\r\n        /// <param name=\"certified\">nullable boolean</param>\r\n        /// <param name=\"pageSize\">Optional int to specify the number of posts to return per page (default is 20) </param>\r\n        /// <param name=\"ressourceObjectId\">Optional id of the RessourceObject object to filter with</param>\r\n        /// <param name=\"module\"></param>\r\n        /// <param name=\"matiere\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "tags",
                    "param_name": "tags",
                    "param_type": "int[]",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "start",
                    "param_name": "start",
                    "param_type": "string",
                    "has_default_value": true,
                    "default_value": "null",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "sort",
                    "param_name": "sort",
                    "param_type": "string",
                    "has_default_value": true,
                    "default_value": "\"new\"",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "category",
                    "param_name": "category",
                    "param_type": "int",
                    "has_default_value": true,
                    "default_value": "0",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "accepted",
                    "param_name": "accepted",
                    "param_type": "bool?",
                    "has_default_value": true,
                    "default_value": "null",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "certified",
                    "param_name": "certified",
                    "param_type": "bool?",
                    "has_default_value": true,
                    "default_value": "null",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "pageSize",
                    "param_name": "pageSize",
                    "param_type": "int",
                    "has_default_value": true,
                    "default_value": "20",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "ressourceObjectId",
                    "param_name": "ressourceObjectId",
                    "param_type": "int?",
                    "has_default_value": true,
                    "default_value": "null",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "module",
                    "param_name": "module",
                    "param_type": "string",
                    "has_default_value": true,
                    "default_value": "null",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "matiere",
                    "param_name": "matiere",
                    "param_type": "string",
                    "has_default_value": true,
                    "default_value": "null",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            const int popularDate = 10;\r\n\r\n            List<ForumPost> data;\r\n\r\n            // return all questions starting from this date\r\n            if (!DateTime.TryParse(start, out DateTime parsedDateTime))\r\n            {\r\n                parsedDateTime = DateTime.MaxValue;\r\n            }\r\n\r\n            // return only non-deleted questions from the current school\r\n            IQueryable<ForumPost> forumPostsQueryable = _db.ForumPosts.AsNoTracking()\r\n                .Include(q => q.AcceptedAnswer)\r\n                .Include(q => q.OwnerUser)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdPhotoProfil)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdHeaderProfil)\r\n                .Include(q => q.ForumPostFavorites)\r\n                .Include(q => q.ForumPostVotes)\r\n                .Include(q => q.ForumPostTags)\r\n                .Include(q => q.ForumCategory)\r\n                .Include(q => q.ForumPostViews)\r\n                .Where(q => (q.ParentId == null) && (q.DeletionDate == null) && (q.OwnerSchoolId == ecoleId));\r\n\r\n            if (ressourceObjectId != null)\r\n            {\r\n                forumPostsQueryable = forumPostsQueryable.Where(q => q.RessourceId == ressourceObjectId);\r\n            }\r\n\r\n            // filter: category\r\n            if (category != 0)\r\n            {\r\n                forumPostsQueryable = forumPostsQueryable.Where(fp => fp.CategoryId == category);\r\n            }\r\n\r\n            // filter: accepted only\r\n            if (accepted != null)\r\n            {\r\n                forumPostsQueryable = accepted.Value\r\n                    ? forumPostsQueryable.Where(q => q.AcceptedAnswerId != null)\r\n                    : forumPostsQueryable.Where(q => q.AcceptedAnswerId == null);\r\n            }\r\n\r\n            // filter: certified only\r\n            if (certified != null)\r\n            {\r\n                forumPostsQueryable = certified.Value\r\n                    ? forumPostsQueryable.Where(\r\n                        q => (q.ModApproved != null) && q.ModApproved.Value)\r\n                    : forumPostsQueryable.Where(q => q.ModApproved == null);\r\n            }\r\n\r\n            if (!string.IsNullOrWhiteSpace(matiere))\r\n            {\r\n                forumPostsQueryable = forumPostsQueryable.Where(q => q.Tags.Contains($\";{matiere};\"));\r\n            }\r\n\r\n            if (!string.IsNullOrWhiteSpace(module))\r\n            {\r\n                forumPostsQueryable = forumPostsQueryable.Where(q => q.Tags.Contains($\";{module};\"));\r\n            }\r\n\r\n            IOrderedQueryable<ForumPost> query = null;\r\n\r\n            switch (sort)\r\n            {\r\n                case \"new\":\r\n                    query = forumPostsQueryable.OrderByDescending(q => q.CreationDate);\r\n\r\n                    ////Permet de trier les sujets en fonction de la date de cr\u00e9ation des posts ET des r\u00e9ponses\r\n                    // query = forumPostsQueryable\r\n                    // .OrderByDescending(q =>\r\n                    // q.Answers\r\n                    // .Select(a => (DateTime?)a.CreationDate)\r\n                    // .OrderByDescending(a => a)\r\n                    // .FirstOrDefault() ?? q.CreationDate\r\n                    // )\r\n                    // .ThenByDescending(q => q.CreationDate);\r\n                    break;\r\n\r\n                case \"popular\":\r\n                    var date = DateTime.Now.AddDays(-popularDate)\r\n                        .Date;\r\n\r\n                    query = forumPostsQueryable.Where(q => q.ForumPostViews.Any(p => p.CreationDate > date))\r\n                        .OrderByDescending(q => q.FavoriteCount);\r\n                    break;\r\n\r\n                case \"favorites\":\r\n                    query = forumPostsQueryable.Where(q => q.ForumPostFavorites.Any(u => u.UserId == userId))\r\n                        .OrderByDescending(q => q.CreationDate);\r\n                    break;\r\n\r\n                case \"activity\":\r\n\r\n                    #region retrieve questions the user intracted with\r\n\r\n                    var myQuestions = await _db.ForumPosts.AsNoTracking()\r\n                        .Where(\r\n                            fp => fp.ParentId == null && fp.OwnerUserId == userId\r\n                                  && fp.OwnerSchoolId == ecoleId && fp.DeletionDate == null)\r\n                        .Select(fp => fp.Id)\r\n                        .ToListAsync();\r\n\r\n                    var myAnswers = await _db.ForumPosts.AsNoTracking()\r\n                        .Include(fp => fp.ForumPost_ParentId)\r\n                        .Where(\r\n                            fp => fp.ParentId != null && fp.OwnerUserId == userId\r\n                                  && fp.OwnerSchoolId == ecoleId && fp.DeletionDate == null)\r\n                        .Select(fp => fp.ForumPost_ParentId.Id)\r\n                        .ToListAsync();\r\n\r\n                    var myCommentsOnQuestions = await _db.ForumComments.AsNoTracking()\r\n                        .Include(fc => fc.ForumPost)\r\n                        .Where(\r\n                            fc => fc.ForumPost.ParentId == null\r\n                                  && fc.ForumPost.OwnerSchoolId == ecoleId\r\n                                  && fc.OwnerUserId == userId && fc.DeletionDate == null\r\n                                  && fc.ForumPost.DeletionDate == null)\r\n                        .Select(fp => fp.ForumPost.Id)\r\n                        .ToListAsync();\r\n\r\n                    var myCommentsOnAnswers = await _db.ForumComments.AsNoTracking()\r\n                        .Include(fc => fc.ForumPost)\r\n                        .Include(fc => fc.ForumPost.ForumPost_ParentId)\r\n                        .Where(\r\n                            fc => fc.ForumPost.ParentId != null\r\n                                  && fc.ForumPost.OwnerSchoolId == ecoleId\r\n                                  && fc.OwnerUserId == userId && fc.DeletionDate == null\r\n                                  && fc.ForumPost.DeletionDate == null)\r\n                        .Select(fp => fp.ForumPost.ForumPost_ParentId.Id)\r\n                        .ToListAsync();\r\n\r\n                    var idsList = new List<int>();\r\n                    idsList.AddRange(myQuestions);\r\n                    idsList.AddRange(myAnswers);\r\n                    idsList.AddRange(myCommentsOnQuestions);\r\n                    idsList.AddRange(myCommentsOnAnswers);\r\n\r\n                    #endregion\r\n\r\n                    query = forumPostsQueryable.Where(\r\n                            q => idsList.Distinct()\r\n                                .Contains(q.Id))\r\n                        .OrderByDescending(q => q.CreationDate);\r\n                    break;\r\n            }\r\n\r\n            if (query == null)\r\n            {\r\n                data = new List<ForumPost>();\r\n            }\r\n            else\r\n            {\r\n                if (tags == null || tags.Length == 0)\r\n                {\r\n                    forumPostsQueryable = query.Where(q => q.CreationDate < parsedDateTime);\r\n                    data = await forumPostsQueryable.TakeDynamic(pageSize)\r\n                        .ToListAsync();\r\n                }\r\n                else\r\n                {\r\n                    // filter the questions with no tags to speed up the query\r\n                    var tempData = await query.Where(\r\n                            q => (q.CreationDate < parsedDateTime) && (q.ForumPostTags.Count > 0))\r\n                        .ToListAsync();\r\n\r\n                    data = tempData.Where(\r\n                            q =>\r\n                            {\r\n                                var questionTagIds = q.ForumPostTags.Select(fpt => fpt.TagId)\r\n                                    .ToList();\r\n\r\n                                return tags.Aggregate(\r\n                                    true,\r\n                                    (current, tag) => current && questionTagIds.Contains(tag));\r\n                            })\r\n                        .Take(pageSize)\r\n                        .ToList();\r\n                }\r\n            }\r\n\r\n            var totalCount = data.Count == 0 ? 0 : await query.CountAsync();\r\n\r\n            foreach (var question in data)\r\n            {\r\n                question.SetCurrentUser(userId);\r\n            }\r\n\r\n            List<FListingQuestion> mappedData = data.Select(Convert)\r\n                .ToList();\r\n\r\n            var pagedData =\r\n                new PaginationFListingQuestion\r\n                {\r\n                    Content = mappedData,\r\n                    NextPage = data.Count != 0,\r\n                    PreviousPage = (totalCount == 0) && (start != null)\r\n                };\r\n\r\n            return Ok(pagedData);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a list of forum posts based on specified filters and sorting criteria, with optional tag filtering, pagination, and user interaction tracking.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "tags",
                        "param_name": "tags",
                        "param_desc": "An array of integers representing the tags used for filtering the forum posts."
                    },
                    {
                        "name": "start",
                        "param_name": "start",
                        "param_desc": "A string representing the starting point for fetching forum posts. It can be null to start from the beginning."
                    },
                    {
                        "name": "sort",
                        "param_name": "sort",
                        "param_desc": "A string representing the sorting criteria for the forum posts. Default value is 'new'."
                    },
                    {
                        "name": "category",
                        "param_name": "category",
                        "param_desc": "An integer representing the category of forum posts to retrieve. Default value is 0."
                    },
                    {
                        "name": "accepted",
                        "param_name": "accepted",
                        "param_desc": "A nullable boolean indicating whether to retrieve only accepted forum posts."
                    },
                    {
                        "name": "certified",
                        "param_name": "certified",
                        "param_desc": "A nullable boolean indicating whether to retrieve only certified forum posts."
                    },
                    {
                        "name": "pageSize",
                        "param_name": "pageSize",
                        "param_desc": "An integer representing the number of forum posts to retrieve per page. Default value is 20."
                    },
                    {
                        "name": "ressourceObjectId",
                        "param_name": "ressourceObjectId",
                        "param_desc": "A nullable integer representing the resource object ID for additional filtering."
                    },
                    {
                        "name": "module",
                        "param_name": "module",
                        "param_desc": "A string representing the module for filtering forum posts."
                    },
                    {
                        "name": "matiere",
                        "param_name": "matiere",
                        "param_desc": "A string representing the subject matter for filtering forum posts."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a list of forum posts based on specified filters and sorting criteria, with optional tag filtering, pagination, and user interaction tracking.\n/// </summary>\n/// <param name=\"tags\">An array of integers representing the tags used for filtering the forum posts.</param>\n/// <param name=\"start\">A string representing the starting point for fetching forum posts. It can be null to start from the beginning.</param>\n/// <param name=\"sort\">A string representing the sorting criteria for the forum posts. Default value is 'new'.</param>\n/// <param name=\"category\">An integer representing the category of forum posts to retrieve. Default value is 0.</param>\n/// <param name=\"accepted\">A nullable boolean indicating whether to retrieve only accepted forum posts.</param>\n/// <param name=\"certified\">A nullable boolean indicating whether to retrieve only certified forum posts.</param>\n/// <param name=\"pageSize\">An integer representing the number of forum posts to retrieve per page. Default value is 20.</param>\n/// <param name=\"ressourceObjectId\">A nullable integer representing the resource object ID for additional filtering.</param>\n/// <param name=\"module\">A string representing the module for filtering forum posts.</param>\n/// <param name=\"matiere\">A string representing the subject matter for filtering forum posts.</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            const int popularDate = 10;\r\n\r\n            List<ForumPost> data;\r\n\r\n            // return all questions starting from this date\r\n            if (!DateTime.TryParse(start, out DateTime parsedDateTime))\r\n            {\r\n                parsedDateTime = DateTime.MaxValue;\r\n            }\r\n\r\n            // return only non-deleted questions from the current school\r\n            IQueryable<ForumPost> forumPostsQueryable = _db.ForumPosts.AsNoTracking()\r\n                .Include(q => q.AcceptedAnswer)\r\n                .Include(q => q.OwnerUser)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdPhotoProfil)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdHeaderProfil)\r\n                .Include(q => q.ForumPostFavorites)\r\n                .Include(q => q.ForumPostVotes)\r\n                .Include(q => q.ForumPostTags)\r\n                .Include(q => q.ForumCategory)\r\n                .Include(q => q.ForumPostViews)\r\n                .Where(q => (q.ParentId == null) && (q.DeletionDate == null) && (q.OwnerSchoolId == ecoleId));\r\n\r\n            if (ressourceObjectId != null)\r\n            {\r\n                forumPostsQueryable = forumPostsQueryable.Where(q => q.RessourceId == ressourceObjectId);\r\n            }\r\n\r\n            // filter: category\r\n            if (category != 0)\r\n            {\r\n                forumPostsQueryable = forumPostsQueryable.Where(fp => fp.CategoryId == category);\r\n            }\r\n\r\n            // filter: accepted only\r\n            if (accepted != null)\r\n            {\r\n                forumPostsQueryable = accepted.Value\r\n                    ? forumPostsQueryable.Where(q => q.AcceptedAnswerId != null)\r\n                    : forumPostsQueryable.Where(q => q.AcceptedAnswerId == null);\r\n            }\r\n\r\n            // filter: certified only\r\n            if (certified != null)\r\n            {\r\n                forumPostsQueryable = certified.Value\r\n                    ? forumPostsQueryable.Where(\r\n                        q => (q.ModApproved != null) && q.ModApproved.Value)\r\n                    : forumPostsQueryable.Where(q => q.ModApproved == null);\r\n            }\r\n\r\n            if (!string.IsNullOrWhiteSpace(matiere))\r\n            {\r\n                forumPostsQueryable = forumPostsQueryable.Where(q => q.Tags.Contains($\";{matiere};\"));\r\n            }\r\n\r\n            if (!string.IsNullOrWhiteSpace(module))\r\n            {\r\n                forumPostsQueryable = forumPostsQueryable.Where(q => q.Tags.Contains($\";{module};\"));\r\n            }\r\n\r\n            IOrderedQueryable<ForumPost> query = null;\r\n\r\n            switch (sort)\r\n            {\r\n                case \"new\":\r\n                    query = forumPostsQueryable.OrderByDescending(q => q.CreationDate);\r\n\r\n                    ////Permet de trier les sujets en fonction de la date de cr\u00e9ation des posts ET des r\u00e9ponses\r\n                    // query = forumPostsQueryable\r\n                    // .OrderByDescending(q =>\r\n                    // q.Answers\r\n                    // .Select(a => (DateTime?)a.CreationDate)\r\n                    // .OrderByDescending(a => a)\r\n                    // .FirstOrDefault() ?? q.CreationDate\r\n                    // )\r\n                    // .ThenByDescending(q => q.CreationDate);\r\n                    break;\r\n\r\n                case \"popular\":\r\n                    var date = DateTime.Now.AddDays(-popularDate)\r\n                        .Date;\r\n\r\n                    query = forumPostsQueryable.Where(q => q.ForumPostViews.Any(p => p.CreationDate > date))\r\n                        .OrderByDescending(q => q.FavoriteCount);\r\n                    break;\r\n\r\n                case \"favorites\":\r\n                    query = forumPostsQueryable.Where(q => q.ForumPostFavorites.Any(u => u.UserId == userId))\r\n                        .OrderByDescending(q => q.CreationDate);\r\n                    break;\r\n\r\n                case \"activity\":\r\n\r\n                    #region retrieve questions the user intracted with\r\n\r\n                    var myQuestions = await _db.ForumPosts.AsNoTracking()\r\n                        .Where(\r\n                            fp => fp.ParentId == null && fp.OwnerUserId == userId\r\n                                  && fp.OwnerSchoolId == ecoleId && fp.DeletionDate == null)\r\n                        .Select(fp => fp.Id)\r\n                        .ToListAsync();\r\n\r\n                    var myAnswers = await _db.ForumPosts.AsNoTracking()\r\n                        .Include(fp => fp.ForumPost_ParentId)\r\n                        .Where(\r\n                            fp => fp.ParentId != null && fp.OwnerUserId == userId\r\n                                  && fp.OwnerSchoolId == ecoleId && fp.DeletionDate == null)\r\n                        .Select(fp => fp.ForumPost_ParentId.Id)\r\n                        .ToListAsync();\r\n\r\n                    var myCommentsOnQuestions = await _db.ForumComments.AsNoTracking()\r\n                        .Include(fc => fc.ForumPost)\r\n                        .Where(\r\n                            fc => fc.ForumPost.ParentId == null\r\n                                  && fc.ForumPost.OwnerSchoolId == ecoleId\r\n                                  && fc.OwnerUserId == userId && fc.DeletionDate == null\r\n                                  && fc.ForumPost.DeletionDate == null)\r\n                        .Select(fp => fp.ForumPost.Id)\r\n                        .ToListAsync();\r\n\r\n                    var myCommentsOnAnswers = await _db.ForumComments.AsNoTracking()\r\n                        .Include(fc => fc.ForumPost)\r\n                        .Include(fc => fc.ForumPost.ForumPost_ParentId)\r\n                        .Where(\r\n                            fc => fc.ForumPost.ParentId != null\r\n                                  && fc.ForumPost.OwnerSchoolId == ecoleId\r\n                                  && fc.OwnerUserId == userId && fc.DeletionDate == null\r\n                                  && fc.ForumPost.DeletionDate == null)\r\n                        .Select(fp => fp.ForumPost.ForumPost_ParentId.Id)\r\n                        .ToListAsync();\r\n\r\n                    var idsList = new List<int>();\r\n                    idsList.AddRange(myQuestions);\r\n                    idsList.AddRange(myAnswers);\r\n                    idsList.AddRange(myCommentsOnQuestions);\r\n                    idsList.AddRange(myCommentsOnAnswers);\r\n\r\n                    #endregion\r\n\r\n                    query = forumPostsQueryable.Where(\r\n                            q => idsList.Distinct()\r\n                                .Contains(q.Id))\r\n                        .OrderByDescending(q => q.CreationDate);\r\n                    break;\r\n            }\r\n\r\n            if (query == null)\r\n            {\r\n                data = new List<ForumPost>();\r\n            }\r\n            else\r\n            {\r\n                if (tags == null || tags.Length == 0)\r\n                {\r\n                    forumPostsQueryable = query.Where(q => q.CreationDate < parsedDateTime);\r\n                    data = await forumPostsQueryable.TakeDynamic(pageSize)\r\n                        .ToListAsync();\r\n                }\r\n                else\r\n                {\r\n                    // filter the questions with no tags to speed up the query\r\n                    var tempData = await query.Where(\r\n                            q => (q.CreationDate < parsedDateTime) && (q.ForumPostTags.Count > 0))\r\n                        .ToListAsync();\r\n\r\n                    data = tempData.Where(\r\n                            q =>\r\n                            {\r\n                                var questionTagIds = q.ForumPostTags.Select(fpt => fpt.TagId)\r\n                                    .ToList();\r\n\r\n                                return tags.Aggregate(\r\n                                    true,\r\n                                    (current, tag) => current && questionTagIds.Contains(tag));\r\n                            })",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": ".Take(pageSize)\r\n                        .ToList();\r\n                }\r\n            }\r\n\r\n            var totalCount = data.Count == 0 ? 0 : await query.CountAsync();\r\n\r\n            foreach (var question in data)\r\n            {\r\n                question.SetCurrentUser(userId);\r\n            }\r\n\r\n            List<FListingQuestion> mappedData = data.Select(Convert)\r\n                .ToList();\r\n\r\n            var pagedData =\r\n                new PaginationFListingQuestion\r\n                {\r\n                    Content = mappedData,\r\n                    NextPage = data.Count != 0,\r\n                    PreviousPage = (totalCount == 0) && (start != null)\r\n                };\r\n\r\n            return Ok(pagedData);\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "QuestionGetAsync",
            "code_start_index": 43241,
            "method_name": "QuestionGetAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get Question by Id\r\n        /// </summary>\r\n        /// <param name=\"questionId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var question = await _db.ForumPosts\r\n                .AsNoTracking()\r\n                .Include(q => q.ForumComments)\r\n                .Include(q => q.ForumUploads)\r\n                .Include(q => q.ForumUploads.Select(fu => fu.UploadedFile))\r\n                .Include(q => q.ForumPostVotes)\r\n                .Include(q => q.ForumPostFavorites)\r\n                .Include(q => q.ForumCategory)\r\n                .Include(q => q.Ressource)\r\n                .Include(q => q.OwnerUser)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdPhotoProfil)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdHeaderProfil)\r\n                .Include(x => x.AcceptedAnswer.OwnerUser.EcoleUsers.Select(xx => xx.UserType))\r\n                .Include(x => x.AcceptedAnswer.OwnerUser.InscriptionPromotions.Select(xx => xx.Promotion.Parcour))\r\n                .Include(x => x.OwnerUser.EcoleUsers.Select(xx => xx.UserType))\r\n                .Include(x => x.OwnerUser.InscriptionPromotions.Select(xx => xx.Promotion.Parcour))\r\n                .Include(x => x.ForumComments.Select(xx => xx.User))\r\n                .Include(x => x.ForumComments.Select(xx => xx.ForumCommentVotes))\r\n                .Include(x => x.ForumComments.Select(fc => fc.User.UploadedFile_FileIdPhotoProfil))\r\n                .Include(x => x.ForumComments.Select(fc => fc.User.UploadedFile_FileIdHeaderProfil))\r\n                .Where(q => q.Id == questionId)\r\n                .Select(fp => new QuestionDto\r\n                {\r\n                    Id = fp.Id,\r\n                    Body = fp.Body,\r\n                    CreationDate = fp.CreationDate,\r\n                    UpdateDate = fp.UpdateDate,\r\n                    DeletionDate = fp.DeletionDate,\r\n                    ClosureDate = fp.ClosureDate,\r\n                    AnswersCount = fp.AnswersCount,\r\n                    AcceptedAnswerId = fp.AcceptedAnswerId,\r\n                    Score = fp.Score,\r\n                    CommentCount = fp.CommentCount,\r\n                    FavoriteCount = fp.FavoriteCount,\r\n                    ViewCount = fp.ViewCount,\r\n                    IsFavorited = fp.ForumPostFavorites.Any(fpf => fpf.UserId == userId),\r\n                    IsUpvoted = fp.ForumPostVotes.Any(fpv => fpv.UserId == userId) ? fp.ForumPostVotes.Where(fpv => fpv.UserId == userId).FirstOrDefault().ForumVoteTypeId == 1 : default(bool?),\r\n                    Title = fp.Title,\r\n                    Tags = fp.Tags,\r\n                    Handled = fp.Handled,\r\n                    ChildPosts = fp.ForumPosts_ParentId\r\n                        .Where(fpc => fpc.DeletionDate == null)\r\n                        .Select(fpc => new QuestionChildDto\r\n                        {\r\n                            Id = fpc.Id,\r\n                            Score = fpc.Score,\r\n                            CreationDate = fpc.CreationDate,\r\n                            Body = fpc.Body,\r\n                            IsFavorited = fpc.ForumPostFavorites.Any(fpf => fpf.UserId == userId),\r\n                            IsUpvoted = fpc.ForumPostVotes.Any(fpv => fpv.UserId == userId) ? fpc.ForumPostVotes.Where(fpv => fpv.UserId == userId).FirstOrDefault().ForumVoteTypeId == 1 : default(bool?),\r\n                            ModApproved = fpc.ModApproved,\r\n                            ModApprovedName = fpc.ApprovingModerator != null ? fpc.ApprovingModerator.Prenom + \" \" + fpc.ApprovingModerator.Nom : string.Empty,\r\n                            ParentId = fp.Id,\r\n                            UpdateDate = fpc.UpdateDate,\r\n\r\n                            ForumUploads = fpc.ForumUploads.Select(fu => new FForumUploads\r\n                            {\r\n                                Filename = fu.FileId.HasValue ? fu.UploadedFile.FileName : fu.Filename,\r\n                                FilePath = fu.FileId.HasValue ? fu.UploadedFile.FileUrl : fu.FilePath,\r\n                            }).ToList(),\r\n\r\n                            ForumComments = fpc.ForumComments.Select(\r\n                            c => new FCommentDetail\r\n                            {\r\n                                Id = c.Id,\r\n                                ForumPostId = c.ForumPostId,\r\n                                OwnerUserId = c.OwnerUserId,\r\n                                CreationDate = c.CreationDate,\r\n                                Score = c.Score,\r\n                                Text = c.Text,\r\n                                OwnerUser =\r\n                                    new FUser\r\n                                    {\r\n                                        id = c.User.Id,\r\n                                        photo_profil = (c.User.FileIdPhotoProfil != null) ? c.User.UploadedFile_FileIdPhotoProfil.FileUrl : c.User.PhotoProfil,\r\n                                        pseudo = c.User.Pseudo,\r\n                                        test = c.User.Test,\r\n                                        header_profil = (c.User.FileIdHeaderProfil != null) ? c.User.UploadedFile_FileIdHeaderProfil.FileUrl : c.User.HeaderProfil,\r\n                                        interne = c.User.Interne,\r\n                                        userType = _db.EcoleUsers\r\n                                                  .Where(x => x.EcoleId == ecoleId && x.UserId == c.User.Id)\r\n                                                  .Select(y => new UUserType\r\n                                                  {\r\n                                                      id = y.UserType.Id,\r\n                                                      code = y.UserType.Code,\r\n                                                      libelle = y.UserType.Libelle\r\n                                                  }\r\n                                                         )\r\n                                                  .FirstOrDefault(),\r\n                                    }\r\n                            })\r\n                            .ToList(),\r\n                            OwnerUserId = fpc.OwnerUser.Id,\r\n                        })\r\n                    .OrderByDescending(fpc => fpc.Score)\r\n                    .ThenBy(fpc => fpc.CreationDate)\r\n                    .ToList(),\r\n                    OwnerUserId = fp.OwnerUserId,\r\n                    ResourceVersionId = fp.RessourceVersionId,\r\n                    ResourceId = fp.RessourceVersion.RessourceId,\r\n                    ForumUploads = fp.ForumUploads.Select(fu => new FForumUploads\r\n                    {\r\n                        Filename = fu.FileId.HasValue ? fu.UploadedFile.FileName: fu.Filename,\r\n                        FilePath = fu.FileId.HasValue ? fu.UploadedFile.FileUrl: fu.FilePath,\r\n                    }).ToList(),\r\n                    ForumCategory = new FForumCategory\r\n                    {\r\n                        id = fp.ForumCategory.Id,\r\n                        libelle = fp.ForumCategory.Libelle,\r\n                        code = fp.ForumCategory.Code,\r\n                        ressource = fp.ForumCategory.ForumTypeId == (int)ForumTypeEnum.FORUM_CONTENT,\r\n                        color = fp.ForumCategory.Color\r\n                    },\r\n                    ForumComments = fp.ForumComments.Select(\r\n                        c => new FCommentDetail\r\n                        {\r\n                            Id = c.Id,\r\n                            ForumPostId = c.ForumPostId,\r\n                            OwnerUserId = c.OwnerUserId,\r\n                            CreationDate = c.CreationDate,\r\n                            Score = c.Score,\r\n                            Text = c.Text,\r\n                            OwnerUser =\r\n                                new FUser\r\n                                {\r\n                                    id = c.User.Id,\r\n                                    photo_profil = (c.User.FileIdPhotoProfil != null) ? c.User.UploadedFile_FileIdPhotoProfil.FileUrl : c.User.PhotoProfil,\r\n                                    pseudo = c.User.Pseudo,\r\n                                    test = c.User.Test,\r\n                                    header_profil = (c.User.FileIdHeaderProfil != null) ? c.User.UploadedFile_FileIdHeaderProfil.FileUrl : c.User.HeaderProfil,\r\n                                    interne = c.User.Interne,\r\n                                    userType = _db.EcoleUsers\r\n                                                  .Where(x => x.EcoleId == ecoleId && x.UserId == c.User.Id)\r\n                                                  .Select(y => new UUserType\r\n                                                  {\r\n                                                      id = y.UserType.Id,\r\n                                                      code = y.UserType.Code,\r\n                                                      libelle = y.UserType.Libelle\r\n                                                  }\r\n                                                         )\r\n                                                  .FirstOrDefault(),\r\n                                }\r\n                        })\r\n                    .ToList()\r\n\r\n                })\r\n                .FirstOrDefaultAsync();\r\n\r\n            if(question == null)\r\n            {\r\n                return BadRequest(\"The question does not exist\");\r\n            }\r\n\r\n            var usersIds = new List<int>();\r\n\r\n            usersIds.Add(question.OwnerUserId);\r\n\r\n            usersIds.AddRange(question.ChildPosts.Select(cp => cp.OwnerUserId));\r\n\r\n            usersIds = usersIds.Distinct().ToList();\r\n\r\n            var users = await this._db.Users.Where(u => usersIds.Contains(u.Id)).Select(u => new QuestionOwnerUserDto\r\n            {\r\n                Id = u.Id,\r\n                Pseudo = u.Pseudo,\r\n                Interne = u.Interne,\r\n                Test = u.Test,\r\n                ProfilePhotoUrl = u.FileIdPhotoProfil.HasValue ? u.UploadedFile_FileIdPhotoProfil.FileUrl : u.PhotoProfil,\r\n                ProfilePhotoHeaderUrl = u.FileIdHeaderProfil.HasValue ? u.UploadedFile_FileIdHeaderProfil.FileUrl : u.HeaderProfil,\r\n                UserType = u.EcoleUsers.OrderByDescending(eu => eu.EcoleId == ecoleId) \r\n                       .Select(eux =>  new UUserType\r\n                       {\r\n                           id = eux.UserType.Id,\r\n                           libelle = eux.UserType.Libelle,\r\n                           code = eux.UserType.Code\r\n                       }).FirstOrDefault(),\r\n                InscriptionPromotions = u.InscriptionPromotions\r\n                            .Where(ip => ip.EcoleId == ecoleId\r\n                                                        && (ip.DateDelete == null\r\n                                                            || ip.DateDelete > DateTime.Now)\r\n                                                        && ((ip.DateFinAcces == null\r\n                                                             && ip.Promotion.DateFinPromo > DateTime.Now)\r\n                                                            || ip.DateFinAcces > DateTime.Now)\r\n                                                        && !ip.Promotion.PromoDemo)\r\n                            .Select(ip => new QuestionOwnerUserInscriptionPromotionDto\r\n                            {\r\n                                DateCreate = ip.DateCreate,\r\n                                PromotionId = ip.PromotionId,\r\n                                PromotionLibelle = ip.Promotion.Libelle,\r\n                                PromotionCode = ip.Promotion.Code,\r\n                                ParcoursId = ip.Promotion.ParcoursId,\r\n                                ParcoursTitle = ip.Promotion.Parcour.Titre,\r\n                                ParcoursCode = ip.Promotion.Parcour.Code\r\n                            })\r\n                            .OrderByDescending(ip => ip.DateCreate)\r\n                            .Take(1)\r\n                            .ToList(),\r\n\r\n            }).ToDictionaryAsync(u => u.Id);\r\n\r\n            question.OwnerUser = users[question.OwnerUserId];\r\n\r\n            foreach (var post in question.ChildPosts)\r\n            {\r\n                post.OwnerUser = users[post.OwnerUserId];\r\n            }\r\n\r\n            if (question.AnswersCount != question.ChildPosts.Count)\r\n            {\r\n                var fp = new ForumPost()\r\n                {\r\n                    Id = question.Id\r\n                };\r\n                _db.ForumPosts.Attach(fp);\r\n                fp.AnswersCount = question.ChildPosts.Count;\r\n                fp.Body = question.Body;\r\n                try\r\n                {\r\n                    await _db.SaveChangesAsync();\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Log.Error(e, \"Error updating post answer count\");\r\n                }\r\n                \r\n            }\r\n\r\n            if (question.DeletionDate != null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n\r\n            question.ChildPosts.OrderBy(cp => cp.Score)\r\n                                .ThenBy(cp => cp.CreationDate);\r\n\r\n            // if no accepted answer\r\n            if (question.AcceptedAnswerId.HasValue)\r\n            {\r\n                question.AcceptedAnswer =\r\n                    question.ChildPosts.FirstOrDefault(a => a.Id == question.AcceptedAnswerId.Value);\r\n\r\n                if (question.AcceptedAnswer != null)\r\n                {\r\n                    question.ChildPosts = question.ChildPosts.Where(a => a.Id != question.AcceptedAnswerId.Value).ToList();\r\n                }\r\n            }\r\n\r\n\r\n            await ForumV2Controller.IncrementPageViewCountAsync(this._db, questionId, userId);\r\n\r\n            var questionMapped = new QuestionDetailsViewModel\r\n            {\r\n                Id = question.Id,\r\n                OwnerUserId = question.OwnerUser.Id,\r\n                CreationDate = question.CreationDate,\r\n                Score = question.Score,\r\n                IsUpvoted = question.IsUpvoted,\r\n                Body = question.Body,\r\n                IsFavorited = question.IsFavorited,\r\n                Title = question.Title,\r\n                UpdateDate = question.UpdateDate,\r\n                CommentCount = question.CommentCount,\r\n                FavoriteCount = question.FavoriteCount,\r\n                ClosureDate = question.ClosureDate,\r\n                Tags = question.Tags,\r\n                AcceptedAnswerId = question.AcceptedAnswerId,\r\n                AnswersCount = question.AnswersCount,\r\n                ViewCount = question.ViewCount,\r\n                RessourceId = question.ResourceId,\r\n                RessourceVersionId = question.ResourceVersionId,\r\n                ForumUploads = question.ForumUploads,\r\n                OwnerUser = new FUser\r\n                {\r\n                    id = question.OwnerUser.Id,\r\n                    pseudo = question.OwnerUser.Pseudo,\r\n                    test = question.OwnerUser.Test,\r\n                    interne = question.OwnerUser.Interne,\r\n                    photo_profil = question.OwnerUser.ProfilePhotoUrl,\r\n                    header_profil = question.OwnerUser.ProfilePhotoHeaderUrl,\r\n                    userType = question.OwnerUser.UserType,\r\n                    Inscriptions_promotions = question.OwnerUser.InscriptionPromotions.Select(\r\n                        ip => new FInscriptions_promotions\r\n                        {\r\n                            Promotion = new FPromotion\r\n                            {\r\n                                id = ip.PromotionId,\r\n                                libelle = ip.PromotionLibelle,\r\n                                code = ip.PromotionCode,\r\n                                Parcours = new FParcours\r\n                                {\r\n                                    id = ip.ParcoursId,\r\n                                    code = ip.ParcoursCode,\r\n                                    titre = ip.ParcoursTitle\r\n                                }\r\n                            }\r\n                        }).ToList(),\r\n                },\r\n                ForumComments = question.ForumComments,\r\n                ForumCategories = question.ForumCategory,\r\n                AcceptedAnswer = question.AcceptedAnswer?.ToPostAnswer(),\r\n                Answers = question.ChildPosts.Select(q => q.ToPostAnswer()).ToList(),\r\n                Handled = question.Handled\r\n            };\r\n            return Ok(questionMapped);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a question and its associated details, including answers, comments, and user information, based on the question ID.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question to be retrieved. It is expected to be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a question and its associated details, including answers, comments, and user information, based on the question ID.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question to be retrieved. It is expected to be an integer value.</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var question = await _db.ForumPosts\r\n                .AsNoTracking()\r\n                .Include(q => q.ForumComments)\r\n                .Include(q => q.ForumUploads)\r\n                .Include(q => q.ForumUploads.Select(fu => fu.UploadedFile))\r\n                .Include(q => q.ForumPostVotes)\r\n                .Include(q => q.ForumPostFavorites)\r\n                .Include(q => q.ForumCategory)\r\n                .Include(q => q.Ressource)\r\n                .Include(q => q.OwnerUser)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdPhotoProfil)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdHeaderProfil)\r\n                .Include(x => x.AcceptedAnswer.OwnerUser.EcoleUsers.Select(xx => xx.UserType))\r\n                .Include(x => x.AcceptedAnswer.OwnerUser.InscriptionPromotions.Select(xx => xx.Promotion.Parcour))\r\n                .Include(x => x.OwnerUser.EcoleUsers.Select(xx => xx.UserType))\r\n                .Include(x => x.OwnerUser.InscriptionPromotions.Select(xx => xx.Promotion.Parcour))\r\n                .Include(x => x.ForumComments.Select(xx => xx.User))\r\n                .Include(x => x.ForumComments.Select(xx => xx.ForumCommentVotes))\r\n                .Include(x => x.ForumComments.Select(fc => fc.User.UploadedFile_FileIdPhotoProfil))\r\n                .Include(x => x.ForumComments.Select(fc => fc.User.UploadedFile_FileIdHeaderProfil))\r\n                .Where(q => q.Id == questionId)\r\n                .Select(fp => new QuestionDto\r\n                {\r\n                    Id = fp.Id,\r\n                    Body = fp.Body,\r\n                    CreationDate = fp.CreationDate,\r\n                    UpdateDate = fp.UpdateDate,\r\n                    DeletionDate = fp.DeletionDate,\r\n                    ClosureDate = fp.ClosureDate,\r\n                    AnswersCount = fp.AnswersCount,\r\n                    AcceptedAnswerId = fp.AcceptedAnswerId,\r\n                    Score = fp.Score,\r\n                    CommentCount = fp.CommentCount,\r\n                    FavoriteCount = fp.FavoriteCount,\r\n                    ViewCount = fp.ViewCount,\r\n                    IsFavorited = fp.ForumPostFavorites.Any(fpf => fpf.UserId == userId),\r\n                    IsUpvoted = fp.ForumPostVotes.Any(fpv => fpv.UserId == userId) ? fp.ForumPostVotes.Where(fpv => fpv.UserId == userId).FirstOrDefault().ForumVoteTypeId == 1 : default(bool?),\r\n                    Title = fp.Title,\r\n                    Tags = fp.Tags,\r\n                    Handled = fp.Handled,\r\n                    ChildPosts = fp.ForumPosts_ParentId\r\n                        .Where(fpc => fpc.DeletionDate == null)\r\n                        .Select(fpc => new QuestionChildDto\r\n                        {\r\n                            Id = fpc.Id,\r\n                            Score = fpc.Score,\r\n                            CreationDate = fpc.CreationDate,\r\n                            Body = fpc.Body,\r\n                            IsFavorited = fpc.ForumPostFavorites.Any(fpf => fpf.UserId == userId),\r\n                            IsUpvoted = fpc.ForumPostVotes.Any(fpv => fpv.UserId == userId) ? fpc.ForumPostVotes.Where(fpv => fpv.UserId == userId).FirstOrDefault().ForumVoteTypeId == 1 : default(bool?),\r\n                            ModApproved = fpc.ModApproved,\r\n                            ModApprovedName = fpc.ApprovingModerator != null ? fpc.ApprovingModerator.Prenom + \" \" + fpc.ApprovingModerator.Nom : string.Empty,\r\n                            ParentId = fp.Id,\r\n                            UpdateDate = fpc.UpdateDate,\r\n\r\n                            ForumUploads = fpc.ForumUploads.Select(fu => new FForumUploads\r\n                            {\r\n                                Filename = fu.FileId.HasValue ? fu.UploadedFile.FileName : fu.Filename,\r\n                                FilePath = fu.FileId.HasValue ? fu.UploadedFile.FileUrl : fu.FilePath,\r\n                            }).ToList(),\r\n\r\n                            ForumComments = fpc.ForumComments.Select(\r\n                            c => new FCommentDetail\r\n                            {\r\n                                Id = c.Id,\r\n                                ForumPostId = c.ForumPostId,\r\n                                OwnerUserId = c.OwnerUserId,\r\n                                CreationDate = c.CreationDate,\r\n                                Score = c.Score,\r\n                                Text = c.Text,\r\n                                OwnerUser =\r\n                                    new FUser\r\n                                    {\r\n                                        id = c.User.Id,\r\n                                        photo_profil = (c.User.FileIdPhotoProfil != null) ? c.User.UploadedFile_FileIdPhotoProfil.FileUrl : c.User.PhotoProfil,\r\n                                        pseudo = c.User.Pseudo,\r\n                                        test = c.User.Test,\r\n                                        header_profil = (c.User.FileIdHeaderProfil != null) ? c.User.UploadedFile_FileIdHeaderProfil.FileUrl : c.User.HeaderProfil,\r\n                                        interne = c.User.Interne,\r\n                                        userType = _db.EcoleUsers\r\n                                                  .Where(x => x.EcoleId == ecoleId && x.UserId == c.User.Id)\r\n                                                  .Select(y => new UUserType\r\n                                                  {\r\n                                                      id = y.UserType.Id,\r\n                                                      code = y.UserType.Code,\r\n                                                      libelle = y.UserType.Libelle\r\n                                                  }\r\n                                                         )\r\n                                                  .FirstOrDefault(),\r\n                                    }\r\n                            })\r\n                            .ToList(),\r\n                            OwnerUserId = fpc.OwnerUser.Id,\r\n                        })\r\n                    .OrderByDescending(fpc => fpc.Score)\r\n                    .ThenBy(fpc => fpc.CreationDate)\r\n                    .ToList(),\r\n                    OwnerUserId = fp.OwnerUserId,\r\n                    ResourceVersionId = fp.RessourceVersionId,\r\n                    ResourceId = fp.RessourceVersion.RessourceId,\r\n                    ForumUploads = fp.ForumUploads.Select(fu => new FForumUploads\r\n                    {\r\n                        Filename = fu.FileId.HasValue ? fu.UploadedFile.FileName: fu.Filename,\r\n                        FilePath = fu.FileId.HasValue ? fu.UploadedFile.FileUrl: fu.FilePath,\r\n                    }).ToList(),\r\n                    ForumCategory = new FForumCategory\r\n                    {\r\n                        id = fp.ForumCategory.Id,\r\n                        libelle = fp.ForumCategory.Libelle,\r\n                        code = fp.ForumCategory.Code,\r\n                        ressource = fp.ForumCategory.ForumTypeId == (int)ForumTypeEnum.FORUM_CONTENT,\r\n                        color = fp.ForumCategory.Color\r\n                    },\r\n                    ForumComments = fp.ForumComments.Select(\r\n                        c => new FCommentDetail\r\n                        {\r\n                            Id = c.Id,\r\n                            ForumPostId = c.ForumPostId,\r\n                            OwnerUserId = c.OwnerUserId,\r\n                            CreationDate = c.CreationDate,\r\n                            Score = c.Score,\r\n                            Text = c.Text,\r\n                            OwnerUser =\r\n                                new FUser\r\n                                {\r\n                                    id = c.User.Id,",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": "photo_profil = (c.User.FileIdPhotoProfil != null) ? c.User.UploadedFile_FileIdPhotoProfil.FileUrl : c.User.PhotoProfil,\r\n                                    pseudo = c.User.Pseudo,\r\n                                    test = c.User.Test,\r\n                                    header_profil = (c.User.FileIdHeaderProfil != null) ? c.User.UploadedFile_FileIdHeaderProfil.FileUrl : c.User.HeaderProfil,\r\n                                    interne = c.User.Interne,\r\n                                    userType = _db.EcoleUsers\r\n                                                  .Where(x => x.EcoleId == ecoleId && x.UserId == c.User.Id)\r\n                                                  .Select(y => new UUserType\r\n                                                  {\r\n                                                      id = y.UserType.Id,\r\n                                                      code = y.UserType.Code,\r\n                                                      libelle = y.UserType.Libelle\r\n                                                  }\r\n                                                         )\r\n                                                  .FirstOrDefault(),\r\n                                }\r\n                        })\r\n                    .ToList()\r\n\r\n                })\r\n                .FirstOrDefaultAsync();\r\n\r\n            if(question == null)\r\n            {\r\n                return BadRequest(\"The question does not exist\");\r\n            }\r\n\r\n            var usersIds = new List<int>();\r\n\r\n            usersIds.Add(question.OwnerUserId);\r\n\r\n            usersIds.AddRange(question.ChildPosts.Select(cp => cp.OwnerUserId));\r\n\r\n            usersIds = usersIds.Distinct().ToList();\r\n\r\n            var users = await this._db.Users.Where(u => usersIds.Contains(u.Id)).Select(u => new QuestionOwnerUserDto\r\n            {\r\n                Id = u.Id,\r\n                Pseudo = u.Pseudo,\r\n                Interne = u.Interne,\r\n                Test = u.Test,\r\n                ProfilePhotoUrl = u.FileIdPhotoProfil.HasValue ? u.UploadedFile_FileIdPhotoProfil.FileUrl : u.PhotoProfil,\r\n                ProfilePhotoHeaderUrl = u.FileIdHeaderProfil.HasValue ? u.UploadedFile_FileIdHeaderProfil.FileUrl : u.HeaderProfil,\r\n                UserType = u.EcoleUsers.OrderByDescending(eu => eu.EcoleId == ecoleId) \r\n                       .Select(eux =>  new UUserType\r\n                       {\r\n                           id = eux.UserType.Id,\r\n                           libelle = eux.UserType.Libelle,\r\n                           code = eux.UserType.Code\r\n                       }).FirstOrDefault(),\r\n                InscriptionPromotions = u.InscriptionPromotions\r\n                            .Where(ip => ip.EcoleId == ecoleId\r\n                                                        && (ip.DateDelete == null\r\n                                                            || ip.DateDelete > DateTime.Now)\r\n                                                        && ((ip.DateFinAcces == null\r\n                                                             && ip.Promotion.DateFinPromo > DateTime.Now)\r\n                                                            || ip.DateFinAcces > DateTime.Now)\r\n                                                        && !ip.Promotion.PromoDemo)\r\n                            .Select(ip => new QuestionOwnerUserInscriptionPromotionDto\r\n                            {\r\n                                DateCreate = ip.DateCreate,\r\n                                PromotionId = ip.PromotionId,\r\n                                PromotionLibelle = ip.Promotion.Libelle,\r\n                                PromotionCode = ip.Promotion.Code,\r\n                                ParcoursId = ip.Promotion.ParcoursId,\r\n                                ParcoursTitle = ip.Promotion.Parcour.Titre,\r\n                                ParcoursCode = ip.Promotion.Parcour.Code\r\n                            })\r\n                            .OrderByDescending(ip => ip.DateCreate)\r\n                            .Take(1)\r\n                            .ToList(),\r\n\r\n            }).ToDictionaryAsync(u => u.Id);\r\n\r\n            question.OwnerUser = users[question.OwnerUserId];\r\n\r\n            foreach (var post in question.ChildPosts)\r\n            {\r\n                post.OwnerUser = users[post.OwnerUserId];\r\n            }\r\n\r\n            if (question.AnswersCount != question.ChildPosts.Count)\r\n            {\r\n                var fp = new ForumPost()\r\n                {\r\n                    Id = question.Id\r\n                };\r\n                _db.ForumPosts.Attach(fp);\r\n                fp.AnswersCount = question.ChildPosts.Count;\r\n                fp.Body = question.Body;\r\n                try\r\n                {\r\n                    await _db.SaveChangesAsync();\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Log.Error(e, \"Error updating post answer count\");\r\n                }\r\n                \r\n            }\r\n\r\n            if (question.DeletionDate != null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n\r\n            question.ChildPosts.OrderBy(cp => cp.Score)\r\n                                .ThenBy(cp => cp.CreationDate);\r\n\r\n            // if no accepted answer\r\n            if (question.AcceptedAnswerId.HasValue)\r\n            {\r\n                question.AcceptedAnswer =\r\n                    question.ChildPosts.FirstOrDefault(a => a.Id == question.AcceptedAnswerId.Value);\r\n\r\n                if (question.AcceptedAnswer != null)\r\n                {\r\n                    question.ChildPosts = question.ChildPosts.Where(a => a.Id != question.AcceptedAnswerId.Value).ToList();\r\n                }\r\n            }\r\n\r\n\r\n            await ForumV2Controller.IncrementPageViewCountAsync(this._db, questionId, userId);\r\n\r\n            var questionMapped = new QuestionDetailsViewModel\r\n            {\r\n                Id = question.Id,\r\n                OwnerUserId = question.OwnerUser.Id,\r\n                CreationDate = question.CreationDate,\r\n                Score = question.Score,\r\n                IsUpvoted = question.IsUpvoted,\r\n                Body = question.Body,\r\n                IsFavorited = question.IsFavorited,\r\n                Title = question.Title,\r\n                UpdateDate = question.UpdateDate,\r\n                CommentCount = question.CommentCount,\r\n                FavoriteCount = question.FavoriteCount,\r\n                ClosureDate = question.ClosureDate,\r\n                Tags = question.Tags,\r\n                AcceptedAnswerId = question.AcceptedAnswerId,\r\n                AnswersCount = question.AnswersCount,\r\n                ViewCount = question.ViewCount,\r\n                RessourceId = question.ResourceId,\r\n                RessourceVersionId = question.ResourceVersionId,\r\n                ForumUploads = question.ForumUploads,\r\n                OwnerUser = new FUser\r\n                {\r\n                    id = question.OwnerUser.Id,\r\n                    pseudo = question.OwnerUser.Pseudo,\r\n                    test = question.OwnerUser.Test,\r\n                    interne = question.OwnerUser.Interne,\r\n                    photo_profil = question.OwnerUser.ProfilePhotoUrl,\r\n                    header_profil = question.OwnerUser.ProfilePhotoHeaderUrl,\r\n                    userType = question.OwnerUser.UserType,\r\n                    Inscriptions_promotions = question.OwnerUser.InscriptionPromotions.Select(\r\n                        ip => new FInscriptions_promotions\r\n                        {\r\n                            Promotion = new FPromotion\r\n                            {\r\n                                id = ip.PromotionId,\r\n                                libelle = ip.PromotionLibelle,\r\n                                code = ip.PromotionCode,\r\n                                Parcours = new FParcours\r\n                                {\r\n                                    id = ip.ParcoursId,",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": "code = ip.ParcoursCode,\r\n                                    titre = ip.ParcoursTitle\r\n                                }\r\n                            }\r\n                        }).ToList(),\r\n                },\r\n                ForumComments = question.ForumComments,\r\n                ForumCategories = question.ForumCategory,\r\n                AcceptedAnswer = question.AcceptedAnswer?.ToPostAnswer(),\r\n                Answers = question.ChildPosts.Select(q => q.ToPostAnswer()).ToList(),\r\n                Handled = question.Handled\r\n            };\r\n            return Ok(questionMapped);\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "QuestionGetAnswersAsync",
            "code_start_index": 60076,
            "method_name": "QuestionGetAnswersAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get the answers to the questions identified by the id.\r\n        /// </summary>\r\n        /// <param name=\"questionId\">Question Id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var question = await _db.ForumPosts.AsNoTracking()\r\n                .Where(q => q.Id == questionId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (question?.DeletionDate == null) return NotFound();\r\n\r\n            var answers = await _db.ForumPosts.AsNoTracking()\r\n                .Include(q => q.OwnerUser)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdPhotoProfil)\r\n                .Include(q => q.OwnerUser.UploadedFile_FileIdHeaderProfil)\r\n                .Include(q => q.ForumComments)\r\n                .Include(q => q.ForumUploads)\r\n                .Where(q => q.ParentId == questionId)\r\n                .ToListAsync();\r\n\r\n            return Ok(\r\n                answers.Select(this.ConvertToPostAnswerViewModel)\r\n                    .ToList());\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve answers to a specified question from the database asynchronously, including relevant user and comment data, and return them as a list of view models.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The unique identifier of the question for which answers need to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve answers to a specified question from the database asynchronously, including relevant user and comment data, and return them as a list of view models.\n/// </summary>\n/// <param name=\"questionId\">The unique identifier of the question for which answers need to be retrieved.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionGetCommentsAsync",
            "code_start_index": 61238,
            "method_name": "QuestionGetCommentsAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Gets the comments on the specified question\r\n        /// </summary>\r\n        /// <param name=\"questionId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var question = await _db.ForumPosts.AsNoTracking()\r\n                .Where(q => q.Id == questionId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (question?.DeletionDate == null) return NotFound();\r\n\r\n            var comments = await _db.ForumComments.AsNoTracking()\r\n                .Include(fc => fc.ForumCommentVotes)\r\n                .Include(fc => fc.User)\r\n                .Include(fc => fc.User.UploadedFile_FileIdPhotoProfil)\r\n                .Include(fc => fc.User.UploadedFile_FileIdHeaderProfil)\r\n                .Where(fc => fc.ForumPostId == questionId)\r\n                .Where(fc => fc.DeletionDate == null)\r\n                .ToListAsync();\r\n\r\n            return Ok(\r\n                comments.Select(\r\n                    c => new FCommentDetail\r\n                    {\r\n                        Id = c.Id,\r\n                        ForumPostId = c.ForumPostId,\r\n                        OwnerUserId = c.OwnerUserId,\r\n                        CreationDate = c.CreationDate,\r\n\r\n                        // IsUpvoted = c.,\r\n                        Score = c.Score,\r\n                        Text = c.Text,\r\n                        OwnerUser =\r\n                            new FUser\r\n                            {\r\n                                id = c.User.Id,\r\n                                photo_profil = (c.User.FileIdPhotoProfil != null) ? c.User.UploadedFile_FileIdPhotoProfil.FileUrl : c.User.PhotoProfil,\r\n                                pseudo = c.User.Pseudo,\r\n                                test = c.User.Test,\r\n                                header_profil = (c.User.FileIdHeaderProfil != null) ? c.User.UploadedFile_FileIdHeaderProfil.FileUrl : c.User.HeaderProfil,\r\n                                interne = c.User.Interne\r\n                            }\r\n                    }));\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve comments for a specific question, including details about each comment's owner and voting information.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question for which comments are to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve comments for a specific question, including details about each comment's owner and voting information.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question for which comments are to be retrieved.</param>\n",
            "code_chunks": null
        },
        {
            "name": "SaveAudio",
            "code_start_index": 63480,
            "method_name": "SaveAudio",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Creates an answer on the given question.\r\n        /// </summary>\r\n        /// <param name=\"questionId\">Question Id</param>\r\n        /// <param name=\"guid\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "guid",
                    "param_name": "guid",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var forumupload = await _db.ForumUploads.Where(fu => fu.FileGuid.ToString() == guid).FirstOrDefaultAsync();\r\n            forumupload.ForumPostId = questionId;\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error linking upload to the forum post\");\r\n                return InternalServerError(e);\r\n            }\r\n\r\n            return Ok(new ForumUploadViewModel\r\n            {\r\n                FilePath = (forumupload.FileId != null) ? forumupload.UploadedFile.FileUrl : forumupload.FilePath,\r\n                Filename = (forumupload.FileId != null) ? forumupload.UploadedFile.FileName : forumupload.Filename,\r\n            });\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the forum upload audio file path and link it to a specific forum post, returning the file path and filename.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question to which the audio file is related. It should be an integer."
                    },
                    {
                        "name": "guid",
                        "param_name": "guid",
                        "param_desc": "A unique identifier (GUID) associated with the audio file. It should be a string."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the forum upload audio file path and link it to a specific forum post, returning the file path and filename.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question to which the audio file is related. It should be an integer.</param>\n/// <param name=\"guid\">A unique identifier (GUID) associated with the audio file. It should be a string.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionAddAnswerAsync",
            "code_start_index": 64654,
            "method_name": "QuestionAddAnswerAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Creates an answer on the given question.\r\n        /// </summary>\r\n        /// <param name=\"questionId\">Question Id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n            var userId = currentUser.Id;\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            var question = await _db.ForumPosts.FirstOrDefaultAsync(q => q.Id == questionId);\r\n\r\n            if (question == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (question.ParentId != null)\r\n            {\r\n                return BadRequest(\"You can't answer an answer\");\r\n            }\r\n\r\n            if (question.DeletionDate != null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            try\r\n            {\r\n                string rootFolder = HostingEnvironment.MapPath(\"~/App_Data\");\r\n\r\n                // read form data\r\n                var provider = new MultipartFormDataStreamProvider(rootFolder);\r\n\r\n                await Request.Content.ReadAsMultipartAsync(provider);\r\n                var answerJsonString = JsonConvert.DeserializeObject<string>(provider.FormData.Get(\"content\"));\r\n                if (string.IsNullOrWhiteSpace(answerJsonString))\r\n                {\r\n                    ModelState.AddModelError(\"content\", \"answer cannot be null, empty or contain only whitespace\");\r\n                    return BadRequest(ModelState);\r\n                }\r\n\r\n                var result = this.CheckMultipleUploadRequest(provider,\r\n                                                             WebsiteConfiguration.ForumAllowedFileExtensions,\r\n                                                             out List<FileDetails> filesDetails);\r\n                if (result != null)\r\n                {\r\n                    return result;\r\n                }\r\n\r\n                var forumUploads = new List<ForumUpload>();\r\n                foreach (var file in filesDetails)\r\n                {\r\n                    var uploadResponse = await this.UploadToRessourcesServerAsync(file, \"forum\", userId, ecoleId, _config.GetResourcesServerUrl());\r\n\r\n                    if (uploadResponse == null)\r\n                    {\r\n                        Log.Warning(\"Error uploading a file to the file server. File: {0}, Upload Source: {1}, UserID: {2}, ecoleID: {3}\",\r\n                                    file,\r\n                                    \"forum\",\r\n                                    userId,\r\n                                    ecoleId);\r\n                        return InternalServerError();\r\n                    }\r\n\r\n                    if (!uploadResponse.Success)\r\n                    {\r\n                        Log.Warning(\"Failed to upload a file to the ressources server with the following error\",\r\n                                    uploadResponse.ErrorMessage);\r\n                        return InternalServerError();\r\n                    }\r\n\r\n                    forumUploads.Add(new ForumUpload\r\n                                     {\r\n                                         FilePath = _config.GetResourcesServerUrl() + uploadResponse.FileUrl,\r\n                                         Filename = file.Filename\r\n                                     });\r\n                }\r\n\r\n                if (provider.FormData.AllKeys.Contains(\"audiofile\"))\r\n                {\r\n                    string audioGuid = JsonConvert.DeserializeObject<string>(provider.FormData.Get(\"audiofile\"));\r\n                    if (!string.IsNullOrWhiteSpace(audioGuid))\r\n                    {\r\n                        var forumupload = await _db.ForumUploads.Where(fu => fu.FileGuid.ToString() == audioGuid).FirstOrDefaultAsync();\r\n                        forumUploads.Add(forumupload);\r\n                    }\r\n                }\r\n\r\n                var answer = new ForumPost\r\n                {\r\n                    ParentId = questionId,\r\n                    Body = answerJsonString,\r\n                    OwnerUserId = userId,\r\n                    OwnerSchoolId = ecoleId,\r\n                    ForumUploads = forumUploads\r\n                };\r\n                question.AnswersCount++;\r\n\r\n                question.UpdateDate = DateTime.Now;\r\n\r\n                if (estFormateur)\r\n                {\r\n                    question.Handled = true;\r\n                    question.HandledDate = DateTime.Now;\r\n                    question.HandlingUser = User.Identity.GetUser().Email;\r\n                    if (provider.FormData.AllKeys.Contains(\"certify\"))\r\n                    {\r\n                        var certify = provider.FormData.Get(\"certify\");\r\n                        if (!string.IsNullOrWhiteSpace(certify))\r\n                        {\r\n                            bool.TryParse(certify, out var cert);\r\n\r\n                            if (cert)\r\n                            {\r\n                                question.ModApproved = true;\r\n                                question.ApprovingModeratorId = User.Identity.GetUserId();\r\n                                answer.ModApproved = true;\r\n                                answer.ApprovingModeratorId = User.Identity.GetUserId();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    question.Handled = false;\r\n                    question.HandledDate = null;\r\n                    question.HandlingUser = null;\r\n                }\r\n\r\n                _db.ForumPosts.Add(answer);\r\n                await _db.SaveChangesAsync();\r\n\r\n                var anwerComplete = await _db.ForumPosts.Where(fp => fp.Id == answer.Id)\r\n                                             .Include(fp => fp.OwnerUser)\r\n                                             .Include(fp => fp.OwnerUser.UploadedFile_FileIdPhotoProfil)\r\n                                             .Include(fp => fp.OwnerUser.UploadedFile_FileIdHeaderProfil)\r\n                                             .Include(fp => fp.ForumUploads)\r\n                                             .Include(x => x.OwnerUser.EcoleUsers.Select(xx => xx.UserType))\r\n                                             .Include(x => x.OwnerUser.InscriptionPromotions.Select(xx => xx.Promotion.Parcour))\r\n                                             .SingleAsync();\r\n\r\n                var postAnswerViewModel = ConvertToPostAnswerViewModel(anwerComplete);\r\n\r\n                BackgroundJob.Enqueue(() => NotificationSenderManager.SendForumReplyNotificationAsync(userId, ecoleId, answer.Id));\r\n\r\n                var forumHub = GlobalHost.ConnectionManager.GetHubContext<ForumHub>();\r\n                forumHub.Clients.All.publishAnswer(postAnswerViewModel);\r\n\r\n                return Ok(postAnswerViewModel);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error adding an answer\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Add an answer to a forum question, including handling file uploads and notifications, with possible certification by a moderator.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question to which the answer will be added. This should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Add an answer to a forum question, including handling file uploads and notifications, with possible certification by a moderator.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question to which the answer will be added. This should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionDeleteAsync",
            "code_start_index": 71856,
            "method_name": "QuestionDeleteAsync",
            "existing_summary": "\r\n\r\n        /// <summary>\r\n        /// Deletes the given question.\r\n        /// </summary>\r\n        /// <param name=\"questionId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var user = User.Identity.GetUser();\r\n            var userId = user.Id;\r\n\r\n            var question = await _db.ForumPosts.Where(q => q.Id == questionId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (question == null || question.DeletionDate != null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (question.ParentId != null)\r\n            {\r\n                return BadRequest(\"You're trying to delete an answer. Use the appropriate API call for that.\");\r\n            }\r\n\r\n            if ((question.OwnerUserId != userId) && !user.Interne)\r\n            {\r\n                return Content(HttpStatusCode.Forbidden, \"You can't delete this question\");\r\n            }\r\n\r\n            try\r\n            {\r\n                question.DeletionDate = question.DeletionDate ?? DateTime.Now;\r\n                await _db.SaveChangesAsync();\r\n                return StatusCode(HttpStatusCode.NoContent);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error trying to delete a question\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Delete a question from the forum if the user has the appropriate permissions and conditions are met.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The unique identifier of the question to be deleted."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Delete a question from the forum if the user has the appropriate permissions and conditions are met.\n/// </summary>\n/// <param name=\"questionId\">The unique identifier of the question to be deleted.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionDownvoteAsync",
            "code_start_index": 73370,
            "method_name": "QuestionDownvoteAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Casts a downvote on the given question.\r\n        /// </summary>\r\n        /// <param name=\"questionId\">Question Id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            if (await PostDeletedOrNotExistAsync(questionId))\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"the question doesn't exist or it was deleted\");\r\n            }\r\n\r\n            var question = await _db.ForumPosts.Include(q => q.ForumPostVotes)\r\n                .Where(q => q.Id == questionId)\r\n                .FirstOrDefaultAsync();\r\n            if (question.ParentId != null)\r\n            {\r\n                return BadRequest(\"You're trying to downvote an answer using the wrong API\");\r\n            }\r\n\r\n            var postVote = question.ForumPostVotes.FirstOrDefault(\r\n                fv => fv.UserId == userId && (fv.ForumVoteTypeId == (int)VoteTypes.Downvote\r\n                                              || fv.ForumVoteTypeId == (int)VoteTypes.Upvote));\r\n\r\n            if (question.ForumPostVotes.Count == 0 || postVote == null)\r\n            {\r\n                question.Score--;\r\n                question.ForumPostVotes.Add(\r\n                    new ForumPostVote { ForumVoteTypeId = (int)VoteTypes.Downvote, UserId = userId });\r\n            }\r\n            else\r\n            {\r\n                switch (postVote.ForumVoteTypeId)\r\n                {\r\n                    case 1:\r\n                        question.Score -= 2;\r\n                        postVote.ForumVoteTypeId = (int)VoteTypes.Downvote;\r\n                        break;\r\n                    case 2:\r\n                        return Content(HttpStatusCode.Forbidden, \"You can't downvote a post more than once\");\r\n                }\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                question.SetCurrentUser(userId);\r\n                return Ok(Convert(question));\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(\"Error downvoting a question\", e);\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Downvote a question, updating the score and preventing multiple downvotes on the same post.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question to be downvoted. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Downvote a question, updating the score and preventing multiple downvotes on the same post.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question to be downvoted. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionDownvoteUndoAsync",
            "code_start_index": 75723,
            "method_name": "QuestionDownvoteUndoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Undoes a downvote on the given question. \r\n        /// </summary>\r\n        /// <param name=\"questionId\">Question Id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            if (await PostDeletedOrNotExistAsync(questionId))\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"the question doesn't exist or it was deleted\");\r\n            }\r\n\r\n            var question = await _db.ForumPosts.Include(q => q.ForumPostVotes)\r\n                .Where(q => q.Id == questionId)\r\n                .FirstOrDefaultAsync();\r\n            if (question.ParentId != null)\r\n            {\r\n                return BadRequest(\"You're trying to downvote an answer using the wrong API\");\r\n            }\r\n\r\n            var postVote =\r\n                question.ForumPostVotes.FirstOrDefault(\r\n                    fv => fv.UserId == userId && fv.ForumVoteTypeId == (int)VoteTypes.Downvote);\r\n\r\n            try\r\n            {\r\n                if (postVote != null)\r\n                {\r\n                    _db.ForumPostVotes.Remove(postVote);\r\n                    question.Score++;\r\n                    await _db.SaveChangesAsync();\r\n                }\r\n\r\n                question.SetCurrentUser(userId);\r\n                return Ok(this.Convert(question));\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error while trying to undo a downvote\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Undo a downvote on a question if it exists and was not deleted, otherwise return an error message.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question on which the downvote is to be undone."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Undo a downvote on a question if it exists and was not deleted, otherwise return an error message.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question on which the downvote is to be undone.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionUpvoteAsync",
            "code_start_index": 77439,
            "method_name": "QuestionUpvoteAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Casts an upvote on the given question.\r\n        /// </summary>\r\n        /// <param name=\"questionId\">Question Id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            // On check si la question n'a pas \u00e9t\u00e9 supprim\u00e9e entre temps\r\n            if (await PostDeletedOrNotExistAsync(questionId))\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"the question doesn't exist or it was deleted\");\r\n            }\r\n\r\n            // On r\u00e9cup\u00e8re le post avec les votes\r\n            var question = await _db.ForumPosts.Include(q => q.ForumPostVotes)\r\n                .Where(q => q.Id == questionId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            // On renvoie une erreur si la question est une r\u00e9ponse (ParentId non null)\r\n            if (question.ParentId != null)\r\n            {\r\n                return BadRequest(\"You're trying to downvote an answer using the wrong API\");\r\n            }\r\n\r\n            // On r\u00e9cup\u00e8re le vote de l'user qui a initialis\u00e9 l'appel\r\n            var postVote = question.ForumPostVotes.FirstOrDefault(\r\n                fv => fv.UserId == userId && (fv.ForumVoteTypeId == (int)VoteTypes.Downvote\r\n                                              || fv.ForumVoteTypeId == (int)VoteTypes.Upvote));\r\n\r\n            // Si c'est null ou qu'il y'en a pas, alors c'est qu'il n'a jamais vot\u00e9 sur cette question\r\n            if (question.ForumPostVotes.Count == 0 || postVote == null)\r\n            {\r\n                question.Score++;\r\n                question.ForumPostVotes.Add(\r\n                    new ForumPostVote { ForumVoteTypeId = (int)VoteTypes.Upvote, UserId = userId });\r\n            }\r\n\r\n            // Sinon c'est qu'il a d\u00e9j\u00e0 vot\u00e9 et donc il faut check si c'est un vote positif ou pas\r\n            else\r\n            {\r\n                switch (postVote.ForumVoteTypeId)\r\n                {\r\n                    case (int)VoteTypes.Upvote:\r\n                        return Content(HttpStatusCode.Forbidden, \"You can't upvote a post more than once\");\r\n\r\n                    case (int)VoteTypes.Downvote:\r\n                        question.Score += 2;\r\n                        postVote.ForumVoteTypeId = (int)VoteTypes.Upvote;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                question.SetCurrentUser(userId);\r\n                return Ok(this.Convert(question));\r\n            }\r\n            catch (Exception)\r\n            {\r\n                Log.Error(\"Error upvoting a question\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Upvote a question, handling scenarios where the user either upvotes, downvotes, or has not voted on the question before.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question that the user wants to upvote."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Upvote a question, handling scenarios where the user either upvotes, downvotes, or has not voted on the question before.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question that the user wants to upvote.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionUpvoteUndoAsync",
            "code_start_index": 80315,
            "method_name": "QuestionUpvoteUndoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Undoes an upvote on the given question.\r\n        /// </summary>\r\n        /// <param name=\"questionId\">Question Id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            if (await PostDeletedOrNotExistAsync(questionId))\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"the question doesn't exist or it was deleted\");\r\n            }\r\n\r\n            var question = await _db.ForumPosts.Include(q => q.ForumPostVotes)\r\n                .Where(q => q.Id == questionId)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (question.ParentId != null)\r\n            {\r\n                return BadRequest(\"You're trying to downvote an answer using the wrong API\");\r\n            }\r\n\r\n            var postVote =\r\n                question.ForumPostVotes.FirstOrDefault(\r\n                    fv => fv.UserId == userId && fv.ForumVoteTypeId == (int)VoteTypes.Upvote);\r\n\r\n            try\r\n            {\r\n                if (postVote != null)\r\n                {\r\n                    _db.ForumPostVotes.Remove(postVote);\r\n                    question.Score--;\r\n                    await _db.SaveChangesAsync();\r\n                }\r\n\r\n                question.SetCurrentUser(userId);\r\n\r\n                return Ok(Convert(question));\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error while trying to undo an upvote\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Undo an upvote on a question, handling cases where the question doesn't exist, is deleted, or if the user is trying to downvote an answer instead.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question for which the upvote needs to be undone. It should be an integer."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Undo an upvote on a question, handling cases where the question doesn't exist, is deleted, or if the user is trying to downvote an answer instead.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question for which the upvote needs to be undone. It should be an integer.</param>\n",
            "code_chunks": null
        },
        {
            "name": "ConvertToPostAnswerViewModel",
            "code_start_index": 81756,
            "method_name": "ConvertToPostAnswerViewModel",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "post",
                    "param_name": "post",
                    "param_type": "ForumPost",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            if (post == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var result = new PostAnswerViewModel\r\n            {\r\n                Id = post.Id,\r\n                OwnerUserId = post.OwnerUserId,\r\n                Score = post.Score,\r\n                IsUpvoted = post.IsUpvoted,\r\n                CreationDate = post.CreationDate,\r\n                Body = post.Body,\r\n                IsFavorited = post.IsFavorited,\r\n                UpdateDate = post.UpdateDate,\r\n                ModApproved = post.ModApproved,\r\n                ModApprovedName = post.ApprovingModerator != null ? $\"{post.ApprovingModerator.Prenom} {post.ApprovingModerator.Nom}\" :string.Empty,\r\n                ParentId = post.ParentId,\r\n            };\r\n\r\n            if (post.OwnerUser != null)\r\n            {\r\n                result.OwnerUser = new FUser\r\n                {\r\n                    id = post.OwnerUser.Id,\r\n                    photo_profil = (post.OwnerUser.FileIdPhotoProfil != null) ? post.OwnerUser.UploadedFile_FileIdPhotoProfil.FileUrl : post.OwnerUser.PhotoProfil,\r\n                    header_profil = (post.OwnerUser.FileIdHeaderProfil != null) ? post.OwnerUser.UploadedFile_FileIdHeaderProfil.FileUrl : post.OwnerUser.HeaderProfil,\r\n                    pseudo = post.OwnerUser.Pseudo,\r\n                    test = post.OwnerUser.Test,\r\n                    interne = post.OwnerUser.Interne,\r\n                };\r\n\r\n                if (post.OwnerUser?.InscriptionPromotions != null && post.OwnerUser?.InscriptionPromotions.Count > 0)\r\n                {\r\n                    result.OwnerUser.Inscriptions_promotions = post.OwnerUser?.InscriptionPromotions.Select(\r\n                            ip => new FInscriptions_promotions\r\n                            {\r\n                                Promotion =\r\n                                    new FPromotion\r\n                                    {\r\n                                        id = ip.Promotion.Id,\r\n                                        libelle =\r\n                                            ip.Promotion.Libelle,\r\n                                        code = ip.Promotion.Code,\r\n                                        Parcours =\r\n                                            new FParcours\r\n                                            {\r\n                                                id\r\n                                                    = ip\r\n                                                        .Promotion\r\n                                                        .Parcour\r\n                                                        .Id,\r\n                                                code\r\n                                                    = ip\r\n                                                        .Promotion\r\n                                                        .Parcour\r\n                                                        .Code,\r\n                                                titre\r\n                                                    = ip\r\n                                                        .Promotion\r\n                                                        .Parcour\r\n                                                        .Titre\r\n                                            }\r\n                                    }\r\n                            })\r\n                        .ToList();\r\n                }\r\n\r\n                if (post.OwnerUser?.EcoleUsers != null && post.OwnerUser?.EcoleUsers.Count > 0)\r\n                {\r\n                    result.OwnerUser.Ecoles_users = post.OwnerUser.EcoleUsers.Select(\r\n                            e => new NFEcoleUser\r\n                            {\r\n                                Users_type =\r\n                                    new UUserType\r\n                                    {\r\n                                        id = e.UserType.Id,\r\n                                        libelle = e.UserType.Libelle,\r\n                                        code = e.UserType.Code\r\n                                    }\r\n                            })\r\n                        .ToList();\r\n                }\r\n            }\r\n\r\n            if (post.ForumComments != null)\r\n            {\r\n                result.ForumComments = post.ForumComments.Select(\r\n                        c => new FCommentDetail\r\n                        {\r\n                            Id = c.Id,\r\n                            OwnerUserId = c.OwnerUserId,\r\n                            OwnerUser =\r\n                                new FUser\r\n                                {\r\n                                    id = c.User.Id,\r\n                                    header_profil = (c.User.FileIdHeaderProfil != null) ? c.User.UploadedFile_FileIdHeaderProfil.FileUrl : c.User.HeaderProfil,\r\n                                    photo_profil = (c.User.FileIdPhotoProfil != null) ? c.User.UploadedFile_FileIdPhotoProfil.FileUrl : c.User.PhotoProfil,\r\n                                    pseudo = c.User.Pseudo,\r\n                                    test = c.User.Test,\r\n                                    interne = c.User.Interne\r\n                                },\r\n                            Score = c.Score,\r\n                            IsUpvoted = c.IsUpvoted,\r\n                            CreationDate = c.CreationDate,\r\n                            ForumPostId = c.ForumPostId,\r\n                            Text = c.Text\r\n                        })\r\n                    .ToList();\r\n\r\n                if (post.ForumComments?.Count > 0)\r\n                {\r\n                }\r\n            }\r\n\r\n            if (post.ForumUploads != null)\r\n            {\r\n                result.ForumUploads = post.ForumUploads\r\n                    .Select(fu => new FForumUploads {\r\n                        FilePath = (fu.FileId != null) ? fu.UploadedFile.FileUrl : fu.FilePath,\r\n                        Filename = (fu.FileId != null) ? fu.UploadedFile.FileName : fu.Filename\r\n                    })\r\n                    .ToList();\r\n            }\r\n\r\n            return result;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a view model for a post answer, including details about the post owner, comments, and uploads.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "ForumPost",
                        "param_name": "ForumPost",
                        "param_desc": "The ForumPost object representing the post that will be converted to a PostAnswerViewModel."
                    },
                    {
                        "name": "post",
                        "param_name": "post",
                        "param_desc": "The specific post object being converted to a PostAnswerViewModel."
                    },
                    {
                        "name": "ConvertToPostAnswerViewModel",
                        "param_name": "ConvertToPostAnswerViewModel",
                        "param_desc": "The method responsible for creating a view model for a post answer."
                    },
                    {
                        "name": "Create a view model for a post answer, including details about the post owner, comments, and uploads.",
                        "param_name": "Create a view model for a post answer, including details about the post owner, comments, and uploads.",
                        "param_desc": "The purpose of the ConvertToPostAnswerViewModel method."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a view model for a post answer, including details about the post owner, comments, and uploads.\n/// </summary>\n/// <param name=\"ForumPost\">The ForumPost object representing the post that will be converted to a PostAnswerViewModel.</param>\n/// <param name=\"post\">The specific post object being converted to a PostAnswerViewModel.</param>\n/// <param name=\"ConvertToPostAnswerViewModel\">The method responsible for creating a view model for a post answer.</param>\n/// <param name=\"Create a view model for a post answer, including details about the post owner, comments, and uploads.\">The purpose of the ConvertToPostAnswerViewModel method.</param>\n",
            "code_chunks": null
        },
        {
            "name": "Convert",
            "code_start_index": 87952,
            "method_name": "Convert",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "post",
                    "param_name": "post",
                    "param_type": "ForumPost",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            if (post == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var result = new FListingQuestion\r\n            {\r\n                Id = post.Id,\r\n                OwnerUserId = post.OwnerUserId,\r\n                Score = post.Score,\r\n                IsUpvoted = post.IsUpvoted,\r\n                CreationDate = post.CreationDate,\r\n                Body = post.Body,\r\n                AcceptedAnswerId = post.AcceptedAnswerId,\r\n                AnswersCount = post.AnswersCount,\r\n                ClosureDate = post.ClosureDate,\r\n                CommentCount = post.CommentCount,\r\n                FavoriteCount = post.FavoriteCount,\r\n                IsFavorited = post.IsFavorited,\r\n                ModApproved = post.ModApproved,\r\n                PageUrl = post.PageUrl,\r\n                Tags = post.Tags,\r\n                Title = post.Title,\r\n                UpdateDate = post.UpdateDate,\r\n                ViewCount = post.ViewCount\r\n            };\r\n\r\n            if (post.OwnerUser != null)\r\n            {\r\n                result.OwnerUser = new FUser\r\n                {\r\n                    id = post.OwnerUser.Id,\r\n                    photo_profil = (post.OwnerUser.FileIdPhotoProfil != null) ? post.OwnerUser.UploadedFile_FileIdPhotoProfil.FileUrl : post.OwnerUser.PhotoProfil,\r\n                    header_profil = (post.OwnerUser.FileIdHeaderProfil != null) ? post.OwnerUser.UploadedFile_FileIdHeaderProfil.FileUrl : post.OwnerUser.HeaderProfil,\r\n                    pseudo = post.OwnerUser.Pseudo,\r\n                    test = post.OwnerUser.Test,\r\n                    interne = post.OwnerUser.Interne,\r\n                };\r\n            }\r\n\r\n            if (post.ForumCategory != null)\r\n            {\r\n                result.ForumCategories =\r\n                    new FForumCategory\r\n                    {\r\n                        id = post.ForumCategory.Id,\r\n                        libelle = post.ForumCategory.Libelle,\r\n                        code = post.ForumCategory.Code,\r\n                        ressource = post.ForumCategory.ForumTypeId == (int)ForumTypeEnum.FORUM_CONTENT,\r\n                        color = post.ForumCategory.Color\r\n                    };\r\n            }\r\n\r\n            return result;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a new object by mapping the properties of the input object, including nested properties if they exist.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "ForumPost",
                        "param_name": "ForumPost",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "post",
                        "param_name": "post",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a new object by mapping the properties of the input object, including nested properties if they exist.\n/// </summary>\n/// <param name=\"ForumPost\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"post\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionFavoriteAsync",
            "code_start_index": 90535,
            "method_name": "QuestionFavoriteAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Favorites the given question.\r\n        /// </summary>\r\n        /// <param name=\"questionId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            var question = await _db.ForumPosts.FirstOrDefaultAsync(q => q.Id == questionId);\r\n\r\n            if (question == null || question.DeletionDate != null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (question.ParentId != null)\r\n            {\r\n                return BadRequest(\"You can only favorite questions\");\r\n            }\r\n\r\n            try\r\n            {\r\n                if (await _db.ForumPostFavorites.AnyAsync(p => p.UserId == userId && p.ForumPostId == questionId))\r\n                {\r\n                    return BadRequest(\"You can't favorite a post twice\");\r\n                }\r\n\r\n                var postFavorite = new ForumPostFavorite { UserId = userId, ForumPostId = questionId };\r\n                _db.ForumPostFavorites.Add(postFavorite);\r\n                question.FavoriteCount++;\r\n                await _db.SaveChangesAsync();\r\n\r\n                return Ok(true);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error favoriting a question\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Favorite a question post asynchronously, checking and handling various conditions such as post deletion, user authorization, and duplicate favorites.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The ID of the question post that is being favorited. It should be an integer value."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Favorite a question post asynchronously, checking and handling various conditions such as post deletion, user authorization, and duplicate favorites.\n/// </summary>\n/// <param name=\"questionId\">The ID of the question post that is being favorited. It should be an integer value.</param>\n",
            "code_chunks": null
        },
        {
            "name": "QuestionFavoriteUndoAsync",
            "code_start_index": 92088,
            "method_name": "QuestionFavoriteUndoAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Undoes favoriting the given question.\r\n        /// </summary>\r\n        /// <param name=\"questionId\">Question Id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n\r\n            var question = await _db.ForumPosts.FirstOrDefaultAsync(q => q.Id == questionId);\r\n\r\n            if (question == null || question.DeletionDate != null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (question.ParentId != null)\r\n            {\r\n                return BadRequest(\"You can only favorite questions\");\r\n            }\r\n\r\n            try\r\n            {\r\n                var postFavorite =\r\n                    await _db.ForumPostFavorites.FirstOrDefaultAsync(\r\n                        p => p.UserId == userId && p.ForumPostId == questionId);\r\n                if (postFavorite == null)\r\n                {\r\n                    return BadRequest(\"You have not favorited this question yet\");\r\n                }\r\n\r\n                _db.ForumPostFavorites.Remove(postFavorite);\r\n                question.FavoriteCount--;\r\n                await _db.SaveChangesAsync();\r\n                return Ok(false);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error undoing favoriting a question\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Undo the favoriting of a question by the authenticated user, checking if the question is valid and if the user has favorited it before.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The identifier of the question that needs to have its favoriting undone. It should be an integer value representing the unique ID of the question."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Undo the favoriting of a question by the authenticated user, checking if the question is valid and if the user has favorited it before.\n/// </summary>\n/// <param name=\"questionId\">The identifier of the question that needs to have its favoriting undone. It should be an integer value representing the unique ID of the question.</param>\n",
            "code_chunks": null
        },
        {
            "name": "ListContentForumCategory",
            "code_start_index": 93665,
            "method_name": "ListContentForumCategory",
            "existing_summary": "\r\n        #endregion\r\n\r\n        /// <summary>\r\n        /// Get list of content forum categories\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            return ListForumCategory(ForumTypeEnum.FORUM_CONTENT.ToString());\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a list of forum categories related to content forums.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "ListContentForumCategory - Retrieve a list of forum categories related to content forums."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a list of forum categories related to content forums.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">ListContentForumCategory - Retrieve a list of forum categories related to content forums.</param>\n",
            "code_chunks": null
        },
        {
            "name": "ListParcoursForumCategory",
            "code_start_index": 94083,
            "method_name": "ListParcoursForumCategory",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get list of parcours forum categories\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            return ListForumCategory(ForumTypeEnum.FORUM_PARCOURS.ToString());\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the list of forum categories for a specific forum type.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "ListParcoursForumCategory - Retrieve the list of forum categories for a specific forum type."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the list of forum categories for a specific forum type.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">ListParcoursForumCategory - Retrieve the list of forum categories for a specific forum type.</param>\n",
            "code_chunks": null
        },
        {
            "name": "ListForumCategory",
            "code_start_index": 94515,
            "method_name": "ListForumCategory",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get list of forum categories of specified type\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "forumType",
                    "param_name": "forumType",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            forumType = forumType.ToUpper();\r\n            var forumTypeDb = DataCache.GetForumTypes(_db).SingleOrDefault(ft => ft.Code == forumType);\r\n            if (forumTypeDb is null)\r\n                return BadRequest($\"The specified forum type '{forumType}' doesn't exists\");\r\n            else\r\n            {\r\n                var categoriesList = _forumService.GetForumCategoriesByForumType(forumType)\r\n                    .Select(cat => new ForumCategoryVM { id = cat.Id, code = cat.Code, libelle = cat.Libelle, order = cat.Order })\r\n                    .ToList();\r\n                return Ok(categoriesList);\r\n            }\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a list of forum categories based on a specified forum type. If the forum type does not exist, return a bad request message.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "string",
                        "param_name": "string",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "forumType",
                        "param_name": "forumType",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a list of forum categories based on a specified forum type. If the forum type does not exist, return a bad request message.\n/// </summary>\n/// <param name=\"string\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"forumType\">The generated description for the parameter</param>\n",
            "code_chunks": null
        },
        {
            "name": "PostAddCommentAsync",
            "code_start_index": 95659,
            "method_name": "PostAddCommentAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Create a new comment on the post identified by id (Question or Answer).\r\n        /// </summary>\r\n        /// <param name=\"postId\">Post Id (Question or Answer)</param>\r\n        /// <param name=\"commentText\">Comment content</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "postId",
                    "param_name": "postId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "commentText",
                    "param_name": "commentText",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n            var estFormateur = await this.IsTeacher(_db);\r\n\r\n            var forumPost = await _db.ForumPosts.FirstOrDefaultAsync(fp => fp.Id == postId);\r\n            if (forumPost == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            // si le forumPost poss\u00e8de un parentId, alors on il faut r\u00e9cup\u00e9rer le post parent pour modifier la date d'update\r\n            if (forumPost.ParentId != null)\r\n            {\r\n                var parentForumPost = _db.ForumPosts.Find(forumPost.ParentId.Value);\r\n\r\n                _db.ForumPosts.Attach(parentForumPost);\r\n\r\n                parentForumPost.UpdateDate = DateTime.Now;\r\n                if (estFormateur)\r\n                {\r\n                    parentForumPost.Handled = true;\r\n                    parentForumPost.HandledDate = DateTime.Now;\r\n                    parentForumPost.HandlingUser = User.Identity.GetUser().Email;\r\n                }\r\n                else\r\n                {\r\n                    parentForumPost.Handled = false;\r\n                    parentForumPost.HandledDate = null;\r\n                    parentForumPost.HandlingUser = null;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                forumPost.UpdateDate = DateTime.Now;\r\n\r\n                if (estFormateur)\r\n                {\r\n                    forumPost.Handled = true;\r\n                    forumPost.HandledDate = DateTime.Now;\r\n                    forumPost.HandlingUser = User.Identity.GetUser().Email;\r\n                }\r\n                else\r\n                {\r\n                    forumPost.Handled = false;\r\n                    forumPost.HandledDate = null;\r\n                    forumPost.HandlingUser = null;\r\n                }\r\n            }\r\n\r\n            var forumComment = new ForumComment { ForumPostId = postId, OwnerUserId = userId, Text = commentText };\r\n            _db.ForumComments.Add(forumComment);\r\n            try\r\n            {\r\n                forumPost.CommentCount++;\r\n                _db.Configuration.ValidateOnSaveEnabled = false;\r\n                await _db.SaveChangesAsync();\r\n                _db.Configuration.ValidateOnSaveEnabled = true;\r\n                await _db.Entry(forumComment)\r\n                    .Reference(p => p.User)\r\n                    .LoadAsync();\r\n\r\n                forumComment.SetCurrentUser(userId);\r\n\r\n                var fcomment = new FCommentDetail\r\n                {\r\n                    Id = forumComment.Id,\r\n                    OwnerUserId = forumComment.OwnerUserId,\r\n                    OwnerUser =\r\n                        new FUser\r\n                        {\r\n                            id = forumComment.User.Id,\r\n                            photo_profil = GetPhotoProfil(forumComment),\r\n                            header_profil = GetHeaderProfil(forumComment),\r\n                            interne = forumComment.User.Interne,\r\n                            test = forumComment.User.Test,\r\n                            pseudo = forumComment.User.Pseudo,\r\n                        },\r\n                    Score = forumComment.Score,\r\n                    CreationDate = forumComment.CreationDate,\r\n                    ForumPostId = forumComment.ForumPostId,\r\n                    Text = forumComment.Text\r\n                };\r\n\r\n                BackgroundJob.Enqueue(\r\n                    () => NotificationSenderManager.SendForumCommentNotificationAsync(userId, ecoleId, fcomment.Id));\r\n\r\n                return Ok(fcomment);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Error adding a comment\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Add a comment to a forum post, update post information if necessary, and send a notification to the user.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "postId",
                        "param_name": "postId",
                        "param_desc": "The ID of the forum post to which the comment will be added."
                    },
                    {
                        "name": "commentText",
                        "param_name": "commentText",
                        "param_desc": "The text content of the comment that will be added to the forum post."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Add a comment to a forum post, update post information if necessary, and send a notification to the user.\n/// </summary>\n/// <param name=\"postId\">The ID of the forum post to which the comment will be added.</param>\n/// <param name=\"commentText\">The text content of the comment that will be added to the forum post.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetHeaderProfil",
            "code_start_index": 99566,
            "method_name": "GetHeaderProfil",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "forumComment",
                    "param_name": "forumComment",
                    "param_type": "ForumComment",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            if (forumComment.User.FileIdHeaderProfil != null && forumComment.User.UploadedFile_FileIdHeaderProfil != null) \r\n            {\r\n                return forumComment.User.UploadedFile_FileIdHeaderProfil.FileUrl;\r\n            }\r\n            return forumComment.User.HeaderProfil; ;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the header profile image URL for a user, prioritizing an uploaded file over a default profile image.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "ForumComment",
                        "param_name": "ForumComment",
                        "param_desc": "The forum comment object containing details about the comment."
                    },
                    {
                        "name": "forumComment",
                        "param_name": "forumComment",
                        "param_desc": "The forum comment object containing details about the comment."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the header profile image URL for a user, prioritizing an uploaded file over a default profile image.\n/// </summary>\n/// <param name=\"ForumComment\">The forum comment object containing details about the comment.</param>\n/// <param name=\"forumComment\">The forum comment object containing details about the comment.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetPhotoProfil",
            "code_start_index": 99956,
            "method_name": "GetPhotoProfil",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "forumComment",
                    "param_name": "forumComment",
                    "param_type": "ForumComment",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            if (forumComment.User.FileIdPhotoProfil != null && forumComment.User.UploadedFile_FileIdPhotoProfil != null) \r\n            {\r\n                return forumComment.User.UploadedFile_FileIdPhotoProfil.FileUrl;\r\n            }\r\n            return forumComment.User.PhotoProfil;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the user's profile photo URL, prioritizing the uploaded file over the default photo.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "ForumComment",
                        "param_name": "ForumComment",
                        "param_desc": "The forum comment object that contains information about a comment in the forum."
                    },
                    {
                        "name": "forumComment",
                        "param_name": "forumComment",
                        "param_desc": "The forum comment object that contains information about a comment in the forum."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the user's profile photo URL, prioritizing the uploaded file over the default photo.\n/// </summary>\n/// <param name=\"ForumComment\">The forum comment object that contains information about a comment in the forum.</param>\n/// <param name=\"forumComment\">The forum comment object that contains information about a comment in the forum.</param>\n",
            "code_chunks": null
        },
        {
            "name": "PostDeletedOrNotExistAsync",
            "code_start_index": 100338,
            "method_name": "PostDeletedOrNotExistAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "questionId",
                    "param_name": "questionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var question = await _db.ForumPosts.Where(q => q.Id == questionId)\r\n                .FirstOrDefaultAsync();\r\n            return (question == null) || (question.DeletionDate != null);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if a forum post has been deleted or does not exist.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "questionId",
                        "param_name": "questionId",
                        "param_desc": "The unique identifier of the forum post that needs to be checked."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if a forum post has been deleted or does not exist.\n/// </summary>\n/// <param name=\"questionId\">The unique identifier of the forum post that needs to be checked.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetTagsForPathAsync",
            "code_start_index": 100759,
            "method_name": "GetTagsForPathAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "viewModel",
                    "param_name": "viewModel",
                    "param_type": "PathDetailsViewModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            string iMatiere = await _db.InscriptionMatieres.AsNoTracking()\r\n                .Include(imat => imat.Matiere)\r\n                .Where(imat => imat.Id == viewModel.InscriptionMatiereId)\r\n                .Select(x => x.Matiere.Code)\r\n                .FirstOrDefaultAsync();\r\n\r\n            string iModule = await _db.InscriptionModules.AsNoTracking()\r\n                .Include(imod => imod.Module)\r\n                .Where(imod => imod.Id == viewModel.InscriptionModuleId)\r\n                .Select(x => x.Module.Code)\r\n                .FirstOrDefaultAsync();\r\n\r\n            string theme = await _db.Themes.AsNoTracking()\r\n                .Include(x => x.Tag)\r\n                .Where(t => t.Id == viewModel.ThemeId)\r\n                .Select(x => x.Tag.Libelle)\r\n                .FirstOrDefaultAsync();\r\n\r\n            var ressourceTag = await _db.Ressources.AsNoTracking()\r\n                .Include(x => x.Tag)\r\n                .Where(x => x.Id == viewModel.RessourceId)\r\n                .Select(x => x.Tag.Libelle)\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (iMatiere == null || iModule == null || theme == null || ressourceTag == null)\r\n            {\r\n                return BadRequest();\r\n            }\r\n\r\n            var tags = new List<string> { iMatiere, iModule, theme, ressourceTag };\r\n\r\n            return Ok(tags);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve tags for a specific path and return them as a list of strings. If any of the required data is missing, return a bad request status.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "PathDetailsViewModel",
                        "param_name": "PathDetailsViewModel",
                        "param_desc": "The view model object containing details about a specific path."
                    },
                    {
                        "name": "viewModel",
                        "param_name": "viewModel",
                        "param_desc": "The view model object that provides additional data for processing."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve tags for a specific path and return them as a list of strings. If any of the required data is missing, return a bad request status.\n/// </summary>\n/// <param name=\"PathDetailsViewModel\">The view model object containing details about a specific path.</param>\n/// <param name=\"viewModel\">The view model object that provides additional data for processing.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetContentForumCategories",
            "code_start_index": 102472,
            "method_name": "GetContentForumCategories",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get list of content forum categories\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            return GetForumCategories(ForumTypeEnum.FORUM_CONTENT.ToString());\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the forum categories for content-related discussions.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "GetContentForumCategories - Retrieve the forum categories for content-related discussions."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the forum categories for content-related discussions.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">GetContentForumCategories - Retrieve the forum categories for content-related discussions.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetParcoursForumCategories",
            "code_start_index": 102896,
            "method_name": "GetParcoursForumCategories",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get list of parcours forum categories\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            return GetForumCategories(ForumTypeEnum.FORUM_PARCOURS.ToString());\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the categories for a specific forum type.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "GetParcoursForumCategories"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "Retrieve the categories for a specific forum type."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the categories for a specific forum type.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">GetParcoursForumCategories</param>\n/// <param name=\"methodPurpose\">Retrieve the categories for a specific forum type.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetForumCategories",
            "code_start_index": 103334,
            "method_name": "GetForumCategories",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get list of forum categories of specified type\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "forumType",
                    "param_name": "forumType",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            forumType = forumType.ToUpper();\r\n            var forumTypeDb = DataCache.GetForumTypes(_db).SingleOrDefault(ft => ft.Code == forumType);\r\n            if (forumTypeDb is null)\r\n                return BadRequest($\"The specified forum type '{forumType}' doesn't exists\");\r\n            else\r\n            {\r\n                var categories = _forumService.GetForumCategoriesByForumType(forumType)\r\n                    .Select(\r\n                        fc => new ForumCategoryVM\r\n                        {\r\n                            id = fc.Id,\r\n                            code = fc.Code,\r\n                            libelle = fc.Libelle,\r\n                            order = fc.Order,\r\n                            color = fc.Color\r\n                        })\r\n                    .ToList();\r\n\r\n                return Ok(categories);\r\n            }\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve forum categories based on a specified forum type, handling error if the forum type does not exist.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "forumType",
                        "param_name": "forumType",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve forum categories based on a specified forum type, handling error if the forum type does not exist.\n/// </summary>\n/// <param name=\"forumType\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"methodPurpose\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "ForumController"
}