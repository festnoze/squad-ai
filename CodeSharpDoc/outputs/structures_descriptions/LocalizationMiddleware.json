{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Studi.Api.Lms.User/Middlewares/Localization/LocalizationMiddleware.cs",
    "index_shift_code": 89,
    "struct_type": "Class",
    "namespace_name": "",
    "usings": [],
    "access_modifier": "public",
    "struct_name": "LocalizationMiddleware",
    "base_class_name": "",
    "interfaces_names": [
        "IMiddleware"
    ],
    "related_structures": [],
    "methods": [
        {
            "name": "InvokeAsync",
            "code_start_index": 159,
            "method_name": "InvokeAsync",
            "existing_summary": "    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "context",
                    "param_name": "context",
                    "param_type": "HttpContext",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "next",
                    "param_name": "next",
                    "param_type": "RequestDelegate",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        var cultureKey = context.Request.Headers[\"Accept-Language\"];\r\n        if (!string.IsNullOrEmpty(cultureKey))\r\n        {\r\n            if (DoesCultureExist(cultureKey))\r\n            {\r\n                var culture = new CultureInfo(cultureKey);\r\n                Thread.CurrentThread.CurrentCulture = culture;\r\n                Thread.CurrentThread.CurrentUICulture = culture;\r\n            }\r\n        }\r\n        await next(context);\r\n    }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Set the culture for the current thread based on the specified language header, if it exists, and then proceed to the next step asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "HttpContext: Represents the HTTP context for the current request. It provides information about the incoming HTTP request."
                    },
                    {
                        "name": "next",
                        "param_name": "next",
                        "param_desc": "RequestDelegate: Represents the next middleware in the HTTP request processing pipeline. It is used to invoke the next middleware in the pipeline."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Set the culture for the current thread based on the specified language header, if it exists, and then proceed to the next step asynchronously.\n/// </summary>\n/// <param name=\"context\">HttpContext: Represents the HTTP context for the current request. It provides information about the incoming HTTP request.</param>\n/// <param name=\"next\">RequestDelegate: Represents the next middleware in the HTTP request processing pipeline. It is used to invoke the next middleware in the pipeline.</param>\n",
            "code_chunks": null
        },
        {
            "name": "DoesCultureExist",
            "code_start_index": 690,
            "method_name": "DoesCultureExist",
            "existing_summary": "    ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "cultureName",
                    "param_name": "cultureName",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 1,
            "code": "{\r\n        return CultureInfo.GetCultures(CultureTypes.AllCultures).Any(culture => string.Equals(\r\n                        culture.Name, cultureName, StringComparison.CurrentCultureIgnoreCase));\r\n    }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": true,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if a specified culture exists.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "cultureName",
                        "param_name": "cultureName",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The name of the method (it's always a single word. Also exclude the type of the method which may come firstly)"
                    },
                    {
                        "name": "purpose",
                        "param_name": "purpose",
                        "param_desc": "The name of the purpose (it's always a single word. Also exclude the type of the purpose which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if a specified culture exists.\n/// </summary>\n/// <param name=\"cultureName\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"method\">The name of the method (it's always a single word. Also exclude the type of the method which may come firstly)</param>\n/// <param name=\"purpose\">The name of the purpose (it's always a single word. Also exclude the type of the purpose which may come firstly)</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "LocalizationMiddleware"
}