{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V4/ProctoringController.cs",
    "index_shift_code": 308,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V4",
    "usings": [
        "System",
        "System.Threading.Tasks",
        "System.Web.Http",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Models.ViewModels",
        "LMS.Services.Interfaces",
        "Serilog",
        "Swashbuckle.Swagger.Annotations"
    ],
    "access_modifier": "public",
    "struct_name": "ProctoringController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetUserInfosAsync",
            "code_start_index": 1167,
            "method_name": "GetUserInfosAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get the user informations details\r\n        /// </summary>\r\n        /// <param name=\"evaluationCode\">Stands for RessourceCode</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "evaluationCode",
                    "param_name": "evaluationCode",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            int userId = 0;\r\n            try\r\n            {\r\n                userId = User.Identity.GetUser().Id;\r\n                var result = await proctoringService.GetUserInfosAsync(userId, evaluationCode);\r\n                Log.Information( $\"Successfully retrieved user infos for userId = '{userId}' with timezone from exam with ressource Code='{evaluationCode}'.\");\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                var errorMsg = $\"Error while getting user infos for userId = '{userId}' with timezone from exam with ressource Code='{evaluationCode}'. \";\r\n                Log.Error(ex, errorMsg);\r\n                return BadRequest(errorMsg + ex.Message);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a DNS configuration based on a specified code.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "evaluationCode",
                        "param_name": "evaluationCode",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "GetUserInfosAsync",
                        "param_name": "GetUserInfosAsync",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a DNS configuration based on a specified code.\n/// </summary>\n/// <param name=\"evaluationCode\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"GetUserInfosAsync\">The generated description for the parameter</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetBlockExamSessionInfosAsync",
            "code_start_index": 2329,
            "method_name": "GetBlockExamSessionInfosAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "ressourceVersionId",
                    "param_name": "ressourceVersionId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "promotionCode",
                    "param_name": "promotionCode",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "filiereCode",
                    "param_name": "filiereCode",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var result = await proctoringService.GetBlockExamSessionInfosAsync(ressourceVersionId, promotionCode, filiereCode);\r\n                Log.Information($\"Successfully retrieved exam's infos for ressourceVersionId='{ressourceVersionId}', promotionCode='{promotionCode}', filiere='{filiereCode}'\");\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                var errorMsg = $\"Error while getting exam's infos for ressourceVersionId='{ressourceVersionId}', promotionCode='{promotionCode}', filiere='{filiereCode}'. \";\r\n                Log.Error(ex, errorMsg);\r\n                return BadRequest(errorMsg + ex.Message);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Process and handle a webhook request to validate and update information related to a media file upload.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "ressourceVersionId",
                        "param_name": "ressourceVersionId",
                        "param_desc": "The identifier of the resource version. It should be an integer value representing the version ID."
                    },
                    {
                        "name": "promotionCode",
                        "param_name": "promotionCode",
                        "param_desc": "The code associated with the promotion. It should be a string value representing the promotion code."
                    },
                    {
                        "name": "filiereCode",
                        "param_name": "filiereCode",
                        "param_desc": "The code related to the field of study. It should be a string value representing the field of study code."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Process and handle a webhook request to validate and update information related to a media file upload.\n/// </summary>\n/// <param name=\"ressourceVersionId\">The identifier of the resource version. It should be an integer value representing the version ID.</param>\n/// <param name=\"promotionCode\">The code associated with the promotion. It should be a string value representing the promotion code.</param>\n/// <param name=\"filiereCode\">The code related to the field of study. It should be a string value representing the field of study code.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetUserBlockExamSessionInfosAsync",
            "code_start_index": 3542,
            "method_name": "GetUserBlockExamSessionInfosAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "evaluationCode",
                    "param_name": "evaluationCode",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "promotionCode",
                    "param_name": "promotionCode",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var userId = User.Identity.GetUser().Id;\r\n                var ecoleUserId = User.Identity.GetSchoolUserId();\r\n                //\r\n                var result = await proctoringService.GetUserBlockExamSessionInfosAsync(userId, ecoleUserId, evaluationCode, promotionCode);\r\n                Log.Information($\"Successfully retrieved user's exam infos\");\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                var errorMsg = $\"Error while retrieving user's exam infos: {ex.Message}\";\r\n                Log.Error(ex, errorMsg);\r\n                return BadRequest(errorMsg + ex.Message);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve user information asynchronously using the current user's identity and evaluation code, logging success or error messages accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "evaluationCode",
                        "param_name": "evaluationCode",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "promotionCode",
                        "param_name": "promotionCode",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve user information asynchronously using the current user's identity and evaluation code, logging success or error messages accordingly.\n/// </summary>\n/// <param name=\"evaluationCode\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"promotionCode\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "ProctoringController"
}