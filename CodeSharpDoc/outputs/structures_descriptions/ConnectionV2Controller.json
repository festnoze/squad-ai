{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/ConnectionV2Controller.cs",
    "index_shift_code": 1073,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "System",
        "System.Collections.Generic",
        "System.ComponentModel.DataAnnotations",
        "System.Data.Entity",
        "System.Linq",
        "System.Net",
        "System.Net.Http",
        "System.Net.Mail",
        "System.Threading.Tasks",
        "System.Transactions",
        "System.Web",
        "System.Web.Http",
        "System.Web.Http.Description",
        "Jose",
        "Lms.Common.Enumerations",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Configuration",
        "LMS.Data",
        "LMS.Domains.ActivityReport",
        "LMS.ErrorHandling",
        "LMS.EvaluationQuizParser.Question",
        "LMS.Models",
        "LMS.Models.BindingModels",
        "LMS.Models.BindingModels.V2.Connection",
        "LMS.Models.MailModels.Connection",
        "LMS.ModelsDTOs.Forum",
        "LMS.ModelsDTOs.Prospect",
        "LMS.Repositories",
        "LMS.Services.Interfaces",
        "LMS.Utils",
        "LMS.Utils.Cache",
        "Newtonsoft.Json",
        "Serilog",
        "Studi.Jwt",
        "Studi.Jwt.Exceptions",
        "Studi.Jwt.Payloads"
    ],
    "access_modifier": "public",
    "struct_name": "ConnectionV2Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "SetupNewPasswordAsync",
            "code_start_index": 2027,
            "method_name": "SetupNewPasswordAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// First time connection password setup\r\n        /// </summary>\r\n        /// <param name=\"passwordSetupBindingModel\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            PasswordSetupToken passwordSetupToken = null;\r\n\r\n            try\r\n            {\r\n                passwordSetupToken = JWT.Decode<PasswordSetupToken>(passwordSetupBindingModel.Token,\r\n                                                                    _config.GetPasswordSetupKey(),\r\n                                                                    JwsAlgorithm.HS256);\r\n            }\r\n            catch (IntegrityException ex)\r\n            {\r\n                Log.Warning(ex, \"Integrity error while decoding the Password setup token: PSTK: {0}, PST: {1}\", _config.GetPasswordSetupKey(), passwordSetupToken);\r\n                return BadRequest(\"Bad Token\");\r\n            }\r\n\r\n            var user = await _db.Users\r\n                                .Include(u => u.EcoleUsers)\r\n                                .Where(u => u.Id == passwordSetupToken.UserId)\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (user == null)\r\n            {\r\n                return BadRequest(\"Bad user token\");\r\n            }\r\n\r\n            var saltBytes = _tokenService.GenerateSalt();\r\n            var hashedPassword = _tokenService.HashPassword(passwordSetupBindingModel.Password, saltBytes);\r\n            user.Password = hashedPassword;\r\n            user.Salt = Convert.ToBase64String(saltBytes);\r\n            user.DateValideEmail = DateTime.UtcNow;\r\n\r\n            int actifStatusId = DataCache.GetUserStatuses(_db)\r\n                .Where(us => us.Code == nameof(UserStatusCodeEnum.ACTIF))\r\n                .Select(us => us.Id)\r\n                .FirstOrDefault();\r\n\r\n            if (actifStatusId == 0)\r\n            {\r\n                Log.Fatal($\"Cannot find the user status with code = '{nameof(UserStatusCodeEnum.ACTIF)}'\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            var ecoleUser = user.EcoleUsers.FirstOrDefault(eu => eu.EcoleId == passwordSetupToken.SchoolId);\r\n\r\n            if (ecoleUser != null)\r\n            {\r\n                ecoleUser.UserStatutId = actifStatusId;\r\n            }\r\n            else\r\n            {\r\n                Log.Fatal(\"User not encrolled in the specified school\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n\r\n                // TODO: send confirmation email ?\r\n                return Ok();\r\n            }\r\n            catch (Exception)\r\n            {\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the user's password and account status after setting up a new password using a token.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method ('SetupNewPasswordAsync')"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method ('Update the user's password and account status after setting up a new password using a token.')"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the user's password and account status after setting up a new password using a token.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method ('SetupNewPasswordAsync')</param>\n/// <param name=\"methodPurpose\">The purpose of the method ('Update the user's password and account status after setting up a new password using a token.')</param>\n"
        },
        {
            "name": "SendResetPasswordEmail",
            "code_start_index": 4671,
            "method_name": "SendResetPasswordEmail",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            var ecoles = DataCache.GetSchools(_db);\r\n\r\n            var currentSchoolCode = _config.GetSchoolCode();\r\n\r\n            if (string.IsNullOrEmpty(currentSchoolCode))\r\n            {\r\n                return BadRequest(\"Current school code was not found\");\r\n            }\r\n\r\n            var currentSchool = ecoles.FirstOrDefault(e => e.Code == currentSchoolCode);\r\n\r\n            if (currentSchool == null)\r\n            {\r\n                return BadRequest(\"School does not exist\");\r\n            }\r\n\r\n            var user = await _db.Users\r\n                                .AsNoTracking()\r\n                                .Where(u => u.Email == email && u.EcoleUsers.Any(eu => eu.EcoleId == currentSchool.Id))\r\n                                .Select(u => new\r\n                                {\r\n                                    u.Id,\r\n                                    u.Email,\r\n                                    u.Pseudo,\r\n                                    u.Nom,\r\n                                    u.Prenom\r\n                                })\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (user == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"This user does not exist\");\r\n            }\r\n\r\n            try\r\n            {\r\n                var dnsConfig = _dnsConfig.GetDnsConfig();\r\n\r\n                var from = new MailAddress(dnsConfig.EmailNoReply, dnsConfig.Title);\r\n                var to = new MailAddress(user.Email, user.Pseudo);\r\n\r\n                var jwtTokenValidityForPasswordResetLink = _config.GetJwtTokenValidityForPasswordResetLink();\r\n                var token = _tokenService.CreateAndEncodeAuthToken(user.Id, currentSchool.Id, Request.Headers.Host, jwtTokenValidityForPasswordResetLink);\r\n\r\n                var resetPasswordViewBag = new ResetPasswordModel\r\n                {\r\n                    BaseUrl = dnsConfig.Dns,\r\n                    Token = token,\r\n                    Email = user.Email,\r\n                    FirstName = user.Prenom,\r\n                    LastName = user.Nom\r\n                };\r\n\r\n                MailAddress fromMail = from;\r\n                string schoolCode = currentSchool.Code;\r\n                if (currentSchool.Code == \"STUDI\" || currentSchool.Code == \"COMNICIA\" || currentSchool.Code == \"COMPTALIA\" || currentSchool.Code == \"ECOLEMS\" || currentSchool.Code == \"PREPALIA\")\r\n                {\r\n                    schoolCode = \"STUDI\";\r\n                    var ecole = ecoles.FirstOrDefault(e => e.Code == schoolCode);\r\n                    fromMail = new MailAddress(ecole.DnsConfig.EmailNoReply, ecole.Libelle);\r\n                }\r\n\r\n                await SMTPMail.SendEmaiFromTemplateAsync(\r\n                   \"R\u00e9initialisation du mot de passe\",\r\n                   fromMail,\r\n                   to,\r\n                   \"Connection\",\r\n                   \"ConnectionResetPassword\",\r\n                   \"resetPassword.cshtml\",\r\n                   resetPasswordViewBag,\r\n                   schoolCode, _config.GetLmsEnv(), _config.GetSmtpServerAddress());\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Erreur envoi resetPassword mail\");\r\n                return InternalServerError();\r\n            }\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Send a reset password email to a user associated with a specific school, including a token for password reset link, based on user's email address and school code.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "email",
                        "param_name": "email",
                        "param_desc": "The email address of the user who needs to reset the password."
                    },
                    {
                        "name": "schoolCode",
                        "param_name": "schoolCode",
                        "param_desc": "The unique code identifying the school to which the user is associated."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Send a reset password email to a user associated with a specific school, including a token for password reset link, based on user's email address and school code.\n/// </summary>\n/// <param name=\"email\">The email address of the user who needs to reset the password.</param>\n/// <param name=\"schoolCode\">The unique code identifying the school to which the user is associated.</param>\n"
        },
        {
            "name": "VerifyPasswordToken",
            "code_start_index": 8074,
            "method_name": "VerifyPasswordToken",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var host = Request.Headers.Host;\r\n                _tokenService.ValidateTokenAndReturnPayload(encodedToken, host);\r\n                return Ok();\r\n            }\r\n            catch (TokenExpiredException)\r\n            {\r\n                return Unauthorized();\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (RecordNotFoundException)\r\n            {\r\n                return NotFound();\r\n            }\r\n            catch (Exception)\r\n            {\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Validate a password token and return the payload, handling different exceptions accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "MethodName",
                        "param_name": "MethodName",
                        "param_desc": "VerifyPasswordToken"
                    },
                    {
                        "name": "MethodPurpose",
                        "param_name": "MethodPurpose",
                        "param_desc": "Validate a password token and return the payload, handling different exceptions accordingly."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Validate a password token and return the payload, handling different exceptions accordingly.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"MethodName\">VerifyPasswordToken</param>\n/// <param name=\"MethodPurpose\">Validate a password token and return the payload, handling different exceptions accordingly.</param>\n"
        },
        {
            "name": "ResetPassword",
            "code_start_index": 8903,
            "method_name": "ResetPassword",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var host = Request.Headers.Host;\r\n                var payload = _tokenService.ValidateTokenAndReturnPayload(resetPasswordBindingModel.EncodedToken, host);\r\n                var user = await _userRepository.GetFirstWhereAsync(u => u.Id == payload.UserId);\r\n                var saltBytes = _tokenService.GenerateSalt();\r\n                user.Password = _tokenService.HashPassword(resetPasswordBindingModel.Password, saltBytes);\r\n                user.Salt = Convert.ToBase64String(saltBytes);\r\n                user.DateValideEmail = DateTime.UtcNow;\r\n                await _db.SaveChangesAsync();\r\n\r\n                return Ok();\r\n            }\r\n            catch (TokenExpiredException)\r\n            {\r\n                return Unauthorized();\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (RecordNotFoundException)\r\n            {\r\n                return NotFound();\r\n            }\r\n            catch (Exception)\r\n            {\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Reset the password for a user by validating a token, hashing the new password, updating the user's password and salt, and saving the changes in the database. If the token is expired, return unauthorized; if the token is invalid, return bad request; if the user is not found, return not found; otherwise, return internal server error.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The list of parameters is always 'no parameters'."
                    },
                    {
                        "name": "method_name",
                        "param_name": "method_name",
                        "param_desc": "The name of the existing method which is 'ResetPassword'."
                    },
                    {
                        "name": "method_purpose",
                        "param_name": "method_purpose",
                        "param_desc": "The purpose of the method 'ResetPassword' is to reset the password for a user by validating a token, hashing the new password, updating the user's password and salt, and saving the changes in the database. If the token is expired, it returns unauthorized; if the token is invalid, it returns bad request; if the user is not found, it returns not found; otherwise, it returns internal server error."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Reset the password for a user by validating a token, hashing the new password, updating the user's password and salt, and saving the changes in the database. If the token is expired, return unauthorized; if the token is invalid, return bad request; if the user is not found, return not found; otherwise, return internal server error.\n/// </summary>\n/// <param name=\"no\">The list of parameters is always 'no parameters'.</param>\n/// <param name=\"method_name\">The name of the existing method which is 'ResetPassword'.</param>\n/// <param name=\"method_purpose\">The purpose of the method 'ResetPassword' is to reset the password for a user by validating a token, hashing the new password, updating the user's password and salt, and saving the changes in the database. If the token is expired, it returns unauthorized; if the token is invalid, it returns bad request; if the user is not found, it returns not found; otherwise, it returns internal server error.</param>\n"
        },
        {
            "name": "GetTokenForAsync",
            "code_start_index": 10345,
            "method_name": "GetTokenForAsync",
            "existing_summary": "\r\n        // TODO: fix this method wich is a security issue\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            if (!currentUser.Interne)\r\n            {\r\n                return StatusCode(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            string schoolName = HttpContext.Current.Request.OriginOrRequestHost();\r\n\r\n            var user = await _db.Users.AsNoTracking()\r\n                .Where(u => u.Email == email)\r\n                .Select(u => new\r\n                {\r\n                    u.Id,\r\n                    u.Email\r\n                })\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (user == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"Cet utilisateur n'existe pas.\");\r\n            }\r\n\r\n            var activeStatusCodeId = DataCache.GetUserStatuses(_db)\r\n                .First(us => us.Code == nameof(UserStatusCodeEnum.ACTIF))\r\n                .Id;\r\n\r\n            var hasSubscription = await _db.EcoleUsers.AsNoTracking()\r\n                .AnyAsync(eu => currentUser.SchoolIdsList.Contains(eu.EcoleId) && eu.UserId == user.Id && eu.UserStatutId == activeStatusCodeId);\r\n\r\n            if (!hasSubscription)\r\n            {\r\n                // TODO: fix security issue\r\n                return Content(HttpStatusCode.NotFound, \"Cet utilisateur n'est pas inscrit dans cette \u00e9cole ou il est bloqu\u00e9\");\r\n            }\r\n\r\n            Log.Information(\"{0} Loggin in as {1}\", currentUser.Email, user.Email);\r\n\r\n            return Ok(new LoginResponseSuccesViewModel\r\n            {\r\n                Token = _tokenService.CreateAndEncodeAuthToken(user.Id, ecoleId, schoolName, new TimeSpan(3, 0, 0)),\r\n                UserId = user.Id,\r\n                IsAlreadyConnected = false\r\n            });\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a token for a user to authenticate and access the system, checking user status and subscription before generating the token.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "GetTokenForAsync",
                        "param_name": "GetTokenForAsync",
                        "param_desc": "Retrieve a token for a user to authenticate and access the system, checking user status and subscription before generating the token."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a token for a user to authenticate and access the system, checking user status and subscription before generating the token.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"GetTokenForAsync\">Retrieve a token for a user to authenticate and access the system, checking user status and subscription before generating the token.</param>\n"
        },
        {
            "name": "GetOnlineUsersAsync",
            "code_start_index": 12313,
            "method_name": "GetOnlineUsersAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get online users list connected\r\n        /// </summary>\r\n        /// <returns>user list</returns>\r\n        /// <remarks>La liste est mis \u00e0 jour par le Hub Connection de SignalR - NE PAS SUPPRIMER CE HUB CONNECTION tant qu'une solution de contournement n'a pas \u00e9t\u00e9 trouv\u00e9 - nouvel algo qui determinerait une liste d'utilisateur connect\u00e9e</remarks>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var onlineUsersIds = ConnectionsListHolder.OnlineUsers.Keys;\r\n\r\n            var users = await RepositoryV3.GetUsers(_db)\r\n                .Where(user => onlineUsersIds.Contains(user.Id))\r\n                .Select(RepositoryV3.GetUserMapExpression(ecoleId))\r\n                .ToListAsync();\r\n\r\n            // TODO: handle this: ConnectionHub.ClientsDictionnary[1].IsMobile\r\n            return Ok(users);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve online users asynchronously based on their IDs and the school ID associated with the current user's identity.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "IDs",
                        "param_name": "IDs",
                        "param_desc": "The IDs of the online users to retrieve."
                    },
                    {
                        "name": "schoolID",
                        "param_name": "schoolID",
                        "param_desc": "The school ID associated with the current user's identity."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve online users asynchronously based on their IDs and the school ID associated with the current user's identity.\n/// </summary>\n/// <param name=\"IDs\">The IDs of the online users to retrieve.</param>\n/// <param name=\"schoolID\">The school ID associated with the current user's identity.</param>\n"
        },
        {
            "name": "GetOnlineConnectionIdsAsync",
            "code_start_index": 12919,
            "method_name": "GetOnlineConnectionIdsAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get report connexion ids from online user liste connected\r\n        /// </summary>\r\n        /// <remarks>La liste est mis \u00e0 jour par le Hub Connection de SignalR - NE PAS SUPPRIMER CE HUB CONNECTION tant qu'une solution de contournement n'a pas \u00e9t\u00e9 trouv\u00e9 - nouvel algo qui determinerait une liste d'utilisateur connect\u00e9e</remarks>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            var connectionReportsIds = ConnectionsListHolder.OnlineUsers\r\n                    .SelectMany(x => x.Value)\r\n                    .Select(x => x.Value.ConnectionReportId)\r\n                    .ToList();\r\n\r\n            await Task.CompletedTask;\r\n            return Ok(connectionReportsIds);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the connection report IDs of online users asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method ('GetOnlineConnectionIdsAsync')"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method ('Retrieve the connection report IDs of online users asynchronously.')"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the connection report IDs of online users asynchronously.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method ('GetOnlineConnectionIdsAsync')</param>\n/// <param name=\"methodPurpose\">The purpose of the method ('Retrieve the connection report IDs of online users asynchronously.')</param>\n"
        },
        {
            "name": "CheckAccountTokenAsync",
            "code_start_index": 13367,
            "method_name": "CheckAccountTokenAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        ///  API Check token before activating account\r\n        /// </summary>\r\n        /// <param name=\"encodedToken\">string</param>\r\n        /// <returns>Return bool</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            var host = HttpContext.Current.Request.OriginOrRequestHost();\r\n            var schoolName = _config.GetSchoolCode();\r\n\r\n            AuthenticationPayload payload;\r\n            try\r\n            {\r\n                payload = _tokenService.ValidateTokenAndReturnPayload(encodedToken, host);\r\n            }\r\n            catch (TokenExpiredException)\r\n            {\r\n                return Unauthorized();\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error($\"{ex}\");\r\n                return InternalServerError();\r\n            }\r\n            // On recherche l'Ecoles_users pour mettre le statut en ACTIF\r\n            var ecoleUser = await _db.EcoleUsers\r\n                .Include(eu => eu.UserStatut)\r\n                .Include(eu => eu.UserType)\r\n                .FirstOrDefaultAsync(eu => eu.UserId == payload.UserId && eu.Ecole.Code == schoolName);\r\n\r\n            // On retourne false si Ecoles_users est null\r\n            if (ecoleUser == null)\r\n            {\r\n                return BadRequest(\"User not present in the school.\");\r\n            }\r\n\r\n            if (ecoleUser.UserStatut.Code == nameof(UserStatusCodeEnum.ACTIF))\r\n            {\r\n                return BadRequest(\"Account already active.\");\r\n            }\r\n\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if the account token is valid and active for a specified user in a school.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "accountToken",
                        "param_name": "accountToken",
                        "param_desc": "The token associated with the user's account in the school."
                    },
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The unique identifier of the user in the school."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if the account token is valid and active for a specified user in a school.\n/// </summary>\n/// <param name=\"accountToken\">The token associated with the user's account in the school.</param>\n/// <param name=\"userId\">The unique identifier of the user in the school.</param>\n"
        },
        {
            "name": "HandleNewProspectAsync",
            "code_start_index": 14954,
            "method_name": "HandleNewProspectAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Creates a new prospect.\r\n        /// </summary>\r\n        /// <param name=\"prospectInfo\">Object UserLogin</param>\r\n        /// <returns>Retourne Http Status 200</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var hostName = HttpContext.Current.Request.OriginOrRequestHost();\r\n\r\n                var newPropect = new NewProspectDto()\r\n                {\r\n                    LastName = prospectInfo.LastName,\r\n                    FirstName = prospectInfo.FirstName,\r\n                    Email = prospectInfo.Email,\r\n                    SectorExternalCode = prospectInfo.SectorExternalCode,\r\n                    SubscribeToApprenticeshipCourse = prospectInfo.SubscribeToApprenticeshipCourse,\r\n                    HostName = hostName\r\n                };\r\n\r\n                var createdUserId = await _connectionService.CreateNewProspectAsync(newPropect);\r\n\r\n                return Ok(createdUserId);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                return Content(HttpStatusCode.InternalServerError, ex.Message);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a new prospect in the database with the provided information and return the created user ID, handling any errors that may occur.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The list of parameters is 'no parameters'."
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "We have an existing method named 'HandleNewProspectAsync'."
                    },
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "For context, the method purpose is 'Create a new prospect in the database with the provided information and return the created user ID, handling any errors that may occur.'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a new prospect in the database with the provided information and return the created user ID, handling any errors that may occur.\n/// </summary>\n/// <param name=\"no\">The list of parameters is 'no parameters'.</param>\n/// <param name=\"existing\">We have an existing method named 'HandleNewProspectAsync'.</param>\n/// <param name=\"context\">For context, the method purpose is 'Create a new prospect in the database with the provided information and return the created user ID, handling any errors that may occur.'.</param>\n"
        },
        {
            "name": "HandleNewProspectApprenticeshipLongtermAsync",
            "code_start_index": 16085,
            "method_name": "HandleNewProspectApprenticeshipLongtermAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Creates a new prospect .\r\n        /// </summary>\r\n        /// <param name=\"prospectInfo\">Object UserLogin</param>\r\n        /// <returns>Retourne Http Status 200</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var hostName = HttpContext.Current.Request.OriginOrRequestHost();\r\n\r\n                var newPropectLongtermApprenticeship = new NewProspectLongtermApprenticeshipDto()\r\n                {\r\n                    LastName = prospectInfo.LastName,\r\n                    FirstName = prospectInfo.FirstName,\r\n                    Email = prospectInfo.Email,\r\n                    HostName = hostName\r\n                };\r\n\r\n                var createdUserId = await _connectionService.HandleNewProspectLongtermApprenticeshipAsync(newPropectLongtermApprenticeship);\r\n\r\n                return Ok(createdUserId);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                return Content(HttpStatusCode.InternalServerError, ex.Message);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a new prospect long-term apprenticeship and handle it asynchronously, returning the created user ID or an internal server error message.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The list of parameters is 'no parameters'."
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "We have an existing method named 'HandleNewProspectApprenticeshipLongtermAsync'."
                    },
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "For context, the method purpose is 'Create a new prospect long-term apprenticeship and handle it asynchronously, returning the created user ID or an internal server error message.'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a new prospect long-term apprenticeship and handle it asynchronously, returning the created user ID or an internal server error message.\n/// </summary>\n/// <param name=\"no\">The list of parameters is 'no parameters'.</param>\n/// <param name=\"existing\">We have an existing method named 'HandleNewProspectApprenticeshipLongtermAsync'.</param>\n/// <param name=\"context\">For context, the method purpose is 'Create a new prospect long-term apprenticeship and handle it asynchronously, returning the created user ID or an internal server error message.'.</param>\n"
        },
        {
            "name": "ActivateProspectAccountAsync",
            "code_start_index": 17110,
            "method_name": "ActivateProspectAccountAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Activates a prospect account.\r\n        /// This action activates the user account, sets its password and does the discovery courses registration.\r\n        /// </summary>\r\n        /// <param name=\"prospectAccountInfo\">The prospect account information.</param>\r\n        /// <returns>An HTTP result.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            // Sanity check.\r\n            if (prospectAccountInfo == null)\r\n            {\r\n                return BadRequest();\r\n            }\r\n\r\n            // Validate the token.\r\n            var host = HttpContext.Current.Request.OriginOrRequestHost();\r\n            AuthenticationPayload payload;\r\n\r\n            try\r\n            {\r\n                payload = _tokenService.ValidateTokenAndReturnPayload(prospectAccountInfo.Token, host);\r\n            }\r\n            catch (TokenExpiredException)\r\n            {\r\n                return Unauthorized();\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (RecordNotFoundException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error($\"{ex}\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            try\r\n            {\r\n                // Activate the user account and do the discovery registration.\r\n                var activationResult = await _connectionService.ActivateProspectAccountAsync(\r\n                    userId: payload.UserId,\r\n                    schoolId: payload.SchoolId,\r\n                    password: prospectAccountInfo.Password,\r\n                    sectorExternalCode: prospectAccountInfo.SectorExternalCode,\r\n                    subscribeToApprenticeshipCourse: prospectAccountInfo.SubscribeToApprenticeshipCourse);\r\n\r\n                switch (activationResult)\r\n                {\r\n                    case ProspectActivationResultCode.AlreadyActiveAccount:\r\n                        return BadRequest(\"Le compte de l'utilisateur est d\u00e9j\u00e0 actif.\");\r\n\r\n                    case ProspectActivationResultCode.AccountNotFound:\r\n                        return BadRequest(\"L'utilisateur n'existe pas au sein de l'\u00e9tablissement.\");\r\n\r\n                    case ProspectActivationResultCode.DiscoveryCourseNotFound:\r\n                        string discoveryCourseNotFoundErrorMsg = \"Aucun parcours d\u00e9couverte n'a \u00e9t\u00e9 trouv\u00e9.\";\r\n                        Log.Error($\"{nameof(ActivateProspectAccountAsync)}: {discoveryCourseNotFoundErrorMsg}\");\r\n                        return BadRequest(discoveryCourseNotFoundErrorMsg);\r\n\r\n                    case ProspectActivationResultCode.ApprenticeshipDiscoveryCourseRequiredAndNotFound:\r\n                        string apprenticeshipDiscoveryCourseRequiredAndNotFoundErrorMsg = \"Aucun parcours d\u00e9couverte d\u00e9di\u00e9 \u00e0 l'alternance n'a \u00e9t\u00e9 trouv\u00e9.\";\r\n                        Log.Error($\"{nameof(ActivateProspectAccountAsync)}: {apprenticeshipDiscoveryCourseRequiredAndNotFoundErrorMsg}\");\r\n                        return BadRequest(apprenticeshipDiscoveryCourseRequiredAndNotFoundErrorMsg);\r\n\r\n                    case ProspectActivationResultCode.InternalServerError:\r\n                        return Content(HttpStatusCode.InternalServerError, \"Une erreur technique s'est produite.\");\r\n\r\n                    case ProspectActivationResultCode.InvalidPassword:\r\n                        return BadRequest(\"Le mot de passe fourni ne respecte pas les r\u00e8gles de validation.\");\r\n\r\n                    case ProspectActivationResultCode.Ok:\r\n                        return Ok();\r\n\r\n                    default:\r\n\r\n                        // Any other result code is not supported.\r\n                        throw new NotSupportedException($\"The result code '{activationResult}' is not supported.\");\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, ex.Message);\r\n                return Content(HttpStatusCode.InternalServerError, \"Une erreur technique s'est produite.\");\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Activate a prospect account asynchronously, validate the token, and activate the user account with specific parameters, handling various activation result codes and returning appropriate responses.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "token",
                        "param_name": "token",
                        "param_desc": "The token used to validate the prospect account and activate the user account."
                    },
                    {
                        "name": "activationCode",
                        "param_name": "activationCode",
                        "param_desc": "The activation code for the prospect account."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Activate a prospect account asynchronously, validate the token, and activate the user account with specific parameters, handling various activation result codes and returning appropriate responses.\n/// </summary>\n/// <param name=\"token\">The token used to validate the prospect account and activate the user account.</param>\n/// <param name=\"activationCode\">The activation code for the prospect account.</param>\n"
        },
        {
            "name": "CreateProspectsAccountsEnrolledOnApprenticeshipDiscoveryFromJsonFileAsync",
            "code_start_index": 21061,
            "method_name": "CreateProspectsAccountsEnrolledOnApprenticeshipDiscoveryFromJsonFileAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            if (!Request.Content.IsMimeMultipartContent())\r\n            {\r\n                throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType);\r\n            }\r\n\r\n            var provider = new MultipartMemoryStreamProvider();\r\n            await Request.Content.ReadAsMultipartAsync(provider);\r\n\r\n            if (provider.Contents.Count != 1)\r\n            {\r\n                return BadRequest(\"The request need a single Json file to be provided\");\r\n            }\r\n\r\n            var file = provider.Contents.Single();\r\n            //var filename = provider.Contents.Single().Headers.ContentDisposition.FileName.Trim('\\\"');\r\n\r\n            if (!IsValidFileSize(file.Headers.ContentLength ?? 0))\r\n            {\r\n                return BadRequest(\"Invalid file size\");\r\n            }\r\n\r\n            var buffer = await file.ReadAsByteArrayAsync();\r\n            var fileContents = System.Text.Encoding.UTF8.GetString(buffer);\r\n\r\n            var usersToAddAndEnroll = JsonConvert.DeserializeObject<SalesForceProspectsEnrollmentsBindingModel>(fileContents);\r\n            var newProspectsDtos = usersToAddAndEnroll.Select(userToAddAndEnroll => new NewProspectDto\r\n            {\r\n                LastName = userToAddAndEnroll.LastName,\r\n                FirstName = userToAddAndEnroll.FirstName,\r\n                Email = userToAddAndEnroll.Email,\r\n                SectorExternalCode = 1, //TODO: transform salesforce code into SectorExternalCode\r\n                SubscribeToApprenticeshipCourse = true,\r\n                HostName = HttpContext.Current.Request.OriginOrRequestHost()\r\n            });\r\n\r\n            await _connectionService.BatchHandleProspectsCreationAsync(newProspectsDtos);\r\n\r\n            return Ok(\"All prospects added successfully from Json file\");\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create prospects accounts enrolled on apprenticeship discovery from a JSON file asynchronously, by reading the file content, validating it, deserializing it, and then creating new prospect accounts with specified information.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "method_name",
                        "param_name": "method_name",
                        "param_desc": "The name of the existing method for which parameters are being documented. In this case, the method name is 'CreateProspectsAccountsEnrolledOnApprenticeshipDiscoveryFromJsonFileAsync'."
                    },
                    {
                        "name": "method_purpose",
                        "param_name": "method_purpose",
                        "param_desc": "The purpose or description of the existing method. In this case, the method purpose is 'Create prospects accounts enrolled on apprenticeship discovery from a JSON file asynchronously, by reading the file content, validating it, deserializing it, and then creating new prospect accounts with specified information.'."
                    },
                    {
                        "name": "parameters",
                        "param_name": "parameters",
                        "param_desc": "The list of parameters for the method. In this case, there are no parameters for the method, indicated by the value 'no parameters'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create prospects accounts enrolled on apprenticeship discovery from a JSON file asynchronously, by reading the file content, validating it, deserializing it, and then creating new prospect accounts with specified information.\n/// </summary>\n/// <param name=\"method_name\">The name of the existing method for which parameters are being documented. In this case, the method name is 'CreateProspectsAccountsEnrolledOnApprenticeshipDiscoveryFromJsonFileAsync'.</param>\n/// <param name=\"method_purpose\">The purpose or description of the existing method. In this case, the method purpose is 'Create prospects accounts enrolled on apprenticeship discovery from a JSON file asynchronously, by reading the file content, validating it, deserializing it, and then creating new prospect accounts with specified information.'.</param>\n/// <param name=\"parameters\">The list of parameters for the method. In this case, there are no parameters for the method, indicated by the value 'no parameters'.</param>\n"
        },
        {
            "name": "IsValidFileSize",
            "code_start_index": 22938,
            "method_name": "IsValidFileSize",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            return fileSize > 0 && fileSize <= WebsiteConfiguration.MaxFilesize;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if the file size is within the valid range specified by the website configuration.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "method_name",
                        "param_name": "method_name",
                        "param_desc": "The name of the method being documented (IsValidFileSize)"
                    },
                    {
                        "name": "method_purpose",
                        "param_name": "method_purpose",
                        "param_desc": "The purpose of the method being documented (Check if the file size is within the valid range specified by the website configuration.)"
                    },
                    {
                        "name": "params_list",
                        "param_name": "params_list",
                        "param_desc": "The list of parameters for the method being documented ('no parameters')"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if the file size is within the valid range specified by the website configuration.\n/// </summary>\n/// <param name=\"method_name\">The name of the method being documented (IsValidFileSize)</param>\n/// <param name=\"method_purpose\">The purpose of the method being documented (Check if the file size is within the valid range specified by the website configuration.)</param>\n/// <param name=\"params_list\">The list of parameters for the method being documented ('no parameters')</param>\n"
        },
        {
            "name": "TrialPeriodHalfWayReminderAsync",
            "code_start_index": 23157,
            "method_name": "TrialPeriodHalfWayReminderAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Asynchronously sends an email reminder when half the trial period is done.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            await _connectionService.SendTrialPeriodHalfWayReminderAsync();\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Send a reminder for the halfway point of the trial period asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method being described. In this case, it is 'TrialPeriodHalfWayReminderAsync'."
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method being described. In this case, it is 'Send a reminder for the halfway point of the trial period asynchronously'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Send a reminder for the halfway point of the trial period asynchronously.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method being described. In this case, it is 'TrialPeriodHalfWayReminderAsync'.</param>\n/// <param name=\"methodPurpose\">The purpose of the method being described. In this case, it is 'Send a reminder for the halfway point of the trial period asynchronously'.</param>\n"
        },
        {
            "name": "TrialPeriodEndedReminderAsync",
            "code_start_index": 23424,
            "method_name": "TrialPeriodEndedReminderAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Asynchronously sends an email reminder after the trial period end.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            await _connectionService.SendTrialPeriodEndedReminderAsync();\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Send a reminder about the end of the trial period asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method being called (TrialPeriodEndedReminderAsync)"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method (Send a reminder about the end of the trial period asynchronously.)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Send a reminder about the end of the trial period asynchronously.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method being called (TrialPeriodEndedReminderAsync)</param>\n/// <param name=\"methodPurpose\">The purpose of the method (Send a reminder about the end of the trial period asynchronously.)</param>\n"
        },
        {
            "name": "RenewAccountTokenAsync",
            "code_start_index": 23679,
            "method_name": "RenewAccountTokenAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Recr\u00e9er un token si le lien d'activation est expir\u00e9 et que le user a cliqu\u00e9 sur reg\u00e9n\u00e9rer un lien d'activation.\r\n        /// </summary>\r\n        /// <param name=\"prospectInfo\">ProspectAccountActivationV2ViewModel</param>\r\n        /// <returns>bool</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            // Sanity check.\r\n            if (prospectInfo == null)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            AuthenticationPayload payload;\r\n            var host = HttpContext.Current.Request.OriginOrRequestHost();\r\n            try\r\n            {\r\n                payload = _tokenService.ValidateTokenAndReturnPayload(prospectInfo.Token, host, checkForExpiration: false, doLogErrors: true);\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (RecordNotFoundException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error($\"{ex}\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            var resultCode = await _connectionService.RenewAccountExpiredTokenAsync(\r\n                prospectInfo.SectorExternalCode, host, payload.SchoolId, payload.UserId, prospectInfo.SubscribeToApprenticeshipCourse);\r\n\r\n            switch (resultCode)\r\n            {\r\n                case ProspectRenewTokenResultCode.AccountNotFound:\r\n                    return BadRequest(\"User not present in the school.\");\r\n\r\n                case ProspectRenewTokenResultCode.AlreadyActiveAccount:\r\n                    return BadRequest(\"Account already active.\");\r\n\r\n                case ProspectRenewTokenResultCode.InternalServerError:\r\n                    return InternalServerError();\r\n\r\n                case ProspectRenewTokenResultCode.Ok:\r\n                    return Ok();\r\n\r\n                default:\r\n                    // Any other result code is not supported.\r\n                    throw new NotSupportedException($\"The result code '{resultCode}' is not supported.\");\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Renew an account token based on the prospect information provided, validating the token and handling various result codes accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "prospect_info",
                        "param_name": "prospect_info",
                        "param_desc": "The prospect information provided to renew the account token."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Renew an account token based on the prospect information provided, validating the token and handling various result codes accordingly.\n/// </summary>\n/// <param name=\"prospect_info\">The prospect information provided to renew the account token.</param>\n"
        }
    ],
    "properties": [],
    "name": "ConnectionV2Controller"
}