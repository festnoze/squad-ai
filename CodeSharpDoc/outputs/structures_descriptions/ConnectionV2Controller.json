{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/ConnectionV2Controller.cs",
    "index_shift_code": 1073,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "System",
        "System.Collections.Generic",
        "System.ComponentModel.DataAnnotations",
        "System.Data.Entity",
        "System.Linq",
        "System.Net",
        "System.Net.Http",
        "System.Net.Mail",
        "System.Threading.Tasks",
        "System.Transactions",
        "System.Web",
        "System.Web.Http",
        "System.Web.Http.Description",
        "Jose",
        "Lms.Common.Enumerations",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Configuration",
        "LMS.Data",
        "LMS.Domains.ActivityReport",
        "LMS.ErrorHandling",
        "LMS.EvaluationQuizParser.Question",
        "LMS.Models",
        "LMS.Models.BindingModels",
        "LMS.Models.BindingModels.V2.Connection",
        "LMS.Models.MailModels.Connection",
        "LMS.ModelsDTOs.Forum",
        "LMS.ModelsDTOs.Prospect",
        "LMS.Repositories",
        "LMS.Services.Interfaces",
        "LMS.Utils",
        "LMS.Utils.Cache",
        "Newtonsoft.Json",
        "Serilog",
        "Studi.Jwt",
        "Studi.Jwt.Exceptions",
        "Studi.Jwt.Payloads"
    ],
    "access_modifier": "public",
    "struct_name": "ConnectionV2Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "SetupNewPasswordAsync",
            "code_start_index": 2295,
            "method_name": "SetupNewPasswordAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// First time connection password setup\r\n        /// </summary>\r\n        /// <param name=\"passwordSetupBindingModel\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "passwordSetupBindingModel",
                    "param_name": "passwordSetupBindingModel",
                    "param_type": "PasswordSetupBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            PasswordSetupToken passwordSetupToken = null;\r\n\r\n            try\r\n            {\r\n                passwordSetupToken = JWT.Decode<PasswordSetupToken>(passwordSetupBindingModel.Token,\r\n                                                                    _config.GetPasswordSetupKey(),\r\n                                                                    JwsAlgorithm.HS256);\r\n            }\r\n            catch (IntegrityException ex)\r\n            {\r\n                Log.Warning(ex, \"Integrity error while decoding the Password setup token: PSTK: {0}, PST: {1}\", _config.GetPasswordSetupKey(), passwordSetupToken);\r\n                return BadRequest(\"Bad Token\");\r\n            }\r\n\r\n            var user = await _db.Users\r\n                                .Include(u => u.EcoleUsers)\r\n                                .Where(u => u.Id == passwordSetupToken.UserId)\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (user == null)\r\n            {\r\n                return BadRequest(\"Bad user token\");\r\n            }\r\n\r\n            var saltBytes = _tokenService.GenerateSalt();\r\n            var hashedPassword = _tokenService.HashPassword(passwordSetupBindingModel.Password, saltBytes);\r\n            user.Password = hashedPassword;\r\n            user.Salt = Convert.ToBase64String(saltBytes);\r\n            user.DateValideEmail = DateTime.UtcNow;\r\n\r\n            int actifStatusId = DataCache.GetUserStatuses(_db)\r\n                .Where(us => us.Code == nameof(UserStatusCodeEnum.ACTIF))\r\n                .Select(us => us.Id)\r\n                .FirstOrDefault();\r\n\r\n            if (actifStatusId == 0)\r\n            {\r\n                Log.Fatal($\"Cannot find the user status with code = '{nameof(UserStatusCodeEnum.ACTIF)}'\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            var ecoleUser = user.EcoleUsers.FirstOrDefault(eu => eu.EcoleId == passwordSetupToken.SchoolId);\r\n\r\n            if (ecoleUser != null)\r\n            {\r\n                ecoleUser.UserStatutId = actifStatusId;\r\n            }\r\n            else\r\n            {\r\n                Log.Fatal(\"User not encrolled in the specified school\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n\r\n                // TODO: send confirmation email ?\r\n                return Ok();\r\n            }\r\n            catch (Exception)\r\n            {\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the user's password and status after verifying the password setup token and hashing the new password, with error handling for various scenarios.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "PasswordSetupBindingModel",
                        "param_name": "PasswordSetupBindingModel",
                        "param_desc": "The model containing the necessary information for setting up a new password, such as the user's new password and the setup token."
                    },
                    {
                        "name": "passwordSetupBindingModel",
                        "param_name": "passwordSetupBindingModel",
                        "param_desc": "An instance of the PasswordSetupBindingModel class that holds the details required for setting up a new password."
                    },
                    {
                        "name": "SetupNewPasswordAsync",
                        "param_name": "SetupNewPasswordAsync",
                        "param_desc": "The name of the method responsible for updating the user's password and status after verifying the password setup token and hashing the new password, with error handling for various scenarios."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the user's password and status after verifying the password setup token and hashing the new password, with error handling for various scenarios.\n/// </summary>\n/// <param name=\"PasswordSetupBindingModel\">The model containing the necessary information for setting up a new password, such as the user's new password and the setup token.</param>\n/// <param name=\"passwordSetupBindingModel\">An instance of the PasswordSetupBindingModel class that holds the details required for setting up a new password.</param>\n/// <param name=\"SetupNewPasswordAsync\">The name of the method responsible for updating the user's password and status after verifying the password setup token and hashing the new password, with error handling for various scenarios.</param>\n",
            "code_chunks": null
        },
        {
            "name": "SendResetPasswordEmail",
            "code_start_index": 5009,
            "method_name": "SendResetPasswordEmail",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "email",
                    "param_name": "email",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var ecoles = DataCache.GetSchools(_db);\r\n\r\n            var currentSchoolCode = _config.GetSchoolCode();\r\n\r\n            if (string.IsNullOrEmpty(currentSchoolCode))\r\n            {\r\n                return BadRequest(\"Current school code was not found\");\r\n            }\r\n\r\n            var currentSchool = ecoles.FirstOrDefault(e => e.Code == currentSchoolCode);\r\n\r\n            if (currentSchool == null)\r\n            {\r\n                return BadRequest(\"School does not exist\");\r\n            }\r\n\r\n            var user = await _db.Users\r\n                                .AsNoTracking()\r\n                                .Where(u => u.Email == email && u.EcoleUsers.Any(eu => eu.EcoleId == currentSchool.Id))\r\n                                .Select(u => new\r\n                                {\r\n                                    u.Id,\r\n                                    u.Email,\r\n                                    u.Pseudo,\r\n                                    u.Nom,\r\n                                    u.Prenom\r\n                                })\r\n                                .FirstOrDefaultAsync();\r\n\r\n            if (user == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"This user does not exist\");\r\n            }\r\n\r\n            try\r\n            {\r\n                var dnsConfig = _dnsConfig.GetDnsConfig();\r\n\r\n                var from = new MailAddress(dnsConfig.EmailNoReply, dnsConfig.Title);\r\n                var to = new MailAddress(user.Email, user.Pseudo);\r\n\r\n                var jwtTokenValidityForPasswordResetLink = _config.GetJwtTokenValidityForPasswordResetLink();\r\n                var token = _tokenService.CreateAndEncodeAuthToken(user.Id, currentSchool.Id, Request.Headers.Host, jwtTokenValidityForPasswordResetLink);\r\n\r\n                var resetPasswordViewBag = new ResetPasswordModel\r\n                {\r\n                    BaseUrl = dnsConfig.Dns,\r\n                    Token = token,\r\n                    Email = user.Email,\r\n                    FirstName = user.Prenom,\r\n                    LastName = user.Nom\r\n                };\r\n\r\n                MailAddress fromMail = from;\r\n                string schoolCode = currentSchool.Code;\r\n                if (currentSchool.Code == \"STUDI\" || currentSchool.Code == \"COMNICIA\" || currentSchool.Code == \"COMPTALIA\" || currentSchool.Code == \"ECOLEMS\" || currentSchool.Code == \"PREPALIA\")\r\n                {\r\n                    schoolCode = \"STUDI\";\r\n                    var ecole = ecoles.FirstOrDefault(e => e.Code == schoolCode);\r\n                    fromMail = new MailAddress(ecole.DnsConfig.EmailNoReply, ecole.Libelle);\r\n                }\r\n\r\n                await SMTPMail.SendEmaiFromTemplateAsync(\r\n                   \"R\u00e9initialisation du mot de passe\",\r\n                   fromMail,\r\n                   to,\r\n                   \"Connection\",\r\n                   \"ConnectionResetPassword\",\r\n                   \"resetPassword.cshtml\",\r\n                   resetPasswordViewBag,\r\n                   schoolCode, _config.GetLmsEnv(), _config.GetSmtpServerAddress());\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Erreur envoi resetPassword mail\");\r\n                return InternalServerError();\r\n            }\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Send a reset password email to a user with the necessary information and link for password reset, based on the user's email and current school code.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "email",
                        "param_name": "email",
                        "param_desc": "The email of the user who needs to reset their password."
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The name of the method which sends the reset password email."
                    },
                    {
                        "name": "purpose",
                        "param_name": "purpose",
                        "param_desc": "The purpose of the method: sending a reset password email to a user with the necessary information and link for password reset, based on the user's email and current school code."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Send a reset password email to a user with the necessary information and link for password reset, based on the user's email and current school code.\n/// </summary>\n/// <param name=\"email\">The email of the user who needs to reset their password.</param>\n/// <param name=\"method\">The name of the method which sends the reset password email.</param>\n/// <param name=\"purpose\">The purpose of the method: sending a reset password email to a user with the necessary information and link for password reset, based on the user's email and current school code.</param>\n",
            "code_chunks": null
        },
        {
            "name": "VerifyPasswordToken",
            "code_start_index": 8496,
            "method_name": "VerifyPasswordToken",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "encodedToken",
                    "param_name": "encodedToken",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var host = Request.Headers.Host;\r\n                _tokenService.ValidateTokenAndReturnPayload(encodedToken, host);\r\n                return Ok();\r\n            }\r\n            catch (TokenExpiredException)\r\n            {\r\n                return Unauthorized();\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (RecordNotFoundException)\r\n            {\r\n                return NotFound();\r\n            }\r\n            catch (Exception)\r\n            {\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Validate a password token and return the payload, returning different HTTP status codes based on the validation result.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "encodedToken",
                        "param_name": "encodedToken",
                        "param_desc": "The string representing the encoded token that needs to be verified."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Validate a password token and return the payload, returning different HTTP status codes based on the validation result.\n/// </summary>\n/// <param name=\"encodedToken\">The string representing the encoded token that needs to be verified.</param>\n",
            "code_chunks": null
        },
        {
            "name": "ResetPassword",
            "code_start_index": 9354,
            "method_name": "ResetPassword",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "resetPasswordBindingModel",
                    "param_name": "resetPasswordBindingModel",
                    "param_type": "ResetPasswordBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var host = Request.Headers.Host;\r\n                var payload = _tokenService.ValidateTokenAndReturnPayload(resetPasswordBindingModel.EncodedToken, host);\r\n                var user = await _userRepository.GetFirstWhereAsync(u => u.Id == payload.UserId);\r\n                var saltBytes = _tokenService.GenerateSalt();\r\n                user.Password = _tokenService.HashPassword(resetPasswordBindingModel.Password, saltBytes);\r\n                user.Salt = Convert.ToBase64String(saltBytes);\r\n                user.DateValideEmail = DateTime.UtcNow;\r\n                await _db.SaveChangesAsync();\r\n\r\n                return Ok();\r\n            }\r\n            catch (TokenExpiredException)\r\n            {\r\n                return Unauthorized();\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (RecordNotFoundException)\r\n            {\r\n                return NotFound();\r\n            }\r\n            catch (Exception)\r\n            {\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the user's password and salt, validate their email, and save the changes, handling different exceptions accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "resetPasswordBindingModel",
                        "param_name": "resetPasswordBindingModel",
                        "param_desc": "The ResetPasswordBindingModel object containing the new password and necessary information for resetting the user's password."
                    },
                    {
                        "name": "resetPasswordBindingModel",
                        "param_name": "resetPasswordBindingModel",
                        "param_desc": "The ResetPasswordBindingModel object containing the new password and necessary information for resetting the user's password."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the user's password and salt, validate their email, and save the changes, handling different exceptions accordingly.\n/// </summary>\n/// <param name=\"resetPasswordBindingModel\">The ResetPasswordBindingModel object containing the new password and necessary information for resetting the user's password.</param>\n/// <param name=\"resetPasswordBindingModel\">The ResetPasswordBindingModel object containing the new password and necessary information for resetting the user's password.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetTokenForAsync",
            "code_start_index": 10834,
            "method_name": "GetTokenForAsync",
            "existing_summary": "\r\n        // TODO: fix this method wich is a security issue\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "email",
                    "param_name": "email",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n            var userId = User.Identity.GetUserId();\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            if (!currentUser.Interne)\r\n            {\r\n                return StatusCode(HttpStatusCode.Forbidden);\r\n            }\r\n\r\n            string schoolName = HttpContext.Current.Request.OriginOrRequestHost();\r\n\r\n            var user = await _db.Users.AsNoTracking()\r\n                .Where(u => u.Email == email)\r\n                .Select(u => new\r\n                {\r\n                    u.Id,\r\n                    u.Email\r\n                })\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (user == null)\r\n            {\r\n                return Content(HttpStatusCode.NotFound, \"Cet utilisateur n'existe pas.\");\r\n            }\r\n\r\n            var activeStatusCodeId = DataCache.GetUserStatuses(_db)\r\n                .First(us => us.Code == nameof(UserStatusCodeEnum.ACTIF))\r\n                .Id;\r\n\r\n            var hasSubscription = await _db.EcoleUsers.AsNoTracking()\r\n                .AnyAsync(eu => currentUser.SchoolIdsList.Contains(eu.EcoleId) && eu.UserId == user.Id && eu.UserStatutId == activeStatusCodeId);\r\n\r\n            if (!hasSubscription)\r\n            {\r\n                // TODO: fix security issue\r\n                return Content(HttpStatusCode.NotFound, \"Cet utilisateur n'est pas inscrit dans cette \u00e9cole ou il est bloqu\u00e9\");\r\n            }\r\n\r\n            Log.Information(\"{0} Loggin in as {1}\", currentUser.Email, user.Email);\r\n\r\n            return Ok(new LoginResponseSuccesViewModel\r\n            {\r\n                Token = _tokenService.CreateAndEncodeAuthToken(user.Id, ecoleId, schoolName, new TimeSpan(3, 0, 0)),\r\n                UserId = user.Id,\r\n                IsAlreadyConnected = false\r\n            });\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a token for a user to authenticate and access the system, ensuring user is registered and active in the specified school.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "email",
                        "param_name": "email",
                        "param_desc": "The email address of the user requesting the token. It is used to uniquely identify the user in the system."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a token for a user to authenticate and access the system, ensuring user is registered and active in the specified school.\n/// </summary>\n/// <param name=\"email\">The email address of the user requesting the token. It is used to uniquely identify the user in the system.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetOnlineUsersAsync",
            "code_start_index": 13238,
            "method_name": "GetOnlineUsersAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get online users list connected\r\n        /// </summary>\r\n        /// <returns>user list</returns>\r\n        /// <remarks>La liste est mis \u00e0 jour par le Hub Connection de SignalR - NE PAS SUPPRIMER CE HUB CONNECTION tant qu'une solution de contournement n'a pas \u00e9t\u00e9 trouv\u00e9 - nouvel algo qui determinerait une liste d'utilisateur connect\u00e9e</remarks>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var ecoleId = User.Identity.GetSchoolId();\r\n\r\n            var onlineUsersIds = ConnectionsListHolder.OnlineUsers.Keys;\r\n\r\n            var users = await RepositoryV3.GetUsers(_db)\r\n                .Where(user => onlineUsersIds.Contains(user.Id))\r\n                .Select(RepositoryV3.GetUserMapExpression(ecoleId))\r\n                .ToListAsync();\r\n\r\n            // TODO: handle this: ConnectionHub.ClientsDictionnary[1].IsMobile\r\n            return Ok(users);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve online users asynchronously and return their information after filtering by their IDs.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "GetOnlineUsersAsync"
                    },
                    {
                        "name": "purpose",
                        "param_name": "purpose",
                        "param_desc": "Retrieve online users asynchronously and return their information after filtering by their IDs."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve online users asynchronously and return their information after filtering by their IDs.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">GetOnlineUsersAsync</param>\n/// <param name=\"purpose\">Retrieve online users asynchronously and return their information after filtering by their IDs.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetOnlineConnectionIdsAsync",
            "code_start_index": 14228,
            "method_name": "GetOnlineConnectionIdsAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get report connexion ids from online user liste connected\r\n        /// </summary>\r\n        /// <remarks>La liste est mis \u00e0 jour par le Hub Connection de SignalR - NE PAS SUPPRIMER CE HUB CONNECTION tant qu'une solution de contournement n'a pas \u00e9t\u00e9 trouv\u00e9 - nouvel algo qui determinerait une liste d'utilisateur connect\u00e9e</remarks>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var connectionReportsIds = ConnectionsListHolder.OnlineUsers\r\n                    .SelectMany(x => x.Value)\r\n                    .Select(x => x.Value.ConnectionReportId)\r\n                    .ToList();\r\n\r\n            await Task.CompletedTask;\r\n            return Ok(connectionReportsIds);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the list of online connection report IDs asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The list of parameters. It is always a single word. Exclude the type of the parameter which may come firstly."
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "The existing method name. It is always a single word. Exclude the type of the parameter which may come firstly."
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The method purpose. It is always a single word. Exclude the type of the parameter which may come firstly."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the list of online connection report IDs asynchronously.\n/// </summary>\n/// <param name=\"no\">The list of parameters. It is always a single word. Exclude the type of the parameter which may come firstly.</param>\n/// <param name=\"existing\">The existing method name. It is always a single word. Exclude the type of the parameter which may come firstly.</param>\n/// <param name=\"method\">The method purpose. It is always a single word. Exclude the type of the parameter which may come firstly.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CheckAccountTokenAsync",
            "code_start_index": 14891,
            "method_name": "CheckAccountTokenAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        ///  API Check token before activating account\r\n        /// </summary>\r\n        /// <param name=\"encodedToken\">string</param>\r\n        /// <returns>Return bool</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "encodedToken",
                    "param_name": "encodedToken",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var host = HttpContext.Current.Request.OriginOrRequestHost();\r\n            var schoolName = _config.GetSchoolCode();\r\n\r\n            AuthenticationPayload payload;\r\n            try\r\n            {\r\n                payload = _tokenService.ValidateTokenAndReturnPayload(encodedToken, host);\r\n            }\r\n            catch (TokenExpiredException)\r\n            {\r\n                return Unauthorized();\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error($\"{ex}\");\r\n                return InternalServerError();\r\n            }\r\n            // On recherche l'Ecoles_users pour mettre le statut en ACTIF\r\n            var ecoleUser = await _db.EcoleUsers\r\n                .Include(eu => eu.UserStatut)\r\n                .Include(eu => eu.UserType)\r\n                .FirstOrDefaultAsync(eu => eu.UserId == payload.UserId && eu.Ecole.Code == schoolName);\r\n\r\n            // On retourne false si Ecoles_users est null\r\n            if (ecoleUser == null)\r\n            {\r\n                return BadRequest(\"User not present in the school.\");\r\n            }\r\n\r\n            if (ecoleUser.UserStatut.Code == nameof(UserStatusCodeEnum.ACTIF))\r\n            {\r\n                return BadRequest(\"Account already active.\");\r\n            }\r\n\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Validate the account token and check if the user is present in the specified school, returning appropriate responses based on the token validation and user status.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "encodedToken",
                        "param_name": "encodedToken",
                        "param_desc": "The string containing the encoded token representing the user's authentication credentials."
                    },
                    {
                        "name": "CheckAccountTokenAsync",
                        "param_name": "CheckAccountTokenAsync",
                        "param_desc": "The method responsible for validating the account token and verifying the user's presence in the specified school. It returns appropriate responses based on the token validation and user status."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Validate the account token and check if the user is present in the specified school, returning appropriate responses based on the token validation and user status.\n/// </summary>\n/// <param name=\"encodedToken\">The string containing the encoded token representing the user's authentication credentials.</param>\n/// <param name=\"CheckAccountTokenAsync\">The method responsible for validating the account token and verifying the user's presence in the specified school. It returns appropriate responses based on the token validation and user status.</param>\n",
            "code_chunks": null
        },
        {
            "name": "HandleNewProspectAsync",
            "code_start_index": 16730,
            "method_name": "HandleNewProspectAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Creates a new prospect.\r\n        /// </summary>\r\n        /// <param name=\"prospectInfo\">Object UserLogin</param>\r\n        /// <returns>Retourne Http Status 200</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "prospectInfo",
                    "param_name": "prospectInfo",
                    "param_type": "NewProspectV2BindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var hostName = HttpContext.Current.Request.OriginOrRequestHost();\r\n\r\n                var newPropect = new NewProspectDto()\r\n                {\r\n                    LastName = prospectInfo.LastName,\r\n                    FirstName = prospectInfo.FirstName,\r\n                    Email = prospectInfo.Email,\r\n                    SectorExternalCode = prospectInfo.SectorExternalCode,\r\n                    SubscribeToApprenticeshipCourse = prospectInfo.SubscribeToApprenticeshipCourse,\r\n                    HostName = hostName\r\n                };\r\n\r\n                var createdUserId = await _connectionService.CreateNewProspectAsync(newPropect);\r\n\r\n                return Ok(createdUserId);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                return Content(HttpStatusCode.InternalServerError, ex.Message);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a new prospect with provided information and store it in the database, returning the ID of the created user, or return an error message if an exception occurs.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "prospectInfo",
                        "param_name": "prospectInfo",
                        "param_desc": "The information of the new prospect to be created. It should include details such as name, contact information, and any other relevant data required for creating a prospect."
                    },
                    {
                        "name": "HandleNewProspectAsync",
                        "param_name": "HandleNewProspectAsync",
                        "param_desc": "The purpose of the method is to create a new prospect using the provided information and store it in the database. It returns the ID of the created user upon successful creation. In case of an exception, it returns an error message indicating the failure."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a new prospect with provided information and store it in the database, returning the ID of the created user, or return an error message if an exception occurs.\n/// </summary>\n/// <param name=\"prospectInfo\">The information of the new prospect to be created. It should include details such as name, contact information, and any other relevant data required for creating a prospect.</param>\n/// <param name=\"HandleNewProspectAsync\">The purpose of the method is to create a new prospect using the provided information and store it in the database. It returns the ID of the created user upon successful creation. In case of an exception, it returns an error message indicating the failure.</param>\n",
            "code_chunks": null
        },
        {
            "name": "HandleNewProspectApprenticeshipLongtermAsync",
            "code_start_index": 18097,
            "method_name": "HandleNewProspectApprenticeshipLongtermAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Creates a new prospect .\r\n        /// </summary>\r\n        /// <param name=\"prospectInfo\">Object UserLogin</param>\r\n        /// <returns>Retourne Http Status 200</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "prospectInfo",
                    "param_name": "prospectInfo",
                    "param_type": "NewProspectLongtermApprenticeshipV2BindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var hostName = HttpContext.Current.Request.OriginOrRequestHost();\r\n\r\n                var newPropectLongtermApprenticeship = new NewProspectLongtermApprenticeshipDto()\r\n                {\r\n                    LastName = prospectInfo.LastName,\r\n                    FirstName = prospectInfo.FirstName,\r\n                    Email = prospectInfo.Email,\r\n                    HostName = hostName\r\n                };\r\n\r\n                var createdUserId = await _connectionService.HandleNewProspectLongtermApprenticeshipAsync(newPropectLongtermApprenticeship);\r\n\r\n                return Ok(createdUserId);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                return Content(HttpStatusCode.InternalServerError, ex.Message);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a new long-term apprenticeship prospect and handle it asynchronously, returning the created user ID or an internal server error message if an exception occurs.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "NewProspectLongtermApprenticeshipV2BindingModel",
                        "param_name": "NewProspectLongtermApprenticeshipV2BindingModel",
                        "param_desc": "The model containing information about the new long-term apprenticeship prospect."
                    },
                    {
                        "name": "prospectInfo",
                        "param_name": "prospectInfo",
                        "param_desc": "Additional information related to the prospect."
                    },
                    {
                        "name": "HandleNewProspectApprenticeshipLongtermAsync",
                        "param_name": "HandleNewProspectApprenticeshipLongtermAsync",
                        "param_desc": "The method responsible for creating a new long-term apprenticeship prospect and handling it asynchronously. It returns the created user ID or an internal server error message in case of an exception."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a new long-term apprenticeship prospect and handle it asynchronously, returning the created user ID or an internal server error message if an exception occurs.\n/// </summary>\n/// <param name=\"NewProspectLongtermApprenticeshipV2BindingModel\">The model containing information about the new long-term apprenticeship prospect.</param>\n/// <param name=\"prospectInfo\">Additional information related to the prospect.</param>\n/// <param name=\"HandleNewProspectApprenticeshipLongtermAsync\">The method responsible for creating a new long-term apprenticeship prospect and handling it asynchronously. It returns the created user ID or an internal server error message in case of an exception.</param>\n",
            "code_chunks": null
        },
        {
            "name": "ActivateProspectAccountAsync",
            "code_start_index": 19491,
            "method_name": "ActivateProspectAccountAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Activates a prospect account.\r\n        /// This action activates the user account, sets its password and does the discovery courses registration.\r\n        /// </summary>\r\n        /// <param name=\"prospectAccountInfo\">The prospect account information.</param>\r\n        /// <returns>An HTTP result.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "prospectAccountInfo",
                    "param_name": "prospectAccountInfo",
                    "param_type": "ProspectAccountActivationV2BindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // Sanity check.\r\n            if (prospectAccountInfo == null)\r\n            {\r\n                return BadRequest();\r\n            }\r\n\r\n            // Validate the token.\r\n            var host = HttpContext.Current.Request.OriginOrRequestHost();\r\n            AuthenticationPayload payload;\r\n\r\n            try\r\n            {\r\n                payload = _tokenService.ValidateTokenAndReturnPayload(prospectAccountInfo.Token, host);\r\n            }\r\n            catch (TokenExpiredException)\r\n            {\r\n                return Unauthorized();\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (RecordNotFoundException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error($\"{ex}\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            try\r\n            {\r\n                // Activate the user account and do the discovery registration.\r\n                var activationResult = await _connectionService.ActivateProspectAccountAsync(\r\n                    userId: payload.UserId,\r\n                    schoolId: payload.SchoolId,\r\n                    password: prospectAccountInfo.Password,\r\n                    sectorExternalCode: prospectAccountInfo.SectorExternalCode,\r\n                    subscribeToApprenticeshipCourse: prospectAccountInfo.SubscribeToApprenticeshipCourse);\r\n\r\n                switch (activationResult)\r\n                {\r\n                    case ProspectActivationResultCode.AlreadyActiveAccount:\r\n                        return BadRequest(\"Le compte de l'utilisateur est d\u00e9j\u00e0 actif.\");\r\n\r\n                    case ProspectActivationResultCode.AccountNotFound:\r\n                        return BadRequest(\"L'utilisateur n'existe pas au sein de l'\u00e9tablissement.\");\r\n\r\n                    case ProspectActivationResultCode.DiscoveryCourseNotFound:\r\n                        string discoveryCourseNotFoundErrorMsg = \"Aucun parcours d\u00e9couverte n'a \u00e9t\u00e9 trouv\u00e9.\";\r\n                        Log.Error($\"{nameof(ActivateProspectAccountAsync)}: {discoveryCourseNotFoundErrorMsg}\");\r\n                        return BadRequest(discoveryCourseNotFoundErrorMsg);\r\n\r\n                    case ProspectActivationResultCode.ApprenticeshipDiscoveryCourseRequiredAndNotFound:\r\n                        string apprenticeshipDiscoveryCourseRequiredAndNotFoundErrorMsg = \"Aucun parcours d\u00e9couverte d\u00e9di\u00e9 \u00e0 l'alternance n'a \u00e9t\u00e9 trouv\u00e9.\";\r\n                        Log.Error($\"{nameof(ActivateProspectAccountAsync)}: {apprenticeshipDiscoveryCourseRequiredAndNotFoundErrorMsg}\");\r\n                        return BadRequest(apprenticeshipDiscoveryCourseRequiredAndNotFoundErrorMsg);\r\n\r\n                    case ProspectActivationResultCode.InternalServerError:\r\n                        return Content(HttpStatusCode.InternalServerError, \"Une erreur technique s'est produite.\");\r\n\r\n                    case ProspectActivationResultCode.InvalidPassword:\r\n                        return BadRequest(\"Le mot de passe fourni ne respecte pas les r\u00e8gles de validation.\");\r\n\r\n                    case ProspectActivationResultCode.Ok:\r\n                        return Ok();\r\n\r\n                    default:\r\n\r\n                        // Any other result code is not supported.\r\n                        throw new NotSupportedException($\"The result code '{activationResult}' is not supported.\");\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, ex.Message);\r\n                return Content(HttpStatusCode.InternalServerError, \"Une erreur technique s'est produite.\");\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Activate a prospect account asynchronously, validate token, activate user account, and handle various activation result codes.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "ProspectAccountActivationV2BindingModel",
                        "param_name": "ProspectAccountActivationV2BindingModel",
                        "param_desc": "The model containing information needed to activate a prospect account. It should include details such as prospect account ID, activation token, and any other necessary data."
                    },
                    {
                        "name": "prospectAccountInfo",
                        "param_name": "prospectAccountInfo",
                        "param_desc": "Additional information related to the prospect account activation process. This could include extra details or context required for account activation, such as user preferences or settings."
                    },
                    {
                        "name": "ActivateProspectAccountAsync",
                        "param_name": "ActivateProspectAccountAsync",
                        "param_desc": "The method responsible for activating a prospect account asynchronously. It handles tasks like validating tokens, activating user accounts, and managing various activation result codes."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Activate a prospect account asynchronously, validate token, activate user account, and handle various activation result codes.\n/// </summary>\n/// <param name=\"ProspectAccountActivationV2BindingModel\">The model containing information needed to activate a prospect account. It should include details such as prospect account ID, activation token, and any other necessary data.</param>\n/// <param name=\"prospectAccountInfo\">Additional information related to the prospect account activation process. This could include extra details or context required for account activation, such as user preferences or settings.</param>\n/// <param name=\"ActivateProspectAccountAsync\">The method responsible for activating a prospect account asynchronously. It handles tasks like validating tokens, activating user accounts, and managing various activation result codes.</param>\n",
            "code_chunks": null
        },
        {
            "name": "CreateProspectsAccountsEnrolledOnApprenticeshipDiscoveryFromJsonFileAsync",
            "code_start_index": 23529,
            "method_name": "CreateProspectsAccountsEnrolledOnApprenticeshipDiscoveryFromJsonFileAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            if (!Request.Content.IsMimeMultipartContent())\r\n            {\r\n                throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType);\r\n            }\r\n\r\n            var provider = new MultipartMemoryStreamProvider();\r\n            await Request.Content.ReadAsMultipartAsync(provider);\r\n\r\n            if (provider.Contents.Count != 1)\r\n            {\r\n                return BadRequest(\"The request need a single Json file to be provided\");\r\n            }\r\n\r\n            var file = provider.Contents.Single();\r\n            //var filename = provider.Contents.Single().Headers.ContentDisposition.FileName.Trim('\\\"');\r\n\r\n            if (!IsValidFileSize(file.Headers.ContentLength ?? 0))\r\n            {\r\n                return BadRequest(\"Invalid file size\");\r\n            }\r\n\r\n            var buffer = await file.ReadAsByteArrayAsync();\r\n            var fileContents = System.Text.Encoding.UTF8.GetString(buffer);\r\n\r\n            var usersToAddAndEnroll = JsonConvert.DeserializeObject<SalesForceProspectsEnrollmentsBindingModel>(fileContents);\r\n            var newProspectsDtos = usersToAddAndEnroll.Select(userToAddAndEnroll => new NewProspectDto\r\n            {\r\n                LastName = userToAddAndEnroll.LastName,\r\n                FirstName = userToAddAndEnroll.FirstName,\r\n                Email = userToAddAndEnroll.Email,\r\n                SectorExternalCode = 1, //TODO: transform salesforce code into SectorExternalCode\r\n                SubscribeToApprenticeshipCourse = true,\r\n                HostName = HttpContext.Current.Request.OriginOrRequestHost()\r\n            });\r\n\r\n            await _connectionService.BatchHandleProspectsCreationAsync(newProspectsDtos);\r\n\r\n            return Ok(\"All prospects added successfully from Json file\");\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create prospects accounts enrolled on apprenticeship discovery from a JSON file asynchronously, validating the file content and processing the data to add new prospects to the system.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method for which parameters are being documented. In this case, the method name is 'CreateProspectsAccountsEnrolledOnApprenticeshipDiscoveryFromJsonFileAsync'."
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method for which parameters are being documented. In this case, the method purpose is 'Create prospects accounts enrolled on apprenticeship discovery from a JSON file asynchronously, validating the file content and processing the data to add new prospects to the system.'."
                    },
                    {
                        "name": "paramsDescription",
                        "param_name": "paramsDescription",
                        "param_desc": "A description of the parameters being documented. In this case, the list of parameters is 'no parameters'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create prospects accounts enrolled on apprenticeship discovery from a JSON file asynchronously, validating the file content and processing the data to add new prospects to the system.\n/// </summary>\n/// <param name=\"methodName\">The name of the method for which parameters are being documented. In this case, the method name is 'CreateProspectsAccountsEnrolledOnApprenticeshipDiscoveryFromJsonFileAsync'.</param>\n/// <param name=\"methodPurpose\">The purpose of the method for which parameters are being documented. In this case, the method purpose is 'Create prospects accounts enrolled on apprenticeship discovery from a JSON file asynchronously, validating the file content and processing the data to add new prospects to the system.'.</param>\n/// <param name=\"paramsDescription\">A description of the parameters being documented. In this case, the list of parameters is 'no parameters'.</param>\n",
            "code_chunks": null
        },
        {
            "name": "IsValidFileSize",
            "code_start_index": 25443,
            "method_name": "IsValidFileSize",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "fileSize",
                    "param_name": "fileSize",
                    "param_type": "long",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            return fileSize > 0 && fileSize <= WebsiteConfiguration.MaxFilesize;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if the file size is within the valid range specified by the website configuration.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "fileSize",
                        "param_name": "fileSize",
                        "param_desc": "The size of the file to be validated. It should be a long integer representing the file size in bytes."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if the file size is within the valid range specified by the website configuration.\n/// </summary>\n/// <param name=\"fileSize\">The size of the file to be validated. It should be a long integer representing the file size in bytes.</param>\n",
            "code_chunks": null
        },
        {
            "name": "TrialPeriodHalfWayReminderAsync",
            "code_start_index": 25842,
            "method_name": "TrialPeriodHalfWayReminderAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Asynchronously sends an email reminder when half the trial period is done.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            await _connectionService.SendTrialPeriodHalfWayReminderAsync();\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Send a reminder for the halfway point of a trial period asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method (e.g., 'TrialPeriodHalfWayReminderAsync')"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method (e.g., 'Send a reminder for the halfway point of a trial period asynchronously.')"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Send a reminder for the halfway point of a trial period asynchronously.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method (e.g., 'TrialPeriodHalfWayReminderAsync')</param>\n/// <param name=\"methodPurpose\">The purpose of the method (e.g., 'Send a reminder for the halfway point of a trial period asynchronously.')</param>\n",
            "code_chunks": null
        },
        {
            "name": "TrialPeriodEndedReminderAsync",
            "code_start_index": 26277,
            "method_name": "TrialPeriodEndedReminderAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Asynchronously sends an email reminder after the trial period end.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            await _connectionService.SendTrialPeriodEndedReminderAsync();\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Send a reminder when the trial period has ended asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method for which the reminder is being sent. In this case, it is 'TrialPeriodEndedReminderAsync'."
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method for which the reminder is being sent. In this case, it is 'Send a reminder when the trial period has ended asynchronously'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Send a reminder when the trial period has ended asynchronously.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method for which the reminder is being sent. In this case, it is 'TrialPeriodEndedReminderAsync'.</param>\n/// <param name=\"methodPurpose\">The purpose of the method for which the reminder is being sent. In this case, it is 'Send a reminder when the trial period has ended asynchronously'.</param>\n",
            "code_chunks": null
        },
        {
            "name": "RenewAccountTokenAsync",
            "code_start_index": 26834,
            "method_name": "RenewAccountTokenAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Recr\u00e9er un token si le lien d'activation est expir\u00e9 et que le user a cliqu\u00e9 sur reg\u00e9n\u00e9rer un lien d'activation.\r\n        /// </summary>\r\n        /// <param name=\"prospectInfo\">ProspectAccountActivationV2ViewModel</param>\r\n        /// <returns>bool</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "prospectInfo",
                    "param_name": "prospectInfo",
                    "param_type": "ProspectAccountActivationV2BindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            // Sanity check.\r\n            if (prospectInfo == null)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            AuthenticationPayload payload;\r\n            var host = HttpContext.Current.Request.OriginOrRequestHost();\r\n            try\r\n            {\r\n                payload = _tokenService.ValidateTokenAndReturnPayload(prospectInfo.Token, host, checkForExpiration: false, doLogErrors: true);\r\n            }\r\n            catch (InvalidTokenException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (RecordNotFoundException)\r\n            {\r\n                return BadRequest();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error($\"{ex}\");\r\n                return InternalServerError();\r\n            }\r\n\r\n            var resultCode = await _connectionService.RenewAccountExpiredTokenAsync(\r\n                prospectInfo.SectorExternalCode, host, payload.SchoolId, payload.UserId, prospectInfo.SubscribeToApprenticeshipCourse);\r\n\r\n            switch (resultCode)\r\n            {\r\n                case ProspectRenewTokenResultCode.AccountNotFound:\r\n                    return BadRequest(\"User not present in the school.\");\r\n\r\n                case ProspectRenewTokenResultCode.AlreadyActiveAccount:\r\n                    return BadRequest(\"Account already active.\");\r\n\r\n                case ProspectRenewTokenResultCode.InternalServerError:\r\n                    return InternalServerError();\r\n\r\n                case ProspectRenewTokenResultCode.Ok:\r\n                    return Ok();\r\n\r\n                default:\r\n                    // Any other result code is not supported.\r\n                    throw new NotSupportedException($\"The result code '{resultCode}' is not supported.\");\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Renew an account token based on prospect information, validating the token and handling various result codes accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "ProspectAccountActivationV2BindingModel",
                        "param_name": "ProspectAccountActivationV2BindingModel",
                        "param_desc": "The model containing the information required for activating a prospect account."
                    },
                    {
                        "name": "prospectInfo",
                        "param_name": "prospectInfo",
                        "param_desc": "The information related to the prospect for whom the account token is being renewed."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Renew an account token based on prospect information, validating the token and handling various result codes accordingly.\n/// </summary>\n/// <param name=\"ProspectAccountActivationV2BindingModel\">The model containing the information required for activating a prospect account.</param>\n/// <param name=\"prospectInfo\">The information related to the prospect for whom the account token is being renewed.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "ConnectionV2Controller"
}