{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V4/RegionalSettingsController.cs",
    "index_shift_code": 661,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V4",
    "usings": [],
    "access_modifier": "public",
    "struct_name": "RegionalSettingsController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetCountriesTimeZones",
            "code_start_index": 1691,
            "method_name": "GetCountriesTimeZones",
            "existing_summary": "\r\n        /// <summary>\r\n        /// The GetRegionalSettings.\r\n        /// </summary>\r\n        /// <param name=\"culture\">The cultureCode<see cref=\"string\"/>.</param>\r\n        /// <returns>The <see cref=\"Task{IHttpActionResult}\"/>.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "culture",
                    "param_name": "culture",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var result = new List<CountryTimeZoneViewModel>();\r\n                var countries = TZNames.GetCountryNames(culture);\r\n                foreach (var country in countries)\r\n                {\r\n                    var timeZonesForThisCountry = await Task.Run(() => TZNames.GetTimeZonesForCountry(culture, country.Key)); ;\r\n\r\n                    foreach (var timeZone in timeZonesForThisCountry)\r\n                    {\r\n                        var regionalSetting = new CountryTimeZoneViewModel\r\n                        {\r\n                            CountryCode = country.Key,\r\n                            CountryName = country.Value,\r\n                            TimeZoneId = timeZone.Key,\r\n                            TimeZoneName = timeZone.Value\r\n                        };\r\n\r\n                        result.Add(regionalSetting);\r\n                    }\r\n                }\r\n\r\n                return Ok(result);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Failed retrieving regional settings dataset\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve block exam session information asynchronously using specified resource version ID, promotion code, and filiere code, logging success or error messages accordingly.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "culture",
                        "param_name": "culture",
                        "param_desc": "The culture parameter is a string that specifies the culture information to be used in the method. It determines the formatting of dates, times, numbers, and currencies based on the specified culture."
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The method parameter is a string that specifies the name of the existing method 'GetCountriesTimeZones' to be invoked. It is used to retrieve block exam session information asynchronously using specified resource version ID, promotion code, and filiere code, logging success or error messages accordingly."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve block exam session information asynchronously using specified resource version ID, promotion code, and filiere code, logging success or error messages accordingly.\n/// </summary>\n/// <param name=\"culture\">The culture parameter is a string that specifies the culture information to be used in the method. It determines the formatting of dates, times, numbers, and currencies based on the specified culture.</param>\n/// <param name=\"method\">The method parameter is a string that specifies the name of the existing method 'GetCountriesTimeZones' to be invoked. It is used to retrieve block exam session information asynchronously using specified resource version ID, promotion code, and filiere code, logging success or error messages accordingly.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetUserRegionalSettings",
            "code_start_index": 3341,
            "method_name": "GetUserRegionalSettings",
            "existing_summary": "\r\n        // TODO: some might think : why not had put this in ProfileV2Controller but think of\r\n        // upcoming Internationalization and you'll understand that those regional settings will include\r\n        // many other things like language code, datetime format, number format, etc..\r\n        // and also think S of SOLID\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "userId",
                    "param_name": "userId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var timeZoneId = await (from user in _dbContext.Users\r\n                              join address in _dbContext.Addresses on user.AdresseId equals address.Id\r\n                              where user.Id == userId\r\n                              select address.TimezoneId).FirstOrDefaultAsync();\r\n\r\n                return Ok(timeZoneId);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Failed to save user's regional settings\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the exam session information for a specific user's blocked exams.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The ID of the user for whom the exam session information needs to be retrieved."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the exam session information for a specific user's blocked exams.\n/// </summary>\n/// <param name=\"userId\">The ID of the user for whom the exam session information needs to be retrieved.</param>\n",
            "code_chunks": null
        },
        {
            "name": "SetUserRegionalSettings",
            "code_start_index": 4117,
            "method_name": "SetUserRegionalSettings",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "userId",
                    "param_name": "userId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "countryCode",
                    "param_name": "countryCode",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "timeZoneId",
                    "param_name": "timeZoneId",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var countriesFromCache = DataCache.GetCountries(_dbContext);\r\n                var livingCountry = countriesFromCache.FirstOrDefault(c => c.Code == countryCode);\r\n\r\n                var userAndAddress = (from user in _dbContext.Users\r\n                                      join address in _dbContext.Addresses on user.AdresseId equals address.Id\r\n                                      where user.Id == userId\r\n                                      select new { User = user, Address = address }).FirstOrDefault();\r\n\r\n                if (userAndAddress.User.PrmId == null)\r\n                {\r\n                    if (userAndAddress == null)\r\n                    {\r\n                        var currentUser = User.Identity.GetUser();\r\n                        var address = new Address\r\n                        {\r\n                            DateCreate = DateTime.Now,\r\n                            UserCreate = currentUser.Email,\r\n                            NomVoie = string.Empty,\r\n                            Cp = string.Empty,\r\n                            Ville = string.Empty,\r\n                            PaysId = livingCountry.Id,\r\n                            TimezoneId = timeZoneId\r\n                        };\r\n\r\n                        _dbContext.Addresses.Add(address);\r\n                        await _dbContext.SaveChangesAsync();\r\n\r\n                        var userAddress = new UserAddress\r\n                        {\r\n                            DateCreate = DateTime.Now,\r\n                            UserCreate = currentUser.Email,\r\n                            UserId = userId,\r\n                            AddressId = address.Id,\r\n                            AddressUseId = _dbContext.AddressUs.FirstOrDefaultAsync(q => q.Code == \"MAIN\").Result.Id,\r\n                            AddressTypeId = _dbContext.AddressTypes.FirstOrDefaultAsync(q => q.Code == \"HOME\").Result.Id,\r\n                            PrmId = null\r\n                        };\r\n\r\n                        _dbContext.UserAddresses.Add(userAddress);\r\n                        await _dbContext.SaveChangesAsync();\r\n                    }\r\n                    else\r\n                    {\r\n                        userAndAddress.Address.TimezoneId = timeZoneId;\r\n                        userAndAddress.Address.PaysId = livingCountry.Id;\r\n\r\n                        await _dbContext.SaveChangesAsync();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    var responseMessage = new HttpResponseMessage(HttpStatusCode.NotModified);\r\n                    return ResponseMessage(responseMessage);\r\n                }\r\n\r\n                return Ok();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Failed to save user's regional settings\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the time zones for all countries and their corresponding country codes, names, time zone IDs, and time zone names.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "userId",
                        "param_name": "userId",
                        "param_desc": "The unique identifier for the user."
                    },
                    {
                        "name": "countryCode",
                        "param_name": "countryCode",
                        "param_desc": "The code that represents the country."
                    },
                    {
                        "name": "timeZoneId",
                        "param_name": "timeZoneId",
                        "param_desc": "The identifier for the time zone."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the time zones for all countries and their corresponding country codes, names, time zone IDs, and time zone names.\n/// </summary>\n/// <param name=\"userId\">The unique identifier for the user.</param>\n/// <param name=\"countryCode\">The code that represents the country.</param>\n/// <param name=\"timeZoneId\">The identifier for the time zone.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "RegionalSettingsController"
}