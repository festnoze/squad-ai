{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/JotFormController.cs",
    "index_shift_code": 499,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Linq",
        "System.Text.RegularExpressions",
        "System.Threading.Tasks",
        "System.Web",
        "System.Web.Http",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Configuration",
        "LMS.Data",
        "LMS.Models.BindingModels.V2",
        "LMS.Services.Interfaces",
        "LMS.Utils",
        "LMS.Utils.Cache",
        "Serilog"
    ],
    "access_modifier": "public",
    "struct_name": "JotFormController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetJWTToken",
            "code_start_index": 1417,
            "method_name": "GetJWTToken",
            "existing_summary": "\r\n        /// <summary>\r\n        /// get JWT Token\r\n        /// </summary>\r\n        /// <param name=\"request\">Request</param>\r\n        /// <param name=\"jwtToken\">JWT Token</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            jwtToken = null;\r\n\r\n            var success = false;\r\n\r\n            if (request != null)\r\n            {\r\n                var hearders = HttpContext.Current.Request.Headers;\r\n\r\n                if (hearders.AllKeys.Contains(\"Authorization\"))\r\n                {\r\n                    var values = hearders.GetValues(\"Authorization\");\r\n                    var bearer = values.Where(q => q.Contains(\"Bearer\")).FirstOrDefault();\r\n\r\n                    if (!string.IsNullOrEmpty(bearer))\r\n                    {\r\n                        jwtToken = bearer.Replace(\"Bearer\", \"\").Trim();\r\n                        success = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return success;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Extract the JWT token from the Authorization header if present.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "GetJWTToken",
                        "param_name": "GetJWTToken",
                        "param_desc": "Extract the JWT token from the Authorization header if present."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Extract the JWT token from the Authorization header if present.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"GetJWTToken\">Extract the JWT token from the Authorization header if present.</param>\n"
        },
        {
            "name": "DeleteJotFormSubmission",
            "code_start_index": 2209,
            "method_name": "DeleteJotFormSubmission",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Delete a submission in jotform\r\n        /// </summary>\r\n        /// <param name=\"submissionId\">Submission id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            var success = false;\r\n\r\n            try\r\n            {\r\n                success = this._jotFormAPIClient.DeleteSubmission(submissionId);\r\n            \r\n                if (!success)\r\n                {\r\n                    Log.Error($\"JOTFORM: Delete submission - Impossible to delete the submissionId: {submissionId}) from jotform API.\");\r\n                }\r\n            }\r\n            catch(Studi.JotForm.Exceptions.APIException e)\r\n            {\r\n                Log.Error($\"JOTFORM: Delete submission - {e.Message}.\");\r\n            }\r\n           \r\n\r\n            return success;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Delete a submission from JotForm API, log an error message if deletion fails.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no parameters",
                        "param_name": "no parameters",
                        "param_desc": "The list of parameters is 'no parameters'."
                    },
                    {
                        "name": "DeleteJotFormSubmission",
                        "param_name": "DeleteJotFormSubmission",
                        "param_desc": "The existing method named 'DeleteJotFormSubmission'."
                    },
                    {
                        "name": "method purpose",
                        "param_name": "method purpose",
                        "param_desc": "The method purpose is 'Delete a submission from JotForm API, log an error message if deletion fails.'."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Delete a submission from JotForm API, log an error message if deletion fails.\n/// </summary>\n/// <param name=\"no parameters\">The list of parameters is 'no parameters'.</param>\n/// <param name=\"DeleteJotFormSubmission\">The existing method named 'DeleteJotFormSubmission'.</param>\n/// <param name=\"method purpose\">The method purpose is 'Delete a submission from JotForm API, log an error message if deletion fails.'.</param>\n"
        },
        {
            "name": "GetFormAsync",
            "code_start_index": 2946,
            "method_name": "GetFormAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get jot form url\r\n        /// </summary>\r\n        /// <param name=\"formId\">Form Id</param>\r\n        /// <param name=\"parameters\">Parameters</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            Models.ViewModels.V2.Forms.AuthorizedFormViewModel authorizedFormViewModel = new Models.ViewModels.V2.Forms.AuthorizedFormViewModel();\r\n\r\n            var userId = User.Identity.GetUserId();\r\n            var schoolId = User.Identity.GetSchoolId();\r\n\r\n            var form = await this._studiDB.Forms.AsNoTracking()\r\n                                            .Include(q => q.FormCategory)\r\n                                            .Where(q => q.Id == formId).FirstOrDefaultAsync();\r\n\r\n            if (form == null)\r\n            {\r\n                return Content(System.Net.HttpStatusCode.BadRequest, \"This form doesn't exist\");\r\n            }\r\n\r\n            var accessInfo = await this._formService.HasAccessToFormsAsync(userId, schoolId, formId, parameters.PromotionId);\r\n\r\n            authorizedFormViewModel.Authorized = accessInfo.HasAccess;\r\n            authorizedFormViewModel.UnauthorizedReason = accessInfo.Reason;\r\n\r\n            authorizedFormViewModel.Id = form.Id;\r\n            authorizedFormViewModel.Name = form.Name;\r\n            authorizedFormViewModel.OpeningDate = form.OpeningDate;\r\n            authorizedFormViewModel.ClosingDate = form.ClosingDate;\r\n\r\n            if (authorizedFormViewModel.Authorized)\r\n            {\r\n                string jotformUrl = $\"{this._config.GetJotformUrl()}{form.JotformId}\";\r\n\r\n                #region SET QUERIES PARAMETERS\r\n\r\n                var queriesParameters = form.JotformUrlParamsTemplate;\r\n\r\n                if (!String.IsNullOrEmpty(queriesParameters))\r\n                {\r\n                    #region DNS\r\n                    if (queriesParameters.Contains($\"[{Studi.JotForm.Constants.FieldNames.DNS}]\"))\r\n                    {\r\n                        var host = HttpContext.Current.Request.OriginOrRequestHost();\r\n\r\n                        if (!String.IsNullOrEmpty(host))\r\n                        {\r\n                            queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.DNS}]\", host);\r\n                        }\r\n                    }\r\n                    #endregion\r\n\r\n                    var user = await this._studiDB.Users.AsNoTracking().FirstOrDefaultAsync(q => q.Id == userId);\r\n\r\n                    // Form id LMS\r\n                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.FORM_IDLMS}]\", form.Id.ToString());\r\n\r\n                    // JWT token\r\n                    var jwtToken = String.Empty;\r\n\r\n                    if (this.GetJWTToken(HttpContext.Current.Request, out jwtToken))\r\n                    {\r\n                        queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.JWT_TOKEN}]\", jwtToken);\r\n                    }\r\n\r\n                    #region User\r\n                    if (user != null)\r\n                    {\r\n\r\n                        queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.USER_ID}]\", user.Id.ToString());\r\n\r\n                        if (!String.IsNullOrEmpty(user.Civilite))\r\n                        {\r\n                            switch (user.Civilite.ToLower())\r\n                            {\r\n                                case \"mme\":\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.CIVILITY}]\", \"Mme\");\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.GENDER}]\", \"Femme\");\r\n                                    break;\r\n\r\n                                case \"mlle\":\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.CIVILITY}]\", \"Mlle\");\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.GENDER}]\", \"Femme\");\r\n                                    break;\r\n\r\n                                default:\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.CIVILITY}]\", \"Mr\");\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.GENDER}]\", \"Homme\");\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        if (!String.IsNullOrEmpty(user.Email)) queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.EMAIL}]\", user.Email);\r\n                        if (!String.IsNullOrEmpty(user.Prenom)) queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.FIRSTNAME}]\", user.Prenom);\r\n                        if (!String.IsNullOrEmpty(user.Nom)) queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.LASTNAME}]\", user.Nom);\r\n\r\n                        if (user.DateNaissance != null)\r\n                        {\r\n                            queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.BIRTHDATE_DAY}]\", user.DateNaissance.Value.ToString(\"dd\"));\r\n                            queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.BIRTHDATE_MONTH}]\", user.DateNaissance.Value.ToString(\"MM\"));\r\n                            queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.BIRTHDATE_YEAR}]\", user.DateNaissance.Value.ToString(\"yyyy\"));\r\n                        }\r\n\r\n                        #region User Phone\r\n                        var phones = await this._studiDB.UserPhoneNumbers.AsNoTracking()\r\n                                                                .Where(q => q.UserId == user.Id && q.DateDelete == null)\r\n                                                                .OrderByDescending(q => q.DateCreate)\r\n                                                                .ToListAsync();\r\n\r\n                        var mobilesTypesIds = DataCache.GetPhoneNumberTypes(this._studiDB).Where(q => q.Code == \"Mobile\" || q.Code == \"PRO\").Select(q => q.Id).ToList();\r\n\r\n                        var mobile = phones.Where(q => mobilesTypesIds.Contains(q.PhoneNumberTypeId)).FirstOrDefault();\r\n                        if (mobile != null) queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.MOBILE_PHONE}]\", mobile.PhoneNumber);\r\n\r\n                        var fix = phones.Where(q => !mobilesTypesIds.Contains(q.PhoneNumberTypeId)).FirstOrDefault();\r\n                        if (fix != null) queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.PHONE_FIX}]\", fix.PhoneNumber);\r\n\r\n                        #endregion\r\n\r\n                        #region User Address\r\n                        var address = await this._studiDB.Addresses.AsNoTracking()\r\n                                                        .Include(q => q.TypeVoie)\r\n                                                        .Include(q => q.Pay)\r\n                                                        .FirstOrDefaultAsync(q => q.Id == user.AdresseId);\r\n\r\n                        if (address != null)\r\n                        {\r\n                            var simpleAddress = String.Empty;\r\n                            var fullAddress = String.Empty;\r\n\r\n                            if (!String.IsNullOrEmpty(address.NumeroVoie))\r\n                            {\r\n                                queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.ADDRESS_NUMERO}]\", address.NumeroVoie);\r\n                                simpleAddress += address.NumeroVoie;\r\n                            }\r\n\r\n                            if (address.TypeVoie != null)\r\n                            {\r\n                                queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.ADDRESS_TYPE}]\", address.TypeVoie.Libelle);\r\n                                simpleAddress += $\" {address.TypeVoie.Libelle}\";\r\n                            }\r\n\r\n                            if (!String.IsNullOrEmpty(address.NomVoie))\r\n                            {\r\n                                queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.ADDRESS_NAME}]\", address.NomVoie);\r\n                                simpleAddress += $\" {address.NomVoie}\";\r\n                            }\r\n\r\n                            if (!String.IsNullOrEmpty(simpleAddress)) queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.ADDRESS}]\", simpleAddress);\r\n\r\n                            fullAddress = simpleAddress;\r\n\r\n                            if (!String.IsNullOrEmpty(address.Cp))\r\n                            {\r\n                                queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.ADDRESS_ZIPCODE}]\", address.Cp);\r\n                                fullAddress += $\" {address.Cp}\";\r\n                            }\r\n\r\n                            if (!String.IsNullOrEmpty(address.Ville))\r\n                            {\r\n                                queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.ADDRESS_CITY}]\", address.Ville);\r\n                                fullAddress += $\" {address.Ville}\";\r\n                            }\r\n\r\n                            queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.ADDRESS_COUNTRY}]\", address.Pay.Libelle);\r\n                            fullAddress += $\" {address.Pay.Libelle}\";\r\n                            queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.FULL_ADDRESS}]\", address.Pay.Libelle);\r\n                        }\r\n                        #endregion\r\n                    }\r\n                    #endregion\r\n\r\n                    #region Form Category \r\n\r\n                    var projectIds = new List<int>();\r\n\r\n                    switch (form.FormCategory.Code)\r\n                    {\r\n                        case \"ORDER\":\r\n\r\n                            if (queriesParameters.Contains($\"[{Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID}]\"))\r\n                            {\r\n                                var allAwailabilityExamens = await this._formService.GetFormsAvailableAsync(userId, schoolId, \"ORDER\");\r\n\r\n                                var selectExamen = allAwailabilityExamens.Where(q => q.Id == formId).ToList();\r\n\r\n                                if (selectExamen.Count > 0)\r\n                                {\r\n                                    var availabilityPromotionsIds = selectExamen.Where(e => e.PromotionId.HasValue).Select(e => e.PromotionId.Value).ToList();\r\n\r\n                                    if (parameters != null && parameters.PromotionId != null)\r\n                                    {\r\n                                        var selectedPromotionId = parameters.PromotionId.Value;\r\n\r\n                                        if (availabilityPromotionsIds.Contains(selectedPromotionId))\r\n                                        {\r\n                                            availabilityPromotionsIds = new List<int> { selectedPromotionId };\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            return Content(System.Net.HttpStatusCode.BadRequest, \"Selected promotion is not in the list\");\r\n                                        }\r\n                                    }\r\n\r\n                                    var promotionRegistration = await this._studiDB.InscriptionPromotions\r\n                                                            .Include(q => q.Promotion.Parcour)\r\n                                                            .AsNoTracking()\r\n                                                            .Where(ip => ip.UserId == userId\r\n                                                                       && ip.EcoleId == schoolId\r\n                                                                       && availabilityPromotionsIds.Contains(ip.PromotionId)\r\n                                                                       && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                                                       && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now))\r\n                                                            .FirstOrDefaultAsync();\r\n\r\n                                    if (promotionRegistration == null)\r\n                                    {\r\n                                        return Content(System.Net.HttpStatusCode.BadRequest, \"No promotion registration for this form\");\r\n                                    }\r\n\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.FORMATION}]\", promotionRegistration.Promotion.Parcour.Titre);\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID}]\", promotionRegistration.Id.ToString());\r\n\r\n                                    if (queriesParameters.Contains($\"[{Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_DATE}]\") && promotionRegistration.DateInscription != null)\r\n                                    {\r\n                                        queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_DATE}]\", promotionRegistration.DateInscription.Value.ToString(\"dd/MM/yyyy\"));\r\n                                    }\r\n\r\n                                    if (queriesParameters.Contains($\"[{Studi.JotForm.Constants.FieldNames.REGISTERED_UE_LIST}]\"))\r\n                                    {\r\n                                        var matieresIds = await this._studiDB.InscriptionMatieres.AsNoTracking()\r\n                                                            .Where(q => q.EcoleId == promotionRegistration.EcoleId && q.PromotionId == promotionRegistration.PromotionId && q.UserId == promotionRegistration.UserId\r\n                                                             && q.DateDelete == null && q.StatutMatiereClotureId == null)\r\n                                                            .Select(q => q.MatiereId)\r\n                                                            .ToListAsync();\r\n\r\n                                        if (matieresIds.Count > 0)\r\n                                        {\r\n                                            var allParcoursJSON = await _parcoursReader.GetParcoursJsonAsync(_studiDB, new List<string> { promotionRegistration.Promotion.Parcour.Code });\r\n\r\n                                            if (allParcoursJSON.ContainsKey(promotionRegistration.Promotion.Parcour.Code))\r\n                                            {\r\n                                                var parcoursJSON = allParcoursJSON[promotionRegistration.Promotion.Parcour.Code];\r\n                                                var matieresArray = parcoursJSON.Matieres.Where(q => matieresIds.Contains(q.Id)).Select(q => q.Titre).ToArray();\r\n\r\n                                                queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.REGISTERED_UE_LIST}]\", String.Join(\",\", matieresArray));\r\n                                            }\r\n                                            else {\r\n                                                return Content(System.Net.HttpStatusCode.BadRequest, \"No promotion registration for this form\");\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else\r\n                                {\r\n                                    return Content(System.Net.HttpStatusCode.BadRequest, \"No available examen for this user\");\r\n                                }\r\n                            }\r\n                            break;\r\n\r\n                        case \"EXCEPTIONAL\":\r\n\r\n                            if (queriesParameters.Contains($\"[{Studi.JotForm.Constants.FieldNames.FORMATION}]\"))\r\n                            {\r\n\r\n                                var allAwailabilityExamens = await this._formService.GetFormsAvailableAsync(userId, schoolId, \"EXCEPTIONAL\");\r\n\r\n                                var selectExamen = allAwailabilityExamens.Where(q => q.Id == formId).ToList();\r\n\r\n                                if (selectExamen.Count > 0)\r\n                                {\r\n                                    var availabilityPromotionsIds = selectExamen.Where(e => e.PromotionId.HasValue).Select(e => e.PromotionId.Value).ToList();\r\n\r\n                                    if (parameters != null && parameters.PromotionId != null)\r\n                                    {\r\n                                        var selectedPromotionId = parameters.PromotionId.Value;\r\n\r\n                                        if (availabilityPromotionsIds.Contains(selectedPromotionId))\r\n                                        {\r\n                                            availabilityPromotionsIds = new List<int> { selectedPromotionId };\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            return Content(System.Net.HttpStatusCode.BadRequest, \"Selected promotion is not in the list\");\r\n                                        }\r\n                                    }\r\n\r\n                                    var promotionRegistration = await this._studiDB.InscriptionPromotions\r\n                                                            .Include(q => q.Promotion.Parcour)\r\n                                                            .AsNoTracking()\r\n                                                            .Where(ip => ip.UserId == userId\r\n                                                                       && ip.EcoleId == schoolId\r\n                                                                       && availabilityPromotionsIds.Contains(ip.PromotionId)\r\n                                                                       && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                                                       && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now))\r\n                                                            .FirstOrDefaultAsync();\r\n\r\n                                    if (promotionRegistration == null)\r\n                                    {\r\n                                        return Content(System.Net.HttpStatusCode.BadRequest, \"No promotion registration for this form\");\r\n                                    }\r\n\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.FORMATION}]\", promotionRegistration.Promotion.Parcour.Titre);\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID}]\", promotionRegistration.Id.ToString());\r\n\r\n\r\n                                    projectIds = await this._studiDB.InscriptionMatieres.AsNoTracking()\r\n                                                                        .Where(q => q.UserId == userId && q.PromotionId == promotionRegistration.PromotionId && q.EcoleId == promotionRegistration.EcoleId\r\n                                                                            && q.DateDelete == null && q.StatutMatiereClotureId == null && q.ProjetId != null)\r\n                                                                        .Select(q => q.ProjetId.Value)\r\n                                                                        .Distinct()\r\n                                                                        .ToListAsync();\r\n                                }\r\n                                else\r\n                                {\r\n                                    return Content(System.Net.HttpStatusCode.BadRequest, \"No available examen for this user\");\r\n                                }\r\n                            }\r\n\r\n                            if (queriesParameters.Contains($\"[{Studi.JotForm.Constants.FieldNames.FUNDING}]\"))\r\n                            {\r\n                                var conventions = this._studiDB.ProjetConventions.AsNoTracking()\r\n                                                                .Include(q => q.Financeur)\r\n                                                                .Where(q => q.ProjetId != null && q.FinanceurId != null && projectIds.Contains(q.ProjetId.Value) && q.DateDelete == null)\r\n                                                                .ToList();\r\n\r\n                                if (conventions.Count > 0)\r\n                                {\r\n                                    var noOPCAFinancerCodes = new List<string>\r\n                                    {\r\n                                        \"AUCUN\",\r\n                                        \"PART\",\r\n                                        \"GIFT\",\r\n                                    };\r\n\r\n                                    conventions = conventions.OrderBy(q => noOPCAFinancerCodes.Contains(q.Financeur.Code))\r\n                                                                .ToList();\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.FUNDING}]\", conventions[0].Financeur.Libelle);\r\n\r\n                                }\r\n                            }\r\n\r\n                            break;\r\n\r\n                        case \"TP_EXAMEN_REGISTRATION\":\r\n\r\n                            if (queriesParameters.Contains($\"[{Studi.JotForm.Constants.FieldNames.FORMATION}]\"))\r\n                            {\r\n\r\n                                var allAwailabilityExamens = await this._formService.GetFormsAvailableAsync(userId, schoolId, \"TP_EXAMEN_REGISTRATION\");\r\n\r\n                                var selectExamen = allAwailabilityExamens.Where(q => q.Id == formId).ToList();\r\n\r\n                                if (selectExamen.Count > 0)\r\n                                {\r\n                                    var availabilityPromotionsIds = selectExamen.Where(e => e.PromotionId.HasValue).Select(e => e.PromotionId.Value).ToList();\r\n\r\n                                    if (parameters != null && parameters.PromotionId != null)\r\n                                    {\r\n                                        var selectedPromotionId = parameters.PromotionId.Value;\r\n\r\n                                        if (availabilityPromotionsIds.Contains(selectedPromotionId))\r\n                                        {\r\n                                            availabilityPromotionsIds = new List<int> { selectedPromotionId };\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            return Content(System.Net.HttpStatusCode.BadRequest, \"Selected promotion is not in the list\");\r\n                                        }\r\n                                    }\r\n\r\n                                    var promotionRegistration = await this._studiDB.InscriptionPromotions\r\n                                                            .Include(q => q.Promotion.Parcour)\r\n                                                            .AsNoTracking()\r\n                                                            .Where(ip => ip.UserId == userId\r\n                                                                       && ip.EcoleId == schoolId\r\n                                                                       && availabilityPromotionsIds.Contains(ip.PromotionId)\r\n                                                                       && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                                                       && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now))\r\n                                                            .FirstOrDefaultAsync();\r\n\r\n                                    if (promotionRegistration == null)\r\n                                    {\r\n                                        return Content(System.Net.HttpStatusCode.BadRequest, \"No promotion registration for this form\");\r\n                                    }\r\n\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.FORMATION}]\", promotionRegistration.Promotion.Parcour.Titre);\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID}]\", promotionRegistration.Id.ToString());\r\n\r\n\r\n                                    projectIds = await this._studiDB.InscriptionMatieres.AsNoTracking()\r\n                                                                        .Where(q => q.UserId == userId && q.PromotionId == promotionRegistration.PromotionId && q.EcoleId == promotionRegistration.EcoleId\r\n                                                                            && q.DateDelete == null && q.StatutMatiereClotureId == null && q.ProjetId != null)\r\n                                                                        .Select(q => q.ProjetId.Value)\r\n                                                                        .Distinct()\r\n                                                                        .ToListAsync();\r\n                                }\r\n                                else\r\n                                {\r\n                                    return Content(System.Net.HttpStatusCode.BadRequest, \"No available examen for this user\");\r\n                                }\r\n                            }\r\n\r\n                            if (queriesParameters.Contains($\"[{Studi.JotForm.Constants.FieldNames.FUNDING}]\"))\r\n                            {\r\n                                var conventions = this._studiDB.ProjetConventions.AsNoTracking()\r\n                                                                .Include(q => q.Financeur)\r\n                                                                .Where(q => q.ProjetId != null && q.FinanceurId != null && projectIds.Contains(q.ProjetId.Value) && q.DateDelete == null)\r\n                                                                .ToList();\r\n\r\n                                if (conventions.Count > 0)\r\n                                {\r\n                                    var noOPCAFinancerCodes = new List<string>\r\n                                    {\r\n                                        \"AUCUN\",\r\n                                        \"PART\",\r\n                                        \"GIFT\",\r\n                                    };\r\n\r\n                                    conventions = conventions.OrderBy(q => noOPCAFinancerCodes.Contains(q.Financeur.Code))\r\n                                                                .ToList();\r\n                                    queriesParameters = queriesParameters.Replace($\"[{Studi.JotForm.Constants.FieldNames.FUNDING}]\", conventions[0].Financeur.Libelle);\r\n                                   \r\n                                }\r\n                            }\r\n\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                    #endregion\r\n\r\n                    // Remove empty\r\n                    Regex regex = new Regex(@\"=\\[.*?\\]\");\r\n                    queriesParameters = regex.Replace(queriesParameters, \"=\");\r\n\r\n                    jotformUrl = $\"{jotformUrl}{queriesParameters}\";\r\n                }\r\n\r\n                #endregion\r\n\r\n                authorizedFormViewModel.JotformData = new Models.ViewModels.V2.Forms.JotFormViewModel();\r\n                authorizedFormViewModel.JotformData.Id = form.JotformId;\r\n                authorizedFormViewModel.JotformData.Url = jotformUrl;\r\n            }\r\n\r\n            return Ok(authorizedFormViewModel);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve authorized form information and generate Jotform URL with user data if access is granted.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "GetFormAsync - Retrieve authorized form information and generate Jotform URL with user data if access is granted."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve authorized form information and generate Jotform URL with user data if access is granted.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">GetFormAsync - Retrieve authorized form information and generate Jotform URL with user data if access is granted.</param>\n"
        },
        {
            "name": "GetJotFormSubmissions",
            "code_start_index": 31342,
            "method_name": "GetJotFormSubmissions",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            if (this._jotFormAPIClient != null)\r\n            {\r\n                try\r\n                {\r\n                    var submission = this._jotFormAPIClient.GetSubmission(jotformSubmissionId);\r\n                    return Ok(submission);\r\n                }\r\n                catch (Studi.JotForm.Exceptions.APIException e)\r\n                {\r\n                    Log.Error($\"JOTFORM: Get submission - {e.Message}.\");\r\n                    return InternalServerError();\r\n                }               \r\n            }\r\n\r\n            return BadRequest();\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve JotForm submissions by submission ID.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "parameters",
                        "param_name": "parameters",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "named",
                        "param_name": "named",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "GetJotFormSubmissions",
                        "param_name": "GetJotFormSubmissions",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve JotForm submissions by submission ID.\n/// </summary>\n/// <param name=\"no\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"parameters\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"existing\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"method\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"named\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"GetJotFormSubmissions\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"context\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"methodPurpose\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n"
        },
        {
            "name": "CreateFormAsync",
            "code_start_index": 32097,
            "method_name": "CreateFormAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            var result = await this.SaveJotFormSubmission(formId, jotformSubmissionId);\r\n\r\n            if (result.Error)\r\n            {\r\n                return Content(result.HttpStatusCode, result.ErrorMessage);\r\n            }\r\n\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Save a JotForm submission asynchronously and return an HTTP status code or error message if there is an issue.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method being called (CreateFormAsync)"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method (Save a JotForm submission asynchronously and return an HTTP status code or error message if there is an issue.)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Save a JotForm submission asynchronously and return an HTTP status code or error message if there is an issue.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method being called (CreateFormAsync)</param>\n/// <param name=\"methodPurpose\">The purpose of the method (Save a JotForm submission asynchronously and return an HTTP status code or error message if there is an issue.)</param>\n"
        },
        {
            "name": "SaveJotFormSubmission",
            "code_start_index": 32466,
            "method_name": "SaveJotFormSubmission",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Save the jot form submisison in LMS\r\n        /// </summary>\r\n        /// <param name=\"formId\">Form id LMS</param>\r\n        /// <param name=\"jotformSubmissionId\">Jotform submission id</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            Models.ViewModels.V2.Forms.SaveJotformSubmissionViewModel result = new Models.ViewModels.V2.Forms.SaveJotformSubmissionViewModel();\r\n\r\n            if (this._jotFormAPIClient == null)\r\n            {\r\n                result.Error = true;\r\n                result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                result.ErrorMessage = \"Impossible to connect to jotform API client\";\r\n            }\r\n\r\n            var form = await this._studiDB.Forms.AsNoTracking()\r\n                                                .Include(q => q.FormCategory)\r\n                                                .Where(q => q.Id == formId)\r\n                                                .FirstOrDefaultAsync();\r\n\r\n            if (form == null)\r\n            {\r\n                result.Error = true;\r\n                result.HttpStatusCode = System.Net.HttpStatusCode.BadRequest;\r\n                result.ErrorMessage = \"The form doesn't exist\";\r\n            }\r\n\r\n            if (!result.Error)\r\n            {\r\n                Studi.JotForm.Models.SubmissionContent submissionContent = null;\r\n\r\n                try\r\n                {\r\n                    submissionContent = this._jotFormAPIClient.GetSubmission(jotformSubmissionId);\r\n                }\r\n                catch (Studi.JotForm.Exceptions.APIException e)\r\n                {\r\n                    result.Error = true;\r\n                    result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                    result.ErrorMessage = e.Message;\r\n                    Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                }\r\n\r\n                try\r\n                {\r\n                    if (submissionContent != null)\r\n                    {\r\n                        var userId = 0;\r\n\r\n                        #region USER ID\r\n                        if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.USER_ID))\r\n                        {\r\n                            var userIdField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.USER_ID);\r\n\r\n                            if (userIdField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_BOX)\r\n                            {\r\n                                var answer = ((Studi.JotForm.Models.TextBoxField)userIdField).Answer;\r\n\r\n                                if (!String.IsNullOrEmpty(answer))\r\n                                {\r\n                                    userId = Convert.ToInt32(answer);\r\n                                }\r\n                                else\r\n                                {\r\n                                    result.Error = true;\r\n                                    result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                    result.ErrorMessage = $\"The user id is null from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                    Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                result.Error = true;\r\n                                result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                result.ErrorMessage = $\"Impossible to get user idtext box from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            result.Error = true;\r\n                            result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                            result.ErrorMessage = $\"Impossible to get user id from the jot form submission (id: {jotformSubmissionId}).\";\r\n                            Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                        }\r\n                        #endregion\r\n\r\n\r\n                        InscriptionPromotion promotionRegistration = null;\r\n\r\n                        switch (form.FormCategory.Code)\r\n                        {\r\n                            case \"ORDER\":\r\n\r\n                                #region PROMOTION REGISTRATION FIELD\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID))\r\n                                {\r\n                                    var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID);\r\n\r\n                                    if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_BOX)\r\n                                    {\r\n                                        var answer = ((Studi.JotForm.Models.TextBoxField)promotionRegistrationField).Answer;\r\n\r\n                                        if (!String.IsNullOrEmpty(answer))\r\n                                        {\r\n                                            var promotionRegistrationId = Convert.ToInt32(answer);\r\n\r\n                                            promotionRegistration = await this._studiDB.InscriptionPromotions\r\n                                                                                            .Include(q => q.Ecole)\r\n                                                                                            .Include(q => q.Promotion.Parcour)\r\n                                                                                            .Where(q => q.Id == promotionRegistrationId && q.UserId == userId)\r\n                                                                                            .FirstOrDefaultAsync();\r\n\r\n                                            if (promotionRegistration == null)\r\n                                            {\r\n                                                result.Error = true;\r\n                                                result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                                result.ErrorMessage = $\"The promotion registration (id: {promotionRegistrationId}) doesn't exist from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                                Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            result.Error = true;\r\n                                            result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                            result.ErrorMessage = $\"The promotion registration is null from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                            Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        result.Error = true;\r\n                                        result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                        result.ErrorMessage = $\"Impossible to get promotion registration text box from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                        Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                    }\r\n                                }\r\n                                else\r\n                                {\r\n                                    result.Error = true;\r\n                                    result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                    result.ErrorMessage = $\"Impossible to get promotion registration from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                    Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                }\r\n                                #endregion\r\n\r\n                                #region USER MOBILE\r\n\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.MOBILE_PHONE))\r\n                                {\r\n                                    var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.MOBILE_PHONE);\r\n\r\n                                    if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_BOX)\r\n                                    {\r\n                                        var answer = ((Studi.JotForm.Models.TextBoxField)promotionRegistrationField).Answer;\r\n\r\n                                        var mobileType = DataCache.GetPhoneNumberTypes(this._studiDB).FirstOrDefault(q => q.Code == \"MOBILE\");\r\n\r\n                                        var mobile = await this._studiDB.UserPhoneNumbers\r\n                                                                        .Where(q => q.UserId == userId && q.PhoneNumberTypeId == mobileType.Id)\r\n                                                                        .OrderBy(q => q.DateDelete != null)\r\n                                                                        .ThenByDescending(q => q.DateUpdate)\r\n                                                                        .ThenByDescending(q => q.DateCreate)\r\n                                                                        .FirstOrDefaultAsync();\r\n\r\n                                        if (mobile == null)\r\n                                        {\r\n                                            mobile = new UserPhoneNumber\r\n                                            {\r\n                                                UserCreate = User.Identity.Name,\r\n                                                DateCreate = DateTime.Now,\r\n                                                PhoneNumberTypeId = mobileType.Id,\r\n                                                UserId = userId\r\n                                            };\r\n\r\n                                            this._studiDB.UserPhoneNumbers.Add(mobile);\r\n                                        }\r\n\r\n                                        mobile.PhoneNumber = answer;\r\n                                    }\r\n                                }\r\n\r\n                                #endregion\r\n\r\n                                #region USER ADDRESS\r\n\r\n                                var user = await this._studiDB.Users\r\n                                                    .Where(q => q.Id == userId)\r\n                                                    .FirstOrDefaultAsync();\r\n\r\n                                var shippingAddressId = user.AdresseLivraisonId ?? 0;\r\n\r\n                                var shippingAddress = await this._studiDB.Addresses.FirstOrDefaultAsync(q => q.Id == shippingAddressId);\r\n                                                                \r\n                                if (shippingAddress == null)\r\n                                {\r\n                                    shippingAddress = new Address\r\n                                    {\r\n                                        UserCreate = $\"Auto form the form {formId}\",\r\n                                        DateCreate = DateTime.Now,\r\n                                    };\r\n\r\n                                    this._studiDB.Addresses.Add(shippingAddress);\r\n                                }        \r\n\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.ADDRESS))\r\n                                {\r\n                                    var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.ADDRESS);\r\n\r\n                                    if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_AREA)\r\n                                    {\r\n                                        var answer = ((Studi.JotForm.Models.TextAreaField)promotionRegistrationField).Answer;\r\n\r\n                                        string numero = Regex.Match(answer, @\"^\\d+\").Value;\r\n                                        string streetName = Regex.Replace(answer, \"^[0-9]+\", string.Empty);\r\n                                        TypeVoie streetType = DataCache.GetTypeVoies(this._studiDB).FirstOrDefault(tv => streetName.ToLower().Contains(tv.Libelle.ToLower()));\r\n                                        if (streetType != null) streetName = Regex.Replace(streetName, streetType.Libelle, String.Empty, RegexOptions.IgnoreCase);\r\n                                        streetName = streetName.Trim();\r\n\r\n                                        shippingAddress.NumeroVoie = numero;\r\n                                        shippingAddress.NomVoie = streetName;\r\n                                        shippingAddress.TypeVoieId = streetType?.Id;\r\n                                    }\r\n                                }\r\n\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.ADDITIONAL_ADDRESS))\r\n                                {\r\n                                    var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.ADDITIONAL_ADDRESS);\r\n\r\n                                    if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_BOX)\r\n                                    {\r\n                                        var answer = ((Studi.JotForm.Models.TextBoxField)promotionRegistrationField).Answer;\r\n                                        shippingAddress.Complement = answer;\r\n                                    }\r\n                                }\r\n\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.ADDRESS_ZIPCODE))\r\n                                {\r\n                                    var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.ADDRESS_ZIPCODE);\r\n\r\n                                    if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_BOX)\r\n                                    {\r\n                                        var answer = ((Studi.JotForm.Models.TextBoxField)promotionRegistrationField).Answer;\r\n                                        shippingAddress.Cp = answer;\r\n                                    }\r\n                                }\r\n\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.ADDRESS_CITY))\r\n                                {\r\n                                    var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.ADDRESS_CITY);\r\n\r\n                                    if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_BOX)\r\n                                    {\r\n                                        var answer = ((Studi.JotForm.Models.TextBoxField)promotionRegistrationField).Answer;\r\n                                        shippingAddress.Ville = answer;\r\n                                    }\r\n                                }\r\n\r\n                                if (shippingAddress.PaysId == 0)\r\n                                {\r\n                                    shippingAddress.PaysId = DataCache.GetCountries(this._studiDB).Where(q => q.Code == \"fr\").Select(q => q.Id).First();\r\n                                }\r\n\r\n                                user.AdresseLivraison = shippingAddress;\r\n\r\n                                if (user.AdresseId == null)\r\n                                {\r\n                                    user.Adresse = new Address\r\n                                    {\r\n                                        UserCreate = $\"Auto from the form {formId}\",\r\n                                        DateCreate = DateTime.Now,\r\n                                        NumeroVoie = shippingAddress.NumeroVoie,\r\n                                        TypeVoieId = shippingAddress.TypeVoieId,\r\n                                        NomVoie = shippingAddress.NomVoie,\r\n                                        Complement = shippingAddress.Complement,\r\n                                        Ville = shippingAddress.Ville,\r\n                                        Cp = shippingAddress.Cp,\r\n                                        PaysId = shippingAddress.PaysId,\r\n                                    };\r\n                                }\r\n\r\n                                #endregion\r\n\r\n                                break;\r\n\r\n                            case \"TP_EXAMEN_REGISTRATION\":\r\n\r\n                                #region PROMOTION REGISTRATION FIELD\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID))\r\n                                {\r\n                                    var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID);\r\n\r\n                                    if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_BOX)\r\n                                    {\r\n                                        var answer = ((Studi.JotForm.Models.TextBoxField)promotionRegistrationField).Answer;\r\n\r\n                                        if (!String.IsNullOrEmpty(answer))\r\n                                        {\r\n                                            var promotionRegistrationId = Convert.ToInt32(answer);\r\n\r\n                                            promotionRegistration = await this._studiDB.InscriptionPromotions\r\n                                                                                            .Include(q => q.Ecole)\r\n                                                                                            .Include(q => q.Promotion.Parcour)\r\n                                                                                            .Where(q => q.Id == promotionRegistrationId && q.UserId == userId)\r\n                                                                                            .FirstOrDefaultAsync();\r\n\r\n                                            if (promotionRegistration == null)\r\n                                            {\r\n                                                result.Error = true;\r\n                                                result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                                result.ErrorMessage = $\"The promotion registration (id: {promotionRegistrationId}) doesn't exist from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                                Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            result.Error = true;\r\n                                            result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                            result.ErrorMessage = $\"The promotion registration is null from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                            Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        result.Error = true;\r\n                                        result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                        result.ErrorMessage = $\"Impossible to get promotion registration text box from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                        Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                    }\r\n                                }\r\n                                else\r\n                                {\r\n                                    result.Error = true;\r\n                                    result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                    result.ErrorMessage = $\"Impossible to get promotion registration from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                    Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                }\r\n                                #endregion\r\n\r\n                                #region CHECK OLD SUBMISSION\r\n                                if (result.Error)\r\n                                {\r\n                                    var oldFormSubmission = await this._studiDB.FormSubmissions.AsNoTracking()\r\n                                                                        .Where(q => q.UserId == userId && q.ParcoursId == promotionRegistration.Promotion.ParcoursId\r\n                                                                            && q.PromotionId == promotionRegistration.PromotionId && q.SchoolId == promotionRegistration.EcoleId)\r\n                                                                        .FirstOrDefaultAsync();\r\n\r\n                                    if (oldFormSubmission != null)\r\n                                    {\r\n                                        //this.DeleteJotFormSubmission(jotformSubmissionId);\r\n                                        result.Error = true;\r\n                                        result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                        result.ErrorMessage = $\"Already exist a form submission (id: {oldFormSubmission.Id} - jot form submission id {oldFormSubmission.JotformSubmissionId}).\";\r\n                                        Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                    }\r\n\r\n                                }\r\n                                #endregion\r\n\r\n                                #region EXAMEN DATE WISH AND SAVE\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.EXAMEN_WISH || q.Name == Studi.JotForm.Constants.FieldNames.CERTIFICATION_WISH))\r\n                                {\r\n                                    if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.EXAMEN_WISH))\r\n                                    {\r\n                                        var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.EXAMEN_WISH);\r\n\r\n                                        if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.DROPDOWN || promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.YES_NO)\r\n                                        {\r\n                                            string answer = null;\r\n\r\n                                            switch (promotionRegistrationField.Type)\r\n                                            {\r\n                                                case Studi.JotForm.Models.ControlTypeEnum.YES_NO:\r\n                                                    answer = ((Studi.JotForm.Models.YesNoField)promotionRegistrationField).Answer;\r\n                                                    break;\r\n                                                default:\r\n                                                    answer = ((Studi.JotForm.Models.DropDownField)promotionRegistrationField).Answer;\r\n                                                    break;\r\n                                            }\r\n\r\n                                            if (!String.IsNullOrEmpty(answer))\r\n                                            {\r\n                                                answer = answer.ToLower();\r\n                                                var examensPresentations = await this._studiDB.ExamenPresentations.AsNoTracking()\r\n                                                                                                .ToListAsync();\r\n\r\n                                                if (answer.Contains(\"oui\"))\r\n                                                {\r\n                                                    promotionRegistration.ExamenPresentationId = examensPresentations.Where(q => q.Code == \"OUI\").Select(q => q.Id).First();\r\n                                                }\r\n                                                else\r\n                                                {\r\n                                                    if (answer.Contains(\"jamais\"))\r\n                                                    {\r\n                                                        promotionRegistration.ExamenPresentationId = examensPresentations.Where(q => q.Code == \"JAMAIS\").Select(q => q.Id).First();\r\n                                                    }\r\n                                                    else\r\n                                                    {\r\n                                                        promotionRegistration.ExamenPresentationId = examensPresentations.Where(q => q.Code == \"NON\").Select(q => q.Id).First();\r\n                                                    }\r\n\r\n                                                    //#region CREATE LMS MESSAGE (YOUCANBOOKME LINK)\r\n\r\n                                                    //var youcanbookmeLink = String.Empty;\r\n\r\n                                                    //switch (promotionRegistration.Ecole.Code)\r\n                                                    //{\r\n                                                    //    case \"COMPTALIA\":\r\n                                                    //        youcanbookmeLink = $\"https://comptaliapedago.youcanbook.me/\";\r\n                                                    //        break;\r\n                                                    //    case \"COMNICIA\":\r\n                                                    //        youcanbookmeLink = $\"https://comniciapedago.youcanbook.me/\";\r\n                                                    //        break;\r\n                                                    //    default:\r\n                                                    //        break;\r\n                                                    //}\r\n\r\n                                                    //var groupeStudiUser = await this._studiDB.Users.FirstOrDefaultAsync(u => u.Email == promotionRegistration.Ecole.EmailPedagogie);\r\n\r\n                                                    //Conversation conversation = new Conversation\r\n                                                    //{\r\n                                                    //    DateCreate = DateTime.Now,\r\n                                                    //    UserCreate = User.Identity.Name,\r\n                                                    //    ExpediteurUserId = groupeStudiUser.Id,\r\n                                                    //    ExpediteurEcoleId = promotionRegistration.EcoleId,\r\n                                                    //    Subject = \"Acc\u00e8s \u00e0 vos cours!\",\r\n                                                    //    HasLeft = true,\r\n                                                    //    Archived = true,\r\n                                                    //    DateLecture = DateTime.Now,\r\n                                                    //};\r\n\r\n                                                    //this._studiDB.Conversations.Add(conversation);\r\n\r\n                                                    //var contactPart = String.Empty;\r\n\r\n                                                    //if (!String.IsNullOrEmpty(promotionRegistration.Ecole.Telephone))\r\n                                                    //{\r\n                                                    //    var phoneFormat = String.Format(\"{0:## ## ### ###}\", promotionRegistration.Ecole.Telephone);\r\n                                                    //    contactPart = $\"{phoneFormat} (appel local)\";\r\n                                                    //}\r\n\r\n                                                    //if (!String.IsNullOrEmpty(youcanbookmeLink))\r\n                                                    //{\r\n                                                    //    contactPart = $\"Prise de rendez-vous: {youcanbookmeLink}\";\r\n                                                    //}\r\n\r\n                                                    //var messageBody = $\"Bonjour, \" +\r\n                                                    //    $\"\\n\\nVous nous avez inform\u00e9 que vous ne comptiez pas vous pr\u00e9senter \u00e0 l'examen de \\\"{promotionRegistration.Promotion.Parcour.Titre}\\\". \" +\r\n                                                    //    $\"Afin de continuez \u00e0 b\u00e9n\u00e9ficier de l'acc\u00e8s \u00e0 vos cours, veuillez contacter le service p\u00e9dagogique avant la fin de la promotion sur laquelle vous \u00eates inscrit. Votre conseiller pourra alors mettre \u00e0 jour vos acc\u00e8s dans le cadre de la garantie r\u00e9ussite.\" +\r\n                                                    //    $\"\\n{contactPart}\" +\r\n                                                    //    $\"\\n\\nLe service p\u00e9dagogique\";\r\n\r\n                                                    //var message = new Message\r\n                                                    //{\r\n                                                    //    Body = messageBody,\r\n                                                    //    Conversation = conversation,\r\n                                                    //    ExpediteurUserId = groupeStudiUser.Id,\r\n                                                    //    DateCreate = DateTime.Now,\r\n                                                    //};\r\n\r\n                                                    //this._studiDB.Messages.Add(message);\r\n\r\n                                                    //var conversationDestinataireUser = new ConversationDestinataireUser()\r\n                                                    //{\r\n                                                    //    DateCreate = DateTime.Now,\r\n                                                    //    UserCreate = User.Identity.Name,\r\n                                                    //    Conversation = conversation,\r\n                                                    //    DestinataireUserId = userId,\r\n                                                    //    HasLeft = false,\r\n                                                    //};\r\n\r\n                                                    //this._studiDB.ConversationDestinataireUsers.Add(conversationDestinataireUser);\r\n\r\n                                                    //#endregion\r\n                                                }\r\n                                            }\r\n                                            else\r\n                                            {\r\n                                                result.Error = true;\r\n                                                result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                                result.ErrorMessage = $\"The examen wish is null from the jot form submission {jotformSubmissionId}).\";\r\n                                                Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            result.Error = true;\r\n                                            result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                            result.ErrorMessage = $\"Impossible to get examen date wish dropdown the jot form submission {jotformSubmissionId}).\";\r\n                                            Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                        }\r\n                                    }\r\n\r\n                                    if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.CERTIFICATION_WISH))\r\n                                    {\r\n                                        var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.CERTIFICATION_WISH);\r\n\r\n                                        if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.DROPDOWN)\r\n                                        {\r\n                                            var answer = ((Studi.JotForm.Models.DropDownField)promotionRegistrationField).Answer;\r\n\r\n                                            if (!String.IsNullOrEmpty(answer))\r\n                                            {\r\n                                                answer = answer.ToLower();\r\n                                                var examensPresentations = await this._studiDB.ExamenPresentations.AsNoTracking()\r\n                                                                                                .ToListAsync();\r\n\r\n                                                if (answer.Contains(\"oui,\"))\r\n                                                {\r\n                                                    promotionRegistration.CertificationPresentationId = examensPresentations.Where(q => q.Code == \"OUI\").Select(q => q.Id).First();\r\n                                                }\r\n                                                else\r\n                                                {\r\n                                                    if (answer.Contains(\"jamais\"))\r\n                                                    {\r\n                                                        promotionRegistration.CertificationPresentationId = examensPresentations.Where(q => q.Code == \"JAMAIS\").Select(q => q.Id).First();\r\n                                                    }\r\n                                                    else\r\n                                                    {\r\n                                                        promotionRegistration.CertificationPresentationId = examensPresentations.Where(q => q.Code == \"NON\").Select(q => q.Id).First();\r\n                                                    }\r\n\r\n                                                    //#region CREATE LMS MESSAGE (YOUCANBOOKME LINK)\r\n\r\n                                                    //var youcanbookmeLink = String.Empty;\r\n\r\n                                                    //switch (promotionRegistration.Ecole.Code)\r\n                                                    //{\r\n                                                    //    case \"COMPTALIA\":\r\n                                                    //        youcanbookmeLink = $\"https://comptaliapedago.youcanbook.me/\";\r\n                                                    //        break;\r\n                                                    //    case \"COMNICIA\":\r\n                                                    //        youcanbookmeLink = $\"https://comniciapedago.youcanbook.me/\";\r\n                                                    //        break;\r\n                                                    //    default:\r\n                                                    //        break;\r\n                                                    //}\r\n\r\n                                                    //var groupeStudiUser = await this._studiDB.Users.FirstOrDefaultAsync(u => u.Email == promotionRegistration.Ecole.EmailPedagogie);\r\n\r\n                                                    //Conversation conversation = new Conversation\r\n                                                    //{\r\n                                                    //    DateCreate = DateTime.Now,\r\n                                                    //    UserCreate = User.Identity.Name,\r\n                                                    //    ExpediteurUserId = groupeStudiUser.Id,\r\n                                                    //    ExpediteurEcoleId = promotionRegistration.EcoleId,\r\n                                                    //    Subject = \"Acc\u00e8s \u00e0 vos cours!\",\r\n                                                    //    HasLeft = true,\r\n                                                    //    Archived = true,\r\n                                                    //    DateLecture = DateTime.Now,\r\n                                                    //};\r\n\r\n                                                    //this._studiDB.Conversations.Add(conversation);\r\n\r\n                                                    //var contactPart = String.Empty;\r\n\r\n                                                    //if (!String.IsNullOrEmpty(promotionRegistration.Ecole.Telephone))\r\n                                                    //{\r\n                                                    //    var phoneFormat = String.Format(\"{0:## ## ### ###}\", promotionRegistration.Ecole.Telephone);\r\n                                                    //    contactPart = $\"{phoneFormat} (appel local)\";\r\n                                                    //}\r\n\r\n                                                    //if (!String.IsNullOrEmpty(youcanbookmeLink))\r\n                                                    //{\r\n                                                    //    contactPart = $\"Prise de rendez-vous: {youcanbookmeLink}\";\r\n                                                    //}\r\n\r\n                                                    //var messageBody = $\"Bonjour, \" +\r\n                                                    //    $\"\\n\\nVous nous avez inform\u00e9 que vous ne comptiez pas vous pr\u00e9senter \u00e0 l'examen de \\\"{promotionRegistration.Promotion.Parcour.Titre}\\\". \" +\r\n                                                    //    $\"Afin de continuez \u00e0 b\u00e9n\u00e9ficier de l'acc\u00e8s \u00e0 vos cours, veuillez contacter le service p\u00e9dagogique avant la fin de la promotion sur laquelle vous \u00eates inscrit. Votre conseiller pourra alors mettre \u00e0 jour vos acc\u00e8s dans le cadre de la garantie r\u00e9ussite.\" +\r\n                                                    //    $\"\\n{contactPart}\" +\r\n                                                    //    $\"\\n\\nLe service p\u00e9dagogique\";\r\n\r\n                                                    //var message = new Message\r\n                                                    //{\r\n                                                    //    Body = messageBody,\r\n                                                    //    Conversation = conversation,\r\n                                                    //    ExpediteurUserId = groupeStudiUser.Id,\r\n                                                    //    DateCreate = DateTime.Now,\r\n                                                    //};\r\n\r\n                                                    //this._studiDB.Messages.Add(message);\r\n\r\n                                                    //var conversationDestinataireUser = new ConversationDestinataireUser()\r\n                                                    //{\r\n                                                    //    DateCreate = DateTime.Now,\r\n                                                    //    UserCreate = User.Identity.Name,\r\n                                                    //    Conversation = conversation,\r\n                                                    //    DestinataireUserId = userId,\r\n                                                    //    HasLeft = false,\r\n                                                    //};\r\n\r\n                                                    //this._studiDB.ConversationDestinataireUsers.Add(conversationDestinataireUser);\r\n\r\n                                                    //#endregion\r\n                                                }\r\n                                            }\r\n                                            else\r\n                                            {\r\n                                                result.Error = true;\r\n                                                result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                                result.ErrorMessage = $\"The certification wish is null from the jot form submission {jotformSubmissionId}).\";\r\n                                                Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            result.Error = true;\r\n                                            result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                            result.ErrorMessage = $\"Impossible to get certification wish dropdown the jot form submission {jotformSubmissionId}).\";\r\n                                            Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else\r\n                                {\r\n                                    result.Error = true;\r\n                                    result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                    result.ErrorMessage = $\"Impossible to get examen wish or certification wish from the jot form submission {jotformSubmissionId}).\";\r\n                                    Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                }\r\n                                #endregion\r\n\r\n                                break;\r\n\r\n                            case \"EXCEPTIONAL\":\r\n\r\n                                #region PROMOTION REGISTRATION FIELD\r\n                                if (submissionContent.Fields.Any(q => q.Name == Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID))\r\n                                {\r\n                                    var promotionRegistrationField = submissionContent.Fields.FirstOrDefault(q => q.Name == Studi.JotForm.Constants.FieldNames.PROMOTION_REGISTRATION_ID);\r\n\r\n                                    if (promotionRegistrationField.Type == Studi.JotForm.Models.ControlTypeEnum.TEXT_BOX)\r\n                                    {\r\n                                        var answer = ((Studi.JotForm.Models.TextBoxField)promotionRegistrationField).Answer;\r\n\r\n                                        if (!String.IsNullOrEmpty(answer))\r\n                                        {\r\n                                            var promotionRegistrationId = Convert.ToInt32(answer);\r\n\r\n                                            promotionRegistration = await this._studiDB.InscriptionPromotions\r\n                                                                                            .Include(q => q.Ecole)\r\n                                                                                            .Include(q => q.Promotion.Parcour)\r\n                                                                                            .Where(q => q.Id == promotionRegistrationId && q.UserId == userId)\r\n                                                                                            .FirstOrDefaultAsync();\r\n\r\n                                            if (promotionRegistration == null)\r\n                                            {\r\n                                                result.Error = true;\r\n                                                result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                                result.ErrorMessage = $\"The promotion registration (id: {promotionRegistrationId}) doesn't exist from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                                Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            result.Error = true;\r\n                                            result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                            result.ErrorMessage = $\"The promotion registration is null from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                            Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        result.Error = true;\r\n                                        result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                        result.ErrorMessage = $\"Impossible to get promotion registration text box from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                        Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                    }\r\n                                }\r\n                                else\r\n                                {\r\n                                    result.Error = true;\r\n                                    result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                    result.ErrorMessage = $\"Impossible to get promotion registration from the jot form submission (id: {jotformSubmissionId}).\";\r\n                                    Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                }\r\n                                #endregion\r\n\r\n                                #region CHECK OLD SUBMISSION\r\n                                if (result.Error)\r\n                                {\r\n                                    var oldFormSubmission = await this._studiDB.FormSubmissions.AsNoTracking()\r\n                                                                        .Where(q => q.UserId == userId && q.ParcoursId == promotionRegistration.Promotion.ParcoursId\r\n                                                                            && q.PromotionId == promotionRegistration.PromotionId && q.SchoolId == promotionRegistration.EcoleId)\r\n                                                                        .FirstOrDefaultAsync();\r\n\r\n                                    if (oldFormSubmission != null)\r\n                                    {\r\n                                        //this.DeleteJotFormSubmission(jotformSubmissionId);\r\n                                        result.Error = true;\r\n                                        result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                                        result.ErrorMessage = $\"Already exist a form submission (id: {oldFormSubmission.Id} - jot form submission id {oldFormSubmission.JotformSubmissionId}).\";\r\n                                        Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                                    }\r\n\r\n                                }\r\n                                #endregion\r\n\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n                        FormSubmission formSubmission = new FormSubmission\r\n                        {\r\n                            FormId = formId,\r\n                            JotformSubmissionId = jotformSubmissionId,\r\n                            UserId = userId,\r\n                            ParcoursId = promotionRegistration.Promotion.ParcoursId,\r\n                            PromotionId = promotionRegistration.PromotionId,\r\n                            SchoolId = promotionRegistration.EcoleId,\r\n                            UserCreate = User.Identity.Name,\r\n                            DateCreate = DateTime.Now,\r\n                        };\r\n\r\n                        this._studiDB.FormSubmissions.Add(formSubmission);\r\n\r\n                        await this._studiDB.SaveChangesAsync();\r\n                    }\r\n                    else\r\n                    {\r\n                        result.Error = true;\r\n                        result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                        result.ErrorMessage = $\"Impossible to retrieve the submission (id: {jotformSubmissionId}) from jotform API.\";\r\n                        Log.Error($\"JOTFORM: Submit form - {result.ErrorMessage}.\");\r\n                    }\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    //this.DeleteJotFormSubmission(jotformSubmissionId);\r\n                    result.Error = true;\r\n                    result.HttpStatusCode = System.Net.HttpStatusCode.InternalServerError;\r\n                    result.ErrorMessage = $\"Impossible to retrieve the submission (id: {jotformSubmissionId}) from jotform API.\";\r\n                    Log.Error(e, \"Impossible to retrieve the submission (id: {0}) from jotform API.\", jotformSubmissionId);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Save a JotForm submission, retrieve and process the data to update user information and create form submissions based on the form category.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "SaveJotFormSubmission"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "Save a JotForm submission, retrieve and process the data to update user information and create form submissions based on the form category."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Save a JotForm submission, retrieve and process the data to update user information and create form submissions based on the form category.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">SaveJotFormSubmission</param>\n/// <param name=\"methodPurpose\">Save a JotForm submission, retrieve and process the data to update user information and create form submissions based on the form category.</param>\n"
        },
        {
            "name": "HasDoneForm",
            "code_start_index": 82735,
            "method_name": "HasDoneForm",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Form submit\r\n        /// </summary>\r\n        /// <param name=\"data\">Form data</param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": null,
            "indent_level": 2,
            "code": "{\r\n            var userId = User.Identity.GetUserId();\r\n            var schoolId = User.Identity.GetSchoolId();\r\n\r\n            var hasDoneForm = await _formService.HasDoneFormAsync(userId, schoolId, data.FormIdLMS, data.JotFormSubmissionId);\r\n\r\n            if (hasDoneForm.HasDone == false)\r\n            {\r\n                var saving = await this.SaveJotFormSubmission(data.FormIdLMS, data.JotFormSubmissionId);\r\n                if (saving.Error == false)\r\n                {\r\n                    hasDoneForm = await _formService.HasDoneFormAsync(userId, schoolId, data.FormIdLMS, data.JotFormSubmissionId);\r\n                }\r\n            }\r\n\r\n            return Ok(hasDoneForm);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if a user has completed a form, and if not, save the form submission and check again.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "parameters",
                        "param_name": "parameters",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "existing",
                        "param_name": "existing",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "purpose",
                        "param_name": "purpose",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if a user has completed a form, and if not, save the form submission and check again.\n/// </summary>\n/// <param name=\"no\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"parameters\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"existing\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"method\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"purpose\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n"
        }
    ],
    "properties": [],
    "name": "JotFormController"
}