{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/Studi.Api.Lms.Evaluation/Controllers/JotformController.cs",
    "index_shift_code": 592,
    "struct_type": "Class",
    "namespace_name": "Studi.Api.Lms.Evaluation.Controllers",
    "usings": [
        "Microsoft.AspNetCore.Authorization",
        "Microsoft.AspNetCore.Mvc",
        "Microsoft.Extensions.Options",
        "Studi.Api.Core.Exceptions.Guards",
        "Studi.Api.Lms.Evaluation.Application.Configuration",
        "Studi.Api.Lms.Evaluation.Application.Services",
        "Studi.Api.Lms.Evaluation.BindingModel",
        "Studi.Api.Lms.Evaluation.Domain.DTOs",
        "Studi.Api.Lms.Evaluation.Mapper",
        "Studi.Api.Lms.Evaluation.ViewModel",
        "Studi.Api.ThirdParty.Jotform.BindingModels",
        "Swashbuckle.AspNetCore.Annotations"
    ],
    "access_modifier": "public",
    "struct_name": "JotformController",
    "base_class_name": "BaseControllerWithAuthentication",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetPrefilledEvaluationGridLinkAsync",
            "code_start_index": 1965,
            "method_name": "GetPrefilledEvaluationGridLinkAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Gets a prefilled evaluation grid link URL for a copy, or null.\r\n        /// </summary>\r\n        /// <param name=\"copyId\">The copy identifier.</param>\r\n        /// <param name=\"formType\">The form type.</param>\r\n        /// <returns>A prefilled evaluation grid link for a copy.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "formType",
                    "param_name": "formType",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var authHeader = Request.Headers.Authorization.FirstOrDefault();\r\n            if (authHeader is null) throw new Exception($\"Missing authentication header in {nameof(GetPrefilledEvaluationGridLinkAsync)}\");\r\n            string? result = await _jotformService.GetPrefilledEvaluationGridLinkAsync(\r\n                copyId: copyId,\r\n                correctorUserId: UserId,\r\n                formType: formType,\r\n                lmsApiHostUri: _applicationServicesOptions.LmsApiBaseHostUri!,\r\n                lmsApiAuthHeader: authHeader,\r\n                updateCopyWithSubmittedFormEndpointRoute: SubmittedFormEndpointRoute);\r\n\r\n            return result.ToPrefilledEvaluationGridLinkViewModel();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a prefilled evaluation grid link asynchronously with authentication and specified parameters.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The unique identifier of the item to be copied."
                    },
                    {
                        "name": "formType",
                        "param_name": "formType",
                        "param_desc": "The type of form for which the prefilled evaluation grid link is generated."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a prefilled evaluation grid link asynchronously with authentication and specified parameters.\n/// </summary>\n/// <param name=\"copyId\">The unique identifier of the item to be copied.</param>\n/// <param name=\"formType\">The type of form for which the prefilled evaluation grid link is generated.</param>\n",
            "code_chunks": null
        },
        {
            "name": "SubmittedJotformAsync",
            "code_start_index": 3106,
            "method_name": "SubmittedJotformAsync",
            "existing_summary": "        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "submissionBM",
                    "param_name": "submissionBM",
                    "param_type": "SubmissionClientModel?",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            if (string.IsNullOrWhiteSpace(submissionBM?.FormId)) throw new ArgumentException($\"Error while calling '{SubmittedJotformAsync}': 'FormId' from {nameof(SubmissionClientModel)} must be provided\");\r\n            if (string.IsNullOrWhiteSpace(submissionBM?.SubmissionId)) throw new ArgumentException($\"Error while calling '{SubmittedJotformAsync}': 'SubmissionId' from {nameof(SubmissionClientModel)} must be provided\");\r\n            if (string.IsNullOrWhiteSpace(submissionBM?.Answers)) throw new ArgumentException($\"Error while calling '{SubmittedJotformAsync}': 'RawResquest' from {nameof(SubmissionClientModel)} must be provided\");\r\n\r\n            await _jotformService.SubmittedJotformAsync(copyId, submissionBM!.FormId!, submissionBM!.SubmissionId!, submissionBM!.Answers!);\r\n\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Submit a Jotform asynchronously with the specified form ID, submission ID, and answers.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The ID of the copy to be submitted."
                    },
                    {
                        "name": "submissionBM",
                        "param_name": "submissionBM",
                        "param_desc": "The model representing the submission client."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Submit a Jotform asynchronously with the specified form ID, submission ID, and answers.\n/// </summary>\n/// <param name=\"copyId\">The ID of the copy to be submitted.</param>\n/// <param name=\"submissionBM\">The model representing the submission client.</param>\n",
            "code_chunks": null
        },
        {
            "name": "IsEvaluationGridFormSubmittedForCopyAsync",
            "code_start_index": 4284,
            "method_name": "IsEvaluationGridFormSubmittedForCopyAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "copyId",
                    "param_name": "copyId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            return Ok(await _jotformService.IsEvaluationGridFormSubmittedForCopyIdAsync(copyId));\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check if an evaluation grid form has been submitted for copying.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "copyId",
                        "param_name": "copyId",
                        "param_desc": "The unique identifier of the copy for which the evaluation grid form submission needs to be checked."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check if an evaluation grid form has been submitted for copying.\n/// </summary>\n/// <param name=\"copyId\">The unique identifier of the copy for which the evaluation grid form submission needs to be checked.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GenerateBatchPdfsForProcessedSubmissionsAsync",
            "code_start_index": 4770,
            "method_name": "GenerateBatchPdfsForProcessedSubmissionsAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "generateBatchPdfsBM",
                    "param_name": "generateBatchPdfsBM",
                    "param_type": "GenerateBatchPdfsBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            Guard.Against.NullOrWhiteSpace(generateBatchPdfsBM.UserUpdate);\r\n\r\n            // Check that batch duration doesn't exceed API time before timeout\r\n            var maxDuration = TimeSpan.Parse(generateBatchPdfsBM.MaxBatchDuration);\r\n            var apiTimeOut = TimeSpan.Parse(_config[\"CommandTimeout\"]);\r\n            if (apiTimeOut < maxDuration)\r\n            {\r\n                _logger.LogWarning($\"Misconfigured call to {nameof(GenerateBatchPdfsForProcessedSubmissionsAsync)} with maxDuration set to {maxDuration} while API timeout is limited to {apiTimeOut}\");\r\n                maxDuration = apiTimeOut;\r\n            }\r\n\r\n            var results = await _jotformService.GeneratePdfForAlreadyProcessedSubmissions(\r\n                generateBatchPdfsBM.UserUpdate,\r\n                maxDuration,\r\n                generateBatchPdfsBM.MaxItemsToProcess,\r\n                generateBatchPdfsBM.ThrowOnException);\r\n            \r\n            return Ok(results); \r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Generate batch PDFs for already processed submissions asynchronously, ensuring that the batch duration does not exceed the API timeout limit.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "GenerateBatchPdfsBindingModel",
                        "param_name": "GenerateBatchPdfsBindingModel",
                        "param_desc": "The model containing the necessary data to generate batch PDFs."
                    },
                    {
                        "name": "generateBatchPdfsBM",
                        "param_name": "generateBatchPdfsBM",
                        "param_desc": "An instance of the GenerateBatchPdfsBindingModel to be used for generating batch PDFs."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Generate batch PDFs for already processed submissions asynchronously, ensuring that the batch duration does not exceed the API timeout limit.\n/// </summary>\n/// <param name=\"GenerateBatchPdfsBindingModel\">The model containing the necessary data to generate batch PDFs.</param>\n/// <param name=\"generateBatchPdfsBM\">An instance of the GenerateBatchPdfsBindingModel to be used for generating batch PDFs.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "JotformController"
}