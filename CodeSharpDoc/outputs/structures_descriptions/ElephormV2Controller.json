{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/ElephormV2Controller.cs",
    "index_shift_code": 625,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Data.Entity.Infrastructure",
        "System.Linq",
        "System.Threading.Tasks",
        "System.Web",
        "System.Web.Http",
        "System.Web.Http.Description",
        "System.Web.Http.Results",
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Models.ViewModels.Common.Elephorm",
        "LMS.Utils.Cache",
        "Newtonsoft.Json",
        "Serilog"
    ],
    "access_modifier": "public",
    "struct_name": "ElephormV2Controller",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "UpdateCategoriesAndTrainings",
            "code_start_index": 1609,
            "method_name": "UpdateCategoriesAndTrainings",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Updates the categories.\r\n        /// </summary>\r\n        /// <param name=\"categories\">The categories.</param>\r\n        /// <returns>.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "categories",
                    "param_name": "categories",
                    "param_type": "IEnumerable<Category>",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var elephormCatalogJson = JsonConvert.SerializeObject(categories, Formatting.Indented);\r\n            var elephormCatalog = await _db.JsonBulkStores.FirstOrDefaultAsync(r => r.Code == CatalogCode);\r\n            if (elephormCatalog == null)\r\n            {\r\n                elephormCatalog = new JsonBulkStore\r\n                {\r\n                    Code = CatalogCode,\r\n                    Data = elephormCatalogJson\r\n                };\r\n\r\n                _db.JsonBulkStores.Add(elephormCatalog);\r\n            }\r\n            else\r\n            {\r\n                elephormCatalog.Data = elephormCatalogJson;\r\n            }\r\n\r\n            await _db.SaveChangesAsync();\r\n\r\n            HttpRuntime.Cache.Remove(\"data.elephorm\");\r\n            HttpRuntime.Cache.Remove(\"data.elephorm.catalogwithouttrainings\");\r\n\r\n            return Ok();\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update categories and trainings data in the database.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "categories",
                        "param_name": "categories",
                        "param_desc": "IEnumerable<Category> categories - The list of categories to be updated in the database."
                    },
                    {
                        "name": "method_name",
                        "param_name": "method_name",
                        "param_desc": "string method_name - The name of the method to be executed for updating categories and trainings data in the database."
                    },
                    {
                        "name": "method_purpose",
                        "param_name": "method_purpose",
                        "param_desc": "string method_purpose - The purpose of the method 'UpdateCategoriesAndTrainings' is to update categories and trainings data in the database."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update categories and trainings data in the database.\n/// </summary>\n/// <param name=\"categories\">IEnumerable<Category> categories - The list of categories to be updated in the database.</param>\n/// <param name=\"method_name\">string method_name - The name of the method to be executed for updating categories and trainings data in the database.</param>\n/// <param name=\"method_purpose\">string method_purpose - The purpose of the method 'UpdateCategoriesAndTrainings' is to update categories and trainings data in the database.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetCategories",
            "code_start_index": 2817,
            "method_name": "GetCategories",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Get Elephorm Catalog.\r\n        /// </summary>\r\n        /// <returns>.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var checkResult = await CheckUserRights();\r\n            if (checkResult is NegotiatedContentResult<string>)\r\n            {\r\n                return checkResult;\r\n            }\r\n\r\n            try\r\n            {\r\n                var result = GetElephormCatalog(false);\r\n                return Ok(result);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Erreur lors de la lecture du catalog Elephorm\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the Elephorm catalog categories, handling user rights and errors.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "GetCategories",
                        "param_name": "GetCategories",
                        "param_desc": "Retrieve the Elephorm catalog categories, handling user rights and errors."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the Elephorm catalog categories, handling user rights and errors.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"GetCategories\">Retrieve the Elephorm catalog categories, handling user rights and errors.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetSubCategory",
            "code_start_index": 3775,
            "method_name": "GetSubCategory",
            "existing_summary": "\r\n        /// <summary>\r\n        /// The GetSubCategory.\r\n        /// </summary>\r\n        /// <param name=\"subcategoryid\">The subcategoryid<see cref=\"int\"/>.</param>\r\n        /// <returns>The <see cref=\"Task{IHttpActionResult}\"/>.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "subcategoryid",
                    "param_name": "subcategoryid",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var checkResult = await CheckUserRights();\r\n            if (checkResult is NegotiatedContentResult<string>)\r\n            {\r\n                return checkResult;\r\n            }\r\n\r\n            try\r\n            {\r\n                var catalog = GetElephormCatalog(true);\r\n                var category = catalog.FirstOrDefault(c => c.Subcategories.Any(sc => sc.Id == subcategoryid));\r\n\r\n                if (category == null)\r\n                {\r\n                    throw new Exception($\"No such subcategory id: {subcategoryid}\");\r\n                }\r\n\r\n                var subCategory = category.Subcategories.FirstOrDefault(sc1 => sc1.Id == subcategoryid);\r\n\r\n                return Ok(subCategory);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Erreur lors de la r\u00e9cuperation du catalog Elephorm\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a subcategory from the Elephorm catalog based on a specified subcategory ID, handling errors and user rights checks.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "int",
                        "param_name": "int",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "subcategoryid",
                        "param_name": "subcategoryid",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a subcategory from the Elephorm catalog based on a specified subcategory ID, handling errors and user rights checks.\n/// </summary>\n/// <param name=\"int\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"subcategoryid\">The generated description for the parameter</param>\n",
            "code_chunks": null
        },
        {
            "name": "CheckUserRights",
            "code_start_index": 4953,
            "method_name": "CheckUserRights",
            "existing_summary": "\r\n        /// <summary>\r\n        /// The CheckUserRights.\r\n        /// </summary>\r\n        /// <returns>The <see cref=\"Task{IHttpActionResult}\"/>.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n\r\n            var inscriptionService = await _db.InscriptionsServices\r\n                .Where(isvc => isvc.EcoleUserId == currentUser.SchoolUserId &&\r\n                               isvc.DateDelete == null &&\r\n                               isvc.Service.Code == \"ELEPHORM\")\r\n                .FirstOrDefaultAsync();\r\n\r\n            if (inscriptionService == null)\r\n            {\r\n                return Content(System.Net.HttpStatusCode.Forbidden, \"Vous n'avez pas d'inscription pour le service Elephorm\");\r\n            }\r\n\r\n            if (inscriptionService.DateFinService != null && DateTimeOffset.Now > inscriptionService.DateFinService)\r\n            {\r\n                return Content(System.Net.HttpStatusCode.Forbidden, \"Vous n'avez plus le droit d'utiliser le service Elephorm\");\r\n            }\r\n\r\n            try\r\n            {\r\n                await _db.SaveChangesAsync();\r\n                return Ok();\r\n            }\r\n            catch (DbUpdateException e)\r\n            {\r\n                Log.Error(e, \"Error saving the activation date for the Elephorm service\");\r\n                return InternalServerError();\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Check user rights to access the Elephorm service and handle any related errors or restrictions.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "CheckUserRights - The name of the method being called"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "Check user rights to access the Elephorm service and handle any related errors or restrictions. - The purpose of the method"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Check user rights to access the Elephorm service and handle any related errors or restrictions.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">CheckUserRights - The name of the method being called</param>\n/// <param name=\"methodPurpose\">Check user rights to access the Elephorm service and handle any related errors or restrictions. - The purpose of the method</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetElephormCatalog",
            "code_start_index": 6478,
            "method_name": "GetElephormCatalog",
            "existing_summary": "\r\n        /// <summary>\r\n        /// The GetElephormCatalog.\r\n        /// </summary>\r\n        /// <param name=\"includeTrainings\">The includeTrainings<see cref=\"bool\"/>.</param>\r\n        /// <returns>The <see cref=\"IEnumerable{Category}\"/>.</returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "includeTrainings",
                    "param_name": "includeTrainings",
                    "param_type": "bool",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var cacheKey = includeTrainings ? \"data.elephorm.catalog\" : \"data.elephorm.catalogwithouttrainings\";\r\n\r\n            return TCache<IEnumerable<Category>>\r\n                .Get(cacheKey, 3600 * 24,\r\n                    () =>\r\n                    {\r\n                        var catalog = _db.JsonBulkStores.FirstOrDefault(r => r.Code == CatalogCode);\r\n                        if (catalog == null)\r\n                        {\r\n                            throw new Exception(\"Elephorm catalog not found\");\r\n                        }\r\n\r\n                        var categories = JsonConvert.DeserializeObject<List<Category>>(catalog.Data);\r\n                        if (categories == null)\r\n                        {\r\n                            throw new Exception(\"Unable to read Elephorm catalog\");\r\n                        }\r\n\r\n                        if (!includeTrainings)\r\n                        {\r\n                            foreach (var category in categories)\r\n                            {\r\n                                foreach (var subCategory in category.Subcategories)\r\n                                {\r\n                                    subCategory.Trainings = new List<Training>();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        return categories;\r\n                    });\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the Elephorm catalog with or without trainings, caching the data for 24 hours if needed.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "includeTrainings",
                        "param_name": "includeTrainings",
                        "param_desc": "The boolean flag to indicate whether to include trainings in the Elephorm catalog retrieval process. Set to true to include trainings, and false to exclude trainings."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the Elephorm catalog with or without trainings, caching the data for 24 hours if needed.\n/// </summary>\n/// <param name=\"includeTrainings\">The boolean flag to indicate whether to include trainings in the Elephorm catalog retrieval process. Set to true to include trainings, and false to exclude trainings.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "ElephormV2Controller"
}