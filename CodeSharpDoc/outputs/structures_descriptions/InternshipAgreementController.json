{
    "file_path": "C:/Dev/squad-ai/CodeSharpDoc/inputs/code_files_generated/V2/InternshipAgreementController.cs",
    "index_shift_code": 537,
    "struct_type": "Class",
    "namespace_name": "LMS.Controllers.V2",
    "usings": [
        "LMS.Attributes",
        "LMS.Attributes.Routing",
        "LMS.Authentication",
        "LMS.Data",
        "LMS.Models.ViewModels.V2.InternshipAgreement",
        "LMS.Utils",
        "LMS.Utils.Cache",
        "Serilog",
        "System",
        "System.Collections.Generic",
        "System.Data.Entity",
        "System.Linq",
        "System.Threading.Tasks",
        "System.Web.Http",
        "LMS.Models.BindingModels.V2",
        "System.Text",
        "LMS.Services",
        "LMS.Services.Interfaces",
        "LMS.Data.Extensions"
    ],
    "access_modifier": "public",
    "struct_name": "InternshipAgreementController",
    "base_class_name": "ApiController",
    "interfaces_names": [],
    "related_structures": [],
    "methods": [
        {
            "name": "GetFrequenceGratifications",
            "code_start_index": 1218,
            "method_name": "GetFrequenceGratifications",
            "existing_summary": "\r\n        /// <summary>\r\n        /// R\u00e9cup\u00e8re les frequence de gratification\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var result = DataCache.GetFrequenceGratifications(_db)\r\n                                  .Where(t => t.DateDelete == null)\r\n                                  .Select(t => new\r\n                                  {\r\n                                      Id = t.Id,\r\n                                      Code = t.Code,\r\n                                      Libelle = t.Libelle\r\n                                  })\r\n                                  .ToList();\r\n            return Ok(result);\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve the frequency gratifications with their ID, code, and label that are not marked for deletion.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no parameters",
                        "param_name": "no parameters",
                        "param_desc": "The list of parameters is 'no parameters'."
                    },
                    {
                        "name": "GetFrequenceGratifications",
                        "param_name": "GetFrequenceGratifications",
                        "param_desc": "Existing method named 'GetFrequenceGratifications'."
                    },
                    {
                        "name": "Retrieve the frequency gratifications with their ID, code, and label that are not marked for deletion.",
                        "param_name": "Retrieve the frequency gratifications with their ID, code, and label that are not marked for deletion.",
                        "param_desc": "The purpose of the method is to retrieve the frequency gratifications with their ID, code, and label that are not marked for deletion."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve the frequency gratifications with their ID, code, and label that are not marked for deletion.\n/// </summary>\n/// <param name=\"no parameters\">The list of parameters is 'no parameters'.</param>\n/// <param name=\"GetFrequenceGratifications\">Existing method named 'GetFrequenceGratifications'.</param>\n/// <param name=\"Retrieve the frequency gratifications with their ID, code, and label that are not marked for deletion.\">The purpose of the method is to retrieve the frequency gratifications with their ID, code, and label that are not marked for deletion.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetPromotionsMissionsAsync",
            "code_start_index": 2018,
            "method_name": "GetPromotionsMissionsAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// R\u00e9cup\u00e8re les missions pour une liste de promotion\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n\r\n            var missions = await this._db.InscriptionPromotions\r\n                                     .AsNoTracking()\r\n                                     .Where(ip => ip.UserId == currentUser.Id\r\n                                                  && currentUser.SchoolIdsList.Contains(ip.EcoleId)\r\n                                                  && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                                  && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now))\r\n                                     .Select(ip => new\r\n                                     {\r\n                                         Id = ip.PromotionId,\r\n                                         Missions = ip.Promotion.ConventionStagePromotionInfo.Missions\r\n                                     })\r\n                                     .ToDictionaryAsync(q => q.Id, q => q.Missions);\r\n\r\n            return Ok(missions);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve promotions missions asynchronously for the current user from the database based on certain conditions.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "methodName",
                        "param_name": "methodName",
                        "param_desc": "The name of the method being called (GetPromotionsMissionsAsync)"
                    },
                    {
                        "name": "methodPurpose",
                        "param_name": "methodPurpose",
                        "param_desc": "The purpose of the method (Retrieve promotions missions asynchronously for the current user from the database based on certain conditions.)"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve promotions missions asynchronously for the current user from the database based on certain conditions.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"methodName\">The name of the method being called (GetPromotionsMissionsAsync)</param>\n/// <param name=\"methodPurpose\">The purpose of the method (Retrieve promotions missions asynchronously for the current user from the database based on certain conditions.)</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetListInternshipAsync",
            "code_start_index": 3348,
            "method_name": "GetListInternshipAsync",
            "existing_summary": "\r\n        /// <summary>\r\n        /// R\u00e9cup\u00e8re la liste des stages de l'\u00e9l\u00e8ve\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [],
            "indent_level": 2,
            "code": "{\r\n            var schoolUserIdList = User.Identity.GetSchoolUserIdsList();\r\n\r\n            var conventionFileCategoriesList = DataCache.GetConventionStageFileCategories(this._db);\r\n\r\n            var conventionModelCategoryId = conventionFileCategoriesList\r\n                                            .Where(q => q.Code == \"MODELE_CONVENTION\")\r\n                                            .Select(q => q.Id)\r\n                                            .FirstOrDefault();\r\n\r\n            var filledTrainingCertificateCategory = conventionFileCategoriesList\r\n                                            .FirstOrDefault(q => q.Code == \"ATTESTATION_STAGE_COMPLETEE\");\r\n\r\n            var filledEvaluationGridCategory = conventionFileCategoriesList\r\n                                            .FirstOrDefault(q => q.Code == \"GRILLE_EVALUATION_COMPLETEE\");\r\n\r\n            var conventionCategoryId = conventionFileCategoriesList\r\n                                           .Where(q => q.Code == \"CONVENTION\")\r\n                                           .Select(q => q.Id)\r\n                                           .FirstOrDefault();\r\n\r\n            var amendmentCategoryId = conventionFileCategoriesList\r\n                                           .Where(q => q.Code == \"AVENANT\")\r\n                                           .Select(q => q.Id)\r\n                                           .FirstOrDefault();\r\n\r\n            var listInternship = await _db.ConventionStageInfoes\r\n                                           .AsNoTracking()\r\n                                           .Join(_db.GetIdList(schoolUserIdList), csi => csi.EcoleUserId, tmp => tmp.Val, (csi, tmp) => csi)\r\n                                           .Where(q => q.DateDelete == null)\r\n                                           .Select(q => new InternshipGridViewModel\r\n                                           {\r\n                                               Id = q.Id,\r\n                                               Reference = q.Reference,\r\n                                               ConventionStatusId = q.ConventionStageInfoAvancements.FirstOrDefault(adv => adv.IsLast).ConventionStageStatutId,\r\n                                               StructureName = q.StructureAccueil.Nom,\r\n                                               Periods = q.PeriodeStages.Where(p => p.DateDelete == null)\r\n                                                                                        .Select(p => new PeriodGridViewgModel\r\n                                                                                        {\r\n                                                                                            StartDate = p.DateDebut,\r\n                                                                                            EndDate = p.DateFin\r\n                                                                                        }).ToList(),\r\n                                               Files = q.InscriptionPromotion\r\n                                                                     .Promotion\r\n                                                                     .ConventionStagePromotionInfo\r\n                                                                     .ConventionStagePromotionInfoFiles\r\n                                                                     .Where(cspif => cspif.DateDelete == null &&\r\n                                                                                     cspif.ConventionStageFileCategorieId != conventionModelCategoryId)\r\n                                                                     .Select(cspif => new FileGridViewModel\r\n                                                                     {\r\n                                                                         ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                         FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                         ConventionStageFileCategorieName = \"\",\r\n                                                                         DateCreate = cspif.DateCreate\r\n                                                                     })\r\n                                                                     .ToList(),\r\n                                               Agreement = q.ConventionStageInfoFiles.Where(cspif => cspif.DateDelete == null &&\r\n                                                                                                     cspif.ConventionStageFileCategorieId == conventionCategoryId)\r\n                                                                         .OrderByDescending(cspif => cspif.DateCreate)\r\n                                                                         .Select(cspif => new FileGridViewModel\r\n                                                                         {\r\n                                                                             ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                             FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                             ConventionStageFileCategorieName = \"Convention de stage\",\r\n                                                                             DateCreate = cspif.DateCreate\r\n                                                                         })\r\n                                                                         .FirstOrDefault(),\r\n                                               Amendments = q.ConventionStageInfoFiles.Where(cspif => cspif.DateDelete == null &&\r\n                                                                                                      cspif.ConventionStageFileCategorieId == amendmentCategoryId)\r\n                                                                         .Select(cspif => new FileGridViewModel\r\n                                                                         {\r\n                                                                             ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                             FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                             ConventionStageFileCategorieName = \"Avenant\",\r\n                                                                             DateCreate = cspif.DateCreate\r\n                                                                         })\r\n                                                                         .ToList(),\r\n                                               FilledEvaluationGrid = q.ConventionStageInfoFiles.Where(cspif => cspif.DateDelete == null &&\r\n                                                                               cspif.ConventionStageFileCategorieId == filledEvaluationGridCategory.Id)\r\n                                                                        .OrderByDescending(cspif => cspif.DateCreate)\r\n                                                                        .Select(cspif => new FileGridViewModel\r\n                                                                        {\r\n                                                                            ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                            FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                            ConventionStageFileCategorieName = filledEvaluationGridCategory.Libelle,\r\n                                                                            DateCreate = cspif.DateCreate\r\n                                                                        })\r\n                                                                        .FirstOrDefault(),\r\n                                               FilledTrainingCertificate = q.ConventionStageInfoFiles.Where(cspif => cspif.DateDelete == null &&\r\n                                                                           cspif.ConventionStageFileCategorieId == filledTrainingCertificateCategory.Id)\r\n                                                                        .OrderByDescending(cspif => cspif.DateCreate)\r\n                                                                        .Select(cspif => new FileGridViewModel\r\n                                                                        {\r\n                                                                           ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                           FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                           ConventionStageFileCategorieName = filledTrainingCertificateCategory.Libelle,\r\n                                                                           DateCreate = cspif.DateCreate\r\n                                                                        })\r\n                                                                        .FirstOrDefault()\r\n                                           })\r\n                                           .ToListAsync();\r\n\r\n            var conventionStatutList = DataCache.GetConventionStageStatuts(_db);\r\n\r\n            var conventionStatutDictionnary = conventionStatutList.ToDictionary(q => q.Id, q => new InternshipGridStatusViewModel\r\n            {\r\n                Id = q.Id,\r\n                Code = q.Code,\r\n                Name = q.Libelle,\r\n            });\r\n\r\n            var conventionStatutValideId = conventionStatutList.Where(q => q.Code == \"VALIDE\")\r\n                                                               .Select(q => q.Id)\r\n                                                               .FirstOrDefault();\r\n\r\n            var conventionStatutCancelId = conventionStatutList.Where(q => q.Code == \"ANNULE\")\r\n                                                               .Select(q => q.Id)\r\n                                                               .FirstOrDefault();\r\n\r\n            var conventionStatutValidSubjectToId = conventionStatutList.Where(q => q.Code == \"VALIDE_SOUS_RESERVE\")\r\n                                                                .Select(q => q.Id)\r\n                                                                .FirstOrDefault();\r\n\r\n            var conventionStageFileCategoryDictionnary = DataCache.GetConventionStageFileCategories(_db)\r\n                                                                  .Where(q => q.IsModel && q.Code != \"MODELE_CONVENTION\")\r\n                                                                  .ToDictionary(q => q.Id, q => q.Libelle);\r\n\r\n            foreach (var internship in listInternship)\r\n            {\r\n                internship.ConventionStatus = conventionStatutDictionnary[internship.ConventionStatusId];\r\n\r\n                if (internship.ConventionStatusId != conventionStatutValideId && internship.ConventionStatusId != conventionStatutValidSubjectToId)\r\n                {\r\n                    internship.Files.Clear();\r\n                }\r\n\r\n                if (internship.ConventionStatusId == conventionStatutCancelId)\r\n                {\r\n                    internship.Agreement = null;\r\n                }\r\n\r\n                foreach (var file in internship.Files)\r\n                {\r\n                    file.ConventionStageFileCategorieName = conventionStageFileCategoryDictionnary[file.ConventionStageFileCategorieId];\r\n                }\r\n            }\r\n\r\n            return Ok(listInternship);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve a list of internship information with related files and status, filter and format the data accordingly before returning the result.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "no",
                        "param_name": "no",
                        "param_desc": "no parameters"
                    },
                    {
                        "name": "method",
                        "param_name": "method",
                        "param_desc": "GetListInternshipAsync"
                    },
                    {
                        "name": "context",
                        "param_name": "context",
                        "param_desc": "Retrieve a list of internship information with related files and status, filter and format the data accordingly before returning the result."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve a list of internship information with related files and status, filter and format the data accordingly before returning the result.\n/// </summary>\n/// <param name=\"no\">no parameters</param>\n/// <param name=\"method\">GetListInternshipAsync</param>\n/// <param name=\"context\">Retrieve a list of internship information with related files and status, filter and format the data accordingly before returning the result.</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            var schoolUserIdList = User.Identity.GetSchoolUserIdsList();\r\n\r\n            var conventionFileCategoriesList = DataCache.GetConventionStageFileCategories(this._db);\r\n\r\n            var conventionModelCategoryId = conventionFileCategoriesList\r\n                                            .Where(q => q.Code == \"MODELE_CONVENTION\")\r\n                                            .Select(q => q.Id)\r\n                                            .FirstOrDefault();\r\n\r\n            var filledTrainingCertificateCategory = conventionFileCategoriesList\r\n                                            .FirstOrDefault(q => q.Code == \"ATTESTATION_STAGE_COMPLETEE\");\r\n\r\n            var filledEvaluationGridCategory = conventionFileCategoriesList\r\n                                            .FirstOrDefault(q => q.Code == \"GRILLE_EVALUATION_COMPLETEE\");\r\n\r\n            var conventionCategoryId = conventionFileCategoriesList\r\n                                           .Where(q => q.Code == \"CONVENTION\")\r\n                                           .Select(q => q.Id)\r\n                                           .FirstOrDefault();\r\n\r\n            var amendmentCategoryId = conventionFileCategoriesList\r\n                                           .Where(q => q.Code == \"AVENANT\")\r\n                                           .Select(q => q.Id)\r\n                                           .FirstOrDefault();\r\n\r\n            var listInternship = await _db.ConventionStageInfoes\r\n                                           .AsNoTracking()\r\n                                           .Join(_db.GetIdList(schoolUserIdList), csi => csi.EcoleUserId, tmp => tmp.Val, (csi, tmp) => csi)\r\n                                           .Where(q => q.DateDelete == null)\r\n                                           .Select(q => new InternshipGridViewModel\r\n                                           {\r\n                                               Id = q.Id,\r\n                                               Reference = q.Reference,\r\n                                               ConventionStatusId = q.ConventionStageInfoAvancements.FirstOrDefault(adv => adv.IsLast).ConventionStageStatutId,\r\n                                               StructureName = q.StructureAccueil.Nom,\r\n                                               Periods = q.PeriodeStages.Where(p => p.DateDelete == null)\r\n                                                                                        .Select(p => new PeriodGridViewgModel\r\n                                                                                        {\r\n                                                                                            StartDate = p.DateDebut,\r\n                                                                                            EndDate = p.DateFin\r\n                                                                                        }).ToList(),\r\n                                               Files = q.InscriptionPromotion\r\n                                                                     .Promotion\r\n                                                                     .ConventionStagePromotionInfo\r\n                                                                     .ConventionStagePromotionInfoFiles\r\n                                                                     .Where(cspif => cspif.DateDelete == null &&\r\n                                                                                     cspif.ConventionStageFileCategorieId != conventionModelCategoryId)\r\n                                                                     .Select(cspif => new FileGridViewModel\r\n                                                                     {\r\n                                                                         ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                         FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                         ConventionStageFileCategorieName = \"\",\r\n                                                                         DateCreate = cspif.DateCreate\r\n                                                                     })\r\n                                                                     .ToList(),\r\n                                               Agreement = q.ConventionStageInfoFiles.Where(cspif => cspif.DateDelete == null &&\r\n                                                                                                     cspif.ConventionStageFileCategorieId == conventionCategoryId)\r\n                                                                         .OrderByDescending(cspif => cspif.DateCreate)\r\n                                                                         .Select(cspif => new FileGridViewModel\r\n                                                                         {\r\n                                                                             ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                             FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                             ConventionStageFileCategorieName = \"Convention de stage\",\r\n                                                                             DateCreate = cspif.DateCreate\r\n                                                                         })\r\n                                                                         .FirstOrDefault(),\r\n                                               Amendments = q.ConventionStageInfoFiles.Where(cspif => cspif.DateDelete == null &&\r\n                                                                                                      cspif.ConventionStageFileCategorieId == amendmentCategoryId)\r\n                                                                         .Select(cspif => new FileGridViewModel\r\n                                                                         {\r\n                                                                             ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                             FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                             ConventionStageFileCategorieName = \"Avenant\",\r\n                                                                             DateCreate = cspif.DateCreate\r\n                                                                         })\r\n                                                                         .ToList(),\r\n                                               FilledEvaluationGrid = q.ConventionStageInfoFiles.Where(cspif => cspif.DateDelete == null &&\r\n                                                                               cspif.ConventionStageFileCategorieId == filledEvaluationGridCategory.Id)\r\n                                                                        .OrderByDescending(cspif => cspif.DateCreate)\r\n                                                                        .Select(cspif => new FileGridViewModel\r\n                                                                        {\r\n                                                                            ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                            FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                            ConventionStageFileCategorieName = filledEvaluationGridCategory.Libelle,\r\n                                                                            DateCreate = cspif.DateCreate\r\n                                                                        })",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": ".FirstOrDefault(),\r\n                                               FilledTrainingCertificate = q.ConventionStageInfoFiles.Where(cspif => cspif.DateDelete == null &&\r\n                                                                           cspif.ConventionStageFileCategorieId == filledTrainingCertificateCategory.Id)\r\n                                                                        .OrderByDescending(cspif => cspif.DateCreate)\r\n                                                                        .Select(cspif => new FileGridViewModel\r\n                                                                        {\r\n                                                                           ConventionStageFileCategorieId = cspif.ConventionStageFileCategorieId,\r\n                                                                           FileUrl = cspif.UploadedFile.FileUrl,\r\n                                                                           ConventionStageFileCategorieName = filledTrainingCertificateCategory.Libelle,\r\n                                                                           DateCreate = cspif.DateCreate\r\n                                                                        })\r\n                                                                        .FirstOrDefault()\r\n                                           })\r\n                                           .ToListAsync();\r\n\r\n            var conventionStatutList = DataCache.GetConventionStageStatuts(_db);\r\n\r\n            var conventionStatutDictionnary = conventionStatutList.ToDictionary(q => q.Id, q => new InternshipGridStatusViewModel\r\n            {\r\n                Id = q.Id,\r\n                Code = q.Code,\r\n                Name = q.Libelle,\r\n            });\r\n\r\n            var conventionStatutValideId = conventionStatutList.Where(q => q.Code == \"VALIDE\")\r\n                                                               .Select(q => q.Id)\r\n                                                               .FirstOrDefault();\r\n\r\n            var conventionStatutCancelId = conventionStatutList.Where(q => q.Code == \"ANNULE\")\r\n                                                               .Select(q => q.Id)\r\n                                                               .FirstOrDefault();\r\n\r\n            var conventionStatutValidSubjectToId = conventionStatutList.Where(q => q.Code == \"VALIDE_SOUS_RESERVE\")\r\n                                                                .Select(q => q.Id)\r\n                                                                .FirstOrDefault();\r\n\r\n            var conventionStageFileCategoryDictionnary = DataCache.GetConventionStageFileCategories(_db)\r\n                                                                  .Where(q => q.IsModel && q.Code != \"MODELE_CONVENTION\")\r\n                                                                  .ToDictionary(q => q.Id, q => q.Libelle);\r\n\r\n            foreach (var internship in listInternship)\r\n            {\r\n                internship.ConventionStatus = conventionStatutDictionnary[internship.ConventionStatusId];\r\n\r\n                if (internship.ConventionStatusId != conventionStatutValideId && internship.ConventionStatusId != conventionStatutValidSubjectToId)\r\n                {\r\n                    internship.Files.Clear();\r\n                }\r\n\r\n                if (internship.ConventionStatusId == conventionStatutCancelId)\r\n                {\r\n                    internship.Agreement = null;\r\n                }\r\n\r\n                foreach (var file in internship.Files)\r\n                {\r\n                    file.ConventionStageFileCategorieName = conventionStageFileCategoryDictionnary[file.ConventionStageFileCategorieId];\r\n                }\r\n            }\r\n\r\n            return Ok(listInternship);\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "GetInternshipDetails",
            "code_start_index": 15552,
            "method_name": "GetInternshipDetails",
            "existing_summary": "\r\n        /// <summary>\r\n        /// R\u00e9cup\u00e8re les informations du stages afin de pouvoir l'\u00e9diter\r\n        /// </summary>\r\n        /// <param name=\"internshipId\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "internshipId",
                    "param_name": "internshipId",
                    "param_type": "int",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var ecoleUserId = User.Identity.GetSchoolUserId();\r\n\r\n            var attestationCategoryId = DataCache.GetConventionStageFileCategories(_db)\r\n                                                 .Where(q => q.Code == \"ASSURANCE\")\r\n                                                 .Select(q => q.Id)\r\n                                                 .FirstOrDefault();\r\n\r\n            var query = this._db.ConventionStageInfoes.AsNoTracking()\r\n                            .Where(q => q.Id == internshipId && q.DateDelete == null && q.EcoleUserId == ecoleUserId);\r\n\r\n            var details = await query.Select(q => new InternshipBindingModel\r\n            {\r\n                Id = q.Id,\r\n                Reference = q.Reference,\r\n                PromotionId = q.InscriptionPromotion.PromotionId,\r\n                InternshipAddress = q.AdresseStructureId == null\r\n                                                                              ? null\r\n                                                                              : new AddressBindingModel\r\n                                                                              {\r\n                                                                                  City = q.AdresseStructure.Ville,\r\n                                                                                  Complement = q.AdresseStructure.Complement,\r\n                                                                                  CountryId = q.AdresseStructure.PaysId,\r\n                                                                                  WayName = q.AdresseStructure.NomVoie,\r\n                                                                                  WayNumber = q.AdresseStructure.NumeroVoie,\r\n                                                                                  WayTypeId = q.AdresseStructure.TypeVoieId.Value,\r\n                                                                                  ZipCode = q.AdresseStructure.Cp\r\n                                                                              },\r\n                User = new UserBindingModel\r\n                {\r\n                    Civility = q.EcoleUser.User.Civilite,\r\n                    BirthDate = q.EcoleUser.User.DateNaissance.Value,\r\n                    PhoneNumber = new UserPhoneNumberBindingModel\r\n                    {\r\n                        Id = q.UserPhoneNumberId,\r\n                        PhoneNumber = q.UserPhoneNumber.PhoneNumber\r\n                    },\r\n                    SsNumber = q.EcoleUser.User.NumeroSs,\r\n                    Address = new AddressBindingModel\r\n                    {\r\n                        City = q.UserAdresse.Ville,\r\n                        Complement = q.UserAdresse.Complement,\r\n                        CountryId = q.UserAdresse.PaysId,\r\n                        WayName = q.UserAdresse.NomVoie,\r\n                        WayNumber = q.UserAdresse.NumeroVoie,\r\n                        WayTypeId = q.UserAdresse.TypeVoieId.Value,\r\n                        ZipCode = q.UserAdresse.Cp\r\n                    },\r\n                },\r\n                Organization = new OrganizationBindingModel\r\n                {\r\n                    StructureName = q.StructureAccueil.Nom,\r\n                    Service = q.StructureService,\r\n                    SIRET = q.StructureAccueil.Siret ?? string.Empty,\r\n                    RepresentativeCivility = q.StructureAccueil.RepresentantCivilite,\r\n                    RepresentativeLastName = q.StructureAccueil.RepresentantNom,\r\n                    RepresentativeFirstName = q.StructureAccueil.RepresentantPrenom,\r\n                    RepresentativeOffice = q.StructureAccueil.RepresentantFonction,\r\n                    RepresentativeEmail = q.StructureAccueil.RepresentantMail,\r\n                    RepresentativePhoneNumber = q.StructureAccueil.RepresentantPhone,\r\n                    Address = new AddressBindingModel\r\n                    {\r\n                        City = q.StructureAccueil.Address.Ville,\r\n                        Complement = q.StructureAccueil.Address.Complement,\r\n                        CountryId = q.StructureAccueil.Address.PaysId,\r\n                        WayName = q.StructureAccueil.Address.NomVoie,\r\n                        WayNumber = q.StructureAccueil.Address.NumeroVoie,\r\n                        WayTypeId = q.StructureAccueil.Address.TypeVoieId.Value,\r\n                        ZipCode = q.StructureAccueil.Address.Cp\r\n                    },\r\n                },\r\n                Tutor = new TutorBindingModel\r\n                {\r\n                    Civility = q.TuteurStage.Civilite,\r\n                    LastName = q.TuteurStage.Nom,\r\n                    FirstName = q.TuteurStage.Prenom,\r\n                    Office = q.TuteurStage.Fonction,\r\n                    Email = q.TuteurStage.Mail,\r\n                    PhoneNumber = q.TuteurStage.Phone,\r\n                },\r\n\r\n                Periods = q.PeriodeStages.Where(p => p.DateDelete == null)\r\n                                                                                .Select(p => new PeriodBindingModel\r\n                                                                                {\r\n                                                                                    Id = p.Id,\r\n                                                                                    StartDate = p.DateDebut,\r\n                                                                                    EndDate = p.DateFin,\r\n                                                                                    DaysSchedules = p.JourHoraireStages.Where(j => j.DateDelete == null)\r\n                                                                                                                 .Select(j => new DayScheduleBindingModel\r\n                                                                                                                 {\r\n                                                                                                                     Id = j.Id,\r\n                                                                                                                     StartHour = j.HeureDebut,\r\n                                                                                                                     EndHour = j.HeureFin,\r\n                                                                                                                     TimeOfDayId = j.MomentJourneeId,\r\n                                                                                                                     WeekDayId = j.JourSemaineId\r\n                                                                                                                 }).ToList()\r\n                                                                                }).ToList(),\r\n                Holidays = q.JoursFeriesTravailles.Select(jft => jft.JourFerieId).ToList(),\r\n                ScheduleSpecificity = q.SpecificiteHoraire,\r\n                GratificationAmount = q.GratificationMontant.Value,\r\n                GratificationFrequenceId = q.FrequenceGratificationId.Value,\r\n                SocialProtection = q.StructureAccueilProtectionMaladie.Value,\r\n                StageObjective = q.Objectif,\r\n                SalariedAdvantage = q.AutreAvantageSalaries,\r\n                AgentAdvantage = q.AutreAvantageAgents,\r\n                Leave = q.ModaliteConges,\r\n                Attestation = q.ConventionStageInfoFiles.Where(f => f.DateDelete == null && f.ConventionStageFileCategorieId == attestationCategoryId)\r\n                                                                     .Select(f => new FileBindingModel\r\n                                                                     {\r\n                                                                         StartValidityDate = f.DateValiditeDebut.Value,\r\n                                                                         EndValidityDate = f.DateValiditeFin.Value,\r\n                                                                         FileName = f.UploadedFile.FileName,\r\n                                                                         FileUrl = f.UploadedFile.FileUrl\r\n                                                                     })\r\n                                                                     .FirstOrDefault()\r\n            })\r\n                                     .FirstOrDefaultAsync();\r\n\r\n            if (details == null)\r\n            {\r\n                Log.Error(\"Bad request user(ecoleUserId : {0}) don't have access to internship (id : {1})\", ecoleUserId, internshipId);\r\n                return BadRequest(\"Vous n'avez pas acc\u00e8s \u00e0 ce stage\");\r\n            }\r\n\r\n\r\n            return Ok(details);\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve internship details for a specified user, including user information, organization details, tutor information, internship periods, holidays, schedule specifics, gratification details, social protection, stage objectives, advantages, leave modalities, and attestation file. If user doesn't have access to the internship, return a bad request.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "int",
                        "param_name": "int",
                        "param_desc": "The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)"
                    },
                    {
                        "name": "internshipId",
                        "param_name": "internshipId",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "GetInternshipDetails",
                        "param_name": "GetInternshipDetails",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "Retrieve",
                        "param_name": "Retrieve",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "internship",
                        "param_name": "internship",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "details",
                        "param_name": "details",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "specified",
                        "param_name": "specified",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "user",
                        "param_name": "user",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "including",
                        "param_name": "including",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "organization",
                        "param_name": "organization",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "tutor",
                        "param_name": "tutor",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "information",
                        "param_name": "information",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "periods",
                        "param_name": "periods",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "holidays",
                        "param_name": "holidays",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "schedule",
                        "param_name": "schedule",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "specifics",
                        "param_name": "specifics",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "gratification",
                        "param_name": "gratification",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "social",
                        "param_name": "social",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "protection",
                        "param_name": "protection",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "stage",
                        "param_name": "stage",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "objectives",
                        "param_name": "objectives",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "advantages",
                        "param_name": "advantages",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "leave",
                        "param_name": "leave",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "modalities",
                        "param_name": "modalities",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "attestation",
                        "param_name": "attestation",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "file",
                        "param_name": "file",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "If",
                        "param_name": "If",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "bad",
                        "param_name": "bad",
                        "param_desc": "The generated description for the parameter"
                    },
                    {
                        "name": "request",
                        "param_name": "request",
                        "param_desc": "The generated description for the parameter"
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve internship details for a specified user, including user information, organization details, tutor information, internship periods, holidays, schedule specifics, gratification details, social protection, stage objectives, advantages, leave modalities, and attestation file. If user doesn't have access to the internship, return a bad request.\n/// </summary>\n/// <param name=\"int\">The name of the parameter (it's always a single word. Also exclude the type of the parameter which may come firstly)</param>\n/// <param name=\"internshipId\">The generated description for the parameter</param>\n/// <param name=\"GetInternshipDetails\">The generated description for the parameter</param>\n/// <param name=\"Retrieve\">The generated description for the parameter</param>\n/// <param name=\"internship\">The generated description for the parameter</param>\n/// <param name=\"details\">The generated description for the parameter</param>\n/// <param name=\"specified\">The generated description for the parameter</param>\n/// <param name=\"user\">The generated description for the parameter</param>\n/// <param name=\"including\">The generated description for the parameter</param>\n/// <param name=\"organization\">The generated description for the parameter</param>\n/// <param name=\"tutor\">The generated description for the parameter</param>\n/// <param name=\"information\">The generated description for the parameter</param>\n/// <param name=\"periods\">The generated description for the parameter</param>\n/// <param name=\"holidays\">The generated description for the parameter</param>\n/// <param name=\"schedule\">The generated description for the parameter</param>\n/// <param name=\"specifics\">The generated description for the parameter</param>\n/// <param name=\"gratification\">The generated description for the parameter</param>\n/// <param name=\"social\">The generated description for the parameter</param>\n/// <param name=\"protection\">The generated description for the parameter</param>\n/// <param name=\"stage\">The generated description for the parameter</param>\n/// <param name=\"objectives\">The generated description for the parameter</param>\n/// <param name=\"advantages\">The generated description for the parameter</param>\n/// <param name=\"leave\">The generated description for the parameter</param>\n/// <param name=\"modalities\">The generated description for the parameter</param>\n/// <param name=\"attestation\">The generated description for the parameter</param>\n/// <param name=\"file\">The generated description for the parameter</param>\n/// <param name=\"If\">The generated description for the parameter</param>\n/// <param name=\"bad\">The generated description for the parameter</param>\n/// <param name=\"request\">The generated description for the parameter</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            var ecoleUserId = User.Identity.GetSchoolUserId();\r\n\r\n            var attestationCategoryId = DataCache.GetConventionStageFileCategories(_db)\r\n                                                 .Where(q => q.Code == \"ASSURANCE\")\r\n                                                 .Select(q => q.Id)\r\n                                                 .FirstOrDefault();\r\n\r\n            var query = this._db.ConventionStageInfoes.AsNoTracking()\r\n                            .Where(q => q.Id == internshipId && q.DateDelete == null && q.EcoleUserId == ecoleUserId);\r\n\r\n            var details = await query.Select(q => new InternshipBindingModel\r\n            {\r\n                Id = q.Id,\r\n                Reference = q.Reference,\r\n                PromotionId = q.InscriptionPromotion.PromotionId,\r\n                InternshipAddress = q.AdresseStructureId == null\r\n                                                                              ? null\r\n                                                                              : new AddressBindingModel\r\n                                                                              {\r\n                                                                                  City = q.AdresseStructure.Ville,\r\n                                                                                  Complement = q.AdresseStructure.Complement,\r\n                                                                                  CountryId = q.AdresseStructure.PaysId,\r\n                                                                                  WayName = q.AdresseStructure.NomVoie,\r\n                                                                                  WayNumber = q.AdresseStructure.NumeroVoie,\r\n                                                                                  WayTypeId = q.AdresseStructure.TypeVoieId.Value,\r\n                                                                                  ZipCode = q.AdresseStructure.Cp\r\n                                                                              },\r\n                User = new UserBindingModel\r\n                {\r\n                    Civility = q.EcoleUser.User.Civilite,\r\n                    BirthDate = q.EcoleUser.User.DateNaissance.Value,\r\n                    PhoneNumber = new UserPhoneNumberBindingModel\r\n                    {\r\n                        Id = q.UserPhoneNumberId,\r\n                        PhoneNumber = q.UserPhoneNumber.PhoneNumber\r\n                    },\r\n                    SsNumber = q.EcoleUser.User.NumeroSs,\r\n                    Address = new AddressBindingModel\r\n                    {\r\n                        City = q.UserAdresse.Ville,\r\n                        Complement = q.UserAdresse.Complement,\r\n                        CountryId = q.UserAdresse.PaysId,\r\n                        WayName = q.UserAdresse.NomVoie,\r\n                        WayNumber = q.UserAdresse.NumeroVoie,\r\n                        WayTypeId = q.UserAdresse.TypeVoieId.Value,\r\n                        ZipCode = q.UserAdresse.Cp\r\n                    },\r\n                },\r\n                Organization = new OrganizationBindingModel\r\n                {\r\n                    StructureName = q.StructureAccueil.Nom,\r\n                    Service = q.StructureService,\r\n                    SIRET = q.StructureAccueil.Siret ?? string.Empty,\r\n                    RepresentativeCivility = q.StructureAccueil.RepresentantCivilite,\r\n                    RepresentativeLastName = q.StructureAccueil.RepresentantNom,\r\n                    RepresentativeFirstName = q.StructureAccueil.RepresentantPrenom,\r\n                    RepresentativeOffice = q.StructureAccueil.RepresentantFonction,\r\n                    RepresentativeEmail = q.StructureAccueil.RepresentantMail,\r\n                    RepresentativePhoneNumber = q.StructureAccueil.RepresentantPhone,\r\n                    Address = new AddressBindingModel\r\n                    {\r\n                        City = q.StructureAccueil.Address.Ville,\r\n                        Complement = q.StructureAccueil.Address.Complement,\r\n                        CountryId = q.StructureAccueil.Address.PaysId,\r\n                        WayName = q.StructureAccueil.Address.NomVoie,\r\n                        WayNumber = q.StructureAccueil.Address.NumeroVoie,\r\n                        WayTypeId = q.StructureAccueil.Address.TypeVoieId.Value,\r\n                        ZipCode = q.StructureAccueil.Address.Cp\r\n                    },\r\n                },\r\n                Tutor = new TutorBindingModel\r\n                {\r\n                    Civility = q.TuteurStage.Civilite,\r\n                    LastName = q.TuteurStage.Nom,\r\n                    FirstName = q.TuteurStage.Prenom,\r\n                    Office = q.TuteurStage.Fonction,\r\n                    Email = q.TuteurStage.Mail,\r\n                    PhoneNumber = q.TuteurStage.Phone,\r\n                },\r\n\r\n                Periods = q.PeriodeStages.Where(p => p.DateDelete == null)\r\n                                                                                .Select(p => new PeriodBindingModel\r\n                                                                                {\r\n                                                                                    Id = p.Id,\r\n                                                                                    StartDate = p.DateDebut,\r\n                                                                                    EndDate = p.DateFin,\r\n                                                                                    DaysSchedules = p.JourHoraireStages.Where(j => j.DateDelete == null)\r\n                                                                                                                 .Select(j => new DayScheduleBindingModel\r\n                                                                                                                 {\r\n                                                                                                                     Id = j.Id,\r\n                                                                                                                     StartHour = j.HeureDebut,\r\n                                                                                                                     EndHour = j.HeureFin,\r\n                                                                                                                     TimeOfDayId = j.MomentJourneeId,\r\n                                                                                                                     WeekDayId = j.JourSemaineId\r\n                                                                                                                 }).ToList()\r\n                                                                                }).ToList(),\r\n                Holidays = q.JoursFeriesTravailles.Select(jft => jft.JourFerieId).ToList(),\r\n                ScheduleSpecificity = q.SpecificiteHoraire,\r\n                GratificationAmount = q.GratificationMontant.Value,\r\n                GratificationFrequenceId = q.FrequenceGratificationId.Value,\r\n                SocialProtection = q.StructureAccueilProtectionMaladie.Value,\r\n                StageObjective = q.Objectif,\r\n                SalariedAdvantage = q.AutreAvantageSalaries,\r\n                AgentAdvantage = q.AutreAvantageAgents,\r\n                Leave = q.ModaliteConges,\r\n                Attestation = q.ConventionStageInfoFiles.Where(f => f.DateDelete == null && f.ConventionStageFileCategorieId == attestationCategoryId)\r\n                                                                     .Select(f => new FileBindingModel\r\n                                                                     {\r\n                                                                         StartValidityDate = f.DateValiditeDebut.Value,",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": "EndValidityDate = f.DateValiditeFin.Value,\r\n                                                                         FileName = f.UploadedFile.FileName,\r\n                                                                         FileUrl = f.UploadedFile.FileUrl\r\n                                                                     })\r\n                                                                     .FirstOrDefault()\r\n            })\r\n                                     .FirstOrDefaultAsync();\r\n\r\n            if (details == null)\r\n            {\r\n                Log.Error(\"Bad request user(ecoleUserId : {0}) don't have access to internship (id : {1})\", ecoleUserId, internshipId);\r\n                return BadRequest(\"Vous n'avez pas acc\u00e8s \u00e0 ce stage\");\r\n            }\r\n\r\n\r\n            return Ok(details);\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "CreateInternship",
            "code_start_index": 24697,
            "method_name": "CreateInternship",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Fonction pour cr\u00e9er un internship\r\n        /// </summary>\r\n        /// <param name=\"internshipBm\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "internshipBm",
                    "param_name": "internshipBm",
                    "param_type": "InternshipBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n\r\n            int inscriptionPromotionId = await this._db.InscriptionPromotions.AsNoTracking()\r\n                                                   .Where(ip => ip.UserId == currentUser.Id\r\n                                                                && ip.EcoleId == currentUser.SchoolId\r\n                                                                && ip.PromotionId == internshipBm.PromotionId\r\n                                                                && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                                                && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now))\r\n                                                   .Select(q => q.Id)\r\n                                                   .FirstOrDefaultAsync();\r\n\r\n            if (inscriptionPromotionId == 0)\r\n            {\r\n                Log.Error(\"Bad request user(id : {0}) don't have access to promotion (id : {1})\", currentUser.Id, internshipBm.PromotionId);\r\n                return BadRequest(\"Vous n'\u00eates pas inscrit \u00e0 cette promotion\");\r\n            }\r\n\r\n            var statusId = DataCache.GetConventionStageStatuts(this._db).Where(q => q.Code == \"A_VALIDER\")\r\n                                    .Select(q => q.Id)\r\n                                    .First();\r\n\r\n            var internshipStageInfo = new ConventionStageInfo()\r\n            {\r\n                DateCreate = DateTime.Now,\r\n                UserCreate = currentUser.Email,\r\n                Reference = Guid.NewGuid().ToString().Substring(0, 24),\r\n                EcoleUserId = currentUser.SchoolUserId,\r\n                InscriptionPromotionId = inscriptionPromotionId,\r\n            };\r\n\r\n            internshipStageInfo.ConventionStageInfoAvancements.Add(new ConventionStageInfoAvancement\r\n            {\r\n                DateCreate = DateTime.Now,\r\n                UserCreate = currentUser.Email,\r\n                ConventionStageStatutId = statusId,\r\n                IsLast = true,\r\n            });\r\n\r\n            var user = await this._db.Users\r\n                                 .Include(q => q.UserPhoneNumbers)\r\n                                 .Where(q => q.Id == currentUser.Id)\r\n                                 .FirstOrDefaultAsync();\r\n\r\n            // User info\r\n            user.DateUpdate = DateTime.Now;\r\n            user.UserUpdate = currentUser.Email;\r\n            user.Civilite = internshipBm.User.Civility;\r\n            user.DateNaissance = internshipBm.User.BirthDate;\r\n\r\n            if (!string.IsNullOrEmpty(internshipBm.User.SsNumber))\r\n            {\r\n                if (PersonalInfoRegex.IsCheckSsNumberValid(internshipBm.User.SsNumber))\r\n                {\r\n                    user.NumeroSs = internshipBm.User.SsNumber;\r\n                }\r\n                else\r\n                {\r\n                    Log.Warning(\"Bad request user(id : {0}), the social security number is invalid\", user.Id);\r\n                    return BadRequest(\"Le num\u00e9ro de s\u00e9curit\u00e9 sociale n'est pas valide\");\r\n                }\r\n            }\r\n\r\n            if (internshipBm.User.Address.Id == null)\r\n            {\r\n                internshipStageInfo.UserAdresse = this.CreateAddress(internshipBm.User.Address, currentUser.Email);\r\n            }\r\n            else\r\n            {\r\n                if (user.AdresseId != internshipBm.User.Address.Id.Value\r\n                    && user.AdresseFacturationId != internshipBm.User.Address.Id.Value\r\n                    && user.AdresseLivraisonId != internshipBm.User.Address.Id.Value)\r\n                {\r\n                    Log.Error(\"Bad request the user address id is invalid\");\r\n                    return BadRequest(\"The user address id is invalid\");\r\n                }\r\n\r\n                internshipStageInfo.UserAdresseId = internshipBm.User.Address.Id.Value;\r\n            }\r\n\r\n            var numeroTelByDefault = user.UserPhoneNumbers.Where(q => q.IsDefault).Select(q => q.PhoneNumber).FirstOrDefault();\r\n        \r\n            if (internshipBm.User.PhoneNumber.Id == null || internshipBm.User.PhoneNumber.PhoneNumber != numeroTelByDefault)\r\n            {\r\n                var reformatePhone = PersonalInfoRegex.ReformatePhone(internshipBm.User.PhoneNumber.PhoneNumber);\r\n\r\n                if (String.IsNullOrEmpty(reformatePhone))\r\n                {\r\n                    Log.Error(\"Bad request the phone number is invalid\");\r\n                    return BadRequest(\"The phone number is invalid\");\r\n                }\r\n\r\n                var phoneTypeId = DataCache.GetPhoneNumberTypes(this._db).Where(q => q.Code == \"AUTRE\")\r\n                                           .Select(q => q.Id)\r\n                                           .FirstOrDefault();\r\n\r\n                var userPhoneNumber = new UserPhoneNumber\r\n                {\r\n                    DateCreate = DateTime.Now,\r\n                    UserCreate = currentUser.Email,\r\n                    PhoneNumber = reformatePhone,\r\n                    PhoneNumberTypeId = phoneTypeId,\r\n                    IsDefault = false,\r\n                };\r\n\r\n                if (internshipBm.User.PhoneNumber.Id == null)\r\n                {\r\n                    userPhoneNumber.IsDefault = true;\r\n                }\r\n                user.UserPhoneNumbers.Add(userPhoneNumber);\r\n                internshipStageInfo.UserPhoneNumber = userPhoneNumber;\r\n            }\r\n            else\r\n            {\r\n                if (!user.UserPhoneNumbers.Any(q => q.IsDefault && q.Id == internshipBm.User.PhoneNumber.Id))\r\n                {\r\n                    Log.Error(\"Bad request the user phone number id is invalid\");\r\n                    return BadRequest(\"The user phone number id is invalid\");\r\n                }\r\n\r\n                internshipStageInfo.UserPhoneNumberId = internshipBm.User.PhoneNumber.Id.Value;\r\n            }\r\n\r\n            if (internshipBm.Attestation == null)\r\n            {\r\n                Log.Error(\"Bad request the attestation is required\");\r\n                return BadRequest(\"The attestation is required\");\r\n            }\r\n\r\n\r\n            if (!internshipBm.Attestation.FileGuid.HasValue)\r\n            {\r\n                Log.Error(\"Bad request the attestation guid is required\");\r\n                return BadRequest(\"The attestation guid is required\");\r\n            }\r\n\r\n            var uploadedFileId = await this._db.UploadedFiles.AsNoTracking()\r\n                                           .Where(q => q.FileGuid == internshipBm.Attestation.FileGuid)\r\n                                           .Select(q => q.Id).FirstOrDefaultAsync();\r\n\r\n            if (uploadedFileId == 0)\r\n            {\r\n                Log.Error(\"Bad request the attestation guid was not found\");\r\n                return BadRequest(\"The attestation guid was not found\");\r\n            }\r\n\r\n            var attestationCategoryId = DataCache.GetConventionStageFileCategories(_db).Where(q => q.Code == \"ASSURANCE\")\r\n                                                 .Select(q => q.Id)\r\n                                                 .FirstOrDefault();\r\n\r\n            var attestationFile = new ConventionStageInfoFile\r\n            {\r\n                DateCreate = DateTime.Now,\r\n                UserCreate = currentUser.Email,\r\n                DateValiditeDebut = internshipBm.Attestation.StartValidityDate,\r\n                DateValiditeFin = internshipBm.Attestation.EndValidityDate,\r\n                ConventionStageFileCategorieId = attestationCategoryId,\r\n            };\r\n\r\n            attestationFile.UploadedFileId = uploadedFileId;\r\n\r\n            //ORGANISME\r\n            internshipStageInfo.ConventionStageInfoFiles.Add(attestationFile);\r\n\r\n            string representativePhoneNumberFormated = PersonalInfoRegex.ReformatePhone(internshipBm.Organization.RepresentativePhoneNumber);\r\n            if (String.IsNullOrEmpty(representativePhoneNumberFormated))\r\n            {\r\n                Log.Error(\"Bad request the representative phone number is invalid\");\r\n                return BadRequest(\"The representative phone number is invalid\");\r\n            }\r\n\r\n            internshipStageInfo.StructureAccueil = new StructureAccueil\r\n            {\r\n                UserCreate = currentUser.Email,\r\n                DateCreate = DateTime.Now,\r\n                RepresentantCivilite = internshipBm.Organization.RepresentativeCivility,\r\n                RepresentantNom = internshipBm.Organization.RepresentativeLastName,\r\n                RepresentantPrenom = internshipBm.Organization.RepresentativeFirstName,\r\n                RepresentantMail = internshipBm.Organization.RepresentativeEmail.ToLower(),\r\n                RepresentantPhone = representativePhoneNumberFormated,\r\n                RepresentantFonction = internshipBm.Organization.RepresentativeOffice,\r\n                Nom = internshipBm.Organization.StructureName,\r\n                Siret = internshipBm.Organization.SIRET,\r\n                Address = this.CreateAddress(internshipBm.Organization.Address, currentUser.Email),\r\n            };\r\n\r\n            internshipStageInfo.StructureService = internshipBm.Organization.Service;\r\n            if (internshipBm.InternshipAddress != null)\r\n            {\r\n                internshipStageInfo.AdresseStructure = this.CreateAddress(internshipBm.InternshipAddress, currentUser.Email);\r\n            }\r\n\r\n            string tutorPhoneNumberFormated = PersonalInfoRegex.ReformatePhone(internshipBm.Tutor.PhoneNumber);\r\n            if (String.IsNullOrEmpty(tutorPhoneNumberFormated))\r\n            {\r\n                Log.Error(\"Bad request the tutor phone number is invalid\");\r\n                return BadRequest(\"The tutor phone number is invalid\");\r\n            }\r\n\r\n            //TUTOR\r\n            internshipStageInfo.TuteurStage = new TuteurStage\r\n            {\r\n                UserCreate = currentUser.Email,\r\n                DateCreate = DateTime.Now,\r\n                Civilite = internshipBm.Tutor.Civility,\r\n                Nom = internshipBm.Tutor.LastName,\r\n                Prenom = internshipBm.Tutor.FirstName,\r\n                Mail = internshipBm.Tutor.Email.ToLower(),\r\n                Phone = tutorPhoneNumberFormated,\r\n                Fonction = internshipBm.Tutor.Office,\r\n            };\r\n\r\n            var momentJourneesList = DataCache.GetMomentJournee(_db);\r\n            var range1Id = momentJourneesList.Where(q => q.Code == \"PLAGE1\").Select(q => q.Id).FirstOrDefault();\r\n            var range2Id = momentJourneesList.Where(q => q.Code == \"PLAGE2\").Select(q => q.Id).FirstOrDefault();\r\n            var range3Id = momentJourneesList.Where(q => q.Code == \"PLAGE3\").Select(q => q.Id).FirstOrDefault();\r\n            var range4Id = momentJourneesList.Where(q => q.Code == \"PLAGE4\").Select(q => q.Id).FirstOrDefault();\r\n\r\n            List<DateTime> holidays;\r\n\r\n            try\r\n            {\r\n\r\n                var holidaysIds = await this.UpdateHolidaysAsync(internshipBm, internshipStageInfo);\r\n                holidays = await this._db.JoursFeries.Where(q => holidaysIds.Contains(q.Id)).Select(q => q.Jour).ToListAsync();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to update holidays\");\r\n                return InternalServerError(e);\r\n            }\r\n\r\n            //Shedule\r\n            foreach (var period in internshipBm.Periods)\r\n            {\r\n                var periodeStage = new PeriodeStage()\r\n                {\r\n                    UserCreate = currentUser.Email,\r\n                    DateCreate = DateTime.Now,\r\n                    DateDebut = period.StartDate.Date,\r\n                    DateFin = period.EndDate.Date,\r\n                    NbMinutes = this.GetPeriodMinutes(period, holidays),\r\n                    JourHoraireStages = new List<JourHoraireStage>()\r\n                };\r\n\r\n                foreach (var dayShedule in period.DaysSchedules.OrderBy(q => q.WeekDayId)\r\n                                                 .ThenBy(q => q.StartHour))\r\n                {\r\n                    int countRange = periodeStage.JourHoraireStages.Count(q => q.JourSemaineId == dayShedule.WeekDayId);\r\n\r\n                    periodeStage.JourHoraireStages.Add(new JourHoraireStage()\r\n                    {\r\n                        UserCreate = currentUser.Email,\r\n                        DateCreate = DateTime.Now,\r\n                        HeureDebut = dayShedule.StartHour,\r\n                        HeureFin = dayShedule.EndHour,\r\n                        JourSemaineId = dayShedule.WeekDayId,\r\n                        MomentJourneeId = countRange == 0 ? range1Id : (countRange == 1 ? range2Id : (countRange == 2 ? range3Id : range4Id)),\r\n                    });\r\n                }\r\n\r\n                internshipStageInfo.PeriodeStages.Add(periodeStage);\r\n            }\r\n\r\n            //Other info\r\n            internshipStageInfo.SpecificiteHoraire = internshipBm.ScheduleSpecificity;\r\n            internshipStageInfo.Objectif = internshipBm.StageObjective;\r\n            internshipStageInfo.GratificationMontant = internshipBm.GratificationAmount;\r\n            internshipStageInfo.FrequenceGratificationId = internshipBm.GratificationFrequenceId;\r\n            internshipStageInfo.AutreAvantageSalaries = internshipBm.SalariedAdvantage;\r\n            internshipStageInfo.AutreAvantageAgents = internshipBm.AgentAdvantage;\r\n            internshipStageInfo.StructureAccueilProtectionMaladie = internshipBm.SocialProtection;\r\n            internshipStageInfo.ModaliteConges = internshipBm.Leave;\r\n\r\n            this._db.ConventionStageInfoes.Add(internshipStageInfo);\r\n\r\n            try\r\n            {\r\n                await this._db.SaveChangesAsync();\r\n\r\n                const string chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n                Random random = new Random();\r\n                var referenceKey = new string(Enumerable.Repeat(chars, 3).Select(s => s[random.Next(s.Length)]).ToArray());\r\n                internshipStageInfo.Reference = $\"{referenceKey}{internshipStageInfo.Id}\";\r\n\r\n                try\r\n                {\r\n                    await this._db.SaveChangesAsync();\r\n                    return Ok(internshipStageInfo.Reference);\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Log.Error(e, \"Unable to update reference\");\r\n                    return InternalServerError(e);\r\n                }\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to create convention stage info in database\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create an internship stage information with various details and validations, including user information, attestation, organization, tutor, schedule, and other specificities, and save it in the database.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "InternshipBindingModel",
                        "param_name": "InternshipBindingModel",
                        "param_desc": "The model containing the necessary information for creating an internship, including user information, attestation, organization, tutor, schedule, and other specific details."
                    },
                    {
                        "name": "internshipBm",
                        "param_name": "internshipBm",
                        "param_desc": "The specific instance of the InternshipBindingModel that represents the details of the internship to be created."
                    },
                    {
                        "name": "CreateInternship",
                        "param_name": "CreateInternship",
                        "param_desc": "The method responsible for creating an internship stage information with various details and validations, including user information, attestation, organization, tutor, schedule, and other specificities, and saving it in the database."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create an internship stage information with various details and validations, including user information, attestation, organization, tutor, schedule, and other specificities, and save it in the database.\n/// </summary>\n/// <param name=\"InternshipBindingModel\">The model containing the necessary information for creating an internship, including user information, attestation, organization, tutor, schedule, and other specific details.</param>\n/// <param name=\"internshipBm\">The specific instance of the InternshipBindingModel that represents the details of the internship to be created.</param>\n/// <param name=\"CreateInternship\">The method responsible for creating an internship stage information with various details and validations, including user information, attestation, organization, tutor, schedule, and other specificities, and saving it in the database.</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            var currentUser = User.Identity.GetUser();\r\n\r\n            int inscriptionPromotionId = await this._db.InscriptionPromotions.AsNoTracking()\r\n                                                   .Where(ip => ip.UserId == currentUser.Id\r\n                                                                && ip.EcoleId == currentUser.SchoolId\r\n                                                                && ip.PromotionId == internshipBm.PromotionId\r\n                                                                && (ip.DateDelete == null || ip.DateDelete > DateTime.Now)\r\n                                                                && ((ip.DateFinAcces == null && ip.Promotion.DateFinPromo > DateTime.Now) || ip.DateFinAcces > DateTime.Now))\r\n                                                   .Select(q => q.Id)\r\n                                                   .FirstOrDefaultAsync();\r\n\r\n            if (inscriptionPromotionId == 0)\r\n            {\r\n                Log.Error(\"Bad request user(id : {0}) don't have access to promotion (id : {1})\", currentUser.Id, internshipBm.PromotionId);\r\n                return BadRequest(\"Vous n'\u00eates pas inscrit \u00e0 cette promotion\");\r\n            }\r\n\r\n            var statusId = DataCache.GetConventionStageStatuts(this._db).Where(q => q.Code == \"A_VALIDER\")\r\n                                    .Select(q => q.Id)\r\n                                    .First();\r\n\r\n            var internshipStageInfo = new ConventionStageInfo()\r\n            {\r\n                DateCreate = DateTime.Now,\r\n                UserCreate = currentUser.Email,\r\n                Reference = Guid.NewGuid().ToString().Substring(0, 24),\r\n                EcoleUserId = currentUser.SchoolUserId,\r\n                InscriptionPromotionId = inscriptionPromotionId,\r\n            };\r\n\r\n            internshipStageInfo.ConventionStageInfoAvancements.Add(new ConventionStageInfoAvancement\r\n            {\r\n                DateCreate = DateTime.Now,\r\n                UserCreate = currentUser.Email,\r\n                ConventionStageStatutId = statusId,\r\n                IsLast = true,\r\n            });\r\n\r\n            var user = await this._db.Users\r\n                                 .Include(q => q.UserPhoneNumbers)\r\n                                 .Where(q => q.Id == currentUser.Id)\r\n                                 .FirstOrDefaultAsync();\r\n\r\n            // User info\r\n            user.DateUpdate = DateTime.Now;\r\n            user.UserUpdate = currentUser.Email;\r\n            user.Civilite = internshipBm.User.Civility;\r\n            user.DateNaissance = internshipBm.User.BirthDate;\r\n\r\n            if (!string.IsNullOrEmpty(internshipBm.User.SsNumber))\r\n            {\r\n                if (PersonalInfoRegex.IsCheckSsNumberValid(internshipBm.User.SsNumber))\r\n                {\r\n                    user.NumeroSs = internshipBm.User.SsNumber;\r\n                }\r\n                else\r\n                {\r\n                    Log.Warning(\"Bad request user(id : {0}), the social security number is invalid\", user.Id);\r\n                    return BadRequest(\"Le num\u00e9ro de s\u00e9curit\u00e9 sociale n'est pas valide\");\r\n                }\r\n            }\r\n\r\n            if (internshipBm.User.Address.Id == null)\r\n            {\r\n                internshipStageInfo.UserAdresse = this.CreateAddress(internshipBm.User.Address, currentUser.Email);\r\n            }\r\n            else\r\n            {\r\n                if (user.AdresseId != internshipBm.User.Address.Id.Value\r\n                    && user.AdresseFacturationId != internshipBm.User.Address.Id.Value\r\n                    && user.AdresseLivraisonId != internshipBm.User.Address.Id.Value)\r\n                {\r\n                    Log.Error(\"Bad request the user address id is invalid\");\r\n                    return BadRequest(\"The user address id is invalid\");\r\n                }\r\n\r\n                internshipStageInfo.UserAdresseId = internshipBm.User.Address.Id.Value;\r\n            }\r\n\r\n            var numeroTelByDefault = user.UserPhoneNumbers.Where(q => q.IsDefault).Select(q => q.PhoneNumber).FirstOrDefault();\r\n        \r\n            if (internshipBm.User.PhoneNumber.Id == null || internshipBm.User.PhoneNumber.PhoneNumber != numeroTelByDefault)\r\n            {\r\n                var reformatePhone = PersonalInfoRegex.ReformatePhone(internshipBm.User.PhoneNumber.PhoneNumber);\r\n\r\n                if (String.IsNullOrEmpty(reformatePhone))\r\n                {\r\n                    Log.Error(\"Bad request the phone number is invalid\");\r\n                    return BadRequest(\"The phone number is invalid\");\r\n                }\r\n\r\n                var phoneTypeId = DataCache.GetPhoneNumberTypes(this._db).Where(q => q.Code == \"AUTRE\")\r\n                                           .Select(q => q.Id)\r\n                                           .FirstOrDefault();\r\n\r\n                var userPhoneNumber = new UserPhoneNumber\r\n                {\r\n                    DateCreate = DateTime.Now,\r\n                    UserCreate = currentUser.Email,\r\n                    PhoneNumber = reformatePhone,\r\n                    PhoneNumberTypeId = phoneTypeId,\r\n                    IsDefault = false,\r\n                };\r\n\r\n                if (internshipBm.User.PhoneNumber.Id == null)\r\n                {\r\n                    userPhoneNumber.IsDefault = true;\r\n                }\r\n                user.UserPhoneNumbers.Add(userPhoneNumber);\r\n                internshipStageInfo.UserPhoneNumber = userPhoneNumber;\r\n            }\r\n            else\r\n            {\r\n                if (!user.UserPhoneNumbers.Any(q => q.IsDefault && q.Id == internshipBm.User.PhoneNumber.Id))\r\n                {\r\n                    Log.Error(\"Bad request the user phone number id is invalid\");\r\n                    return BadRequest(\"The user phone number id is invalid\");\r\n                }\r\n\r\n                internshipStageInfo.UserPhoneNumberId = internshipBm.User.PhoneNumber.Id.Value;\r\n            }\r\n\r\n            if (internshipBm.Attestation == null)\r\n            {\r\n                Log.Error(\"Bad request the attestation is required\");\r\n                return BadRequest(\"The attestation is required\");\r\n            }\r\n\r\n\r\n            if (!internshipBm.Attestation.FileGuid.HasValue)\r\n            {\r\n                Log.Error(\"Bad request the attestation guid is required\");\r\n                return BadRequest(\"The attestation guid is required\");\r\n            }\r\n\r\n            var uploadedFileId = await this._db.UploadedFiles.AsNoTracking()\r\n                                           .Where(q => q.FileGuid == internshipBm.Attestation.FileGuid)\r\n                                           .Select(q => q.Id).FirstOrDefaultAsync();\r\n\r\n            if (uploadedFileId == 0)\r\n            {\r\n                Log.Error(\"Bad request the attestation guid was not found\");\r\n                return BadRequest(\"The attestation guid was not found\");\r\n            }\r\n\r\n            var attestationCategoryId = DataCache.GetConventionStageFileCategories(_db).Where(q => q.Code == \"ASSURANCE\")\r\n                                                 .Select(q => q.Id)\r\n                                                 .FirstOrDefault();\r\n\r\n            var attestationFile = new ConventionStageInfoFile\r\n            {\r\n                DateCreate = DateTime.Now,\r\n                UserCreate = currentUser.Email,\r\n                DateValiditeDebut = internshipBm.Attestation.StartValidityDate,\r\n                DateValiditeFin = internshipBm.Attestation.EndValidityDate,\r\n                ConventionStageFileCategorieId = attestationCategoryId,\r\n            };\r\n\r\n            attestationFile.UploadedFileId = uploadedFileId;\r\n\r\n            //ORGANISME\r\n            internshipStageInfo.ConventionStageInfoFiles.Add(attestationFile);\r\n\r\n            string representativePhoneNumberFormated = PersonalInfoRegex.ReformatePhone(internshipBm.Organization.RepresentativePhoneNumber);\r\n            if (String.IsNullOrEmpty(representativePhoneNumberFormated))\r\n            {",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": "Log.Error(\"Bad request the representative phone number is invalid\");\r\n                return BadRequest(\"The representative phone number is invalid\");\r\n            }\r\n\r\n            internshipStageInfo.StructureAccueil = new StructureAccueil\r\n            {\r\n                UserCreate = currentUser.Email,\r\n                DateCreate = DateTime.Now,\r\n                RepresentantCivilite = internshipBm.Organization.RepresentativeCivility,\r\n                RepresentantNom = internshipBm.Organization.RepresentativeLastName,\r\n                RepresentantPrenom = internshipBm.Organization.RepresentativeFirstName,\r\n                RepresentantMail = internshipBm.Organization.RepresentativeEmail.ToLower(),\r\n                RepresentantPhone = representativePhoneNumberFormated,\r\n                RepresentantFonction = internshipBm.Organization.RepresentativeOffice,\r\n                Nom = internshipBm.Organization.StructureName,\r\n                Siret = internshipBm.Organization.SIRET,\r\n                Address = this.CreateAddress(internshipBm.Organization.Address, currentUser.Email),\r\n            };\r\n\r\n            internshipStageInfo.StructureService = internshipBm.Organization.Service;\r\n            if (internshipBm.InternshipAddress != null)\r\n            {\r\n                internshipStageInfo.AdresseStructure = this.CreateAddress(internshipBm.InternshipAddress, currentUser.Email);\r\n            }\r\n\r\n            string tutorPhoneNumberFormated = PersonalInfoRegex.ReformatePhone(internshipBm.Tutor.PhoneNumber);\r\n            if (String.IsNullOrEmpty(tutorPhoneNumberFormated))\r\n            {\r\n                Log.Error(\"Bad request the tutor phone number is invalid\");\r\n                return BadRequest(\"The tutor phone number is invalid\");\r\n            }\r\n\r\n            //TUTOR\r\n            internshipStageInfo.TuteurStage = new TuteurStage\r\n            {\r\n                UserCreate = currentUser.Email,\r\n                DateCreate = DateTime.Now,\r\n                Civilite = internshipBm.Tutor.Civility,\r\n                Nom = internshipBm.Tutor.LastName,\r\n                Prenom = internshipBm.Tutor.FirstName,\r\n                Mail = internshipBm.Tutor.Email.ToLower(),\r\n                Phone = tutorPhoneNumberFormated,\r\n                Fonction = internshipBm.Tutor.Office,\r\n            };\r\n\r\n            var momentJourneesList = DataCache.GetMomentJournee(_db);\r\n            var range1Id = momentJourneesList.Where(q => q.Code == \"PLAGE1\").Select(q => q.Id).FirstOrDefault();\r\n            var range2Id = momentJourneesList.Where(q => q.Code == \"PLAGE2\").Select(q => q.Id).FirstOrDefault();\r\n            var range3Id = momentJourneesList.Where(q => q.Code == \"PLAGE3\").Select(q => q.Id).FirstOrDefault();\r\n            var range4Id = momentJourneesList.Where(q => q.Code == \"PLAGE4\").Select(q => q.Id).FirstOrDefault();\r\n\r\n            List<DateTime> holidays;\r\n\r\n            try\r\n            {\r\n\r\n                var holidaysIds = await this.UpdateHolidaysAsync(internshipBm, internshipStageInfo);\r\n                holidays = await this._db.JoursFeries.Where(q => holidaysIds.Contains(q.Id)).Select(q => q.Jour).ToListAsync();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to update holidays\");\r\n                return InternalServerError(e);\r\n            }\r\n\r\n            //Shedule\r\n            foreach (var period in internshipBm.Periods)\r\n            {\r\n                var periodeStage = new PeriodeStage()\r\n                {\r\n                    UserCreate = currentUser.Email,\r\n                    DateCreate = DateTime.Now,\r\n                    DateDebut = period.StartDate.Date,\r\n                    DateFin = period.EndDate.Date,\r\n                    NbMinutes = this.GetPeriodMinutes(period, holidays),\r\n                    JourHoraireStages = new List<JourHoraireStage>()\r\n                };\r\n\r\n                foreach (var dayShedule in period.DaysSchedules.OrderBy(q => q.WeekDayId)\r\n                                                 .ThenBy(q => q.StartHour))\r\n                {\r\n                    int countRange = periodeStage.JourHoraireStages.Count(q => q.JourSemaineId == dayShedule.WeekDayId);\r\n\r\n                    periodeStage.JourHoraireStages.Add(new JourHoraireStage()\r\n                    {\r\n                        UserCreate = currentUser.Email,\r\n                        DateCreate = DateTime.Now,\r\n                        HeureDebut = dayShedule.StartHour,\r\n                        HeureFin = dayShedule.EndHour,\r\n                        JourSemaineId = dayShedule.WeekDayId,\r\n                        MomentJourneeId = countRange == 0 ? range1Id : (countRange == 1 ? range2Id : (countRange == 2 ? range3Id : range4Id)),\r\n                    });\r\n                }\r\n\r\n                internshipStageInfo.PeriodeStages.Add(periodeStage);\r\n            }\r\n\r\n            //Other info\r\n            internshipStageInfo.SpecificiteHoraire = internshipBm.ScheduleSpecificity;\r\n            internshipStageInfo.Objectif = internshipBm.StageObjective;\r\n            internshipStageInfo.GratificationMontant = internshipBm.GratificationAmount;\r\n            internshipStageInfo.FrequenceGratificationId = internshipBm.GratificationFrequenceId;\r\n            internshipStageInfo.AutreAvantageSalaries = internshipBm.SalariedAdvantage;\r\n            internshipStageInfo.AutreAvantageAgents = internshipBm.AgentAdvantage;\r\n            internshipStageInfo.StructureAccueilProtectionMaladie = internshipBm.SocialProtection;\r\n            internshipStageInfo.ModaliteConges = internshipBm.Leave;\r\n\r\n            this._db.ConventionStageInfoes.Add(internshipStageInfo);\r\n\r\n            try\r\n            {\r\n                await this._db.SaveChangesAsync();\r\n\r\n                const string chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n                Random random = new Random();\r\n                var referenceKey = new string(Enumerable.Repeat(chars, 3).Select(s => s[random.Next(s.Length)]).ToArray());\r\n                internshipStageInfo.Reference = $\"{referenceKey}{internshipStageInfo.Id}\";\r\n\r\n                try\r\n                {\r\n                    await this._db.SaveChangesAsync();\r\n                    return Ok(internshipStageInfo.Reference);\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Log.Error(e, \"Unable to update reference\");\r\n                    return InternalServerError(e);\r\n                }\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to create convention stage info in database\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "CreateAddress",
            "code_start_index": 39693,
            "method_name": "CreateAddress",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Cr\u00e9\u00e9 une Address \u00e0 partir d'un addressBM\r\n        /// </summary>\r\n        /// <param name=\"addressBm\"></param>\r\n        /// <param name=\"userEmail\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "addressBm",
                    "param_name": "addressBm",
                    "param_type": "AddressBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "userEmail",
                    "param_name": "userEmail",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var address = new Address\r\n            {\r\n                UserCreate = userEmail,\r\n                DateCreate = DateTime.Now,\r\n                Ville = addressBm.City,\r\n                Complement = addressBm.Complement,\r\n                PaysId = addressBm.CountryId,\r\n                NomVoie = addressBm.WayName,\r\n                NumeroVoie = addressBm.WayNumber,\r\n                TypeVoieId = addressBm.WayTypeId,\r\n                Cp = addressBm.ZipCode\r\n            };\r\n            return address;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Create a new address with specified details and return it.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "addressBm",
                        "param_name": "addressBm",
                        "param_desc": "AddressBindingModel - Represents the details of the address to be created."
                    },
                    {
                        "name": "userEmail",
                        "param_name": "userEmail",
                        "param_desc": "string - The email of the user for whom the address is being created."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Create a new address with specified details and return it.\n/// </summary>\n/// <param name=\"addressBm\">AddressBindingModel - Represents the details of the address to be created.</param>\n/// <param name=\"userEmail\">string - The email of the user for whom the address is being created.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetPeriodMinutes",
            "code_start_index": 40540,
            "method_name": "GetPeriodMinutes",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Calcul le nombre d'heures d'une p\u00e9riode\r\n        /// </summary>\r\n        /// <param name=\"periodBm\"></param>\r\n        /// <param name=\"holidays\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "periodBm",
                    "param_name": "periodBm",
                    "param_type": "PeriodBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "holidays",
                    "param_name": "holidays",
                    "param_type": "List<DateTime>",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            Dictionary<DayOfWeek, string> dayOfWeekToDbCode = new Dictionary<DayOfWeek, string>()\r\n                                                              {\r\n                                                                  {DayOfWeek.Monday, \"LUNDI\"},\r\n                                                                  {DayOfWeek.Tuesday, \"MARDI\"},\r\n                                                                  {DayOfWeek.Wednesday, \"MERCREDI\"},\r\n                                                                  {DayOfWeek.Thursday, \"JEUDI\"},\r\n                                                                  {DayOfWeek.Friday, \"VENDREDI\"},\r\n                                                                  {DayOfWeek.Saturday, \"SAMEDI\"},\r\n                                                                  {DayOfWeek.Sunday, \"DIMANCHE\"},\r\n                                                              };\r\n\r\n            Dictionary<string, int> weekDayCodeToId = DataCache.GetWeekDays(_db)\r\n                                                               .ToDictionary(q => q.Code, q => q.Id);\r\n\r\n            var includeEndDate = true;\r\n            DateTime endDate = periodBm.EndDate;\r\n            if (periodBm.StartDate == periodBm.EndDate)\r\n            {\r\n                includeEndDate = false;\r\n                endDate = endDate.AddDays(1);\r\n            }\r\n\r\n            //List of days between dates\r\n            var listOfDays = DateTimeExtensions.GetDaysBetween(periodBm.StartDate, endDate, true, includeEndDate);\r\n\r\n            //Remove holidays\r\n            listOfDays = listOfDays.Except(holidays);\r\n\r\n            //Days regroup by weekDay\r\n            var daysByWeekDay = listOfDays.GroupBy(q => q.DayOfWeek).ToList();\r\n\r\n            int minutes = 0;\r\n\r\n            for (int j = 0; j < daysByWeekDay.Count; j++)\r\n            {\r\n                DayOfWeek dayOfWeek = daysByWeekDay[j].Key;\r\n                int daysCount = daysByWeekDay[j].Count();\r\n                int weekDayId = weekDayCodeToId[dayOfWeekToDbCode[dayOfWeek]];\r\n                var daysSchedule = periodBm.DaysSchedules.Where(q => q.WeekDayId == weekDayId).ToList();\r\n                int dayMinutes = 0;\r\n\r\n                foreach (var daySchedule in daysSchedule)\r\n                {\r\n                    var duration = daySchedule.EndHour.Subtract(daySchedule.StartHour);\r\n                    dayMinutes += (int)duration.Duration().TotalMinutes;\r\n                }\r\n\r\n                minutes += daysCount * dayMinutes;\r\n            }\r\n\r\n            return minutes;\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Calculate the total minutes for a given period based on the specified days and schedules.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "periodBm",
                        "param_name": "periodBm",
                        "param_desc": "The PeriodBindingModel parameter represents the period binding model which contains the necessary information for calculating the total minutes."
                    },
                    {
                        "name": "holidays",
                        "param_name": "holidays",
                        "param_desc": "The List<DateTime> parameter represents a list of holidays that should be excluded from the calculation of total minutes for the given period."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Calculate the total minutes for a given period based on the specified days and schedules.\n/// </summary>\n/// <param name=\"periodBm\">The PeriodBindingModel parameter represents the period binding model which contains the necessary information for calculating the total minutes.</param>\n/// <param name=\"holidays\">The List<DateTime> parameter represents a list of holidays that should be excluded from the calculation of total minutes for the given period.</param>\n",
            "code_chunks": null
        },
        {
            "name": "UpdateInternship",
            "code_start_index": 43460,
            "method_name": "UpdateInternship",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Met \u00e0 jour un internship\r\n        /// </summary>\r\n        /// <param name=\"internshipBm\"></param>\r\n        /// <returns></returns>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "internshipBm",
                    "param_name": "internshipBm",
                    "param_type": "InternshipBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            var currentUser = User.Identity.GetUser();\r\n\r\n            int inscriptionPromotionId = await this._db.InscriptionPromotions.AsNoTracking()\r\n                                                   .Where(q => q.UserId == currentUser.Id\r\n                                                               && q.PromotionId == internshipBm.PromotionId)\r\n                                                   .Select(q => q.Id)\r\n                                                   .FirstOrDefaultAsync();\r\n\r\n            if (inscriptionPromotionId == 0)\r\n            {\r\n                Log.Error(\"Bad request user(id : {0}) don't have access to promotion (id : {1})\", currentUser.Id, internshipBm.PromotionId);\r\n                return BadRequest(\"L'utilisateur n'est pas inscrit \u00e0 cette promotion\");\r\n            }\r\n\r\n            var internshipStageInfo = await this._db.ConventionStageInfoes\r\n                                                .Include(q => q.ConventionStageInfoAvancements)\r\n                                                .Include(q => q.UserAdresse)\r\n                                                .Include(q => q.UserPhoneNumber)\r\n                                                .Include(q => q.StructureAccueil)\r\n                                                .Include(q => q.StructureAccueil.Address)\r\n                                                .Include(q => q.AdresseStructure)\r\n                                                .Include(q => q.TuteurStage)\r\n                                                .Include(q => q.PeriodeStages)\r\n                                                .Include(q => q.PeriodeStages.Select(ps => ps.JourHoraireStages))\r\n                                                .Include(q => q.JoursFeriesTravailles)\r\n                                                .Where(q => q.Id == internshipBm.Id)\r\n                                                .FirstOrDefaultAsync();\r\n\r\n            //User info\r\n            internshipStageInfo.UserUpdate = currentUser.Email;\r\n            internshipStageInfo.DateUpdate = DateTime.Now;\r\n            internshipStageInfo.InscriptionPromotionId = inscriptionPromotionId;\r\n\r\n            var internshipStatus = DataCache.GetConventionStageStatuts(this._db);\r\n\r\n            var statusNotValidId = internshipStatus.Where(q => q.Code == \"A_VALIDER\")\r\n                                                   .Select(q => q.Id)\r\n                                                   .First();\r\n\r\n            var statusToCompleteId = internshipStatus.Where(q => q.Code == \"A_COMPLETER\")\r\n                                                     .Select(q => q.Id)\r\n                                                     .First();\r\n\r\n            ConventionStageInfoAvancement lastAdvancement = internshipStageInfo.ConventionStageInfoAvancements.FirstOrDefault(q => q.IsLast);\r\n\r\n            if (lastAdvancement.ConventionStageStatutId != statusToCompleteId)\r\n            {\r\n                Log.Error(\"Bad request the internship (id: {0}) is not to complete\", internshipBm.Id);\r\n                return BadRequest(\"Cannot modify internship withous to complete status\");\r\n            }\r\n\r\n            lastAdvancement.UserUpdate = currentUser.Email;\r\n            lastAdvancement.DateUpdate = DateTime.Now;\r\n            lastAdvancement.IsLast = false;\r\n\r\n            internshipStageInfo.ConventionStageInfoAvancements.Add(new ConventionStageInfoAvancement\r\n            {\r\n                UserCreate = currentUser.Email,\r\n                DateCreate = DateTime.Now,\r\n                ConventionStageStatutId = statusNotValidId,\r\n                IsLast = true,\r\n            });\r\n\r\n            var user = await this._db.Users.Where(q => q.Id == currentUser.Id)\r\n                                 .FirstOrDefaultAsync();\r\n\r\n            //User info\r\n            if (user.Civilite != internshipBm.User.Civility\r\n                || user.DateNaissance != internshipBm.User.BirthDate\r\n                || user.NumeroSs != internshipBm.User.SsNumber)\r\n            {\r\n                user.UserUpdate = currentUser.Email;\r\n                user.DateUpdate = DateTime.Now;\r\n                user.Civilite = internshipBm.User.Civility;\r\n                user.DateNaissance = internshipBm.User.BirthDate;\r\n                if (!string.IsNullOrEmpty(internshipBm.User.SsNumber))\r\n                {\r\n                    if (PersonalInfoRegex.IsCheckSsNumberValid(internshipBm.User.SsNumber))\r\n                    {\r\n                        user.NumeroSs = internshipBm.User.SsNumber;\r\n                    }\r\n                    else\r\n                    {\r\n                        Log.Warning(\"Bad request user(id : {0}), the social security number is invalid\", user.Id);\r\n                        return BadRequest(\"Le num\u00e9ro de s\u00e9curit\u00e9 sociale n'est pas valide\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.EditAddress(internshipStageInfo.UserAdresse, internshipBm.User.Address, currentUser.Email);\r\n\r\n            PersonalInfoRegex.ReformatePhone(internshipBm.User.PhoneNumber.PhoneNumber);\r\n            var reformatePhone = PersonalInfoRegex.ReformatePhone(internshipBm.User.PhoneNumber.PhoneNumber);\r\n\r\n            if (String.IsNullOrEmpty(reformatePhone))\r\n            {\r\n                Log.Error(\"Bad request the phone number is invalid\");\r\n                return BadRequest(\"The phone number is invalid\");\r\n            }\r\n\r\n            if (internshipStageInfo.UserPhoneNumber.PhoneNumber != reformatePhone)\r\n            {\r\n                internshipStageInfo.UserPhoneNumber.UserUpdate = currentUser.Email;\r\n                internshipStageInfo.UserPhoneNumber.DateUpdate = DateTime.Now;\r\n                internshipStageInfo.UserPhoneNumber.PhoneNumber = reformatePhone;\r\n            }\r\n\r\n            if (internshipBm.Attestation == null)\r\n            {\r\n                Log.Error(\"Bad request the attestation is required\");\r\n                return BadRequest(\"The attestation is required\");\r\n            }\r\n\r\n            if (internshipBm.Attestation.FileGuid.HasValue)\r\n            {\r\n                var uploadedFileId = await this._db.UploadedFiles.AsNoTracking()\r\n                                               .Where(q => q.FileGuid == internshipBm.Attestation.FileGuid)\r\n                                               .Select(q => q.Id).FirstOrDefaultAsync();\r\n\r\n                if (uploadedFileId == 0)\r\n                {\r\n                    Log.Error(\"Bad request the attestation guid was not found\");\r\n                    return BadRequest(\"The attestation guid was not found\");\r\n                }\r\n\r\n\r\n                var attestationCategoryId = DataCache.GetConventionStageFileCategories(_db).Where(q => q.Code == \"ASSURANCE\")\r\n                                                     .Select(q => q.Id)\r\n                                                     .FirstOrDefault();\r\n\r\n                var attestationFile = new ConventionStageInfoFile\r\n                {\r\n                    DateCreate = DateTime.Now,\r\n                    UserCreate = currentUser.Email,\r\n                    DateValiditeDebut = internshipBm.Attestation.StartValidityDate,\r\n                    DateValiditeFin = internshipBm.Attestation.EndValidityDate,\r\n                    ConventionStageFileCategorieId = attestationCategoryId,\r\n                };\r\n\r\n                attestationFile.UploadedFileId = uploadedFileId;\r\n\r\n                var previousAttestation = internshipStageInfo.ConventionStageInfoFiles\r\n                                                             .FirstOrDefault(q => q.ConventionStageFileCategorieId == attestationCategoryId\r\n                                                                                  && q.DateDelete == null);\r\n                if (previousAttestation != null)\r\n                {\r\n                    previousAttestation.UserDelete = currentUser.Email;\r\n                    previousAttestation.DateDelete = DateTime.Now;\r\n                }\r\n\r\n                internshipStageInfo.ConventionStageInfoFiles.Add(attestationFile);\r\n            }\r\n\r\n            string representativePhoneNumberFormated = PersonalInfoRegex.ReformatePhone(internshipBm.Organization.RepresentativePhoneNumber);\r\n            if (String.IsNullOrEmpty(representativePhoneNumberFormated))\r\n            {\r\n                Log.Error(\"Bad request the representative phone number is invalid\");\r\n                return BadRequest(\"The representative phone number is invalid\");\r\n            }\r\n\r\n            if (internshipStageInfo.StructureAccueil.RepresentantCivilite != internshipBm.Organization.RepresentativeCivility\r\n                || internshipStageInfo.StructureAccueil.RepresentantNom != internshipBm.Organization.RepresentativeLastName\r\n                || internshipStageInfo.StructureAccueil.RepresentantPrenom != internshipBm.Organization.RepresentativeFirstName\r\n                || internshipStageInfo.StructureAccueil.RepresentantMail != internshipBm.Organization.RepresentativeEmail\r\n                || internshipStageInfo.StructureAccueil.RepresentantPhone != representativePhoneNumberFormated\r\n                || internshipStageInfo.StructureAccueil.RepresentantFonction != internshipBm.Organization.RepresentativeOffice\r\n                || internshipStageInfo.StructureAccueil.Nom != internshipBm.Organization.StructureName\r\n                || internshipStageInfo.StructureAccueil.Siret != internshipBm.Organization.SIRET\r\n                || internshipStageInfo.StructureService != internshipBm.Organization.Service)\r\n            {\r\n                internshipStageInfo.StructureAccueil.UserUpdate = currentUser.Email;\r\n                internshipStageInfo.StructureAccueil.DateUpdate = DateTime.Now;\r\n                internshipStageInfo.StructureAccueil.RepresentantCivilite = internshipBm.Organization.RepresentativeCivility;\r\n                internshipStageInfo.StructureAccueil.RepresentantNom = internshipBm.Organization.RepresentativeLastName;\r\n                internshipStageInfo.StructureAccueil.RepresentantPrenom = internshipBm.Organization.RepresentativeFirstName;\r\n                internshipStageInfo.StructureAccueil.RepresentantMail = internshipBm.Organization.RepresentativeEmail.ToLower();\r\n                internshipStageInfo.StructureAccueil.RepresentantPhone = representativePhoneNumberFormated;\r\n                internshipStageInfo.StructureAccueil.RepresentantFonction = internshipBm.Organization.RepresentativeOffice;\r\n                internshipStageInfo.StructureAccueil.Nom = internshipBm.Organization.StructureName;\r\n                internshipStageInfo.StructureAccueil.Siret = internshipBm.Organization.SIRET;\r\n                internshipStageInfo.StructureService = internshipBm.Organization.Service;\r\n            }\r\n\r\n            this.EditAddress(internshipStageInfo.StructureAccueil.Address, internshipBm.Organization.Address, currentUser.Email);\r\n\r\n            if (internshipStageInfo.AdresseStructure != null)\r\n            {\r\n                if (internshipBm.InternshipAddress != null)\r\n                {\r\n                    this.EditAddress(internshipStageInfo.AdresseStructure, internshipBm.InternshipAddress, currentUser.Email);\r\n                }\r\n                else\r\n                {\r\n                    internshipStageInfo.AdresseStructureId = null;\r\n                    internshipStageInfo.AdresseStructure.UserDelete = currentUser.Email;\r\n                    internshipStageInfo.AdresseStructure.DateDelete = DateTime.Now;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (internshipBm.InternshipAddress != null)\r\n                {\r\n                    internshipStageInfo.AdresseStructure = this.CreateAddress(internshipBm.InternshipAddress, currentUser.Email);\r\n                }\r\n            }\r\n\r\n            string tutorPhoneNumberFormated = PersonalInfoRegex.ReformatePhone(internshipBm.Tutor.PhoneNumber);\r\n            if (String.IsNullOrEmpty(tutorPhoneNumberFormated))\r\n            {\r\n                Log.Error(\"Bad request the tutor phone number is invalid\");\r\n                return BadRequest(\"The tutor phone number is invalid\");\r\n            }\r\n\r\n            if (internshipStageInfo.TuteurStage.Civilite != internshipBm.Tutor.Civility\r\n                || internshipStageInfo.TuteurStage.Nom != internshipBm.Tutor.LastName\r\n                || internshipStageInfo.TuteurStage.Prenom != internshipBm.Tutor.FirstName\r\n                || internshipStageInfo.TuteurStage.Mail != internshipBm.Tutor.Email\r\n                || internshipStageInfo.TuteurStage.Phone != tutorPhoneNumberFormated\r\n                || internshipStageInfo.TuteurStage.Fonction != internshipBm.Tutor.Office)\r\n            {\r\n                internshipStageInfo.TuteurStage.UserUpdate = currentUser.Email;\r\n                internshipStageInfo.TuteurStage.DateUpdate = DateTime.Now;\r\n                internshipStageInfo.TuteurStage.Civilite = internshipBm.Tutor.Civility;\r\n                internshipStageInfo.TuteurStage.Nom = internshipBm.Tutor.LastName;\r\n                internshipStageInfo.TuteurStage.Prenom = internshipBm.Tutor.FirstName;\r\n                internshipStageInfo.TuteurStage.Mail = internshipBm.Tutor.Email.ToLower();\r\n                internshipStageInfo.TuteurStage.Phone = tutorPhoneNumberFormated;\r\n                internshipStageInfo.TuteurStage.Fonction = internshipBm.Tutor.Office;\r\n            }\r\n\r\n            var momentJourneesList = DataCache.GetMomentJournee(_db);\r\n            var range1Id = momentJourneesList.Where(q => q.Code == \"PLAGE1\").Select(q => q.Id).FirstOrDefault();\r\n            var range2Id = momentJourneesList.Where(q => q.Code == \"PLAGE2\").Select(q => q.Id).FirstOrDefault();\r\n            var range3Id = momentJourneesList.Where(q => q.Code == \"PLAGE3\").Select(q => q.Id).FirstOrDefault();\r\n            var range4Id = momentJourneesList.Where(q => q.Code == \"PLAGE4\").Select(q => q.Id).FirstOrDefault();\r\n\r\n            List<int> actualPeriods = internshipBm.Periods.Select(q => q.Id).ToList();\r\n            var periodToDelete = internshipStageInfo.PeriodeStages.Where(q => !actualPeriods.Contains(q.Id) && q.DateDelete == null)\r\n                                                    .ToList();\r\n\r\n            foreach (var period in periodToDelete)\r\n            {\r\n                period.UserDelete = currentUser.Email;\r\n                period.DateDelete = DateTime.Now;\r\n            }\r\n\r\n            List<JourHoraireStage> AllDaysScheduleToDelete = new List<JourHoraireStage>();\r\n\r\n            List<DateTime> holidays;\r\n\r\n            try\r\n            {\r\n\r\n                var holidaysIds = await this.UpdateHolidaysAsync(internshipBm, internshipStageInfo);\r\n                holidays = await this._db.JoursFeries.Where(q => holidaysIds.Contains(q.Id)).Select(q => q.Jour).ToListAsync();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to update holidays\");\r\n                return InternalServerError(e);\r\n            }\r\n\r\n\r\n            //Shedule\r\n            foreach (var periodBm in internshipBm.Periods)\r\n            {\r\n                if (periodBm.Id != 0)\r\n                {\r\n                    PeriodeStage period = internshipStageInfo.PeriodeStages.FirstOrDefault(q => q.Id == periodBm.Id && q.DateDelete == null);\r\n\r\n                    if (period == null)\r\n                    {\r\n                        Log.Error(\"Bad request user(id : {0}) don't have access to this period (id : {1})\", currentUser.Id, periodBm.Id);\r\n                        return BadRequest(\"L'utilisateur ne poss\u00e8de pas cette p\u00e9riode\");\r\n                    }\r\n\r\n                    int periodHours = this.GetPeriodMinutes(periodBm, holidays);\r\n\r\n                    if (period.DateDebut != periodBm.StartDate\r\n                        || period.DateFin != periodBm.EndDate\r\n                        || period.NbMinutes != periodHours)\r\n                    {\r\n                        period.UserUpdate = currentUser.Email;\r\n                        period.DateUpdate = DateTime.Now;\r\n                        period.DateDebut = periodBm.StartDate.Date;\r\n                        period.DateFin = periodBm.EndDate.Date;\r\n                        period.NbMinutes = periodHours;\r\n                    }\r\n\r\n                    List<int> actualDaysSchedules = periodBm.DaysSchedules.Select(q => q.Id).ToList();\r\n                    var daysScheduleToDelete = period.JourHoraireStages.Where(q => !actualDaysSchedules.Contains(q.Id) && q.DateDelete == null)\r\n                                                     .ToList();\r\n\r\n                    var daysCheduleToDeleteIds = daysScheduleToDelete.Select(q => q.Id).ToList();\r\n\r\n                    if (daysScheduleToDelete.Count > 0)\r\n                    {\r\n                        AllDaysScheduleToDelete = AllDaysScheduleToDelete.Concat(daysScheduleToDelete).ToList();\r\n                    }\r\n\r\n                    foreach (var dayScheduleBm in periodBm.DaysSchedules.OrderBy(q => q.WeekDayId)\r\n                                                          .ThenBy(q => q.StartHour))\r\n                    {\r\n                        if (dayScheduleBm.Id == 0)\r\n                        {\r\n                            bool bAddRange1 = !period.JourHoraireStages.Any(q => q.JourSemaineId == dayScheduleBm.WeekDayId && q.MomentJourneeId == range1Id && !daysCheduleToDeleteIds.Contains(q.Id) && q.DateDelete == null);\r\n                            bool bAddRange2 = !period.JourHoraireStages.Any(q => q.JourSemaineId == dayScheduleBm.WeekDayId && q.MomentJourneeId == range2Id && !daysCheduleToDeleteIds.Contains(q.Id) && q.DateDelete == null);\r\n                            bool bAddRange3 = !period.JourHoraireStages.Any(q => q.JourSemaineId == dayScheduleBm.WeekDayId && q.MomentJourneeId == range3Id && !daysCheduleToDeleteIds.Contains(q.Id) && q.DateDelete == null);\r\n\r\n                            int rangeId = bAddRange1 ? range1Id : (bAddRange2 ? range2Id : (bAddRange3 ? range3Id : range4Id));\r\n\r\n                            period.JourHoraireStages.Add(new JourHoraireStage()\r\n                            {\r\n                                UserCreate = currentUser.Email,\r\n                                DateCreate = DateTime.Now,\r\n                                HeureDebut = dayScheduleBm.StartHour,\r\n                                HeureFin = dayScheduleBm.EndHour,\r\n                                JourSemaineId = dayScheduleBm.WeekDayId,\r\n                                MomentJourneeId = rangeId,\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    var periodeStage = new PeriodeStage()\r\n                    {\r\n                        UserCreate = currentUser.Email,\r\n                        DateCreate = DateTime.Now,\r\n                        DateDebut = periodBm.StartDate.Date,\r\n                        DateFin = periodBm.EndDate.Date,\r\n                        NbMinutes = this.GetPeriodMinutes(periodBm, holidays),\r\n                        JourHoraireStages = new List<JourHoraireStage>()\r\n                    };\r\n\r\n                    foreach (var dayShedule in periodBm.DaysSchedules.OrderBy(q => q.WeekDayId)\r\n                                                       .ThenBy(q => q.StartHour))\r\n                    {\r\n                        int countRange = periodeStage.JourHoraireStages.Count(q => q.JourSemaineId == dayShedule.WeekDayId);\r\n\r\n                        periodeStage.JourHoraireStages.Add(new JourHoraireStage()\r\n                        {\r\n                            UserCreate = currentUser.Email,\r\n                            DateCreate = DateTime.Now,\r\n                            HeureDebut = dayShedule.StartHour,\r\n                            HeureFin = dayShedule.EndHour,\r\n                            JourSemaineId = dayShedule.WeekDayId,\r\n                            MomentJourneeId = countRange == 0 ? range1Id : (countRange == 1 ? range2Id : (countRange == 2 ? range3Id : range4Id)),\r\n                        });\r\n                    }\r\n\r\n                    internshipStageInfo.PeriodeStages.Add(periodeStage);\r\n                }\r\n            }\r\n\r\n\r\n            if (AllDaysScheduleToDelete.Count > 0)\r\n            {\r\n                var daysScheduleToDeleteIds = AllDaysScheduleToDelete.Select(q => q.Id).ToList();\r\n                StringBuilder sb = new StringBuilder();\r\n                foreach (var dayScheduleId in daysScheduleToDeleteIds)\r\n                {\r\n                    sb.Append($\"DELETE FROM ConventionStage.Jour_Horaire_Stage WHERE Id = {dayScheduleId};\");\r\n                }\r\n                try\r\n                {\r\n                    await this._db.Database.ExecuteSqlCommandAsync(sb.ToString());\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Log.Error(e, \"Unable to delete jour_horaire_stage\");\r\n                    return InternalServerError(e);\r\n                }\r\n            }\r\n\r\n            //Other info\r\n            internshipStageInfo.SpecificiteHoraire = internshipBm.ScheduleSpecificity;\r\n            internshipStageInfo.Objectif = internshipBm.StageObjective;\r\n            internshipStageInfo.GratificationMontant = internshipBm.GratificationAmount;\r\n            internshipStageInfo.FrequenceGratificationId = internshipBm.GratificationFrequenceId;\r\n            internshipStageInfo.AutreAvantageSalaries = internshipBm.SalariedAdvantage;\r\n            internshipStageInfo.AutreAvantageAgents = internshipBm.AgentAdvantage;\r\n            internshipStageInfo.StructureAccueilProtectionMaladie = internshipBm.SocialProtection;\r\n            internshipStageInfo.ModaliteConges = internshipBm.Leave;\r\n\r\n            try\r\n            {\r\n                await this._db.SaveChangesAsync();\r\n\r\n                return Ok(internshipStageInfo.Reference);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to update convention stage info in database\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update internship information based on user input and validate the internship status before saving the changes.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "InternshipBindingModel",
                        "param_name": "InternshipBindingModel",
                        "param_desc": "The model containing the updated internship information."
                    },
                    {
                        "name": "internshipBm",
                        "param_name": "internshipBm",
                        "param_desc": "The binding model for the internship."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update internship information based on user input and validate the internship status before saving the changes.\n/// </summary>\n/// <param name=\"InternshipBindingModel\">The model containing the updated internship information.</param>\n/// <param name=\"internshipBm\">The binding model for the internship.</param>\n",
            "code_chunks": [
                {
                    "page_content": "{\r\n            var currentUser = User.Identity.GetUser();\r\n\r\n            int inscriptionPromotionId = await this._db.InscriptionPromotions.AsNoTracking()\r\n                                                   .Where(q => q.UserId == currentUser.Id\r\n                                                               && q.PromotionId == internshipBm.PromotionId)\r\n                                                   .Select(q => q.Id)\r\n                                                   .FirstOrDefaultAsync();\r\n\r\n            if (inscriptionPromotionId == 0)\r\n            {\r\n                Log.Error(\"Bad request user(id : {0}) don't have access to promotion (id : {1})\", currentUser.Id, internshipBm.PromotionId);\r\n                return BadRequest(\"L'utilisateur n'est pas inscrit \u00e0 cette promotion\");\r\n            }\r\n\r\n            var internshipStageInfo = await this._db.ConventionStageInfoes\r\n                                                .Include(q => q.ConventionStageInfoAvancements)\r\n                                                .Include(q => q.UserAdresse)\r\n                                                .Include(q => q.UserPhoneNumber)\r\n                                                .Include(q => q.StructureAccueil)\r\n                                                .Include(q => q.StructureAccueil.Address)\r\n                                                .Include(q => q.AdresseStructure)\r\n                                                .Include(q => q.TuteurStage)\r\n                                                .Include(q => q.PeriodeStages)\r\n                                                .Include(q => q.PeriodeStages.Select(ps => ps.JourHoraireStages))\r\n                                                .Include(q => q.JoursFeriesTravailles)\r\n                                                .Where(q => q.Id == internshipBm.Id)\r\n                                                .FirstOrDefaultAsync();\r\n\r\n            //User info\r\n            internshipStageInfo.UserUpdate = currentUser.Email;\r\n            internshipStageInfo.DateUpdate = DateTime.Now;\r\n            internshipStageInfo.InscriptionPromotionId = inscriptionPromotionId;\r\n\r\n            var internshipStatus = DataCache.GetConventionStageStatuts(this._db);\r\n\r\n            var statusNotValidId = internshipStatus.Where(q => q.Code == \"A_VALIDER\")\r\n                                                   .Select(q => q.Id)\r\n                                                   .First();\r\n\r\n            var statusToCompleteId = internshipStatus.Where(q => q.Code == \"A_COMPLETER\")\r\n                                                     .Select(q => q.Id)\r\n                                                     .First();\r\n\r\n            ConventionStageInfoAvancement lastAdvancement = internshipStageInfo.ConventionStageInfoAvancements.FirstOrDefault(q => q.IsLast);\r\n\r\n            if (lastAdvancement.ConventionStageStatutId != statusToCompleteId)\r\n            {\r\n                Log.Error(\"Bad request the internship (id: {0}) is not to complete\", internshipBm.Id);\r\n                return BadRequest(\"Cannot modify internship withous to complete status\");\r\n            }\r\n\r\n            lastAdvancement.UserUpdate = currentUser.Email;\r\n            lastAdvancement.DateUpdate = DateTime.Now;\r\n            lastAdvancement.IsLast = false;\r\n\r\n            internshipStageInfo.ConventionStageInfoAvancements.Add(new ConventionStageInfoAvancement\r\n            {\r\n                UserCreate = currentUser.Email,\r\n                DateCreate = DateTime.Now,\r\n                ConventionStageStatutId = statusNotValidId,\r\n                IsLast = true,\r\n            });\r\n\r\n            var user = await this._db.Users.Where(q => q.Id == currentUser.Id)\r\n                                 .FirstOrDefaultAsync();\r\n\r\n            //User info\r\n            if (user.Civilite != internshipBm.User.Civility\r\n                || user.DateNaissance != internshipBm.User.BirthDate\r\n                || user.NumeroSs != internshipBm.User.SsNumber)\r\n            {\r\n                user.UserUpdate = currentUser.Email;\r\n                user.DateUpdate = DateTime.Now;\r\n                user.Civilite = internshipBm.User.Civility;\r\n                user.DateNaissance = internshipBm.User.BirthDate;\r\n                if (!string.IsNullOrEmpty(internshipBm.User.SsNumber))\r\n                {\r\n                    if (PersonalInfoRegex.IsCheckSsNumberValid(internshipBm.User.SsNumber))\r\n                    {\r\n                        user.NumeroSs = internshipBm.User.SsNumber;\r\n                    }\r\n                    else\r\n                    {\r\n                        Log.Warning(\"Bad request user(id : {0}), the social security number is invalid\", user.Id);\r\n                        return BadRequest(\"Le num\u00e9ro de s\u00e9curit\u00e9 sociale n'est pas valide\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.EditAddress(internshipStageInfo.UserAdresse, internshipBm.User.Address, currentUser.Email);\r\n\r\n            PersonalInfoRegex.ReformatePhone(internshipBm.User.PhoneNumber.PhoneNumber);\r\n            var reformatePhone = PersonalInfoRegex.ReformatePhone(internshipBm.User.PhoneNumber.PhoneNumber);\r\n\r\n            if (String.IsNullOrEmpty(reformatePhone))\r\n            {\r\n                Log.Error(\"Bad request the phone number is invalid\");\r\n                return BadRequest(\"The phone number is invalid\");\r\n            }\r\n\r\n            if (internshipStageInfo.UserPhoneNumber.PhoneNumber != reformatePhone)\r\n            {\r\n                internshipStageInfo.UserPhoneNumber.UserUpdate = currentUser.Email;\r\n                internshipStageInfo.UserPhoneNumber.DateUpdate = DateTime.Now;\r\n                internshipStageInfo.UserPhoneNumber.PhoneNumber = reformatePhone;\r\n            }\r\n\r\n            if (internshipBm.Attestation == null)\r\n            {\r\n                Log.Error(\"Bad request the attestation is required\");\r\n                return BadRequest(\"The attestation is required\");\r\n            }\r\n\r\n            if (internshipBm.Attestation.FileGuid.HasValue)\r\n            {\r\n                var uploadedFileId = await this._db.UploadedFiles.AsNoTracking()\r\n                                               .Where(q => q.FileGuid == internshipBm.Attestation.FileGuid)\r\n                                               .Select(q => q.Id).FirstOrDefaultAsync();\r\n\r\n                if (uploadedFileId == 0)\r\n                {\r\n                    Log.Error(\"Bad request the attestation guid was not found\");\r\n                    return BadRequest(\"The attestation guid was not found\");\r\n                }\r\n\r\n\r\n                var attestationCategoryId = DataCache.GetConventionStageFileCategories(_db).Where(q => q.Code == \"ASSURANCE\")\r\n                                                     .Select(q => q.Id)\r\n                                                     .FirstOrDefault();\r\n\r\n                var attestationFile = new ConventionStageInfoFile\r\n                {\r\n                    DateCreate = DateTime.Now,\r\n                    UserCreate = currentUser.Email,\r\n                    DateValiditeDebut = internshipBm.Attestation.StartValidityDate,\r\n                    DateValiditeFin = internshipBm.Attestation.EndValidityDate,\r\n                    ConventionStageFileCategorieId = attestationCategoryId,\r\n                };\r\n\r\n                attestationFile.UploadedFileId = uploadedFileId;\r\n\r\n                var previousAttestation = internshipStageInfo.ConventionStageInfoFiles\r\n                                                             .FirstOrDefault(q => q.ConventionStageFileCategorieId == attestationCategoryId\r\n                                                                                  && q.DateDelete == null);\r\n                if (previousAttestation != null)\r\n                {\r\n                    previousAttestation.UserDelete = currentUser.Email;\r\n                    previousAttestation.DateDelete = DateTime.Now;\r\n                }",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": "internshipStageInfo.ConventionStageInfoFiles.Add(attestationFile);\r\n            }\r\n\r\n            string representativePhoneNumberFormated = PersonalInfoRegex.ReformatePhone(internshipBm.Organization.RepresentativePhoneNumber);\r\n            if (String.IsNullOrEmpty(representativePhoneNumberFormated))\r\n            {\r\n                Log.Error(\"Bad request the representative phone number is invalid\");\r\n                return BadRequest(\"The representative phone number is invalid\");\r\n            }\r\n\r\n            if (internshipStageInfo.StructureAccueil.RepresentantCivilite != internshipBm.Organization.RepresentativeCivility\r\n                || internshipStageInfo.StructureAccueil.RepresentantNom != internshipBm.Organization.RepresentativeLastName\r\n                || internshipStageInfo.StructureAccueil.RepresentantPrenom != internshipBm.Organization.RepresentativeFirstName\r\n                || internshipStageInfo.StructureAccueil.RepresentantMail != internshipBm.Organization.RepresentativeEmail\r\n                || internshipStageInfo.StructureAccueil.RepresentantPhone != representativePhoneNumberFormated\r\n                || internshipStageInfo.StructureAccueil.RepresentantFonction != internshipBm.Organization.RepresentativeOffice\r\n                || internshipStageInfo.StructureAccueil.Nom != internshipBm.Organization.StructureName\r\n                || internshipStageInfo.StructureAccueil.Siret != internshipBm.Organization.SIRET\r\n                || internshipStageInfo.StructureService != internshipBm.Organization.Service)\r\n            {\r\n                internshipStageInfo.StructureAccueil.UserUpdate = currentUser.Email;\r\n                internshipStageInfo.StructureAccueil.DateUpdate = DateTime.Now;\r\n                internshipStageInfo.StructureAccueil.RepresentantCivilite = internshipBm.Organization.RepresentativeCivility;\r\n                internshipStageInfo.StructureAccueil.RepresentantNom = internshipBm.Organization.RepresentativeLastName;\r\n                internshipStageInfo.StructureAccueil.RepresentantPrenom = internshipBm.Organization.RepresentativeFirstName;\r\n                internshipStageInfo.StructureAccueil.RepresentantMail = internshipBm.Organization.RepresentativeEmail.ToLower();\r\n                internshipStageInfo.StructureAccueil.RepresentantPhone = representativePhoneNumberFormated;\r\n                internshipStageInfo.StructureAccueil.RepresentantFonction = internshipBm.Organization.RepresentativeOffice;\r\n                internshipStageInfo.StructureAccueil.Nom = internshipBm.Organization.StructureName;\r\n                internshipStageInfo.StructureAccueil.Siret = internshipBm.Organization.SIRET;\r\n                internshipStageInfo.StructureService = internshipBm.Organization.Service;\r\n            }\r\n\r\n            this.EditAddress(internshipStageInfo.StructureAccueil.Address, internshipBm.Organization.Address, currentUser.Email);\r\n\r\n            if (internshipStageInfo.AdresseStructure != null)\r\n            {\r\n                if (internshipBm.InternshipAddress != null)\r\n                {\r\n                    this.EditAddress(internshipStageInfo.AdresseStructure, internshipBm.InternshipAddress, currentUser.Email);\r\n                }\r\n                else\r\n                {\r\n                    internshipStageInfo.AdresseStructureId = null;\r\n                    internshipStageInfo.AdresseStructure.UserDelete = currentUser.Email;\r\n                    internshipStageInfo.AdresseStructure.DateDelete = DateTime.Now;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (internshipBm.InternshipAddress != null)\r\n                {\r\n                    internshipStageInfo.AdresseStructure = this.CreateAddress(internshipBm.InternshipAddress, currentUser.Email);\r\n                }\r\n            }\r\n\r\n            string tutorPhoneNumberFormated = PersonalInfoRegex.ReformatePhone(internshipBm.Tutor.PhoneNumber);\r\n            if (String.IsNullOrEmpty(tutorPhoneNumberFormated))\r\n            {\r\n                Log.Error(\"Bad request the tutor phone number is invalid\");\r\n                return BadRequest(\"The tutor phone number is invalid\");\r\n            }\r\n\r\n            if (internshipStageInfo.TuteurStage.Civilite != internshipBm.Tutor.Civility\r\n                || internshipStageInfo.TuteurStage.Nom != internshipBm.Tutor.LastName\r\n                || internshipStageInfo.TuteurStage.Prenom != internshipBm.Tutor.FirstName\r\n                || internshipStageInfo.TuteurStage.Mail != internshipBm.Tutor.Email\r\n                || internshipStageInfo.TuteurStage.Phone != tutorPhoneNumberFormated\r\n                || internshipStageInfo.TuteurStage.Fonction != internshipBm.Tutor.Office)\r\n            {\r\n                internshipStageInfo.TuteurStage.UserUpdate = currentUser.Email;\r\n                internshipStageInfo.TuteurStage.DateUpdate = DateTime.Now;\r\n                internshipStageInfo.TuteurStage.Civilite = internshipBm.Tutor.Civility;\r\n                internshipStageInfo.TuteurStage.Nom = internshipBm.Tutor.LastName;\r\n                internshipStageInfo.TuteurStage.Prenom = internshipBm.Tutor.FirstName;\r\n                internshipStageInfo.TuteurStage.Mail = internshipBm.Tutor.Email.ToLower();\r\n                internshipStageInfo.TuteurStage.Phone = tutorPhoneNumberFormated;\r\n                internshipStageInfo.TuteurStage.Fonction = internshipBm.Tutor.Office;\r\n            }\r\n\r\n            var momentJourneesList = DataCache.GetMomentJournee(_db);\r\n            var range1Id = momentJourneesList.Where(q => q.Code == \"PLAGE1\").Select(q => q.Id).FirstOrDefault();\r\n            var range2Id = momentJourneesList.Where(q => q.Code == \"PLAGE2\").Select(q => q.Id).FirstOrDefault();\r\n            var range3Id = momentJourneesList.Where(q => q.Code == \"PLAGE3\").Select(q => q.Id).FirstOrDefault();\r\n            var range4Id = momentJourneesList.Where(q => q.Code == \"PLAGE4\").Select(q => q.Id).FirstOrDefault();\r\n\r\n            List<int> actualPeriods = internshipBm.Periods.Select(q => q.Id).ToList();\r\n            var periodToDelete = internshipStageInfo.PeriodeStages.Where(q => !actualPeriods.Contains(q.Id) && q.DateDelete == null)\r\n                                                    .ToList();\r\n\r\n            foreach (var period in periodToDelete)\r\n            {\r\n                period.UserDelete = currentUser.Email;\r\n                period.DateDelete = DateTime.Now;\r\n            }\r\n\r\n            List<JourHoraireStage> AllDaysScheduleToDelete = new List<JourHoraireStage>();\r\n\r\n            List<DateTime> holidays;\r\n\r\n            try\r\n            {\r\n\r\n                var holidaysIds = await this.UpdateHolidaysAsync(internshipBm, internshipStageInfo);\r\n                holidays = await this._db.JoursFeries.Where(q => holidaysIds.Contains(q.Id)).Select(q => q.Jour).ToListAsync();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to update holidays\");\r\n                return InternalServerError(e);\r\n            }\r\n\r\n\r\n            //Shedule\r\n            foreach (var periodBm in internshipBm.Periods)\r\n            {\r\n                if (periodBm.Id != 0)\r\n                {\r\n                    PeriodeStage period = internshipStageInfo.PeriodeStages.FirstOrDefault(q => q.Id == periodBm.Id && q.DateDelete == null);\r\n\r\n                    if (period == null)\r\n                    {\r\n                        Log.Error(\"Bad request user(id : {0}) don't have access to this period (id : {1})\", currentUser.Id, periodBm.Id);\r\n                        return BadRequest(\"L'utilisateur ne poss\u00e8de pas cette p\u00e9riode\");\r\n                    }\r\n\r\n                    int periodHours = this.GetPeriodMinutes(periodBm, holidays);\r\n\r\n                    if (period.DateDebut != periodBm.StartDate\r\n                        || period.DateFin != periodBm.EndDate\r\n                        || period.NbMinutes != periodHours)\r\n                    {\r\n                        period.UserUpdate = currentUser.Email;",
                    "metadata": {},
                    "type": "Document"
                },
                {
                    "page_content": "period.DateUpdate = DateTime.Now;\r\n                        period.DateDebut = periodBm.StartDate.Date;\r\n                        period.DateFin = periodBm.EndDate.Date;\r\n                        period.NbMinutes = periodHours;\r\n                    }\r\n\r\n                    List<int> actualDaysSchedules = periodBm.DaysSchedules.Select(q => q.Id).ToList();\r\n                    var daysScheduleToDelete = period.JourHoraireStages.Where(q => !actualDaysSchedules.Contains(q.Id) && q.DateDelete == null)\r\n                                                     .ToList();\r\n\r\n                    var daysCheduleToDeleteIds = daysScheduleToDelete.Select(q => q.Id).ToList();\r\n\r\n                    if (daysScheduleToDelete.Count > 0)\r\n                    {\r\n                        AllDaysScheduleToDelete = AllDaysScheduleToDelete.Concat(daysScheduleToDelete).ToList();\r\n                    }\r\n\r\n                    foreach (var dayScheduleBm in periodBm.DaysSchedules.OrderBy(q => q.WeekDayId)\r\n                                                          .ThenBy(q => q.StartHour))\r\n                    {\r\n                        if (dayScheduleBm.Id == 0)\r\n                        {\r\n                            bool bAddRange1 = !period.JourHoraireStages.Any(q => q.JourSemaineId == dayScheduleBm.WeekDayId && q.MomentJourneeId == range1Id && !daysCheduleToDeleteIds.Contains(q.Id) && q.DateDelete == null);\r\n                            bool bAddRange2 = !period.JourHoraireStages.Any(q => q.JourSemaineId == dayScheduleBm.WeekDayId && q.MomentJourneeId == range2Id && !daysCheduleToDeleteIds.Contains(q.Id) && q.DateDelete == null);\r\n                            bool bAddRange3 = !period.JourHoraireStages.Any(q => q.JourSemaineId == dayScheduleBm.WeekDayId && q.MomentJourneeId == range3Id && !daysCheduleToDeleteIds.Contains(q.Id) && q.DateDelete == null);\r\n\r\n                            int rangeId = bAddRange1 ? range1Id : (bAddRange2 ? range2Id : (bAddRange3 ? range3Id : range4Id));\r\n\r\n                            period.JourHoraireStages.Add(new JourHoraireStage()\r\n                            {\r\n                                UserCreate = currentUser.Email,\r\n                                DateCreate = DateTime.Now,\r\n                                HeureDebut = dayScheduleBm.StartHour,\r\n                                HeureFin = dayScheduleBm.EndHour,\r\n                                JourSemaineId = dayScheduleBm.WeekDayId,\r\n                                MomentJourneeId = rangeId,\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    var periodeStage = new PeriodeStage()\r\n                    {\r\n                        UserCreate = currentUser.Email,\r\n                        DateCreate = DateTime.Now,\r\n                        DateDebut = periodBm.StartDate.Date,\r\n                        DateFin = periodBm.EndDate.Date,\r\n                        NbMinutes = this.GetPeriodMinutes(periodBm, holidays),\r\n                        JourHoraireStages = new List<JourHoraireStage>()\r\n                    };\r\n\r\n                    foreach (var dayShedule in periodBm.DaysSchedules.OrderBy(q => q.WeekDayId)\r\n                                                       .ThenBy(q => q.StartHour))\r\n                    {\r\n                        int countRange = periodeStage.JourHoraireStages.Count(q => q.JourSemaineId == dayShedule.WeekDayId);\r\n\r\n                        periodeStage.JourHoraireStages.Add(new JourHoraireStage()\r\n                        {\r\n                            UserCreate = currentUser.Email,\r\n                            DateCreate = DateTime.Now,\r\n                            HeureDebut = dayShedule.StartHour,\r\n                            HeureFin = dayShedule.EndHour,\r\n                            JourSemaineId = dayShedule.WeekDayId,\r\n                            MomentJourneeId = countRange == 0 ? range1Id : (countRange == 1 ? range2Id : (countRange == 2 ? range3Id : range4Id)),\r\n                        });\r\n                    }\r\n\r\n                    internshipStageInfo.PeriodeStages.Add(periodeStage);\r\n                }\r\n            }\r\n\r\n\r\n            if (AllDaysScheduleToDelete.Count > 0)\r\n            {\r\n                var daysScheduleToDeleteIds = AllDaysScheduleToDelete.Select(q => q.Id).ToList();\r\n                StringBuilder sb = new StringBuilder();\r\n                foreach (var dayScheduleId in daysScheduleToDeleteIds)\r\n                {\r\n                    sb.Append($\"DELETE FROM ConventionStage.Jour_Horaire_Stage WHERE Id = {dayScheduleId};\");\r\n                }\r\n                try\r\n                {\r\n                    await this._db.Database.ExecuteSqlCommandAsync(sb.ToString());\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Log.Error(e, \"Unable to delete jour_horaire_stage\");\r\n                    return InternalServerError(e);\r\n                }\r\n            }\r\n\r\n            //Other info\r\n            internshipStageInfo.SpecificiteHoraire = internshipBm.ScheduleSpecificity;\r\n            internshipStageInfo.Objectif = internshipBm.StageObjective;\r\n            internshipStageInfo.GratificationMontant = internshipBm.GratificationAmount;\r\n            internshipStageInfo.FrequenceGratificationId = internshipBm.GratificationFrequenceId;\r\n            internshipStageInfo.AutreAvantageSalaries = internshipBm.SalariedAdvantage;\r\n            internshipStageInfo.AutreAvantageAgents = internshipBm.AgentAdvantage;\r\n            internshipStageInfo.StructureAccueilProtectionMaladie = internshipBm.SocialProtection;\r\n            internshipStageInfo.ModaliteConges = internshipBm.Leave;\r\n\r\n            try\r\n            {\r\n                await this._db.SaveChangesAsync();\r\n\r\n                return Ok(internshipStageInfo.Reference);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to update convention stage info in database\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
                    "metadata": {},
                    "type": "Document"
                }
            ]
        },
        {
            "name": "EditAddress",
            "code_start_index": 65869,
            "method_name": "EditAddress",
            "existing_summary": "\r\n        /// <summary>\r\n        /// Edit une Address \u00e0 partir d'un addressBM\r\n        /// </summary>\r\n        /// <param name=\"address\"></param>\r\n        /// <param name=\"addressBm\"></param>\r\n        /// <param name=\"userEmail\"></param>\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "address",
                    "param_name": "address",
                    "param_type": "Address",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "addressBm",
                    "param_name": "addressBm",
                    "param_type": "AddressBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "userEmail",
                    "param_name": "userEmail",
                    "param_type": "string",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            if (address.NumeroVoie != addressBm.WayNumber\r\n                || address.TypeVoieId != addressBm.WayTypeId\r\n                || address.NomVoie != addressBm.WayName\r\n                || address.PaysId != addressBm.CountryId\r\n                || address.Cp != addressBm.ZipCode\r\n                || address.Ville != addressBm.City\r\n                || address.Complement != addressBm.Complement)\r\n            {\r\n                address.UserUpdate = userEmail;\r\n                address.DateUpdate = DateTime.Now;\r\n                address.NumeroVoie = addressBm.WayNumber;\r\n                address.TypeVoieId = addressBm.WayTypeId;\r\n                address.NomVoie = addressBm.WayName;\r\n                address.PaysId = addressBm.CountryId;\r\n                address.Cp = addressBm.ZipCode;\r\n                address.Ville = addressBm.City;\r\n                address.Complement = addressBm.Complement;\r\n            }\r\n        }",
            "is_async": false,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the address information if any changes are detected in the input data.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "address",
                        "param_name": "address",
                        "param_desc": "The address object containing the details of the address to be edited."
                    },
                    {
                        "name": "addressBm",
                        "param_name": "addressBm",
                        "param_desc": "The binding model for the address containing the updated information."
                    },
                    {
                        "name": "userEmail",
                        "param_name": "userEmail",
                        "param_desc": "The email address of the user making the edit request."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the address information if any changes are detected in the input data.\n/// </summary>\n/// <param name=\"address\">The address object containing the details of the address to be edited.</param>\n/// <param name=\"addressBm\">The binding model for the address containing the updated information.</param>\n/// <param name=\"userEmail\">The email address of the user making the edit request.</param>\n",
            "code_chunks": null
        },
        {
            "name": "GetHolidaysForPeriodsAsync",
            "code_start_index": 67007,
            "method_name": "GetHolidaysForPeriodsAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "model",
                    "param_name": "model",
                    "param_type": "HolidaysForPeriodBindingModels",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n            try\r\n            {\r\n                var holidays = await _holidaysServices.GetHolidaysForPeriodsAsync(model.Periods, model.CountryId, model.ZipCode);\r\n                return Ok(holidays);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Log.Error(e, \"Unable to get holidays\");\r\n                return InternalServerError(e);\r\n            }\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Retrieve holidays for specified periods, country, and zip code asynchronously.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "HolidaysForPeriodBindingModels",
                        "param_name": "HolidaysForPeriodBindingModels",
                        "param_desc": "The model containing information about holidays for specific periods."
                    },
                    {
                        "name": "model",
                        "param_name": "model",
                        "param_desc": "The model used for binding and passing data related to holidays for periods."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Retrieve holidays for specified periods, country, and zip code asynchronously.\n/// </summary>\n/// <param name=\"HolidaysForPeriodBindingModels\">The model containing information about holidays for specific periods.</param>\n/// <param name=\"model\">The model used for binding and passing data related to holidays for periods.</param>\n",
            "code_chunks": null
        },
        {
            "name": "UpdateHolidaysAsync",
            "code_start_index": 67538,
            "method_name": "UpdateHolidaysAsync",
            "existing_summary": "\r\n        ",
            "attributes": null,
            "return_type": null,
            "params": [
                {
                    "name": "internshipBm",
                    "param_name": "internshipBm",
                    "param_type": "InternshipBindingModel",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                },
                {
                    "name": "internshipStageInfo",
                    "param_name": "internshipStageInfo",
                    "param_type": "ConventionStageInfo",
                    "has_default_value": false,
                    "default_value": "",
                    "description": null,
                    "extra_infos": null
                }
            ],
            "indent_level": 2,
            "code": "{\r\n\r\n            var periods = new List<Period>();\r\n            foreach (var period in internshipBm.Periods)\r\n            {\r\n                periods.Add(new Period\r\n                {\r\n                    StartDate = period.StartDate,\r\n                    EndDate = period.EndDate\r\n                });\r\n            }\r\n\r\n            int countryId;\r\n            string zipCode;\r\n\r\n            if (internshipBm.InternshipAddress != null)\r\n            {\r\n                countryId = internshipBm.InternshipAddress.CountryId;\r\n                zipCode = internshipBm.InternshipAddress.ZipCode;\r\n            }\r\n            else\r\n            {\r\n                countryId = internshipBm.Organization.Address.CountryId;\r\n                zipCode = internshipBm.Organization.Address.ZipCode;\r\n            }\r\n\r\n            var holidays = await _holidaysServices.GetHolidaysForPeriodsAsync(periods, countryId, zipCode);\r\n\r\n            var validHolidays = internshipBm.Holidays.Where(q => holidays.Any(h => h.Id == q)).ToList();\r\n\r\n            var existing = internshipStageInfo.JoursFeriesTravailles.Select(q => new\r\n            {\r\n                q.Id,\r\n                q.JourFerieId\r\n            }).ToList();\r\n\r\n            var holidaysToAdd = validHolidays.Where(q => !existing.Any(e => e.JourFerieId == q)).ToList();\r\n            var holidaysToDelete = existing.Where(q => !validHolidays.Contains(q.JourFerieId)).ToList();\r\n\r\n            foreach (var holidayId in holidaysToAdd)\r\n            {\r\n                internshipStageInfo.JoursFeriesTravailles.Add(new JoursFeriesTravaille\r\n                {\r\n                    JourFerieId = holidayId\r\n                });\r\n            }\r\n\r\n            if (holidaysToDelete.Count > 0)\r\n            {\r\n                var toDeleteIds = holidaysToDelete.Select(q => q.Id).ToList();\r\n                StringBuilder sb = new StringBuilder();\r\n                foreach (var id in toDeleteIds)\r\n                {\r\n                    sb.Append($\"DELETE FROM ConventionStage.Jours_Feries_Travailles WHERE Id = {id};\");\r\n                }\r\n                try\r\n                {\r\n                    await this._db.Database.ExecuteSqlCommandAsync(sb.ToString());\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Log.Error(e, \"Unable to delete Jours_Feries_Travailles\");\r\n                    throw e;\r\n                }\r\n            }\r\n\r\n            var holidaysNotWorked = holidays.Select(q => q.Id).Except(validHolidays).ToList();\r\n\r\n            return holidaysNotWorked;\r\n        }",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "_code_chunks": null,
            "generated_summary": "Update the list of holidays for a given internship period based on the country and zip code, adding or deleting holidays as needed.",
            "generated_parameters_summaries": {
                "params_list": [
                    {
                        "name": "internshipBm",
                        "param_name": "internshipBm",
                        "param_desc": "The InternshipBindingModel parameter represents the model containing information about the internship."
                    },
                    {
                        "name": "internshipStageInfo",
                        "param_name": "internshipStageInfo",
                        "param_desc": "The ConventionStageInfo parameter provides information about the stage of the internship."
                    }
                ]
            },
            "generated_return_summary": null,
            "generated_xml_summary": "/// <summary>\n/// Update the list of holidays for a given internship period based on the country and zip code, adding or deleting holidays as needed.\n/// </summary>\n/// <param name=\"internshipBm\">The InternshipBindingModel parameter represents the model containing information about the internship.</param>\n/// <param name=\"internshipStageInfo\">The ConventionStageInfo parameter provides information about the stage of the internship.</param>\n",
            "code_chunks": null
        }
    ],
    "properties": [],
    "name": "InternshipAgreementController"
}