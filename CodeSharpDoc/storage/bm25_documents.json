[
    {
        "page_content": "The 'SessionViewModel' class is a data model used to represent and manage session-related information in a C# application. It includes methods for updating session data, retrieving session details, and handling session-related operations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Handles quiz-related operations including authorization, validation, result saving, and status checking for users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the last version ID of a specific resource object that has been published and is currently available.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "GetLastResourceVersionId",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the user is allowed to take an exam based on their previous quiz attempts, school ID, and resource version ID, and generate a JWT token for authorization if allowed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "IsAllowedToTakeExamAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the user has completed the quiz asynchronously by retrieving the latest copy and its status, then comparing it with the rejected status code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "HasDoneTheQuizAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the current time falls within the validity period defined by the payload's 'NotBefore' and 'Expiration' timestamps.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "IsPayloadStillValid",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save the quiz results, decode the token, check token validity, retrieve user and resource information, parse detailed results, generate PDF report, store results in the database, create activity report, handle various error scenarios, send notification email if user failed the quiz.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "SaveQuizResultsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "StatsV2Controller is a C# class that provides methods to retrieve and analyze weekly connection statistics for the current user, focusing on web and mobile usage data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StatsV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the weekly connection statistics for the current user based on web and mobile usage data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StatsV2Controller",
            "method_name": "GetConnectionStatsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve sessions for a specific user within a certain time frame, including session details, attendees, evaluations, and parcours information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "GetSessions",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new collaboration session asynchronously, including user information and handling any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "CreateBBCollaborateAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a collaborative jury session asynchronously with specified participants and trainers, including creating user copies and notifications for each participant.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "CreateBBCollaborateJuryAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create an oral copy for a user by checking the existence of previous copies, retrieving necessary data, and setting up a new copy with specific attributes and statuses in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "CreateOralCopyForUser",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create oral notifications asynchronously for various events related to an oral examination, including reminders and information dissemination.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "CreateOralNotificationAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "TagsComparer is a C# class used for comparing objects based on their ID and libelle values, providing methods like Equals and GetHashCode for this purpose.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsComparer",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Class Summary: 'TagsV2Controller' manages the retrieval of tags from the newsfeed and forum, allowing for filtering and sorting options.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of tags from the newsfeed, with the option to filter by name and limit the results to 20 tags sorted alphabetically.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsV2Controller",
            "method_name": "GetNewsfeedTags",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of forum tags, with the option to filter by a specified keyword and limit the results to 20 tags, ordered alphabetically by name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsV2Controller",
            "method_name": "GetForumTags",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all forum tags from the database, including their id, label, promotional status, official status, and usage count, and return them in alphabetical order.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsV2Controller",
            "method_name": "GetAllForumTags",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ContactsV3Controller' is a class that provides methods to retrieve contact lists and official users with specific criteria within a school environment.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ContactsV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of contacts that match the specified search value, school, and user conditions, including user profile pictures, user types, and promotions, ordered by username and paginated.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ContactsV3Controller",
            "method_name": "GetContactsList",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve official users based on specific email addresses associated with different roles within a school, including their profile information and file URLs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ContactsV3Controller",
            "method_name": "GetOfficialUsersAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description: 'CopyCorrectorV3ViewModel' is a C# class that serves as a view model for a copy correction application, providing methods for managing and correcting text content.\r\n\r\nExposed Methods:\r\n1. LoadTextContent - Loads the initial text content for correction.\r\n2. CorrectSpelling - Corrects spelling errors in the text content.\r\n3. CorrectGrammar - Corrects grammar mistakes in the text content.\r\n4. SaveCorrectedText - Saves the corrected text content to a file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyCorrectorV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CopyDetailV3ViewModel is a C# class that represents a view model for copying details in a version 3 system. It contains methods such as GetCopyDetail, UpdateCopyDetail, and DeleteCopyDetail.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyDetailV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CopyHistoryV3ViewModel is a C# class that provides methods for managing and tracking the history of copied items.\r\n\r\nExposed methods:\r\n1. AddCopiedItem: Adds a new item to the copied history.\r\n2. GetCopiedItems: Retrieves a list of all copied items in the history.\r\n3. ClearHistory: Clears the entire copied history.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyHistoryV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CopyUserV3ViewModel is a C# class that represents a view model for copying user data, providing methods such as CopyUser() and ValidateUser().",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyUserV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'CorrectedCopyBindingModel' is a C# class designed to facilitate the correction and binding of data for a specific purpose.\r\n\r\nExposed Methods:\r\n1. ValidateData(): Validates the data within the binding model.\r\n2. CorrectData(): Corrects any errors in the data within the binding model.\r\n3. BindData(): Binds the corrected data to a specific target for further processing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CorrectedCopyBindingModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'CorrectedCopyV3ViewModel' is a C# class that serves as a view model for displaying corrected copies, providing methods for managing and interacting with corrected copies.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CorrectedCopyV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CoursesV3Controller is a C# class that provides methods to manage and retrieve course-related information for users, including change logs, progress tracking, favorites, ratings, and service details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the change log information for a given resource based on the specified resource version ID, including title, description, versions, publication date, release notes, and associated files. If the resource is not found, return a 'Not Found' status code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetChangeLogAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the media library content for the current user, including last open date, progress, favorites, user ratings, and progression details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetCoursesAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of parcours and matieres related to the mediatheque of the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetCurrentParcoursAndMatieres",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the parcours, matieres, and modules related to the mediatheque of the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetCurrentParcoursMatieresAndModules",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the service information for the current user based on the specified service ID, ensuring it is active and within the specified date range. If the service is not accessible, return a forbidden status code with an appropriate message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetServiceById",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the progress status of resources for a user asynchronously based on the specified progress level, handling different cases such as 'Todo', 'Doing', and 'Done'.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "SetProgressAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Manage the favorite status of a given resource for a specific user, either marking it as a favorite or unmarking it based on the provided conditions, and handle any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "MarkAsFavoriteAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve resource ratings asynchronously based on user feedback for a specific promotion, resource version, and parcours, calculating hours and minutes spent, satisfaction level, difficulty level, and comments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetResourceRatingAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Rate a resource asynchronously by capturing the user's feedback, including time spent, satisfaction level, difficulty level, and comments, then updating the UI with the new average rating, count, and user rating information, while also sending a notification to the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "RateResourceAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the resource path associated with a specific forum post ID, including all relevant resource objects and metadata, while ensuring that the user has the necessary permissions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetRessourcePathByForumPostIdAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the available services of a user based on certain criteria and conditions, including checking for specific services like Scholarvox, RosettaStone, and GoFluent, and returning a view model with the list of services and flags indicating the presence of each specific service.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "CheckServices",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "EvaluationCorrection is a class that handles the correction of evaluations. It includes methods such as CalculateFinalGrade() to determine the final grade, ApplyCurve() to adjust scores, and ProvideFeedback() to give feedback to students.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationCorrection",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "EvaluationGrid is a class that represents a grid used for evaluation purposes. It includes methods for adding, updating, and retrieving evaluation data.\r\n\r\n1. AddEvaluation: Adds a new evaluation to the grid.\r\n2. UpdateEvaluation: Updates an existing evaluation in the grid.\r\n3. GetEvaluation: Retrieves a specific evaluation from the grid.\r\n4. GetAllEvaluations: Retrieves all evaluations from the grid.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGrid",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'EvaluationsFormateurV3Controller' class manages the evaluation process for trainers, including retrieving student copy details, assigning copies to trainers, updating corrected copies, validating copies, and calculating grades and deadlines.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve detailed information about a student's copy, including student details, evaluation information, history, original copies, corrections, and related courses and evaluations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "GetStudentCopyDetailsAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Affect a copy to a trainer by adding an entry to the CopiesCorrigees table with the original copy ID and the trainer's ID, allowing the trainer to download the copy.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "AffectCopyToFormateur",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update a corrected copy of an original document, including grading, comments, and audio messages, while ensuring proper authorization and handling of evaluation grid submissions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "AddCorrectedCopyAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Validate a corrected copy, ensuring it meets all necessary criteria and updating its status accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "ValidateCorrectedCopy",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the status and details of a copy, calculate the final grade, and send a notification if validation is successful.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "CloseCopyAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if a teacher can correct a specific copy based on various conditions such as assignment, existence of original and corrected copies, and corrector's rights.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "CanCorrectCopyAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Calculate the number of working days until/after the due correction date.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "GetCopyRetard",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationSubject' is a class that represents a subject being evaluated, providing methods to retrieve and update evaluation-related information.\r\n\r\n1. GetSubjectName(): Retrieves the name of the evaluation subject.\r\n2. SetSubjectName(string name): Updates the name of the evaluation subject.\r\n3. GetSubjectGrade(): Retrieves the grade of the evaluation subject.\r\n4. SetSubjectGrade(int grade): Updates the grade of the evaluation subject.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationSubject",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'EvaluationV3Category' class represents a category for version 3 evaluations. It includes methods for adding, updating, and deleting evaluations within this category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationV3Category",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationV3ViewModel' is a C# class that serves as a view model for handling evaluations in a version 3 system.\r\n\r\nExposed Methods:\r\n1. UpdateEvaluation - Updates the evaluation information.\r\n2. DeleteEvaluation - Deletes a specific evaluation.\r\n3. GetEvaluationDetails - Retrieves details of a specific evaluation.\r\n4. GetAllEvaluations - Retrieves a list of all evaluations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'EventsListScope' enum represents the scope of events list, with options for CurrentFormations, Other, and All events.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "EventsListScope",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'EventsV3Controller' is a C# class that handles various operations related to live events, including retrieving event details, managing user participation, tracking activity, and adding/removing resource objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of live events related to the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "GetUserLivesTaskAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all live events that are not related to the user's training or school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "GetAllLivesTaskAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the details of a specific event, including event title, description, replay URL, start and end dates, attached files, participation status, event type, total participants, host information, thumbnail image, participating users, and views count.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "GetEventDetailsAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if a live event is currently ongoing by connecting to a BigBlueButton server and retrieving the meeting status for a specific event and organization.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "CheckIfLiveIsOngoing",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Set or update a user's participation status for a specified event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "SetEventParticipationAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Add an event to the user's favorites asynchronously, checking if the event exists and updating the user's participation status accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "AddEventToFavoritesAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's event participation by adding it to favorites or undoing the action, based on the event's existence and the user's previous participation status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "AddEventToFavoritesUndoAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the viewed status of a user for a specific event, creating a new entry if the user has not participated before.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "SetEventViewedAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the viewed status of a user's event participation to false, creating a new participation record if none exists.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "SetEventViewedUndoAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the acceptance of a host recording for a specific event owned by the current user in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "SaveHostRecodingAcceptanceAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Track activity of the current user by adding a new report entry with the user's ID, school ID, event ID, and duration in seconds to the database, and handle any exceptions by logging an error message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "TrackActivity",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Add a resource object to an event, checking ownership, file existence, resource type, and saving it to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "AddRessourceObjectAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Remove a resource object asynchronously if the current user is the owner, otherwise return a forbidden message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "RemoveRessourceObjectAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'FileV3ViewModel' is a C# class designed to handle and manage file-related operations and data for a specific version 3 of a file.\r\n\r\nExposed methods:\r\n1. LoadFileData: Loads the data of the file version 3.\r\n2. SaveFileData: Saves the data of the file version 3.\r\n3. UpdateFileData: Updates the data of the file version 3.\r\n4. DeleteFile: Deletes the file version 3.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FileV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumFormateurV3Controller is a class that provides methods to retrieve forum posts, count unhandled posts, and fetch forum assignments for teachers, with security checks and error handling in place.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all the forum posts linked to the current user, with specific conditions and security checks in place, returning the data in a paged format.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV3Controller",
            "method_name": "GetAllFormateurForumPostsAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the number of unhandled forum posts for the current connected user, handling any exceptions that may occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV3Controller",
            "method_name": "GetUnhandledForumPostsCountAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of forum assignments for the current user if they are a teacher, otherwise return a forbidden status code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV3Controller",
            "method_name": "GetForumFormateurFormationsFromAffectationsAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'GetScoresResult' is a C# class that represents the result of a method call to retrieve scores. It inclu\r\n/// /// /// /// des methods to access and manipulate the scores data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GetScoresResult",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'MedialibProgress' represents the progress status of tasks: Todo (0), Doing (1), and Done (2).",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "MedialibProgress",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'NewsfeedV3Controller' is a C# class that provides methods to retrieve and display profile information and online status of active users who are members of specific workgroups within a school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of active users who are members of specific workgroups within a school, including their profile information and promotions, and check if they are currently online.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV3Controller",
            "method_name": "GetDevMembersAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'NotificationV3Controller' is a C# class that provides methods to retrieve and update the current user's notification preferences using the notification service.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the current user's notification preferences asynchronously using the notification service, based on the user's identity and school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationV3Controller",
            "method_name": "GetCurrentUserNotificationPreferencesAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the current user's notification preferences asynchronously using the notification service, user ID, and email.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationV3Controller",
            "method_name": "SetCurrentUserNotificationPreferencesAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'OriginalCopyV3ViewModel' is a C# class that serves as a view model for managing and displaying data related to version 3 of an original copy.\r\n\r\nExposed Methods:\r\n1. GetData(): Retrieves data for the original copy version 3.\r\n2. UpdateData(): Updates the data for the original copy version 3.\r\n3. DisplayData(): Displays the data for the original copy version 3.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "OriginalCopyV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Enum 'RankOrderBy' represents different time intervals for ranking order, including weekly and trimester ranks.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "RankOrderBy",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'ResourceRatingModel' is a C# class that represents a model for storing and managing ratings for resources.\r\n\r\nMethods:\r\n1. CalculateAverageRating - Calculates the average rating based on individual ratings.\r\n2. AddRating - Adds a new rating to the resource.\r\n3. GetRatingCount - Retrieves the total number of ratings for the resource.\r\n4. GetHighestRating - Retrieves the highest rating given to the resource.\r\n5. GetLowestRating - Retrieves the lowest rating given to the resource.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResourceRatingModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ResourceRatingViewModelModel is a C# class that represents a view model for resource ratings. It includes methods for retrieving, updating, and deleting resource ratings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResourceRatingViewModelModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ServiceAccessV3Controller is a C# class that provides methods to retrieve service access details, activate services, and generate service access reports for school users based on specific service codes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the service access detail for a specific school user based on a service code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessV3Controller",
            "method_name": "GetServiceAccessDetail",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Activate a service for the current school user based on a specified service code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessV3Controller",
            "method_name": "ActivateService",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the service access report for the current user and school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessV3Controller",
            "method_name": "ReportService",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'Thumbnail' class is used to generate and manage thumbnail images. It includes methods for resizing, cropping, and saving thumbnails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Thumbnail",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: The 'UpdatedResourceRatingViewModel' class is used to represent and manage updated ratings for resources.\r\n\r\nMethods:\r\n1. UpdateResourceRating - Updates the rating for a resource.\r\n2. GetResourceRating - Retrieves the rating for a resource.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UpdatedResourceRatingViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'EventsV4Controller' is a class that provides methods for retrieving user lives, all lives, lives and replays, and current formations with error handling and security checks.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the user's lives based on search value, page number, page size, current user info, and events list scope for current formations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "method_name": "GetUserLivesTaskAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all lives for the current user with a specified search value, page number, and page size, within the context of events list scope 'Other'.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "method_name": "GetAllLivesTaskAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all lives and replays based on specified criteria, including security checks for data integrity and limits on display quantities.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "method_name": "GetAllLivesAndReplaysAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the current formations for the logged-in user and their school, handling any exceptions by logging the error message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "method_name": "GetCurrentFormations",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ForumV4Controller' is a C# class that provides methods to retrieve the current forum parcours for an authenticated user based on their user ID and school ID, while handling any potential errors that may arise during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV4Controller",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the current forum parcours for the authenticated user based on their user ID and school ID, handling any potential errors during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV4Controller",
            "method_name": "GetCurrentForumParcours",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "GlobalExamController is a class designed to retrieve the dynamic access URI for a global exam based on the current user's information and configuration values.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GlobalExamController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the dynamic access URI for a global exam based on the current user's information and configuration values.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GlobalExamController",
            "method_name": "GetGlobalExamAccessDynamicUserUri",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Summary: 'JiraController' is a C# class that handles various functions such as creating JIRA issues, retrieving school information, user information, cursus and sector details, and DNS configurations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create an issue in JIRA with all relevant data retrieved from various sources.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "CreateIssue",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the code and name of a specific school from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "GetSchoolInfo",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the first name and last name of a specific user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "GetUserInfo",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the title of a cursus and the corresponding Jira sector name based on a specified parcours code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "GetCursusAndSectorInfo",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the DNS configuration with a specific code from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "GetDns",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "JwpController is a class that handles web hook requests by processing media availability events and validating uploaded files against user and school information in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwpController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Handle the web hook request by processing the media availability event and validating the uploaded file against the user and school information in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwpController",
            "method_name": "PostHandleWebHook",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'ProctoringController' class handles asynchronous retrieval of user information, block exam session details, and user-specific exam session information, logging success or failure messages accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the user information details asynchronously, using the user ID from the current user's identity, and log the success or failure of the operation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringController",
            "method_name": "GetUserInfosAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve block exam session information asynchronously for a specified resource version ID, promotion code, and field code, logging success or error messages accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringController",
            "method_name": "GetBlockExamSessionInfosAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the block exam session information for a specified user based on their user ID and school user ID, with the possibility of providing evaluation and promotion codes, returning the result if successful or an error message if not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringController",
            "method_name": "GetUserBlockExamSessionInfosAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'RegionalSettingsController' class manages and controls regional settings for users, including retrieving time zones for countries, getting and updating user-specific regional settings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettingsController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the time zones for each country and return a list of country time zone view models containing the country code, name, time zone ID, and time zone name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettingsController",
            "method_name": "GetCountriesTimeZones",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the timezone ID for a specified user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettingsController",
            "method_name": "GetUserRegionalSettings",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's regional settings based on the provided country code, user ID, and time zone ID, creating a new address and user address if necessary. If the user's regional settings are already set, return a Not Modified response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettingsController",
            "method_name": "SetUserRegionalSettings",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'TeamController' is a C# class that allows users to retrieve team members asynchronously and active teams associated with the currently authenticated user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the team members asynchronously for a specified team, based on the current user's school ID and user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamController",
            "method_name": "GetTeamMembersAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the active teams associated with the currently authenticated user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamController",
            "method_name": "GetUserActiveTeamsAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "`TraceController` is a class that manages the tracking and creation of follow-up tickets for user acceptance of internal rules in a system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of user IDs for which an automatic follow-up ticket regarding the acceptance of the internal rules must be created, with a maximum number of users to consider.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceController",
            "method_name": "GetAllUsersIdsMissingTracesForInternalRulesApproval",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a batch of user IDs for which automatic follow-up tickets regarding the acceptance of internal rules approval must be created, with a maximum number of users specified.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceController",
            "method_name": "GetBatchUsersIdsMissingTracesForInternalRulesApproval",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create tracking tickets for the acceptance of internal rules for all users in the specified batch.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceController",
            "method_name": "CreateTracesForUsersInternalRulesApproval",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'NewsfeedV5Controller' is a C# class that provides methods for managing and interacting with posts, comments, and audience in a newsfeed service, handling access control, error logging, and notifications efficiently.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve wall posts asynchronously based on the user's identity, school ID, school ID list, tag IDs, date range, page size, filter, team ID, and workgroup, handling unauthorized access exceptions and logging errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "GetWallPostsAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a single post based on specified conditions, including user workgroups and school IDs, and return the post along with associated users in a paginated view model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "FetchPostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new post asynchronously, handling exceptions and returning the corresponding response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "PostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the audience for a specific post based on the user's school and user ID, handling potential exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "GetPostAudienceAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Make a post public asynchronously, using the current user's identity to authorize the action and handle any exceptions that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "MakePostPublicAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the like status of a post, incrementing the post score and notifying users who liked the post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "LikePostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the like status of a post by a user, decreasing the post score if the user has previously liked it, and notifying relevant groups of the change.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "LikePostUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Pin a post in the newsfeed service, checking rights and conditions before setting the post as sticky and saving the changes in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "PinPostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Undo the pinning of a post if the user has the right to do so and the post is currently pinned, otherwise return an error response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "PinPostUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a post asynchronously, handling exceptions for object not found or unauthorized access.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "DeletePostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Set the post to be hidden from prospects, based on the user's identity and school IDs list, with error handling for object not found, unauthorized access, and general exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "HidePostToPropectsAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Undo the action of hiding a post to prospects by the current user, using the post ID and user's school IDs list, returning an OK status if successful, handling exceptions for object not found, unauthorized access, and other errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "HidePostToPropectsUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create and post a new comment on a specific post, with validation for comment text, file attachments, and user permissions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "PostCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Like a comment asynchronously, checking if the user has already liked it and updating the comment's score accordingly, while also notifying other users and sending notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "LikeCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Undo liking a comment asynchronously, by removing the user's like and decreasing the comment score if the user has previously liked it, and notifying the relevant group of users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "LikeCommentUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a comment asynchronously with error handling for object not found, unauthorized access, and other exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "DeleteCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a NewsfeedItemV3ViewModel with posts and users, where the posts are filtered by ID and mapped with user-specific data, and the post body is modified to replace DNS configurations with a specified host.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "GetCreatePostVM",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'TeamNewsfeedV5Controller' class manages team newsfeed posts, comments, and interactions, allowing users to retrieve, create, like, pin, delete, and hide posts and comments with appropriate exception handling.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a team's posts from the newsfeed, paginated and filtered based on specified criteria.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "GetWallTeamPostsAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a single post related to a team, based on user and school information, and return it as a pagination view model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "FetchPostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new team post asynchronously with the current user's information and handle exceptions accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "PostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Like a team post asynchronously, handling exceptions such as invalid operation, unauthorized access, and database entity validation errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "LikePostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Unlike a team post and handle potential exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "LikePostUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Pin a team post asynchronously, handling various exceptions such as invalid operation, unauthorized access, and database entity validation errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "PinPostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Unpin a team post and handle any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "PinPostUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a team post asynchronously based on the provided team post ID, school ID, and user ID, handling various exceptions and returning appropriate responses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "DeletePostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Hide a specific team post from prospects by the current user, handling various exceptions and returning appropriate responses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "HidePostToPropectsAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Show the team post to prospects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "HidePostToPropectsUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create and post a new team comment on a given team post, with validation for comment text and number of files, and handling of exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "PostCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Like a team comment asynchronously, handling exceptions such as invalid operation, unauthorized access, and database entity validation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "LikeCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Unlike a team comment with the specified team comment ID, school ID, school IDs list, and user ID, handling various exceptions and returning appropriate responses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "LikeCommentUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a team comment asynchronously, handling different exceptions such as InvalidOperationException, UnauthorizedAccessException, DbEntityValidationException, and general exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "DeleteCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    }
]