[
    {
        "page_content": "This class 'EventParcoursMatieresListV3ViewModelComparer' provides methods to compare objects based on specific properties like 'ParcoursId', 'ParcoursCode', 'Name', 'Matieres', and 'PromotionsIds'.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventParcoursMatieresListV3ViewModelComparer",
            "namespace": "GlobalNamespaceOrNoNamespace",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "This class, FilteredCamelCasePropertyNamesContractResolver, is designed to modify property names of specified types to camel case before creating the property.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FilteredCamelCasePropertyNamesContractResolver",
            "namespace": "GlobalNamespaceOrNoNamespace",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "MedialibJsonHelpers is a C# class that provides methods to retrieve JSON theme objects and resources for specified course, subject, module, and theme IDs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MedialibJsonHelpers",
            "namespace": "GlobalNamespaceOrNoNamespace",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'CamelCaseControllerConfigAttribute' class updates JSON formatter settings in a controller for serialization with specific configurations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CamelCaseControllerConfigAttribute",
            "namespace": "LMS.Attributes",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'CompressionAlgorithmType' is an enum that represents different types of compression algorithms, including None, Deflate, and Gzip.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "CompressionAlgorithmType",
            "namespace": "LMS.Attributes",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'CompressionHelper' is a C# class that provides methods to compress a byte array using the 'Deflate' or 'GZip' algorithm.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CompressionHelper",
            "namespace": "LMS.Attributes",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'HttpCompressionAttribute' is a C# class that compresses response content using a supported compression type before executing the action, detecting the supported compression type based on the client's request headers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HttpCompressionAttribute",
            "namespace": "LMS.Attributes",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Compress the response content using a supported compression type before executing the action.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HttpCompressionAttribute",
            "method_name": "OnActionExecuted",
            "namespace": "LMS.Attributes",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Detect the supported compression type based on the client's request headers, prioritizing Deflate over Gzip and considering 'identity' as equivalent to 'Deflate' for mobile applications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HttpCompressionAttribute",
            "method_name": "GetSuppotedCompressionType",
            "namespace": "LMS.Attributes",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'MultipartMimeOnlyAttribute' is a C# class that validates if the request content is multipart/data and returns an error response if not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MultipartMimeOnlyAttribute",
            "namespace": "LMS.Attributes",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ApiV21RoutePrefixAttribute is a C# attribute class used to define a route prefix for API versioning in ASP.NET Core applications.\r\n\r\nExposed methods:\r\n1. Constructor - Initializes a new instance of the ApiV21RoutePrefixAttribute class.\r\n2. OnResourceExecuted - Called after the action result executes.\r\n3. OnResourceExecuting - Called before the action result executes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiV21RoutePrefixAttribute",
            "namespace": "LMS.Attributes.Routing",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ApiV2RoutePrefixAttribute is a C# class that represents an attribute used for specifying a route prefix for API versioning in an ASP.NET Core application. It allows developers to define a common route prefix for a group of controllers or actions within the application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiV2RoutePrefixAttribute",
            "namespace": "LMS.Attributes.Routing",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ApiV3RoutePrefixAttribute is a class used to define a route prefix for API version 3 in C#. It provides methods to set and retrieve the route prefix value.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiV3RoutePrefixAttribute",
            "namespace": "LMS.Attributes.Routing",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ApiV4RoutePrefixAttribute is a C# class that represents an attribute used to define a route prefix for API version 4. It helps in organizing and grouping routes within an API.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiV4RoutePrefixAttribute",
            "namespace": "LMS.Attributes.Routing",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ApiV5RoutePrefixAttribute is a C# class that represents an attribute used to define a route prefix for API version 5. It provides methods for setting and getting the route prefix value.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiV5RoutePrefixAttribute",
            "namespace": "LMS.Attributes.Routing",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ValidateModelStateAttribute' is a C# class that validates the model state during action execution and generates a bad request response if the model state is invalid.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ValidateModelStateAttribute",
            "namespace": "LMS.Attributes",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'MaxLengthWithErrorCodeAttribute' is a C# class that validates a value using a base class method and returns a custom validation result with an error code if the validation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MaxLengthWithErrorCodeAttribute",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate a value using a base class method and return a custom validation result with an error code if validation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MaxLengthWithErrorCodeAttribute",
            "method_name": "IsValid",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'RegularExpressionWithErrorCodeAttribute' is a C# class that validates input values using a regular expression and returns a ValidationResultWithErrorCode if the validation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegularExpressionWithErrorCodeAttribute",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate the input value and return a ValidationResultWithErrorCode if validation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegularExpressionWithErrorCodeAttribute",
            "method_name": "IsValid",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'RequiredWithErrorCodeAttribute' is a C# class that validates input values and returns a ValidationResultWithErrorCode if validation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RequiredWithErrorCodeAttribute",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate the input value and return a ValidationResultWithErrorCode if validation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RequiredWithErrorCodeAttribute",
            "method_name": "IsValid",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Class Summary: 'StringLengthWithErrorCodeAttribute' is a C# attribute used to validate input values and return a ValidationResultWithErrorCode if validation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StringLengthWithErrorCodeAttribute",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate the input value and return a ValidationResultWithErrorCode if validation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StringLengthWithErrorCodeAttribute",
            "method_name": "IsValid",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A C# class representing a validation result with an error code.\r\n\r\nMethods:\r\n1. GetErrorCode() - Retrieves the error code associated with the validation result.\r\n2. SetErrorCode(int errorCode) - Sets the error code for the validation result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ValidationResultWithErrorCode",
            "namespace": "LMS.Attributes.Validation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'AddChallengeOnUnauthorizedResult' is a C# class that executes the inner result asynchronously, adding a challenge if an unauthorized status code is detected before returning the response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AddChallengeOnUnauthorizedResult",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Execute the inner result asynchronously, checking for unauthorized status code and adding a challenge if needed before returning the response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AddChallengeOnUnauthorizedResult",
            "method_name": "ExecuteAsync",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'ApplicationUser' class represents a user in the application. It contains methods for managing user information and authentication.\r\n\r\nMethods:\r\n1. UpdateUserInfo - Updates the user's information.\r\n2. ChangePassword - Allows the user to change their password.\r\n3. ResetPassword - Resets the user's password.\r\n4. AuthenticateUser - Authenticates the user's credentials.\r\n5. AddRole - Adds a role to the user.\r\n6. RemoveRole - Removes a role from the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApplicationUser",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "AppPrincipal class provides functionality to check if a role is assigned to the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AppPrincipal",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Return a boolean value indicating whether a role is assigned or not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AppPrincipal",
            "method_name": "IsInRole",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'AuthenticationFailureResult' is a class that handles authentication failures by creating and returning an unauthorized HTTP response message with a specified reason phrase.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AuthenticationFailureResult",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Execute the method asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AuthenticationFailureResult",
            "method_name": "ExecuteAsync",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create and return an unauthorized HTTP response message with a specified reason phrase.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AuthenticationFailureResult",
            "method_name": "Execute",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'IdentityExtensions' is a C# class that provides methods to retrieve school IDs, user IDs, and ApplicationUser objects based on the current user's identity or a specified user's identity.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IdentityExtensions",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'JwPlayerJwtAuthenticateAttribute' is a C# class used for authenticating and validating JWT tokens for authorization purposes, with methods such as AuthenticateAsync and ChallengeAsync to handle unauthorized access.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwPlayerJwtAuthenticateAttribute",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Authenticate and validate a JWT token for authorization.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwPlayerJwtAuthenticateAttribute",
            "method_name": "AuthenticateAsync",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Add a Bearer authentication challenge to the result in case of unauthorized access.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwPlayerJwtAuthenticateAttribute",
            "method_name": "ChallengeAsync",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'JwtAuthenticateAttribute' is a C# class that provides methods for validating authentication credentials, retrieving user information from a valid token, and setting the user as the principal if found. It also allows creating filters based on a list of school codes and adding authentication challenges on unauthorized results.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwtAuthenticateAttribute",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate authentication credentials and retrieve user information based on a valid token, filtering by specified schools and setting the user as the principal if found, otherwise returning an authentication failure result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwtAuthenticateAttribute",
            "method_name": "AuthenticateAsync",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a filter to retrieve EcoleUser objects based on a list of school codes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwtAuthenticateAttribute",
            "method_name": "CreateFilterByEcolesList",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Add authentication challenge on unauthorized result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwtAuthenticateAttribute",
            "method_name": "ChallengeAsync",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'LogHttpRequestsMiddlewareExtensions' is a C# class that provides a method called 'UseHttpLogging' to enable HTTP request logging using a custom middleware in an application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddlewareExtensions",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'SlidingExpirationMiddleware' is a C# class that handles the renewal of LMS tokens, validation of tokens, and determines if a token is a valid LMS token.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SlidingExpirationMiddleware",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Renew the LMS token if needed before invoking the next middleware in the pipeline.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SlidingExpirationMiddleware",
            "method_name": "Invoke",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Check if a valid LMS token is present in the authorization header and renew it if necessary based on the refresh latency elapsed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SlidingExpirationMiddleware",
            "method_name": "RenewLmsTokenIfNeeded",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate a token and return whether it is a valid LMS token or not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SlidingExpirationMiddleware",
            "method_name": "IsLMSToken",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'SlidingExpirationMiddlewareExtensions' is a C# class that provides a method called 'UseSlidingExpiration' to enable sliding expiration for middleware in a specified container.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SlidingExpirationMiddlewareExtensions",
            "namespace": "LMS.Authentication",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'ActivityTrackingAutoMapperProfile' class is used to define mapping configurations for activity tracking entities in AutoMapper.\r\n\r\nMethods:\r\n1. ConfigureMappings - Configures mappings for activity tracking entities.\r\n2. MapActivityToDto - Maps an activity entity to a DTO for display.\r\n3. MapDtoToActivity - Maps a DTO back to an activity entity for processing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingAutoMapperProfile",
            "namespace": "LMS.AutoMapperProfiles",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'PartnerUserAutoMapperProfile' class is responsible for defining mapping configurations for converting PartnerUser objects to DTOs and vice versa. It contains methods for configuring mappings between the two types.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PartnerUserAutoMapperProfile",
            "namespace": "LMS.AutoMapperProfiles",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'BbCollaborate' is a C# class designed to facilitate collaboration among users through various methods.\r\n\r\n1. Method: StartSession\r\nSummary: Initiates a new collaboration session.\r\n\r\n2. Method: JoinSession\r\nSummary: Allows a user to join an existing collaboration session.\r\n\r\n3. Method: SendMessage\r\nSummary: Sends a message to all participants in the collaboration session.\r\n\r\n4. Method: ShareFile\r\nSummary: Shares a file with all participants in the collaboration session.\r\n\r\n5. Method: EndSession\r\nSummary: Ends the current collaboration session.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BbCollaborate",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'BigBlueButtonServer' class is responsible for managing communication and interactions with a BigBlueButton server.\r\n\r\nExposed Methods:\r\n1. ConnectToServer() - Establishes a connection with the BigBlueButton server.\r\n2. JoinMeeting() - Allows a user to join a meeting on the BigBlueButton server.\r\n3. CreateMeeting() - Creates a new meeting on the BigBlueButton server.\r\n4. EndMeeting() - Ends a meeting on the BigBlueButton server.\r\n5. GetMeetingInfo() - Retrieves information about a specific meeting on the BigBlueButton server.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonServer",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'ConfigOptionNotSetException' class represents an exception that is thrown when a required configuration option is not set.\r\n\r\nExposed Methods:\r\n1. Constructor - Initializes a new instance of the ConfigOptionNotSetException class with a specified error message.\r\n2. Constructor - Initializes a new instance of the ConfigOptionNotSetException class with a specified error message and a reference to the inner exception that is the cause of this exception.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConfigOptionNotSetException",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'ConfigProvider' class provides methods to retrieve various configuration settings from the application, such as email addresses, connection strings, keys, URLs, and other parameters, handling errors and exceptions when values are missing or invalid.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConfigProvider",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\nThe 'ConnectionStrings' class stores and manages database connection strings for various data sources.\r\n\r\nMethods:\r\n1. AddConnectionString - Adds a new database connection string to the collection.\r\n2. RemoveConnectionString - Removes a database connection string from the collection.\r\n3. GetConnectionString - Retrieves a database connection string based on a specified key.\r\n4. GetAllConnectionStrings - Returns all database connection strings stored in the collection.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionStrings",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'CustomDbConfiguration' is a C# class that provides custom configuration settings for a database connection.\r\n\r\nExposed Methods:\r\n1. SetConnectionString: Sets the connection string for the database.\r\n2. SetTimeout: Sets the timeout value for database operations.\r\n3. SetMaxConnections: Sets the maximum number of connections allowed to the database.\r\n4. SetRetryPolicy: Sets the retry policy for handling database connection failures.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CustomDbConfiguration",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'EFCommandInterceptor' class is designed to intercept and log Entity Framework commands, including non-query, query, scalar, and command executions, providing detailed information and logging capabilities using the ILogger interface.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Execute a query without returning any results.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "NonQueryExecuted",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Execute a non-query command.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "NonQueryExecuting",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Execute a query with a specified command and interception context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "ReaderExecuted",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Execute a command.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "ReaderExecuting",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Execute a scalar query with the specified command and interception context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "ScalarExecuted",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Execute a scalar command.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "ScalarExecuting",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Log information about a command execution if logging is enabled.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "QueryExecuted",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Start measuring the time elapsed for a specific operation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "CommandExecuting",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Stop the stopwatch when a command has been executed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "CommandExecuted",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a log message with information about the intercepted EF command, including parameters and duration, then log it using the ILogger interface.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EFCommandInterceptor",
            "method_name": "LogInfo",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'Email' class represents an email message and provides methods for sending, receiving, and managing emails.\r\n\r\nMethods:\r\n1. SendEmail: Sends an email message.\r\n2. ReceiveEmail: Retrieves incoming email messages.\r\n3. ForwardEmail: Forwards an email message to another recipient.\r\n4. SaveEmail: Saves an email message to a specified location.\r\n5. DeleteEmail: Deletes an email message from the inbox.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Email",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'Environments' enum represents different environments, with 'Dev' for development and 'Prod' for production.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "Environments",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'Firebase' class is a utility class that provides methods for interacting with the Firebase Realtime Database and Authentication services.\r\n\r\nMethods:\r\n1. InitializeFirebaseApp - Initializes the Firebase app with the given configuration.\r\n2. GetDatabaseReference - Retrieves a reference to the Firebase Realtime Database.\r\n3. GetAuthInstance - Retrieves an instance of the Firebase Authentication service.\r\n4. SignInWithEmailAndPassword - Signs in a user using their email and password.\r\n5. CreateUserWithEmailAndPassword - Creates a new user account using an email and password.\r\n6. SignOut - Signs out the current user from Firebase.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Firebase",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets or sets the IS_SWAGGER_ENABLED configuration value",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "IsSwaggerEnabled",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetBatchSize.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetBatchSize",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Check if the specified configParam exists in the config file otherwise a ConfigOptionNotSetException is thrown.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "ConfigParamExists",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets a comma-separated list of email addresses where to send notification when a post is added to the wall newsfeed.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetWallPostNotifiedUsers",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets a comma-separated list of email addresses where to send satisfaction users.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetSatisfactionUsers",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Get the current environment.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetLmsEnv",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Get the current environment.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetSchoolCode",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the connection string from the config file.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetConnectionString",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets the report connections v2 connection string (called RC POC)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetReportConnectionsV2ConnectionString",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets the report connections string used by SignalR",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetReportConnectionsSignalR",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the do you buzz private key.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetDoYouBuzzKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the hangfire connection string from the config file.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetHangfireConnectionString",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Read the scholarvox keys from the environment variables.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetScholarvoxKeys",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetCommandTimeout.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetCommandTimeout",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the address of the SMTP host used for sending emails.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetSmtpServerAddress",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetScholarvoxUrl.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetScholarvoxUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the signing key of the JWT tokens.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwtKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the jwt key id from config file",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwtKeyId",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets the JWT token refresh latency.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwtTokenRefreshLatency",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the validity duration of the JWT token.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwtTokenValidity",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets the JWT token validity mobile.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwtTokenValidityMobile",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets the JWT token validity for password reset link.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwtTokenValidityForPasswordResetLink",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets the JWT token validity for prospect user.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwtTokenValidityForProspectUser",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets the JWT token validity for account validation.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwtTokenValidityForAccountValidation",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the signing key of the JWT tokens.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetEncoded64Key",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the Firebase Cloud Messaging server key.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetFirebaseServiceAccountJson",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Read the Upload Manager Url.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetUploadManagerUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the Firebase Cloud Messaging sender Id.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetPasswordSetupKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Return the resources server url.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetResourcesServerUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Returns the key used to sign quiz responses.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetQcmKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Returns the Application Insights Instrumentation key.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetInstrumentationKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetLogsConnectionString.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetLogsConnectionString",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetBbbModeratorPassword.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetBbbModeratorPassword",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetBbbAttendeePassword.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetBbbAttendeePassword",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetBbbServerSalt.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetBbbServerSalt",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetGofluentUrl.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGofluentUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetGofluentKey.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGofluentKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetGofluentIv.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGofluentIv",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetOffice365Authority.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetOffice365Authority",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetOffice365ClientId.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetOffice365ClientId",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetOffice365ClientSecret.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetOffice365ClientSecret",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetOffice365Hostname.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetOffice365Hostname",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetOffice365LicenseId.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetOffice365LicenseId",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetStudiSchedulerUrl.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetStudiSchedulerUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetBBCollaborateUrl.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetBBCollaborateUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetBBCollaborateSecret.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetBBCollaborateSecret",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetBBCollaborateKey.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetBBCollaborateKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetJotformUrl.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJotformUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetJotformAPIKey.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJotformAPIKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetEmailTemplateUrl.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetEmailTemplateUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetJWPlayerLicenseKey.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJWPlayerLicenseKey",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetJWPlayerPlayerId.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJWPlayerPlayerId",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetJWPlayerRepositorySecret.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJWPlayerRepositorySecret",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetJwPlayerStudentRepositoryApiVersion1Secret.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetJwPlayerStudentRepositoryApiVersion1Secret",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetSuiviPrestataireEmail.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetSuiviPrestataireEmail",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The Organization name (meaning Server instance for DB, like STUDI, IPAC, ACADEMEE)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetOrganizationName",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetGithubStudentSchoolId.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGithubStudentSchoolId",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetGithubStudentSecret.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGithubStudentSecret",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The GetStudiDocumentGeneratorUrl.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetStudiDocumentGeneratorUrl",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The Global Exam partner value.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGlobalExamPartnerValue",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The Global Exam contractId value.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGlobalExamContractIdValue",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The Global Exam access URI value.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGlobalExamParameterizedAccessUriValue",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The Global Exam JWT private key value.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetGlobalExamJwtPrivateKeyValue",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets a live post lifetime, in hours.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetLivePostLifetimeInHours",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets the school sales phone number appearing on emails sent to prospects.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetSchoolSalesPhoneNumber",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets a default discovery course availability duration, in days.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetDefaultDiscoveryCourseAvailabilityInDays",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Gets list of tabs for newsfeed",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetNewsFeedTabs",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the IS_PARTNER_NEW_USER_ENDPOINT_ENABLED configuration value",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "IsPartnerNewUserEndpointEnabled",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the LONGTERM_APPRENTICESHIP_DURATION configuration value",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetLongtermDiscoveryCoursesDuration",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Reads the DEFAULT_NB_REQUESTS_BY_SECOND_BY_CLIENT configuration value",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConfigProvider",
            "method_name": "GetDefaultNbRequestsBySecondByClient",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'JsonConfiguration' is a C# class used for reading and writing configuration settings in JSON format.\r\n\r\nMethods:\r\n1. LoadConfiguration - Loads configuration settings from a JSON file.\r\n2. SaveConfiguration - Saves configuration settings to a JSON file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JsonConfiguration",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Scholarvox is a class used for managing scholarly articles and publications. It includes methods for adding, updating, and deleting articles, as well as searching for articles by keyword.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Scholarvox",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'SigningKeys' is a C# class that provides methods for generating, storing, and managing cryptographic keys used for signing data and verifying signatures.\r\n\r\nMethods:\r\n1. GenerateKeyPair: Generates a new public-private key pair for signing data.\r\n2. GetPublicKey: Retrieves the public key for verifying signatures.\r\n3. SignData: Signs the input data using the private key.\r\n4. VerifySignature: Verifies the signature of the input data using the public key.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SigningKeys",
            "namespace": "LMS.Configuration",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'AdobeController' is a C# class that provides methods to check and retrieve the activation status and details of Office 365 services for the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AdobeController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the current user has an active subscription for a specific service, and return the corresponding Adobe state based on activation status and login information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AdobeController",
            "method_name": "Office365IsActivatedAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the Office 365 service status and details for the current user, including activation status and dates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AdobeController",
            "method_name": "GetOffice365Async",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'AnnotationeerController' class manages the insertion, update, retrieval, and deletion of annotations, comments, audio data, and digital signatures in the database, as well as exporting data to a PDF file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Insert or update a comment in the database based on the provided parameters, returning the updated comment object if successful.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "InsertUpdateComment",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update or insert annotations in the database based on their ID and modification status, including creating new annotations, updating existing ones, and handling deletion requests.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "InsertUpdateAnnotation",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete an annotation from the database by its unique identifier, returning a success status if the operation is completed successfully or an error status if an exception occurs during the deletion process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "DeleteAnnotation",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve an annotation by its Id from the database and return it, handling any potential errors with appropriate logging.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "GetAnnotation",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all annotations for a specific document ID, including associated settings, comments, drawing positions, and review statuses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "GetAnnotations",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Insert or update audio data in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "InsertUpdateAudio",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the audio annotation by its unique identifier.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "GetAudioAnnotationId",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Insert a digital signature based on the currently logged in user's ID into the database, with specified height, width, and signature values, returning the inserted digital signature if successful or an error message if an exception occurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "InsertSignature",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a digital signature by its ID and the current user's ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "DeleteSignatureById",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Export the data to a PDF file using the AnnotationeerSaver class from the AnnotationExporter.AsposeExporter namespace with the specified ID, then return an OK response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationeerController",
            "method_name": "ExportToPdf",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'AssignedLicense' is a C# class that represents a license that has been assigned to a user, with methods for retrieving and updating license information.\r\n\r\nMethods:\r\n1. GetLicenseInfo() - Retrieves information about the assigned license.\r\n2. UpdateLicenseInfo() - Updates the information of the assigned license.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AssignedLicense",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: The 'AssignLicense' class is responsible for managing the assignment of licenses to users within a system.\r\n\r\nExposed Methods:\r\n1. AssignLicenseToUser - Assigns a license to a specific user.\r\n2. RemoveLicenseFromUser - Removes a license from a user.\r\n3. CheckLicenseStatus - Checks the status of a license for a user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AssignLicense",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "AzureAdUser class represents a user in Azure Active Directory. It provides methods for managing user properties and permissions within the Azure AD environment.\r\n\r\nMethods:\r\n1. GetUserDetails() - Retrieves details of the user from Azure AD.\r\n2. UpdateUserDetails() - Updates the user's properties in Azure AD.\r\n3. AssignRole() - Assigns a role to the user in Azure AD.\r\n4. RemoveRole() - Removes a role from the user in Azure AD.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AzureAdUser",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'BigBlueButtonCallbackController' class handles BigBlueButton callback events for both V1 and V2 versions, processing meeting creation, publish ending, and other related events by updating database records and handling error logging.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonCallbackController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Handle a BigBlueButton callback asynchronously, determining the message version and routing to the appropriate handler based on the presence of specific attributes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonCallbackController",
            "method_name": "HandleCallbackAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Process different types of callbacks related to BigBlueButton V1 events, such as meeting creation, publish ending, or other unhandled events, by deserializing the event information and payload, then executing the corresponding processing method based on the event type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonCallbackController",
            "method_name": "HandleBBBMessageV1Callback",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Process callback events related to BigBlueButton (BBB) version 2.x, including handling meeting creation, publish ending, and unhandled events, with error logging and response handling.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonCallbackController",
            "method_name": "HandleBBBMessageV2Callback",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the internal meeting ID for a created event in the database and log the result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonCallbackController",
            "method_name": "ProcessMeetingCreated",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the replay URL for a meeting that has ended on BigBlueButton, saving it to the database if successful. If the URL is not initially provided, attempt to retrieve it using the GetRecordings method.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonCallbackController",
            "method_name": "ProcessPublishEnded",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'BigBlueButtonController' is a C# class that provides methods to create, manage, and retrieve information about meetings in Big Blue Button, including creating new meetings, closing sessions, joining meetings, and getting meeting details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new meeting in Big Blue Button, fetch event information, create meeting on BBB server, create wall posts to announce live start, and publish notifications for live start.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonController",
            "method_name": "CreateNewMeetingAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Close the session meeting by ending the event and denying access to the live meeting for all participants.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonController",
            "method_name": "CloseSessionMeeting",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Join a user to a meeting on Big Blue Button, checking for event existence and user presence, creating a new user if necessary, and handling errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonController",
            "method_name": "JoinMeetingAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve and return information about a specific meeting event, including meeting name, ID, create time, running status, duration, participant count, max users, and attendee details, from the Big Blue Button server associated with the event's server URL.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonController",
            "method_name": "GetInfoMeetingAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "DoYouBuzzController is a C# class used to retrieve the URL for a DoYouBuzz profile based on the current user's information and groups.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DoYouBuzzController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the URL for a DoYouBuzz profile based on the current user's information and groups.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DoYouBuzzController",
            "method_name": "GetAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "ElephormCategoryViewModel is a class that represents a view model for Elephorm categories. It includes methods to retrieve and manipulate category information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormCategoryViewModel",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Summary: 'ElephormController' is a class that provides methods for retrieving, filtering, and managing the Elephorm catalog for users based on their subscription status and preferences.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the categories available in the Elephorm catalog for the current user, taking into account their subscription status and activation date. If successful, filter the catalog based on user-specific criteria and return the result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormController",
            "method_name": "GetCategories",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the Elephorm catalog asynchronously from the specified URL and deserialize it into a list of Elephorm category view models, handling errors by logging and throwing an exception if necessary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormController",
            "method_name": "GetElephormCatalogAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Filter the Elephorm catalog based on a whitelist of categories and subcategories, returning only the items that match the whitelist criteria.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormController",
            "method_name": "FilterElephormCatalog",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'GoFluentController' is a C# class that handles the activation and submission process of a user's Go Fluent account connection information, logging errors that may occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GoFluentController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the user's Go Fluent account connection information and handle the activation and submission process accordingly, logging any errors that occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GoFluentController",
            "method_name": "UserAccountConnectionAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'HangfireController' class manages jobs in Hangfire by allowing users to delete jobs by their jobId. It returns an OK status if successful or an InternalServerError if unable to delete the job.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HangfireController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a job by its jobId using BackgroundJob.Delete method, returning an OK status if successful or an InternalServerError if unable to delete the job.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HangfireController",
            "method_name": "DeleteJob",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "MsGraphClient is a C# class designed to interact with Microsoft Graph API, providing methods to create users in Azure Active Directory, assign licenses, and acquire access tokens using client credentials.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MsGraphClient",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a new user in Azure Active Directory with specified details and return the created user object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MsGraphClient",
            "method_name": "CreateUserAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Assign a license to a specified user with the provided license ID, ensuring success and returning a boolean indicating if the operation was successful.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MsGraphClient",
            "method_name": "AssignLicense",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Acquire an access token for the Microsoft Graph API using client credentials.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MsGraphClient",
            "method_name": "GetTokenAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'Office365Controller' is a class that provides methods to check, retrieve, and activate Office 365 services for users, including generating temporary passwords.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Office365Controller",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the user's Office 365 service is activated and return the corresponding login information or a forbidden message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Office365Controller",
            "method_name": "Office365IsActivatedAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the Office 365 service details and activate it for the current user, including creating a new user account and assigning a license.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Office365Controller",
            "method_name": "GetOffice365Async",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Generate a temporary password consisting of 8 random alphanumeric characters followed by \"!@#123\".",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Office365Controller",
            "method_name": "GetTempPassword",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "PasswordProfile class represents a user's password profile with methods for updating and validating passwords.\r\n\r\nExposed methods:\r\n1. UpdatePassword - Updates the user's password.\r\n2. ValidatePassword - Validates the user's input password.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PasswordProfile",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'RosettaStoneController' class is responsible for retrieving user account connection information from the database based on school user ID and group ID, attempting to connect using the retrieved credentials, and returning the connection result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RosettaStoneController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the user account connection information from the database based on the school user ID and group ID, then attempt to connect using the retrieved credentials and return the connection result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RosettaStoneController",
            "method_name": "UserAccountConnectionAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "ScholarvoxController is a C# class that provides methods for retrieving resource links from Scholarvox, validating authentication requests, converting byte arrays to hexadecimal strings, generating signed hashes, and creating SHA-1 hash values from strings using UTF-8 encoding.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ScholarvoxController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the link for a resource on Scholarvox, using the user's information to generate a signature and make a request to the API, handling different scenarios such as specifying a document ID, page number, folder ID, or redirect URL, and returning the resource URL if successful or logging an error message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ScholarvoxController",
            "method_name": "GetRessourceLinkAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Validate the authentication request parameters, verify the signature, and check if the user exists in the database before returning a success response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ScholarvoxController",
            "method_name": "CheckAuthAsync",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Convert a byte array into a hexadecimal string.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ScholarvoxController",
            "method_name": "HashStringFromBytes",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Generate a signed hash from the provided data using SHA-1 algorithm and specific keys.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ScholarvoxController",
            "method_name": "SignData",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Generate a SHA-1 hash value from a given string of data using UTF-8 encoding.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ScholarvoxController",
            "method_name": "Sha1HashFromString",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'ScholarvoxResponse' is a C# class that represents a response object from the Scholarvox API, providing methods for accessing and manipulating the response data.\r\n\r\nExposed Methods:\r\n1. GetStatusCode() - Retrieves the status code of the Scholarvox response.\r\n2. GetResponseData() - Returns the data contained in the Scholarvox response.\r\n3. IsSuccess() - Checks if the Scholarvox response was successful.\r\n4. GetErrorMessage() - Retrieves the error message from the Scholarvox response, if any.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ScholarvoxResponse",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'UploadedFileBm' is a C# class designed to handle uploaded files, providing methods for file manipulation and management.\r\n\r\nExposed methods:\r\n1. SaveFile: Saves the uploaded file to a specified location.\r\n2. DeleteFile: Deletes the uploaded file from the system.\r\n3. GetFileSize: Retrieves the size of the uploaded file.\r\n4. GetFileExtension: Retrieves the file extension of the uploaded file.\r\n5. GetFileName: Retrieves the name of the uploaded file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UploadedFileBm",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'UploadsController' is a C# class that handles the uploading of files, saving their information in the database, and returning unique identifiers for new or existing files.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UploadsController",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save the uploaded file information in the database and return its unique identifier if it is a new file, or return the existing file's unique identifier if it already exists.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UploadsController",
            "method_name": "SaveUploadedFile",
            "namespace": "LMS.Controllers.Common",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ExternalAuthenticationController' is a C# class that handles the authentication process by retrieving user information from an external authentication service using the school user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ExternalAuthenticationController",
            "namespace": "LMS.Controllers.ExternalServices",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the user information from an external authentication service based on the school user ID extracted from the current user's identity.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ExternalAuthenticationController",
            "method_name": "Authenticate",
            "namespace": "LMS.Controllers.ExternalServices",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'RepositoryV3' class provides methods to retrieve and manipulate data related to users, posts, comments, tags, events, promotions, and more within a specified organization or school setting.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RepositoryV3",
            "namespace": "LMS.Controllers",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ActivityTrackingController' class is responsible for retrieving and converting activity tracking data for the current user and school into viewmodel collection.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the activity tracking data for the current user and school, converting it into viewmodel collection before returning it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingController",
            "method_name": "GetActivityTracking",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ConnectionController' is a class that handles various operations related to user authentication, session management, device information, and user interactions within a school context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve school configuration data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "GetSchool",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve school configuration details by school code, returning a 404 error if the school does not exist.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "GetSchoolConfig",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Logout from a web session asynchronously, using the user's identity to handle different exceptions and return appropriate status codes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "LogoutWebAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Force logout without confirmation, updating connection time and logging an internal server error if an exception occurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "LogoutWithoutConfirmationAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Keep the user session alive by sending a request to the session service, handling exceptions accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "KeepAliveAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Log the start of a timeout for a specific user and handle any potential errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "TimeoutCatched",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve demo parcours by school ID, filtering by demo status, default school ID, and non-deleted status, then select title and duration in days, with a default of 15 if not specified.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "GetParcoursDemoBySchoolAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Authenticate user credentials for web login, handle different login response codes, and return a token if login is successful or an error response if login fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "LoginWebAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if an intranet URL exists in the database and return the allowed origin for the first intranet client if found, otherwise return a bad request message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "GetIntranetUrlTaskAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if a user exists and return a response indicating if the user must accept internal rules.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "MustUserAcceptInternalRulesTaskAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the user must accept internal rules based on the host's internal rules existence.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "MustUserAcceptInternalRules",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the specified host has internal rules based on its DNS configuration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "DoesHostHasInternalRules",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the specified user has accepted the internal rules.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "MustUserAcceptInternalRules",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's flag for accepting internal rules if the user exists and has not already accepted them.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "UserAcceptsInternalRulesTaskAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Send an email with a password reset link to the user's email address retrieved from the database, including a personalized message and a link to reset the password.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "GetResetPasswordAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Validate the user's token and check if the user is active in the specified school context, returning an appropriate response based on the token validation result and user status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "IsUserActiveFromTokenAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user password with error handling and send a confirmation email if successful, based on the provided token and new password.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "SetNewPasswordchangedAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Authenticate user credentials, verify email and password, generate and return a JWT token for mobile access.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "LoginMobileAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update or add a device with user and school information, along with device details, in the database asynchronously. If the device already exists, update its information; otherwise, add a new entry.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "AddOrUpdateDeviceAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the device token for a specific user and school in the database asynchronously, returning a success status or an internal server error if an exception occurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "AddTokenPushDeviceAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the device information for the current user in a specific school, including details such as device ID, application name, version, push notification settings, and system information. If an error occurs, log the exception and return a server error response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "GetDeviceAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Add time report connection for a specific user's device, including relevant data such as connection start/end dates, IP address, and device information, while handling exceptions and excluding certain anomalies.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "SetTimeReportConnectionAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the validation status of a user's email in the database based on a provided token, returning different HTTP responses based on the outcome.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "ValidateUserEmailAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Handle the subscription of a new partner user, checking if the endpoint is enabled, validating the API key, mapping the data to a DTO, and returning the appropriate HTTP response based on the subscription result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "HandleNewPartnerUserSubscriptionAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create and encode an authentication token for a user's web login session, start a new session with the provided user ID, school IDs, and session ID, and return the generated token.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "DoUserWebLogin",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if a specified Android application version is excluded from a hardcoded list of versions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "IsExcludedAndroidAppliVersion",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Return errors details with a status, an error code, and an error message after logging.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "LogAndReturnErrorsDetails",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve and log errors details, including any specified exception, and return them with a specified HTTP status code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionController",
            "method_name": "LogAndReturnErrorsDetails",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "CoursesController is a C# class that handles operations related to courses, such as retrieving promotions, adding activity reports, getting resource version IDs, retrieving quiz information, and saving quiz results asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve promotions asynchronously based on the user's identity and school IDs list, handling errors and logging appropriately.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesController",
            "method_name": "GetPromotionsAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Add activity reports for courses, including details such as creation date, duration, user ID, school ID, device ID, resource details, event ID, and version ID, and save them to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesController",
            "method_name": "AddReportCoursesAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the latest version ID of a specified resource object that meets certain criteria.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesController",
            "method_name": "GetLatestRessourceVersionId",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve quiz information for a specific user based on their user ID and school ID, including the quiz score, duration, creation date, and resource object ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesController",
            "method_name": "GetQuizInfoAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save the quiz result data asynchronously, process it, and save the score and duration if applicable.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesController",
            "method_name": "SaveQuizzAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'DefaultController' class provides methods to retrieve version information, clear cache items, and retrieve the version number of the executing assembly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DefaultController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the version information for the current school's Android and iOS apps, API, and server update timestamps.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DefaultController",
            "method_name": "Index",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Clear all items from the cache and return the count of remaining items.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DefaultController",
            "method_name": "EmptyCache",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Clear the cache for a specified key.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DefaultController",
            "method_name": "EmptyCache",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the version number of the executing assembly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DefaultController",
            "method_name": "GetAssemblyVersion",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Summary: 'HallOfFameController' is a C# class that provides methods for retrieving and manipulating user data based on specified criteria, including filtering by school, user type, status, and location, as well as calculating the first day of the trimester.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of filtered users based on specified criteria such as school ID, user ID, show prospect status, and distance.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameController",
            "method_name": "AutoCompleteFilteredUsers",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the count of users meeting specific criteria within a given school, including prospects and students with active promotions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameController",
            "method_name": "GetUsersCount",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of users based on specific criteria, including filtering by school, user type, status, and location, and returning a formatted list of user data with promotions and user types.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameController",
            "method_name": "GetUsersAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Calculate and return the first day of the trimester based on the current month and year.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameController",
            "method_name": "FirstDayOfTrimestre",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "IsogradController: A class that handles the retrieval of Isograd evaluations, links, and test processing for users and schools, managing errors and responses effectively.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the Isograd evaluation for the current user and their school, handling any exceptions with an internal server error response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradController",
            "method_name": "GetisogradEvaluationAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the isograd link for a user, create a candidate, take a test, and log any errors if unable to get the link.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradController",
            "method_name": "GetIsoGradLinkAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Process the XML data to end a test, retrieve the test ID, get user copy, check for funding agreement, retrieve results as JSON and PDF, send user copy with SignalR, and update the test status with success or error messages.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradController",
            "method_name": "EndTest",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'JWPlayerController' class provides methods to retrieve Javascript player URLs, videos, download links, and HLS links from JWPlayer resources, handling errors and exceptions efficiently.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the Javascript player URL from the JWPlayer Cloud and return it as a response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerController",
            "method_name": "GetJavascript",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a video from a JWPlayer resource unique ID and return it, handling errors if any occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerController",
            "method_name": "GetVideo",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the download link for a specified resource based on type and video quality, handling exceptions for file not found and other errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerController",
            "method_name": "GetDownloadlink",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the HLS link for a specific resource unique ID, handling exceptions for file not found and other errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerController",
            "method_name": "GetHlslink",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'Language' class represents a language object with methods for getting the name and code of the language.\r\n\r\nMethods:\r\n1. GetName() - Returns the name of the language.\r\n2. GetCode() - Returns the code of the language.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Language",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'PlanningController' is a class that handles the retrieval and updating of promotions, event details, user participation in events, and alert status for formateur users in a school planning system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve promotions data in the form of a byte array.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningController",
            "method_name": "GetPromotions",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve promotions by id asynchronously for a list of school IDs associated with the current user identity, returning the promotions if successful or logging an error and returning a not found status code if an exception occurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningController",
            "method_name": "GetPromotionsByIdAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the participation status of a user in a school event, either creating a new entry or modifying an existing one, and notify all participants of the change.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningController",
            "method_name": "SetParticipateEventAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the event details and related objects, event type, users, and event objects by ID asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningController",
            "method_name": "GetEventsByIdAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve if the formateur user has clicked the alert button for a specific event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningController",
            "method_name": "HasFormateurUserClickedAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's click status for a specific event in the database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningController",
            "method_name": "AcceptAlertAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve detailed information about a user associated with a specific school, including personal details, address, contact information, and school-related data, and handle potential errors related to user authentication and user agent retrieval.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "OldGetInfoUserAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve user information including personal details, address, school information, and user type based on the current user's identity, with error handling in case the user is not found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetUserInfoAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the public profile of a specific user, including personal information, profile picture, school details, and authorization settings for public display.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetUserProfilePublicAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the last connection report for the current user and school, including details such as date, device, IP address, browser, and total time spent connected.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetLastConnectionAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve user information by user ID asynchronously, including status, internal status, profile photo, test, pseudo, civility, profile description, and header photo. If no user is found, return a success response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetUserByIdAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the user information based on their pseudo, including status, internal status, profile photo, test status, civil status, profile description, and header photo. If no user is found, return a success response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetUserByPseudoAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of street types from the database and return it as a collection of objects with 'id' and 'libelle' properties.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "ListTypeStreet",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of countries with their corresponding ID, code, and label from the database cache and return it as a list of CountryViewModel objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetCountries",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of diplomas with their corresponding IDs and labels from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetDegrees",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of professional situations with their corresponding IDs and labels from the data cache and return it as a list of OccupationViewModel objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetOccupations",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Upload files asynchronously, check and process the file upload request, upload files to the resources server, and update user profile pictures if necessary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "UploadAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's profile photo with the uploaded file, and handle errors during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "UploadAvatarAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's header profile file with the uploaded background file and save changes, returning the file URL if successful.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "UploadBackgroundAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's profile or cover picture with the provided file URL and save changes to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "UpdatePictureAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Generate a certification task asynchronously based on the current user, school, promotion ID, and language code, returning a HTTP response message with the generated certificate file or an error message if an exception occurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GenerateCertificationTaskAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Generate a training certificate asynchronously based on the provided course certificate information, handling exceptions and errors accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GenerateTrainingCertificateTaskAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the available languages for the creation of certificates, including French and English.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileController",
            "method_name": "GetLanguages",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Summary: The 'ReportController' class handles the reporting of abuse for a specified content type and identifier, logging reports and managing errors.\r\n\r\nMethods:\r\n1. ReportAbuse: Report abuse with a specified content type and identifier, logging the report and handling any errors that occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Report abuse with a specified content type and identifier, logging the report and handling any errors that occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportController",
            "method_name": "ReportAbuse",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'RessourceController' is a class that provides methods to retrieve different types of resources available for events, including campus events.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of resource types available for events.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceController",
            "method_name": "GetEventsRessourcesTypesTaskAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of resource types for campus events.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceController",
            "method_name": "GetCampusRessourcesTypesTaskAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Enum 'SelectedCertificate' is used to differentiate between a school certificate and a training certificate.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "SelectedCertificate",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "TagsComparer is a class designed to compare objects based on their id and libelle attributes, with methods like Equals to check for equality and GetHashCode to retrieve the hash code of the 'id' property.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsComparer",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Summary: 'TagsController' is a C# class that provides methods to retrieve and manage tags, including getting the hottest tags, all public tags, and forum tags with details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsController",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the hottest tags based on their usage count within a specified period, with the option to limit the number of tags returned.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsController",
            "method_name": "GetHotestTagsAsync",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of all tags that are public, ordered by official status, usage count, promo tag status, and label.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsController",
            "method_name": "GetAllTags",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of all forum tags with their corresponding details, ensuring no duplicates are included.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsController",
            "method_name": "GetAllForumTags",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'VoteTypes' is an enum in C# that defines two types of votes: Upvote (value of 1) and Downvote (value\r\n/// /// of 2).",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "VoteTypes",
            "namespace": "LMS.Controllers.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ActivityTrackingV2Controller' is a C# class that provides methods to retrieve and convert activity tracking data for a user, including non-apprenticeship and apprenticeship activities, into view models for a widget view model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve activity tracking data for a user, including non-apprenticeship and apprenticeship activities, and convert it into view models before building and returning a widget view model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingV2Controller",
            "method_name": "GetActivityTrackingWidgetData",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "CampusAddressViewModel is a class that represents a view model for campus addresses. It provides methods for managing and displaying campus address information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusAddressViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CampusV2Controller is a class that facilitates the management of campus events, user participation, event details, PDF generation, and resource object handling in a campus environment.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve upcoming campus events, along with associated users and campuses, and participation information for the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "method_name": "GetUpcomingEventsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Participate in a campus event by reserving a place, updating participation status, or handling errors related to event capacity.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "method_name": "ParticipateAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the participation status of a user for a specific event, either adding a new participation entry or updating an existing one, and return a success message if the operation is successful, or an error message if not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "method_name": "ParticipateUndoAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the details of a specific event, including event title, description, start and end dates, attached files, participation status, event type, and host information, and return them as a response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "method_name": "GetEventDetailsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Generate a PDF file containing event information, including a list of students attending the event, with options for organizers and officials to download.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "method_name": "GetPdfAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update a user's presence information for a specified event if the event exists and the user is registered, otherwise return an error message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "method_name": "SetPresenceAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Add a resource object asynchronously to an event, checking ownership and file availability before saving it to the database and returning a view model with the attached file details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "method_name": "AddRessourceObjectAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a resource object asynchronously after checking if the current user is the owner of the associated event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusV2Controller",
            "method_name": "RemoveRessourceObjectAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "CampusViewModel is a C# class that serves as a view model for campus-related data, providing methods for retrieving and manipulating campus information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ConnectionV2Controller' is a versatile class that handles various user account management tasks, such as password updates, token validation, prospect creation, and email reminders, with error handling and database interactions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's password and activate their account after verifying the password setup token and user information, with potential error handling for missing data or database issues.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "SetupNewPasswordAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Send a reset password email to a user with the necessary token and information, handling different school configurations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "SendResetPasswordEmail",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Validate a password token and return a success status code or an error status code based on the validation result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "VerifyPasswordToken",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the password of a user after validating a reset token, hashing the new password, and saving the changes to the database, handling various exceptions accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "ResetPassword",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the authentication token for a user with the specified email after performing various checks and validations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "GetTokenForAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of online users connected, based on their IDs and school ID, and return the corresponding user data after mapping.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "GetOnlineUsersAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the connection report IDs of online users from the list of connected users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "GetOnlineConnectionIdsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Validate and return payload based on the provided token, then check and update the account status if necessary, returning appropriate responses for different scenarios.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "CheckAccountTokenAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new prospect with the provided information, handling any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "HandleNewProspectAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new prospect for a long-term apprenticeship, checking for errors and returning the appropriate response based on the prospect creation status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "CreateNewProspectApprenticeshipLongtermAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create new prospects for long-term apprenticeship in batch asynchronously, handling file upload and user data validation, then return the created prospects information or error messages if any issues occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "BatchCreateNewProspectsApprenticeshipLongtermAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Activate a prospect account by validating the token, activating the user account, setting the password, and registering for discovery courses, handling various result codes and error cases.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "ActivateProspectAccountAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the file size is valid based on the maximum file size allowed by the website configuration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "IsValidFileSize",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Send an email reminder when half the trial period is done asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "TrialPeriodHalfWayReminderAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Send a reminder email after the trial period has ended asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "TrialPeriodEndedReminderAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Renew an account token if the activation link is expired and the user has clicked on regenerate an activation link, handling various error cases and returning appropriate responses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "RenewAccountTokenAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the current host from the HTTP context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Controller",
            "method_name": "GetCurrentHost",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ContactsV2Controller' is a C# class that provides methods to retrieve a list of users from the database based on various conditions such as school, suspension status, account type, and promotional status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ContactsV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of users from the database based on specific conditions related to the user's school, suspension status, account type, and promotional status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ContactsV2Controller",
            "method_name": "GetContactsList",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "CopyListItemViewModel is a C# class that represents a view model for copying items, with methods such as CopyItem and GetItemToCopy.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyListItemViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CreateSchedulerAttendeeModel is a C# class that represents a model for creating a scheduler attendee. It includes methods such as AddAttendee and RemoveAttendee for managing attendees in a scheduler.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CreateSchedulerAttendeeModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'CreateSchedulerOwnerModel' class is used to store information needed to create\r\n/// /// /// a scheduler owner. It includes methods such as 'GetOwnerName' and 'GetOwnerEmail' to retrieve the owner's name and email.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CreateSchedulerOwnerModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'ElephormV2Controller' class manages updating, retrieving, and checking user rights for Elephorm catalog data, including categories and trainings, while handling errors and caching for efficient data access.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the categories and trainings data in the database, by serializing the categories, storing them in a JsonBulkStore entity, and removing specific items from the cache before saving changes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormV2Controller",
            "method_name": "UpdateCategoriesAndTrainings",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the Elephorm catalog, checking user rights before returning the catalog data or handling any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormV2Controller",
            "method_name": "GetCategories",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the subcategory from the Elephorm catalog based on the specified subcategory ID, handling errors and user rights checks.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormV2Controller",
            "method_name": "GetSubCategory",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the current user has valid and active rights to use the Elephorm service.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormV2Controller",
            "method_name": "CheckUserRights",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the Elephorm catalog data, including categories and trainings if specified, from the cache or database and deserialize it into a list of categories, with an option to exclude trainings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ElephormV2Controller",
            "method_name": "GetElephormCatalog",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "EmploiInfosViewModel is a C# class that serves as a ViewModel for employment information, providing methods for retrieving and updating job-related data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EmploiInfosViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EmploiV2Controller' class is responsible for retrieving and updating employment information for a specified school, including email, job board URLs, and tutorials, to update the user's job description.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EmploiV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the employment information for a specified school, including email, job board URLs, and job board tutorials, and update the user's job description based on the retrieved email.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EmploiV2Controller",
            "method_name": "GetEmploiInfos",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "EvaluationGridViewModel is a C# class that serves as a view model for displaying evaluation data in a grid format. It provides methods for retrieving, updating, and deleting evaluation information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGridViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Summary: EvaluationsFormateurV2Controller is a class that provides methods for retrieving, generating, and displaying evaluation-related information for trainers, including lists of pending evaluations, quiz answers reports, and evaluation grid details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of copies that are awaiting correction from trainers, filtering out unnecessary courses and displaying relevant information such as student names, evaluation titles, references, start dates, deadlines, and categories.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV2Controller",
            "method_name": "GetEvaluationsListAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve and generate a PDF report of quiz answers from a corrected copy of a specified user, with error handling for parsing the XML file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV2Controller",
            "method_name": "GetQcmAnswersAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve and return information about an empty evaluation grid for a specific user and evaluation, or return null if no information is found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV2Controller",
            "method_name": "GetEvaluationGridInfoAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'EvaluationsV2Controller' class provides a wide range of methods for managing evaluations, including retrieving, updating, transmitting, and creating evaluation copies, as well as handling exam block processes, user permissions, and file uploads.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve evaluations for the current user based on their school and user IDs, evaluation categories, promotions, bloc options, and other criteria, including filtering out certain evaluation types and processing session information for block exams, ultimately returning the list of evaluations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetEvaluationsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update all needed copies to non-presentation status for the authenticated user and return a list of the updated copy IDs, handling any potential errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "AddNotPerformedCopyStatuses",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the status of copies that have not been submitted by the authenticated user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "UpdateNotSubmitedCopyStatuses",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the status of copies that have not been transmitted for the current user's email address and return a list of the updated copy IDs, handling any errors that may occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "UpdateNotTransmitedCopyStatuses",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve evaluation details, including user information, resource types, access permissions, and evaluation specifics, and return a view model containing all relevant information for the evaluation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetEvaluationDetailsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save the uploaded files as original copies, with the possibility to keep the old audio file if desired, and handle different scenarios based on the user's actions and the evaluation type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "FileUploadAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create or update an audio file for a user's evaluation copy, replacing the existing audio file if one exists, and returning the file information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "AudioFileUploadAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete an audio file from a user's copy if it exists, and update the database accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "AudioFileDeleteAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Transmit a copy of a user's evaluation data, handling exceptions and checking for plagiarism if necessary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "TransmitCopy",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if a user can begin a block exam based on their evaluation and copy status, returning a boolean value indicating whether the exam can be started or not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "CanBeginBlockExamAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the user can submit a copy for a block exam evaluation, based on certain conditions and parameters.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "CanSubmitCopyBlockExamAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the local time of the current user asynchronously using their user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetUserLocalTimeAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the time left for a user to transmit a block exam copy, based on their evaluation ID, user ID, and exam start time.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetTimeLeftToTransmitBlockExamCopyAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the local start time of a block exam for a specific user based on their timezone and evaluation ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetBlockExamStartTimeLocalUserTimeAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a copy of a user's evaluation asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "CreateUserCopyAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Begin the process of starting an exam block for a user, checking if exam rules have been accepted, retrieving user information, verifying if the exam can be started, creating a specific token for the exam block duration, updating exam conditions acceptance by the user, and finally beginning the exam for the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "DoBeginBlockExamAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save the uploaded copy of a resource file, ensuring it belongs to the current user and has the correct type of transmission, and then update the database with the submitted files and their status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "SaveUploadedCopy",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the copy model for a specific evaluation based on the current user, including the resource version and resource details, and provide the model in either PDF or Word format for download, handling errors for missing template files and invalid format requests.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetCopyModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve and display the corrected QCM results for the current user in a specific evaluation, including the note, note description, correction date, and last status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "ReloadQcm",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all necessary information related to an evaluation, including resource types, user access, associated copies, and parcours data, and return an object containing these details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetOralEvaluationTools",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete the correction file and update the corresponding uploaded file's deletion date and user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "RemoveCorrectionFile",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve rejection motives that are visible by trainers and not deleted, returning their id, name, code, template, and commentable status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetRejectMotivesForTrainers",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Reject a copy by updating its status to 'REJETEE', adding rejection reasons and comments, creating rejection advancement records, and sending notifications to concerned parties.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "RejectCopyAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Reset a copy to the status of 'COMMENCE' by updating various related entities and removing specific data entries, while handling exceptions and logging errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "ResetCopy",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new exam copy for a user, checking if a copy already exists, retrieving the latest version of the exam, setting the copy status to 'REALISATION', and returning success information including the copy reference and exam start time.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "DoBeginExamForUser",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a JsonEvaluation based on evaluation ID, user ID, parcours codes, and evaluation type, returning null if not found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsV2Controller",
            "method_name": "GetJsonEvaluationAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "EvaluationViewModel is a class that represents the view model for evaluations, containing methods for retrieving evaluation data and performing operations on evaluations.\r\n\r\nMethods:\r\n1. GetEvaluationData: Retrieves evaluation data from the database.\r\n2. AddEvaluation: Adds a new evaluation to the database.\r\n3. UpdateEvaluation: Updates an existing evaluation in the database.\r\n4. DeleteEvaluation: Deletes an evaluation from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ForumAffectationCode' is a C# class used to compare and calculate hash codes based on specific codes for Parcours, Matiere, Module, and Theme.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumAffectationCode",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Determine if the object is equal to another object based on specific codes for Parcours, Matiere, Module, and Theme.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumAffectationCode",
            "method_name": "Equals",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Calculate the hash code based on the values of ParcoursCode, MatiereCode, ModuleCode, and ThemeCode.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumAffectationCode",
            "method_name": "GetHashCode",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ForumFormateurV2Controller' is a C# class that provides methods to retrieve forum assignments and posts for logged-in teachers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of forum assignments for the logged in teacher.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV2Controller",
            "method_name": "GetAffectationsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the forum posts associated with the logged-in user, who must be a teacher, based on specified criteria such as start, sort, search terms, page size, affectation, and forum type code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV2Controller",
            "method_name": "GetFormateurForumPostsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ForumV2Controller' is a C# class that provides methods for managing forum posts, questions, answers, and notifications in a forum system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new question with specified content, category, tags, and optional uploads, and store it in the database for a forum post, triggering notifications upon successful creation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "QuestionAskAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve forum posts asynchronously based on various parameters such as user ID, tags, sorting, category, accepted/certified status, page size, resource version ID, module, subject, path, search terms, forum type, and forum category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "GetForumPostsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the status of a question to indicate that it has been handled, including setting the handling user and date, and saving changes to the database if the caller is an internal user or a teacher.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "MarkQuestionAsHandledAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Undo the action of marking a question as handled, only accessible to teachers and internal users, by resetting the 'Handled' flag and related data in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "MarkQuestionAsHandledUndoAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve detailed information about a specific question from the forum, including its title, body, creation date, update date, closure date, score, owner ID, view count, favorite count, tags, resource ID, resource version ID, handling status, accepted answer ID, uploads, comments, category, and answers along with their details, such as creation date, update date, owner ID, score, approval status, uploads, and comments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "GetQuestionDetails",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Add an answer to a forum post, including handling logic for internal users or teachers, updating post details, and sending notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "QuestionAddAnswerAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new forum question asynchronously, sending a notification to the user and returning the new question's ID if successful, handling exceptions accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "QuestionNewAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Increment the view count of a forum post page asynchronously, adding a new view record for the user if it does not already exist.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "IncrementPageViewCountAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a view model object from a given post object, including details about the post owner, comments, and uploads.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV2Controller",
            "method_name": "ConvertToPostAnswerViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'HallOfFameV2Controller' class retrieves the weekly and daily ranking of active student users from a specific school, providing details such as profile pictures, promotions, semester points, weekly points, and online status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the weekly and daily ranking of active student users from a specific school, including their profile pictures, promotions, semester points, weekly points, and online status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameV2Controller",
            "method_name": "GetUsersRankingAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'InternshipAgreementController' class manages various operations related to internships, including retrieving internship details, creating internships, updating internship information, handling addresses, calculating period minutes, and managing holidays for specified periods.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the frequency of gratifications that are not marked as deleted from the database and return their ID, code, and label.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "GetFrequenceGratifications",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the missions for promotions associated with the current user and their school, filtering out any missions with expired access dates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "GetPromotionsMissionsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of internships for the current school user, including relevant information such as internship status, structure name, periods, files, agreements, amendments, filled evaluation grids, and filled training certificates, with the ability to filter and modify the list based on specific conditions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "GetListInternshipAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve internship details for editing purposes, including information about the user, organization, tutor, periods, holidays, schedule, gratification, social protection, objectives, advantages, leave, and attestation file. If details are not found, log an error and return a bad request message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "GetInternshipDetails",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create an internship with all the necessary information and validate it before saving it in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "CreateInternship",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create an Address object with the provided user email and address details from the given addressBM object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "CreateAddress",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Calculate the total number of minutes for a given period based on the days' schedules and durations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "GetPeriodMinutes",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update internship information based on the provided data, including user details, internship status, files, organization details, tutor details, schedule, and other specific information, with error handling and database updates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "UpdateInternship",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the Address details if any of the address fields differ from the provided addressBM, updating the user and date of update accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "EditAddress",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve holidays for specified periods, country ID, and zip code asynchronously, handling errors with logging.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "GetHolidaysForPeriodsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the list of holidays for a given internship period, adding or removing holidays as needed based on the provided data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipAgreementController",
            "method_name": "UpdateHolidaysAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Summary: 'JotFormController' is a C# class that handles various operations related to JotForm submissions, including retrieving, deleting, saving, and checking submission data, as well as generating JotForm URLs and handling errors and exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormController",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the JWT token from the Authorization header in the HTTP request, if it exists.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormController",
            "method_name": "GetJWTToken",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a submission in JotForm using the provided submission ID, logging an error message if the deletion is unsuccessful or if an API exception occurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormController",
            "method_name": "DeleteJotFormSubmission",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the authorized form data and generate a JotForm URL with specific parameters based on user and form details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormController",
            "method_name": "GetFormAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve JotForm submission data by ID using the JotForm API client, handling exceptions and returning appropriate HTTP responses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormController",
            "method_name": "GetJotFormSubmissions",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save a JotForm submission asynchronously and handle any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormController",
            "method_name": "CreateFormAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save the jot form submission data in the Learning Management System (LMS) after processing and validating the submission content.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormController",
            "method_name": "SaveJotFormSubmission",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if a user has completed a form submission, and if not, save the submission and update the completion status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormController",
            "method_name": "HasDoneForm",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "set participate Events\r\n0: No\r\n1: Yes\r\n2: Maybe",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveV2Controller",
            "method_name": "SetEventParticipationAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "set participate Events\r\n0: No\r\n1: Yes\r\n2: Maybe",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveV2Controller",
            "method_name": "SetEventParticipationFromMailAync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retourne si le ownerUser de l'événement a cliqué sur l'alerte",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveV2Controller",
            "method_name": "HasFormateurUserClickedAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'MediaRecorderController' class is responsible for saving video files to a database asynchronously, creating and adding new ForumUpload objects with file details, and returning a unique file GUID upon success.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MediaRecorderController",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save a video file to the database asynchronously, creating a new ForumUpload object with the current date, file path, filename, and a unique file GUID, then adding it to the ForumUploads table in the database, saving changes and returning the file GUID if successful, or logging an error and returning an internal server error if unsuccessful.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MediaRecorderController",
            "method_name": "SaveVideoFileToDbAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'NotificationsV2Controller' is a C# class that handles the retrieval, updating, and management of notifications for school users, including marking notifications as read or hidden, retrieving and updating notification preferences, and returning notifications in a structured view model format.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationsV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve notifications for a specific school user based on certain criteria such as date, visibility, and school ID, and return them in a structured view model format.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationsV2Controller",
            "method_name": "GetNotificationsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update notification receivers in the database to mark notifications as read for the current user on a specific school, based on the provided notifications information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationsV2Controller",
            "method_name": "MarkNotificationAsReadAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Mark notifications as hidden for a specific user on a school platform, updating the notification receiver's status and date read in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationsV2Controller",
            "method_name": "MarkNotificationAsHiddenAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the notification preferences for a specific user based on their school ID, including enabled notification types and their corresponding email and push notification settings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationsV2Controller",
            "method_name": "GetNotificationPreferencesAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the notification preferences for the current user based on the default configurations and user-specific settings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationsV2Controller",
            "method_name": "SetNotificationPreferencesAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ParticipatingUserViewModel' is a C# class that represents a view model for a participating user in a system, providing methods for interacting with user data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParticipatingUserViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'PlanningV2Controller' is a C# class that handles the generation of a Word document containing planning elements for the current school and user, with built-in error handling for printing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Generate a Word document containing the planning elements for the current school and user, with error handling for printing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningV2Controller",
            "method_name": "PrintPlanningTask",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description: 'PresenceBindingModel' is a C# class designed to manage presence data and bindings.\r\n\r\nExposed Methods:\r\n1. AddPresenceData: Adds presence data to the model.\r\n2. RemovePresenceData: Removes presence data from the model.\r\n3. UpdatePresenceData: Updates existing presence data in the model.\r\n4. GetPresenceDataById: Retrieves presence data by its unique identifier.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PresenceBindingModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ProfileV2Controller' is a C# class that provides methods to retrieve, update, and manage profile information for users, including personal details, account settings, and appearance options in rankings and directories.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the profile information about the logged in user, including personal details, addresses, workgroups, and access rights, with additional checks for partners and forms availability.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "method_name": "GetMyUserInfoAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the profile information of a specific user, including their personal details, profile and cover pictures, email, internal status, user type, user status, last connection date, and promotions they are involved in.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "method_name": "GetUserInfoAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the account settings for the current user in a specific school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "method_name": "GetAccountSettingsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the appearance in the ranking option for the current user in the specified schools, setting the 'ApparaitreChallenge' property to true and saving changes to the database, returning a success message or error if any.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "method_name": "AppearInTheRankingAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the appearance in the ranking option for a specific user by setting the 'ApparaitreChallenge' property to false in the database, with error handling for saving changes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "method_name": "AppearInTheRankingUndoAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the 'Appear in the Directory' option for the current user in the database, based on their school ID and user ID, returning a success status or error message if the operation fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "method_name": "AppearInTheDirectoryAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the appearance in the directory option for the current user by setting it to false for all associated schools. If successful, return a status of 'Ok' with a boolean value of 'true'; otherwise, log an error and return a status of 'Internal Server Error'.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "method_name": "AppearInTheDirectoryUndoAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's password after verifying the old password and generating a new salt and password hash.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProfileV2Controller",
            "method_name": "UpdateUserPasswordAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "ServicesV2Controller is a C# class that provides methods to update activation dates for specific service codes, with authentication and whitelist verification.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServicesV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the activation date for a specific service code, only if the code is in a predefined whitelist and the user is authenticated, otherwise return an error response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServicesV2Controller",
            "method_name": "SetActivationDateByServiceCode",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description: 'SessionAttendeeViewModel' is a C# class that represents a view model for a session attendee, providing properties and methods to manage attendee information.\r\n\r\nExposed Methods:\r\n1. UpdateAttendeeDetails - Updates the details of the session attendee.\r\n2. AddAttendeeToSession - Adds the attendee to the session.\r\n3. RemoveAttendeeFromSession - Removes the attendee from the session.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionAttendeeViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'SessionViewModel' class is a data model used to represent and manage session-related information in a C# application. It includes methods for updating session data, retrieving session details, and handling session-related operations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionViewModel",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Handles quiz-related operations including authorization, validation, result saving, and status checking for users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the last version ID of a specific resource object that has been published and is currently available.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "GetLastResourceVersionId",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the user is allowed to take an exam based on their previous quiz attempts, school ID, and resource version ID, and generate a JWT token for authorization if allowed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "IsAllowedToTakeExamAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the user has completed the quiz asynchronously by retrieving the latest copy and its status, then comparing it with the rejected status code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "HasDoneTheQuizAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if the current time falls within the validity period defined by the payload's 'NotBefore' and 'Expiration' timestamps.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "IsPayloadStillValid",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Save the quiz results, decode the token, check token validity, retrieve user and resource information, parse detailed results, generate PDF report, store results in the database, create activity report, handle various error scenarios, send notification email if user failed the quiz.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SpringQuizV2Controller",
            "method_name": "SaveQuizResultsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "StatsV2Controller is a C# class that provides methods to retrieve and analyze weekly connection statistics for the current user, focusing on web and mobile usage data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StatsV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the weekly connection statistics for the current user based on web and mobile usage data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StatsV2Controller",
            "method_name": "GetConnectionStatsAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve sessions for a specific user within a certain time frame, including session details, attendees, evaluations, and parcours information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "GetSessions",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new collaboration session asynchronously, including user information and handling any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "CreateBBCollaborateAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a collaborative jury session asynchronously with specified participants and trainers, including creating user copies and notifications for each participant.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "CreateBBCollaborateJuryAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create an oral copy for a user by checking the existence of previous copies, retrieving necessary data, and setting up a new copy with specific attributes and statuses in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "CreateOralCopyForUser",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create oral notifications asynchronously for various events related to an oral examination, including reminders and information dissemination.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerController",
            "method_name": "CreateOralNotificationAsync",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "TagsComparer is a C# class used for comparing objects based on their ID and libelle values, providing methods like Equals and GetHashCode for this purpose.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsComparer",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Class Summary: 'TagsV2Controller' manages the retrieval of tags from the newsfeed and forum, allowing for filtering and sorting options.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsV2Controller",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of tags from the newsfeed, with the option to filter by name and limit the results to 20 tags sorted alphabetically.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsV2Controller",
            "method_name": "GetNewsfeedTags",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of forum tags, with the option to filter by a specified keyword and limit the results to 20 tags, ordered alphabetically by name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsV2Controller",
            "method_name": "GetForumTags",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all forum tags from the database, including their id, label, promotional status, official status, and usage count, and return them in alphabetical order.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagsV2Controller",
            "method_name": "GetAllForumTags",
            "namespace": "LMS.Controllers.V2",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "CoursesV21Controller is a class that manages the progress of resources for a specific user, allowing updates such as 'Todo', 'Doing', 'Done', and saving changes to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV21Controller",
            "namespace": "LMS.Controllers.V21",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the progress of resources for a specific user based on the progress status provided, handling different cases such as 'Todo', 'Doing', 'Done', and saving changes to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV21Controller",
            "method_name": "SetProgressAsync",
            "namespace": "LMS.Controllers.V21",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ContactsV3Controller' is a class that provides methods to retrieve contact lists and official users with specific criteria within a school environment.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ContactsV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of contacts that match the specified search value, school, and user conditions, including user profile pictures, user types, and promotions, ordered by username and paginated.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ContactsV3Controller",
            "method_name": "GetContactsList",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve official users based on specific email addresses associated with different roles within a school, including their profile information and file URLs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ContactsV3Controller",
            "method_name": "GetOfficialUsersAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description: 'CopyCorrectorV3ViewModel' is a C# class that serves as a view model for a copy correction application, providing methods for managing and correcting text content.\r\n\r\nExposed Methods:\r\n1. LoadTextContent - Loads the initial text content for correction.\r\n2. CorrectSpelling - Corrects spelling errors in the text content.\r\n3. CorrectGrammar - Corrects grammar mistakes in the text content.\r\n4. SaveCorrectedText - Saves the corrected text content to a file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyCorrectorV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CopyDetailV3ViewModel is a C# class that represents a view model for copying details in a version 3 system. It contains methods such as GetCopyDetail, UpdateCopyDetail, and DeleteCopyDetail.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyDetailV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CopyHistoryV3ViewModel is a C# class that provides methods for managing and tracking the history of copied items.\r\n\r\nExposed methods:\r\n1. AddCopiedItem: Adds a new item to the copied history.\r\n2. GetCopiedItems: Retrieves a list of all copied items in the history.\r\n3. ClearHistory: Clears the entire copied history.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyHistoryV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CopyUserV3ViewModel is a C# class that represents a view model for copying user data, providing methods such as CopyUser() and ValidateUser().",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyUserV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'CorrectedCopyBindingModel' is a C# class designed to facilitate the correction and binding of data for a specific purpose.\r\n\r\nExposed Methods:\r\n1. ValidateData(): Validates the data within the binding model.\r\n2. CorrectData(): Corrects any errors in the data within the binding model.\r\n3. BindData(): Binds the corrected data to a specific target for further processing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CorrectedCopyBindingModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'CorrectedCopyV3ViewModel' is a C# class that serves as a view model for displaying corrected copies, providing methods for managing and interacting with corrected copies.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CorrectedCopyV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CoursesV3Controller is a C# class that provides methods to manage and retrieve course-related information for users, including change logs, progress tracking, favorites, ratings, and service details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the change log information for a given resource based on the specified resource version ID, including title, description, versions, publication date, release notes, and associated files. If the resource is not found, return a 'Not Found' status code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetChangeLogAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the media library content for the current user, including last open date, progress, favorites, user ratings, and progression details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetCoursesAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of parcours and matieres related to the mediatheque of the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetCurrentParcoursAndMatieres",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the parcours, matieres, and modules related to the mediatheque of the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetCurrentParcoursMatieresAndModules",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the service information for the current user based on the specified service ID, ensuring it is active and within the specified date range. If the service is not accessible, return a forbidden status code with an appropriate message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetServiceById",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the progress status of resources for a user asynchronously based on the specified progress level, handling different cases such as 'Todo', 'Doing', and 'Done'.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "SetProgressAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Manage the favorite status of a given resource for a specific user, either marking it as a favorite or unmarking it based on the provided conditions, and handle any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "MarkAsFavoriteAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve resource ratings asynchronously based on user feedback for a specific promotion, resource version, and parcours, calculating hours and minutes spent, satisfaction level, difficulty level, and comments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetResourceRatingAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Rate a resource asynchronously by capturing the user's feedback, including time spent, satisfaction level, difficulty level, and comments, then updating the UI with the new average rating, count, and user rating information, while also sending a notification to the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "RateResourceAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the resource path associated with a specific forum post ID, including all relevant resource objects and metadata, while ensuring that the user has the necessary permissions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "GetRessourcePathByForumPostIdAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the available services of a user based on certain criteria and conditions, including checking for specific services like Scholarvox, RosettaStone, and GoFluent, and returning a view model with the list of services and flags indicating the presence of each specific service.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CoursesV3Controller",
            "method_name": "CheckServices",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "EvaluationCorrection is a class that handles the correction of evaluations. It includes methods such as CalculateFinalGrade() to determine the final grade, ApplyCurve() to adjust scores, and ProvideFeedback() to give feedback to students.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationCorrection",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "EvaluationGrid is a class that represents a grid used for evaluation purposes. It includes methods for adding, updating, and retrieving evaluation data.\r\n\r\n1. AddEvaluation: Adds a new evaluation to the grid.\r\n2. UpdateEvaluation: Updates an existing evaluation in the grid.\r\n3. GetEvaluation: Retrieves a specific evaluation from the grid.\r\n4. GetAllEvaluations: Retrieves all evaluations from the grid.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGrid",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'EvaluationsFormateurV3Controller' class manages the evaluation process for trainers, including retrieving student copy details, assigning copies to trainers, updating corrected copies, validating copies, and calculating grades and deadlines.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve detailed information about a student's copy, including student details, evaluation information, history, original copies, corrections, and related courses and evaluations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "GetStudentCopyDetailsAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Affect a copy to a trainer by adding an entry to the CopiesCorrigees table with the original copy ID and the trainer's ID, allowing the trainer to download the copy.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "AffectCopyToFormateur",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update a corrected copy of an original document, including grading, comments, and audio messages, while ensuring proper authorization and handling of evaluation grid submissions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "AddCorrectedCopyAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Validate a corrected copy, ensuring it meets all necessary criteria and updating its status accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "ValidateCorrectedCopy",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the status and details of a copy, calculate the final grade, and send a notification if validation is successful.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "CloseCopyAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if a teacher can correct a specific copy based on various conditions such as assignment, existence of original and corrected copies, and corrector's rights.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "CanCorrectCopyAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Calculate the number of working days until/after the due correction date.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationsFormateurV3Controller",
            "method_name": "GetCopyRetard",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationSubject' is a class that represents a subject being evaluated, providing methods to retrieve and update evaluation-related information.\r\n\r\n1. GetSubjectName(): Retrieves the name of the evaluation subject.\r\n2. SetSubjectName(string name): Updates the name of the evaluation subject.\r\n3. GetSubjectGrade(): Retrieves the grade of the evaluation subject.\r\n4. SetSubjectGrade(int grade): Updates the grade of the evaluation subject.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationSubject",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'EvaluationV3Category' class represents a category for version 3 evaluations. It includes methods for adding, updating, and deleting evaluations within this category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationV3Category",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationV3ViewModel' is a C# class that serves as a view model for handling evaluations in a version 3 system.\r\n\r\nExposed Methods:\r\n1. UpdateEvaluation - Updates the evaluation information.\r\n2. DeleteEvaluation - Deletes a specific evaluation.\r\n3. GetEvaluationDetails - Retrieves details of a specific evaluation.\r\n4. GetAllEvaluations - Retrieves a list of all evaluations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'EventsListScope' enum represents the scope of events list, with options for CurrentFormations, Other, and All events.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "EventsListScope",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'EventsV3Controller' is a C# class that handles various operations related to live events, including retrieving event details, managing user participation, tracking activity, and adding/removing resource objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of live events related to the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "GetUserLivesTaskAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all live events that are not related to the user's training or school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "GetAllLivesTaskAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the details of a specific event, including event title, description, replay URL, start and end dates, attached files, participation status, event type, total participants, host information, thumbnail image, participating users, and views count.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "GetEventDetailsAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Check if a live event is currently ongoing by connecting to a BigBlueButton server and retrieving the meeting status for a specific event and organization.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "CheckIfLiveIsOngoing",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Set or update a user's participation status for a specified event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "SetEventParticipationAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Add an event to the user's favorites asynchronously, checking if the event exists and updating the user's participation status accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "AddEventToFavoritesAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's event participation by adding it to favorites or undoing the action, based on the event's existence and the user's previous participation status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "AddEventToFavoritesUndoAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the viewed status of a user for a specific event, creating a new entry if the user has not participated before.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "SetEventViewedAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the viewed status of a user's event participation to false, creating a new participation record if none exists.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "SetEventViewedUndoAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the acceptance of a host recording for a specific event owned by the current user in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "SaveHostRecodingAcceptanceAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Track activity of the current user by adding a new report entry with the user's ID, school ID, event ID, and duration in seconds to the database, and handle any exceptions by logging an error message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "TrackActivity",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Add a resource object to an event, checking ownership, file existence, resource type, and saving it to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "AddRessourceObjectAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Remove a resource object asynchronously if the current user is the owner, otherwise return a forbidden message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV3Controller",
            "method_name": "RemoveRessourceObjectAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'FileV3ViewModel' is a C# class designed to handle and manage file-related operations and data for a specific version 3 of a file.\r\n\r\nExposed methods:\r\n1. LoadFileData: Loads the data of the file version 3.\r\n2. SaveFileData: Saves the data of the file version 3.\r\n3. UpdateFileData: Updates the data of the file version 3.\r\n4. DeleteFile: Deletes the file version 3.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FileV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumFormateurV3Controller is a class that provides methods to retrieve forum posts, count unhandled posts, and fetch forum assignments for teachers, with security checks and error handling in place.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all the forum posts linked to the current user, with specific conditions and security checks in place, returning the data in a paged format.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV3Controller",
            "method_name": "GetAllFormateurForumPostsAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the number of unhandled forum posts for the current connected user, handling any exceptions that may occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV3Controller",
            "method_name": "GetUnhandledForumPostsCountAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the list of forum assignments for the current user if they are a teacher, otherwise return a forbidden status code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurV3Controller",
            "method_name": "GetForumFormateurFormationsFromAffectationsAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'GetScoresResult' is a C# class that represents the result of a method call to retrieve scores. It inclu\r\n/// /// /// /// des methods to access and manipulate the scores data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GetScoresResult",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'MedialibProgress' represents the progress status of tasks: Todo (0), Doing (1), and Done (2).",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "MedialibProgress",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'NewsfeedV3Controller' is a C# class that provides methods to retrieve and display profile information and online status of active users who are members of specific workgroups within a school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of active users who are members of specific workgroups within a school, including their profile information and promotions, and check if they are currently online.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV3Controller",
            "method_name": "GetDevMembersAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'NotificationV3Controller' is a C# class that provides methods to retrieve and update the current user's notification preferences using the notification service.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the current user's notification preferences asynchronously using the notification service, based on the user's identity and school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationV3Controller",
            "method_name": "GetCurrentUserNotificationPreferencesAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the current user's notification preferences asynchronously using the notification service, user ID, and email.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationV3Controller",
            "method_name": "SetCurrentUserNotificationPreferencesAsync",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'OriginalCopyV3ViewModel' is a C# class that serves as a view model for managing and displaying data related to version 3 of an original copy.\r\n\r\nExposed Methods:\r\n1. GetData(): Retrieves data for the original copy version 3.\r\n2. UpdateData(): Updates the data for the original copy version 3.\r\n3. DisplayData(): Displays the data for the original copy version 3.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "OriginalCopyV3ViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Enum 'RankOrderBy' represents different time intervals for ranking order, including weekly and trimester ranks.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "RankOrderBy",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'ResourceRatingModel' is a C# class that represents a model for storing and managing ratings for resources.\r\n\r\nMethods:\r\n1. CalculateAverageRating - Calculates the average rating based on individual ratings.\r\n2. AddRating - Adds a new rating to the resource.\r\n3. GetRatingCount - Retrieves the total number of ratings for the resource.\r\n4. GetHighestRating - Retrieves the highest rating given to the resource.\r\n5. GetLowestRating - Retrieves the lowest rating given to the resource.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResourceRatingModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ResourceRatingViewModelModel is a C# class that represents a view model for resource ratings. It includes methods for retrieving, updating, and deleting resource ratings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResourceRatingViewModelModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ServiceAccessV3Controller is a C# class that provides methods to retrieve service access details, activate services, and generate service access reports for school users based on specific service codes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessV3Controller",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the service access detail for a specific school user based on a service code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessV3Controller",
            "method_name": "GetServiceAccessDetail",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Activate a service for the current school user based on a specified service code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessV3Controller",
            "method_name": "ActivateService",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the service access report for the current user and school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessV3Controller",
            "method_name": "ReportService",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'Thumbnail' class is used to generate and manage thumbnail images. It includes methods for resizing, cropping, and saving thumbnails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Thumbnail",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: The 'UpdatedResourceRatingViewModel' class is used to represent and manage updated ratings for resources.\r\n\r\nMethods:\r\n1. UpdateResourceRating - Updates the rating for a resource.\r\n2. GetResourceRating - Retrieves the rating for a resource.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UpdatedResourceRatingViewModel",
            "namespace": "LMS.Controllers.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'EventsV4Controller' is a class that provides methods for retrieving user lives, all lives, lives and replays, and current formations with error handling and security checks.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the user's lives based on search value, page number, page size, current user info, and events list scope for current formations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "method_name": "GetUserLivesTaskAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all lives for the current user with a specified search value, page number, and page size, within the context of events list scope 'Other'.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "method_name": "GetAllLivesTaskAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve all lives and replays based on specified criteria, including security checks for data integrity and limits on display quantities.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "method_name": "GetAllLivesAndReplaysAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the current formations for the logged-in user and their school, handling any exceptions by logging the error message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsV4Controller",
            "method_name": "GetCurrentFormations",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'ForumV4Controller' is a C# class that provides methods to retrieve the current forum parcours for an authenticated user based on their user ID and school ID, while handling any potential errors that may arise during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV4Controller",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the current forum parcours for the authenticated user based on their user ID and school ID, handling any potential errors during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumV4Controller",
            "method_name": "GetCurrentForumParcours",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "GlobalExamController is a class designed to retrieve the dynamic access URI for a global exam based on the current user's information and configuration values.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GlobalExamController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the dynamic access URI for a global exam based on the current user's information and configuration values.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GlobalExamController",
            "method_name": "GetGlobalExamAccessDynamicUserUri",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Summary: 'JiraController' is a C# class that handles various functions such as creating JIRA issues, retrieving school information, user information, cursus and sector details, and DNS configurations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create an issue in JIRA with all relevant data retrieved from various sources.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "CreateIssue",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the code and name of a specific school from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "GetSchoolInfo",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the first name and last name of a specific user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "GetUserInfo",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the title of a cursus and the corresponding Jira sector name based on a specified parcours code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "GetCursusAndSectorInfo",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the DNS configuration with a specific code from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JiraController",
            "method_name": "GetDns",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "JwpController is a class that handles web hook requests by processing media availability events and validating uploaded files against user and school information in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwpController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Handle the web hook request by processing the media availability event and validating the uploaded file against the user and school information in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwpController",
            "method_name": "PostHandleWebHook",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'ProctoringController' class handles asynchronous retrieval of user information, block exam session details, and user-specific exam session information, logging success or failure messages accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the user information details asynchronously, using the user ID from the current user's identity, and log the success or failure of the operation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringController",
            "method_name": "GetUserInfosAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve block exam session information asynchronously for a specified resource version ID, promotion code, and field code, logging success or error messages accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringController",
            "method_name": "GetBlockExamSessionInfosAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the block exam session information for a specified user based on their user ID and school user ID, with the possibility of providing evaluation and promotion codes, returning the result if successful or an error message if not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringController",
            "method_name": "GetUserBlockExamSessionInfosAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'RegionalSettingsController' class manages and controls regional settings for users, including retrieving time zones for countries, getting and updating user-specific regional settings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettingsController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the time zones for each country and return a list of country time zone view models containing the country code, name, time zone ID, and time zone name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettingsController",
            "method_name": "GetCountriesTimeZones",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the timezone ID for a specified user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettingsController",
            "method_name": "GetUserRegionalSettings",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the user's regional settings based on the provided country code, user ID, and time zone ID, creating a new address and user address if necessary. If the user's regional settings are already set, return a Not Modified response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettingsController",
            "method_name": "SetUserRegionalSettings",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'TeamController' is a C# class that allows users to retrieve team members asynchronously and active teams associated with the currently authenticated user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the team members asynchronously for a specified team, based on the current user's school ID and user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamController",
            "method_name": "GetTeamMembersAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the active teams associated with the currently authenticated user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamController",
            "method_name": "GetUserActiveTeamsAsync",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "`TraceController` is a class that manages the tracking and creation of follow-up tickets for user acceptance of internal rules in a system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceController",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a list of user IDs for which an automatic follow-up ticket regarding the acceptance of the internal rules must be created, with a maximum number of users to consider.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceController",
            "method_name": "GetAllUsersIdsMissingTracesForInternalRulesApproval",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a batch of user IDs for which automatic follow-up tickets regarding the acceptance of internal rules approval must be created, with a maximum number of users specified.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceController",
            "method_name": "GetBatchUsersIdsMissingTracesForInternalRulesApproval",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create tracking tickets for the acceptance of internal rules for all users in the specified batch.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceController",
            "method_name": "CreateTracesForUsersInternalRulesApproval",
            "namespace": "LMS.Controllers.V4",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "'NewsfeedV5Controller' is a C# class that provides methods for managing and interacting with posts, comments, and audience in a newsfeed service, handling access control, error logging, and notifications efficiently.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve wall posts asynchronously based on the user's identity, school ID, school ID list, tag IDs, date range, page size, filter, team ID, and workgroup, handling unauthorized access exceptions and logging errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "GetWallPostsAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a single post based on specified conditions, including user workgroups and school IDs, and return the post along with associated users in a paginated view model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "FetchPostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new post asynchronously, handling exceptions and returning the corresponding response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "PostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve the audience for a specific post based on the user's school and user ID, handling potential exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "GetPostAudienceAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Make a post public asynchronously, using the current user's identity to authorize the action and handle any exceptions that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "MakePostPublicAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the like status of a post, incrementing the post score and notifying users who liked the post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "LikePostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Update the like status of a post by a user, decreasing the post score if the user has previously liked it, and notifying relevant groups of the change.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "LikePostUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Pin a post in the newsfeed service, checking rights and conditions before setting the post as sticky and saving the changes in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "PinPostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Undo the pinning of a post if the user has the right to do so and the post is currently pinned, otherwise return an error response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "PinPostUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a post asynchronously, handling exceptions for object not found or unauthorized access.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "DeletePostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Set the post to be hidden from prospects, based on the user's identity and school IDs list, with error handling for object not found, unauthorized access, and general exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "HidePostToPropectsAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Undo the action of hiding a post to prospects by the current user, using the post ID and user's school IDs list, returning an OK status if successful, handling exceptions for object not found, unauthorized access, and other errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "HidePostToPropectsUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create and post a new comment on a specific post, with validation for comment text, file attachments, and user permissions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "PostCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Like a comment asynchronously, checking if the user has already liked it and updating the comment's score accordingly, while also notifying other users and sending notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "LikeCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Undo liking a comment asynchronously, by removing the user's like and decreasing the comment score if the user has previously liked it, and notifying the relevant group of users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "LikeCommentUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a comment asynchronously with error handling for object not found, unauthorized access, and other exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "DeleteCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a NewsfeedItemV3ViewModel with posts and users, where the posts are filtered by ID and mapped with user-specific data, and the post body is modified to replace DNS configurations with a specified host.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV5Controller",
            "method_name": "GetCreatePostVM",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "The 'TeamNewsfeedV5Controller' class manages team newsfeed posts, comments, and interactions, allowing users to retrieve, create, like, pin, delete, and hide posts and comments with appropriate exception handling.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a team's posts from the newsfeed, paginated and filtered based on specified criteria.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "GetWallTeamPostsAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Retrieve a single post related to a team, based on user and school information, and return it as a pagination view model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "FetchPostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create a new team post asynchronously with the current user's information and handle exceptions accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "PostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Like a team post asynchronously, handling exceptions such as invalid operation, unauthorized access, and database entity validation errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "LikePostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Unlike a team post and handle potential exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "LikePostUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Pin a team post asynchronously, handling various exceptions such as invalid operation, unauthorized access, and database entity validation errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "PinPostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Unpin a team post and handle any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "PinPostUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a team post asynchronously based on the provided team post ID, school ID, and user ID, handling various exceptions and returning appropriate responses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "DeletePostAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Hide a specific team post from prospects by the current user, handling various exceptions and returning appropriate responses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "HidePostToPropectsAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Show the team post to prospects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "HidePostToPropectsUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Create and post a new team comment on a given team post, with validation for comment text and number of files, and handling of exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "PostCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Like a team comment asynchronously, handling exceptions such as invalid operation, unauthorized access, and database entity validation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "LikeCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Unlike a team comment with the specified team comment ID, school ID, school IDs list, and user ID, handling various exceptions and returning appropriate responses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "LikeCommentUndoAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Delete a team comment asynchronously, handling different exceptions such as InvalidOperationException, UnauthorizedAccessException, DbEntityValidationException, and general exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamNewsfeedV5Controller",
            "method_name": "DeleteCommentAsync",
            "namespace": "LMS.Controllers.V5",
            "summary_kind": "method",
            "functional_type": "Controller"
        }
    },
    {
        "page_content": "Global Description:\r\n'ConnectedUserInfo' is a C# class that stores information about a connected user, including their username, connection status, and last active timestamp.\r\n\r\nMethods:\r\n1. UpdateUsername(string newUsername) - Updates the username of the connected user.\r\n2. UpdateConnectionStatus(bool isConnected) - Updates the connection status of the connected user.\r\n3. UpdateLastActiveTime(DateTime newTime) - Updates the last active timestamp of the connected user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectedUserInfo",
            "namespace": "LMS.Domains.ActivityReport",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ConnectionsListHolder is a C# class that serves as a container for managing a list of connections. It provides methods for adding, removing, and retrieving connections.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionsListHolder",
            "namespace": "LMS.Domains.ActivityReport",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ServiceAccessDefault is a class that provides a method to retrieve the service access URL, throwing an exception if the URL is null or empty.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessDefault",
            "namespace": "LMS.Entities.ServiceAccess",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Return the service access URL, throwing an exception if the URL is null or empty.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessDefault",
            "method_name": "GetServiceAccessUrl",
            "namespace": "LMS.Entities.ServiceAccess",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ServiceAccessFactory is a class that provides a method to build new service access objects based on the provided service code, returning specific objects for \"ORTHODIDACTE\" and \"GITHUB_STUDENT_DEV\", or a default object for other services.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessFactory",
            "namespace": "LMS.Entities.ServiceAccess",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "This class provides methods to generate a service access URL for student developers using school ID, user GUID, and a secret key signature.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessGithubStudentDeveloperPack",
            "namespace": "LMS.Entities.ServiceAccess",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Generate a service access URL using school ID, user GUID, and a signature based on a secret key.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessGithubStudentDeveloperPack",
            "method_name": "GetServiceAccessUrl",
            "namespace": "LMS.Entities.ServiceAccess",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ServiceAccessOrthodidacte is a class that constructs the service access URL using a provided URL template, user GUID, and user token through the GetServiceAccessUrl method.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessOrthodidacte",
            "namespace": "LMS.Entities.ServiceAccess",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ErrorsContainer' is a class that allows for the addition of new errors with specific error codes and messages to a list of errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ErrorsContainer",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Add a new error with the specified error code and error message to the list of errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ErrorsContainer",
            "method_name": "Add",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ErrorsContainerExtensions' is a C# class that provides a method called 'ToErrorsDetails' to create a new ErrorsDetails object with status code, messages, unique error identifier, and error codes from the errors container.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ErrorsContainerExtensions",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ErrorsDetails' is a class that provides a method to serialize the object using JSON format.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ErrorsDetails",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Serialize the object using JSON format.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ErrorsDetails",
            "method_name": "ToString",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'LoggerExtensions' is a C# class that provides methods to log errors with codes, messages, unique identifiers, and exception details if errors are found in the errors container.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LoggerExtensions",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'LogHttpRequestsMiddleware' is a class that logs details of HTTP requests, response variables, authentication variables, and configuration variables, excluding specified URL patterns, after processing the request in the middleware pipeline.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Invoke the next middleware in the pipeline and log details about the context after the request has been processed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "Invoke",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Log details of a HTTP request if the application is active, excluding certain requests based on specified URL patterns.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "LogDetails",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Log details of a request including variables, response variables, authentication variables, and configuration variables.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "LogRequestDetails",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve and log response variables such as status code, reason phrase, content-encoding, and content length.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "LogResponseVariables",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Log request variables including method, URI, accept type, user agent, content type, body length, accept encoding, and bearer token.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "LogRequestVariables",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Log authentication variables including user ID, school ID, and expiration timestamp from the authorization payload.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "LogAuthenticationVariables",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve and log the configuration variables related to school codes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "LogConfigurationVariables",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Format the given number into a human-readable size format in bytes, kilobytes, and megabytes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "PrettyPrintValue",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate and return the payload of an authorization token if it meets specified conditions, otherwise return null.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LogHttpRequestsMiddleware",
            "method_name": "GetAuthorizationPayload",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'ProspectCreationException' class is used to handle exceptions related to the creation of prospects in a system. It provides various methods to manage and communicate errors during prospect creation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProspectCreationException",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'RecordNotFoundException' class is used to represent an exception when a specific record is not found in a data set or database.\r\n\r\nExposed methods:\r\n1. Constructor - Initializes a new instance of the RecordNotFoundException class.\r\n2. ToString() - Returns a string that represents the current object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RecordNotFoundException",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'StudiUserIdEnricher' is a C# class that enriches log events with user ID and issuer information extracted from the authorization token in the HTTP request headers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiUserIdEnricher",
            "namespace": "LMS.ErrorHandling.SerilogEnrichers",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'StudiUserTokenEnricher' is a class designed to enrich log events with a user token obtained from HTTP request headers, if available.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiUserTokenEnricher",
            "namespace": "LMS.ErrorHandling.SerilogEnrichers",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'SimpleExceptionLogger' is a C# class designed to log unhandled exceptions and information asynchronously within an application context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SimpleExceptionLogger",
            "namespace": "LMS.ErrorHandling",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'AnnotationBindingModel' is a C# class that serves as a model for binding annotations to data.\r\n\r\nExposed Methods:\r\n1. AddAnnotation: Adds an annotation to the binding model.\r\n2. RemoveAnnotation: Removes a specific annotation from the binding model.\r\n3. GetAnnotations: Retrieves all annotations associated with the binding model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationBindingModel",
            "namespace": "LMS.Models.BindingModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'CommentsBindingModel' is a C# class used for binding and managing comments data.\r\n\r\nExposed Methods:\r\n1. AddComment: Adds a new comment to the binding model.\r\n2. DeleteComment: Deletes a comment from the binding model.\r\n3. UpdateComment: Updates an existing comment in the binding model.\r\n4. GetComments: Retrieves all comments stored in the binding model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CommentsBindingModel",
            "namespace": "LMS.Models.BindingModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'DigitalSignaturesBindingModel' is a C# class that serves as a model for handling digital signatures, providing methods for signing and verifying digital documents.\r\n\r\nExposed Methods:\r\n1. SignDocument - Signs a digital document with a digital signature.\r\n2. VerifySignature - Verifies the authenticity of a digital signature on a document.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DigitalSignaturesBindingModel",
            "namespace": "LMS.Models.BindingModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "DrawingPositionBindingModel represents a data model for storing information about the position of a drawing. It includes methods for setting and getting the X and Y coordinates of the drawing position.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DrawingPositionBindingModel",
            "namespace": "LMS.Models.BindingModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class that represents a binding model for highlighting text reactions.\r\n\r\nExposed Methods:\r\n1. AddReaction - Adds a reaction to the highlighted text.\r\n2. RemoveReaction - Removes a reaction from the highlighted text.\r\n3. GetReactions - Retrieves all reactions associated with the highlighted text.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HighlightTextReactsBindingModel",
            "namespace": "LMS.Models.BindingModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ReviewStatusBindingModel' is a C# class that represents the status of a review. It provides methods to update and retrieve the status of a review.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReviewStatusBindingModel",
            "namespace": "LMS.Models.BindingModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Summary: 'MeetingInfoBindingModel' is a C# class used to store and manage information related to meetings.\r\n\r\nMethods:\r\n1. GetMeetingInfo: Retrieves meeting information.\r\n2. UpdateMeetingInfo: Updates meeting information.\r\n3. DeleteMeetingInfo: Deletes meeting information.\r\n4. AddAttendee: Adds an attendee to the meeting.\r\n5. RemoveAttendee: Removes an attendee from the meeting.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MeetingInfoBindingModel",
            "namespace": "LMS.Models.BindingModels.Common.BigBlueButton",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UploadedFileBindingModel' is a C# class used to represent a file that has been uploaded, containing information such as file name, content type, and data.\r\n\r\nExposed methods:\r\n1. GetFileName() - Returns the name of the uploaded file.\r\n2. GetContentType() - Returns the content type of the uploaded file.\r\n3. GetData() - Returns the data of the uploaded file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UploadedFileBindingModel",
            "namespace": "LMS.Models.BindingModels.Common.UploadedFile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a binding model for creating traces for internal rules approval for users. It includes methods for managing and processing approval requests.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CreateTracesForUsersInternalRulesApprovalBindingModel",
            "namespace": "LMS.Models.BindingModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n'NotificationBindingModel' is a C# class that represents a model for handling notifications in an application.\r\n\r\nExposed Methods:\r\n1. SetNotification: Sets the notification message and type.\r\n2. ClearNotification: Clears the current notification.\r\n3. GetNotificationMessage: Retrieves the current notification message.\r\n4. GetNotificationType: Retrieves the current notification type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationBindingModel",
            "namespace": "LMS.Models.BindingModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'PasswordSetupBindingModel' is a C# class used for setting up and managing password-related information.\r\n\r\nExposed Methods:\r\n1. SetPassword: Sets a new password for the user.\r\n2. ValidatePassword: Validates if the provided password meets the required criteria.\r\n3. ResetPassword: Resets the user's password to a default value.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PasswordSetupBindingModel",
            "namespace": "LMS.Models.BindingModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "QuizzBindingModel is a C# class designed to handle data binding for quiz-related information. It includes methods such as GetQuizzById, CreateQuizz, UpdateQuizz, and DeleteQuizz.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "QuizzBindingModel",
            "namespace": "LMS.Models.BindingModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'ResetPasswordBindingModel' is a C# class designed to handle the data needed for resetting a user's password.\r\n\r\nMethods:\r\n1. ResetPassword - Resets the user's password using the provided new password.\r\n2. Validate - Validates the data in the binding model before resetting the password.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResetPasswordBindingModel",
            "namespace": "LMS.Models.BindingModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'AddressBindingModel' is a C# class that represents a model for binding address data, providing properties for street, city, state, zip code, and country.\r\n\r\nExposed Methods:\r\n1. SetStreet(string street) - Sets the street property of the address.\r\n2. SetCity(string city) - Sets the city property of the address.\r\n3. SetState(string state) - Sets the state property of the address.\r\n4. SetZipCode(string zipCode) - Sets the zip code property of the address.\r\n5. SetCountry(string country) - Sets the country property of the address.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AddressBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A data model for creating a new partner user subscription.\r\n\r\nExposed Methods:\r\n1. ValidateSubscription: Validates the subscription details before creating a new partner user subscription.\r\n2. CreateSubscription: Creates a new partner user subscription based on the provided details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewPartnerUserSubscriptionBindingModel",
            "namespace": "LMS.Models.BindingModels.V2.Connection",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a binding model for new prospects interested in long-term apprenticeship programs. It includes methods for handling prospect information and application details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewProspectLongtermApprenticeshipV2BindingModel",
            "namespace": "LMS.Models.BindingModels.V2.Connection",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class serves as a binding model for a new prospects long-term apprenticeship program, providing data for various functionalities.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewProspectsLongtermApprenticeshipV2BindingModel",
            "namespace": "LMS.Models.BindingModels.V2.Connection",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'NewProspectV2BindingModel' is a C# class that represents a data model for creating new prospect information with updated features.\r\n\r\nExposed Methods:\r\n1. AddProspectInfo - Adds new prospect information to the model.\r\n2. UpdateProspectInfo - Updates existing prospect information in the model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewProspectV2BindingModel",
            "namespace": "LMS.Models.BindingModels.V2.Connection",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ProspectAccountActivationV2BindingModel' class is used to store and manage data related to prospect account activations, providing methods for handling activation processes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProspectAccountActivationV2BindingModel",
            "namespace": "LMS.Models.BindingModels.V2.Connection",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class that represents a binding model for creating collaborations.\r\n\r\nMethods:\r\n1. CreateCollaboration - Creates a new collaboration.\r\n2. AddCollaborator - Adds a collaborator to the collaboration.\r\n3. RemoveCollaborator - Removes a collaborator from the collaboration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CreateCollaborateBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a binding model for creating collaborative juries. It includes methods for setting up and managing jury collaborations.\r\n\r\nMethods:\r\n1. SetJuryMembers: Sets the members of the jury for collaboration.\r\n2. SetCollaborationDeadline: Sets the deadline for the collaboration.\r\n3. AddCollaborator: Adds a collaborator to the jury collaboration.\r\n4. RemoveCollaborator: Removes a collaborator from the jury collaboration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CreateCollaborateJuryBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'DayScheduleBindingModel' is a C# class that represents a binding model for a daily schedule, providing methods for managing and updating schedule information.\r\n\r\nExposed Methods:\r\n1. AddEvent - Adds a new event to the daily schedule.\r\n2. UpdateEvent - Updates an existing event in the schedule.\r\n3. RemoveEvent - Removes a specific event from the schedule.\r\n4. GetEvents - Retrieves all events for the day schedule.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DayScheduleBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class that represents a binding model for a file, providing methods for handling file-related operations.\r\n\r\n1. Method Name: ValidateFile\r\nSummary: Validates the file based on specified criteria.\r\n\r\n2. Method Name: SaveFile\r\nSummary: Saves the file to a specified location.\r\n\r\n3. Method Name: DeleteFile\r\nSummary: Deletes the file from the system.\r\n\r\n4. Method Name: GetFileSize\r\nSummary: Retrieves the size of the file in bytes.\r\n\r\n5. Method Name: GetFileExtension\r\nSummary: Returns the extension of the file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FileBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'FormParametersBindingModel' is a C# class that represents the model for binding form parameters in a web application.\r\n\r\nExposed Methods:\r\n1. BindFormParameters - Binds form parameters to the model.\r\n2. ValidateParameters - Validates the form parameters based on specified rules.\r\n3. GetParameterValue - Retrieves the value of a specific form parameter.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormParametersBindingModel",
            "namespace": "LMS.Models.BindingModels.V2.Forms",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'FormSubmissionDataBindingModel' class is used to validate and store form submission data before it is submitted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormSubmissionDataBindingModel",
            "namespace": "LMS.Models.BindingModels.V2.Forms",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Check if all required form and user information is valid for submission.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormSubmissionDataBindingModel",
            "method_name": "IsValid",
            "namespace": "LMS.Models.BindingModels.V2.Forms",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'AffectationFormationBindingModel' is a class used for managing the binding of formation affectations. It includes methods for adding, updating, and deleting affectations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AffectationFormationBindingModel",
            "namespace": "LMS.Models.BindingModels.V2.ForumsFormateurs",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumsFormateursBindingModel is a C# class that serves as a data model for binding forum information with formateurs. It includes methods for managing forum formateur relationships.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumsFormateursBindingModel",
            "namespace": "LMS.Models.BindingModels.V2.ForumsFormateurs",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'HasDoneFormBindingModel' is a C# class that represents a model for form binding, providing methods to check if a form has been completed.\r\n\r\nExposed Methods:\r\n1. bool HasDoneForm() - Checks if the form has been completed.\r\n2. void ResetForm() - Resets the form to its initial state.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HasDoneFormBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class provides binding models for retrieving holiday information for a specific period of time. It includes methods for fetching and updating holiday data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HolidaysForPeriodBindingModels",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'InternshipBindingModel' class is used to store data related to an internship application, including methods for creating and updating internship information.\r\n\r\n1. CreateInternship: Creates a new internship application with the given details.\r\n2. UpdateInternship: Updates an existing internship application with new information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'OrganizationBindingModel' is a C# class that represents the data model for binding organization information in an application.\r\n\r\nExposed Methods:\r\n1. ValidateOrganizationName - Validates the organization name.\r\n2. ValidateOrganizationEmail - Validates the organization email.\r\n3. ValidateOrganizationPhoneNumber - Validates the organization phone number.\r\n4. MapToOrganizationDTO - Maps the organization data to a Data Transfer Object (DTO).",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "OrganizationBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'PasswordUpdateBm' is a C# class designed to handle password updates for user accounts.\r\n\r\nExposed Methods:\r\n1. UpdatePassword - Updates the password for a user account.\r\n2. ValidatePasswordStrength - Validates the strength of a password before updating it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PasswordUpdateBm",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A C# class representing a binding model for a period of time, providing methods for setting and getting start and end dates.\r\n\r\nExposed Methods:\r\n1. SetStartDate(DateTime startDate) - Sets the start date of the period.\r\n2. SetEndDate(DateTime endDate) - Sets the end date of the period.\r\n3. GetStartDate() - Retrieves the start date of the period.\r\n4. GetEndDate() - Retrieves the end date of the period.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PeriodBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'PlanningPrintBindingModel' is a C# class that represents the data model for printing planning documents. It includes methods for setting and retrieving planning details for printing purposes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PlanningPrintBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: ScheduleBindingModel is a C# class used to represent and manage scheduling data for binding purposes.\r\n\r\nExposed Methods:\r\n1. AddScheduleItem: Adds a new schedule item to the binding model.\r\n2. RemoveScheduleItem: Removes a schedule item from the binding model.\r\n3. UpdateScheduleItem: Updates an existing schedule item in the binding model.\r\n4. GetScheduleItems: Retrieves all schedule items stored in the binding model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ScheduleBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'TutorBindingModel' class is a data model used for binding tutor information in a C# application. It includes methods for setting and retrieving tutor details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TutorBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'UserBindingModel' is a C# class that serves as a model for binding user data in a system.\r\n\r\nExposed Methods:\r\n1. ValidateUserInputs: Validates the user inputs before processing.\r\n2. MapToUserEntity: Maps the user data from the binding model to the user entity in the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'UserPhoneNumberBindingModel' is a C# class that represents the binding model for a user's phone number information.\r\n\r\nExposed Methods:\r\n1. ValidatePhoneNumber: Validates the user's phone number input.\r\n2. SetPhoneNumber: Sets the user's phone number in the binding model.\r\n3. GetPhoneNumber: Retrieves the user's phone number from the binding model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserPhoneNumberBindingModel",
            "namespace": "LMS.Models.BindingModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: EventObjectBindingModel is a C# class that represents a binding model for handling event objects.\r\n\r\nExposed Methods:\r\n1. UpdateEventObject - Updates the event object with new data.\r\n2. DeleteEventObject - Deletes the event object.\r\n3. GetEventObjectDetails - Retrieves details of the event object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventObjectBindingModel",
            "namespace": "LMS.Models.BindingModels.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'EventTrackingBindingModel' is a C# class designed to track events and bind data related to event tracking.\r\n\r\nExposed Methods:\r\n1. AddEvent(string eventName, DateTime eventTime) - Adds a new event with the specified name and timestamp.\r\n2. GetEvents() - Retrieves a list of all tracked events.\r\n3. ClearEvents() - Clears all tracked events from the model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventTrackingBindingModel",
            "namespace": "LMS.Models.BindingModels.V3",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class representing a binding model for a version 3 newsfeed post, containing methods for creating, updating, and deleting newsfeed posts.\r\n\r\nMethods:\r\n1. CreateNewsfeedPost - Creates a new newsfeed post.\r\n2. UpdateNewsfeedPost - Updates an existing newsfeed post.\r\n3. DeleteNewsfeedPost - Deletes a newsfeed post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostV3BindingModel",
            "namespace": "LMS.Models.BindingModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "EventsBindingModel is a C# class that serves as a model for binding event data. It includes methods for creating, updating, and deleting events.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsBindingModel",
            "namespace": "LMS.Models.BindingModels.V4.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'AdobeState' class represents the state of an Adobe application, providing methods for managing and manipulating its state.\r\n\r\nMethods:\r\n1. SaveState() - Saves the current state of the Adobe application.\r\n2. RestoreState() - Restores the saved state of the Adobe application.\r\n3. ClearState() - Clears the state of the Adobe application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AdobeState",
            "namespace": "LMS.Models.CommonModels.AdobeModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'EventViewType' represents different viewing states for events: 'All' (0), 'Viewed' (1), and 'NotViewed' (2).",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "EventViewType",
            "namespace": "LMS.Models.CommonModels.EventModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\nA model class used to subscribe a user to a course.\r\n\r\nMethods:\r\n1. SubscribeUserToCourse - Subscribes a user to a course.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SubscribeUserToCourseModel",
            "namespace": "LMS.Models.CourseSubscriptionModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A C# class designed to handle the removal of correction bindings.\r\n\r\nMethods:\r\n1. RemoveCorrection - Removes a correction binding from the model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RemoveCorrectionBindingModel",
            "namespace": "LMS.Models.EvaluationModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class that represents a model for removing event bindings.\r\n\r\nMethods:\r\n1. RemoveEventBinding - Removes a specific event binding.\r\n2. RemoveAllEventBindings - Removes all event bindings from the model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RemoveEventBindingModel",
            "namespace": "LMS.Models.EvaluationModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class representing a model for removing a file binding.\r\n\r\n1. Method: RemoveFile\r\nSummary: Removes the file binding.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RemoveFileBindingModel",
            "namespace": "LMS.Models.EvaluationModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumCategoryItem class represents a category item in a forum. It has methods to get and set the category name, description, and parent category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumCategoryItem",
            "namespace": "LMS.Models.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ForumCategoryVM is a C# class that represents a view model for forum categories. It includes methods for retrieving and updating category information.\r\n\r\n1. GetCategory: Retrieves a specific forum category.\r\n2. GetAllCategories: Retrieves all forum categories.\r\n3. AddCategory: Adds a new forum category.\r\n4. UpdateCategory: Updates an existing forum category.\r\n5. DeleteCategory: Deletes a forum category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumCategoryVM",
            "namespace": "LMS.Models.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumUploadViewModel is a C# class that represents the view model for uploading content to a forum. It contains methods for uploading images, videos, and text posts to the forum.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumUploadViewModel",
            "namespace": "LMS.Models.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "A C# class used for binding login information, containing properties for username and password.\r\n\r\nMethods:\r\n1. LoginBindingModel() - Constructor for creating a new instance of LoginBindingModel.\r\n2. Validate() - Method to validate the login information provided.\r\n3. SetUsername(string username) - Method to set the username property.\r\n4. SetPassword(string password) - Method to set the password property.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LoginBindingModel",
            "namespace": "LMS.Models",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'LoginResponseSuccessViewModel' class is a model used to represent a successful login response, containing relevant information such as user details and authentication token.\r\n\r\nMethods:\r\n1. GetUserId() - Retrieves the user ID from the login response.\r\n2. GetUserName() - Retrieves the user name from the login response.\r\n3. GetAuthToken() - Retrieves the authentication token from the login response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LoginResponseSuccesViewModel",
            "namespace": "LMS.Models",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'ResetPasswordModel' is a C# class designed to store and manage information related to resetting a user's password.\r\n\r\nExposed Methods:\r\n1. ResetPassword - Resets the user's password.\r\n2. ValidateToken - Validates the token used for resetting the password.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResetPasswordModel",
            "namespace": "LMS.Models.MailModels.Connection",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "FailedQuizModel represents a model for storing information about a failed quiz attempt. It includes properties such as quiz id, user id, and timestamp.\r\n\r\nMethods:\r\n1. GetQuizId - Retrieves the quiz id associated with the failed quiz attempt.\r\n2. GetUserId - Retrieves the user id of the individual who attempted the quiz.\r\n3. GetTimestamp - Retrieves the timestamp of when the quiz attempt failed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FailedQuizModel",
            "namespace": "LMS.Models.MailModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'NewsfeedTabActionEnum' is an enum representing various actions that can be performed on newsfeed tabs, such as creating, deleting, liking, commenting, and more.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "NewsfeedTabActionEnum",
            "namespace": "LMS.Models",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "NewsfeedTabModel is a class that represents a model for a newsfeed tab in a social media application. It contains methods for retrieving, updating, and deleting newsfeed items.\r\n\r\n1. GetNewsfeedItems(): Retrieves all newsfeed items for the tab.\r\n2. UpdateNewsfeedItem(int itemId, string newContent): Updates the content of a specific newsfeed item.\r\n3. DeleteNewsfeedItem(int itemId): Deletes a specific newsfeed item from the tab.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedTabModel",
            "namespace": "LMS.Models",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "SchoolViewModel is a C# class that serves as a view model for school-related data. It contains methods to retrieve and manipulate information about schools.\r\n\r\nMethods:\r\n1. GetSchoolDetails() - Retrieves details of a specific school.\r\n2. UpdateSchoolDetails() - Updates details of a specific school.\r\n3. AddNewSchool() - Adds a new school to the system.\r\n4. DeleteSchool() - Deletes a school from the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolViewModel",
            "namespace": "LMS.Models",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a factory for generating payloads related to LMS front-end issues in Studi content management system.\r\n\r\nMethods:\r\n1. GenerateIssuePayload: Generates a payload for an LMS front-end issue.\r\n2. UpdateIssuePayload: Updates an existing payload for an LMS front-end issue.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiContentFactoryIssueLmsFrontPayload",
            "namespace": "LMS.Models",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'UserCourseSubscriptionGraph' class represents a graph data structure used to track user subscriptions to various courses.\r\n\r\nExposed Methods:\r\n1. AddUserSubscription: Adds a new user subscription to the graph.\r\n2. RemoveUserSubscription: Removes a user subscription from the graph.\r\n3. GetCommonSubscriptions: Retrieves the common subscriptions between two users.\r\n4. GetUserSubscriptions: Retrieves all subscriptions of a specific user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserCourseSubscriptionGraph",
            "namespace": "LMS.Models",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nBaseEvent is a class that serves as the foundation for creating event objects with various properties and functionalities.\r\n\r\nMethods:\r\n1. GetName() - Retrieves the name of the event.\r\n2. GetDescription() - Retrieves the description of the event.\r\n3. GetStartTime() - Retrieves the start time of the event.\r\n4. GetEndTime() - Retrieves the end time of the event.\r\n5. GetLocation() - Retrieves the location of the event.\r\n6. SetName(string name) - Sets the name of the event.\r\n7. SetDescription(string description) - Sets the description of the event.\r\n8. SetStartTime(DateTime startTime) - Sets the start time of the event.\r\n9. SetEndTime(DateTime endTime) - Sets the end time of the event.\r\n10. SetLocation(string location) - Sets the location of the event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BaseEvent",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'BaseEventDetails' is a class that provides essential details and information for various events. It includes methods for setting and retrieving event details such as title, date, location, and description.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BaseEventDetails",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CampusEventDetails class stores details of events happening on a campus. It contains methods for managing event information such as adding, updating, and deleting events.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusEventDetails",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CampusEventListItem is a class that represents a single item in a list of campus events. It contains properties for event details such as name, date, and location.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CampusEventListItem",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'AnnotationsViewModel' is a C# class that serves as a view model for handling annotations in a software application. It contains methods for adding, editing, and deleting annotations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationsViewModel",
            "namespace": "LMS.Models.ViewModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "AnnotationViewModel is a class that represents the view model for annotations in a C# application. It contains methods to handle the creation, updating, and deletion of annotations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AnnotationViewModel",
            "namespace": "LMS.Models.ViewModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'CommentsViewModel' is a C# class that serves as a view model for managing comments. It includes methods such as AddComment, DeleteComment, and UpdateComment to handle interactions with comments in an application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CommentsViewModel",
            "namespace": "LMS.Models.ViewModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'DigitalSignaturesViewModel' is a C# class that handles digital signatures for a specific view in a software application.\r\n\r\nExposed Methods:\r\n1. GenerateSignature - Generates a digital signature for a document.\r\n2. VerifySignature - Verifies the authenticity of a digital signature for a document.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DigitalSignaturesViewModel",
            "namespace": "LMS.Models.ViewModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "DrawingPositionViewModel is a class that represents the position of a drawing in a view model. It contains methods to update and retrieve the drawing's position.\r\n\r\nExposed methods:\r\n1. UpdatePosition - Updates the position of the drawing.\r\n2. GetPosition - Retrieves the current position of the drawing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DrawingPositionViewModel",
            "namespace": "LMS.Models.ViewModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Summary: 'HighlightTextReactsViewModel' is a C# class that manages the highlighted text reactions.\r\n\r\n1. Method Name: Initialize\r\nSummary: Initializes the HighlightTextReactsViewModel with the provided text.\r\n\r\n2. Method Name: AddReaction\r\nSummary: Adds a reaction to the highlighted text.\r\n\r\n3. Method Name: RemoveReaction\r\nSummary: Removes a reaction from the highlighted text.\r\n\r\n4. Method Name: GetReactions\r\nSummary: Retrieves all reactions associated with the highlighted text.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HighlightTextReactsViewModel",
            "namespace": "LMS.Models.ViewModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'ReviewStatusViewModel' is a C# class that provides properties and methods for managing the status of reviews.\r\n\r\nExposed Methods:\r\n1. GetReviewStatus: Retrieves the current status of a review.\r\n2. UpdateReviewStatus: Updates the status of a review.\r\n3. ResetReviewStatus: Resets the status of a review to its default value.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReviewStatusViewModel",
            "namespace": "LMS.Models.ViewModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'SettingsViewModel' is a C# class that serves as a view model for managing and updating application settings.\r\n\r\nExposed Methods:\r\n1. LoadSettings() - Loads the current application settings.\r\n2. SaveSettings() - Saves any changes made to the application settings.\r\n3. UpdateSetting(string settingName, string value) - Updates a specific setting with a new value.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SettingsViewModel",
            "namespace": "LMS.Models.ViewModels.Common.Annotationeer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'Category' class represents a category of items and provides methods for managing and organizing these items.\r\n\r\nMethods:\r\n1. AddItem - Adds an item to the category.\r\n2. RemoveItem - Removes an item from the category.\r\n3. UpdateItem - Updates the details of an item in the category.\r\n4. GetItems - Retrieves a list of all items in the category.\r\n5. GetItemCount - Returns the total number of items in the category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Category",
            "namespace": "LMS.Models.ViewModels.Common.Elephorm",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\nThe 'Subcategory' class represents a subcategory of a larger category, providing methods to manage and retrieve information about subcategories.\r\n\r\nExposed Methods:\r\n1. GetSubcategoryName() - Retrieves the name of the subcategory.\r\n2. SetSubcategoryName(string name) - Sets the name of the subcategory.\r\n3. GetSubcategoryDescription() - Retrieves the description of the subcategory.\r\n4. SetSubcategoryDescription(string description) - Sets the description of the subcategory.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Subcategory",
            "namespace": "LMS.Models.ViewModels.Common.Elephorm",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: The 'Training' class represents a collection of methods related to training activities.\r\n\r\nMethods:\r\n1. StartTraining() - Starts a training session.\r\n2. EndTraining() - Ends a training session.\r\n3. AddParticipant() - Adds a participant to the training session.\r\n4. RemoveParticipant() - Removes a participant from the training session.\r\n5. UpdateSchedule() - Updates the schedule of the training session.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Training",
            "namespace": "LMS.Models.ViewModels.Common.Elephorm",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ConnectionStatsViewModel' is a C# class that provides a view model for displaying connection statistics. It includes methods for updating and retrieving connection information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionStatsViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A view model class for representing the time zones of different countries.\r\n\r\nMethods:\r\n1. GetCountryTimeZones - Retrieves a list of time zones for a specific country.\r\n2. GetLocalTime - Returns the local time based on the selected time zone.\r\n3. ConvertTimeToUTC - Converts a given time to Coordinated Universal Time (UTC).",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CountryTimeZoneViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "EventDetailV3ViewModel is a C# class that provides properties and methods for managing event details and information.\r\n\r\nExposed methods:\r\n1. GetEventDetails() - Retrieves detailed information about the event.\r\n2. UpdateEventDetails() - Updates the event details with new information.\r\n3. DeleteEvent() - Deletes the event from the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventDetailV3ViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EventListingItemV3ViewModel' class is a view model used to represent an event listing item with detailed information. It contains methods for displaying and managing event data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventListingItemV3ViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "NewsfeedTagViewModel is a C# class that represents a view model for displaying tags in a newsfeed. It provides methods for managing and interacting with tags in the newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedTagViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'NotificationPreferenceViewModel' class is a data model that represents user preferences for receiving notifications. It includes methods to manage and update these preferences.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationPreferenceViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'PaginationV3ViewModel' class is a view model used for handling pagination logic in C# applications. It includes methods for calculating page offsets, updating page numbers, and determining the total number of pages.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PaginationV3ViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'PaginationWithNumberViewModel' is a C# class that provides functionality for pagination with page numbers in a view model. It includes methods for handling pagination logic.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PaginationWithNumberViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ProctoringGetBlockExamInfosViewModel' class provides methods for retrieving information about block exams for proctoring purposes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringGetBlockExamInfosViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ProctoringGetUserBlockExamInfosViewModel' class provides methods to retrieve information about blocked exams for a specific user in a proctoring system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringGetUserBlockExamInfosViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ProctoringGetUserInfosViewModel' class is a data model used to retrieve user information for proctoring purposes. It contains methods to fetch and manage user data efficiently.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringGetUserInfosViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ServiceAccessActivationViewModel is a class that represents the view model for accessing and activating services. It contains methods such as ActivateService() and UpdateServiceStatus() to manage service access.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessActivationViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ServiceAccessViewModel is a class that serves as a view model for accessing services. It contains methods for interacting with services.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessViewModel",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'TeamVM' is a C# class that represents a view model for a team, providing methods to manage and display team information.\r\n\r\nMethods:\r\n1. UpdateTeamInfo - Updates the information of the team.\r\n2. AddPlayer - Adds a player to the team.\r\n3. RemovePlayer - Removes a player from the team.\r\n4. GetTeamName - Retrieves the name of the team.\r\n5. GetPlayers - Retrieves a list of players in the team.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamVM",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Summary: 'TeamWithMembersVM' is a C# class that represents a team with its members. It provides methods to manage and interact with the team and its members.\r\n\r\nMethods:\r\n1. AddMember: Adds a new member to the team.\r\n2. RemoveMember: Removes a member from the team.\r\n3. GetMembers: Retrieves a list of all members in the team.\r\n4. GetTeamName: Retrieves the name of the team.\r\n5. UpdateTeamName: Updates the name of the team.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamWithMembersVM",
            "namespace": "LMS.Models.ViewModels",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "AbuseReportViewModel is a class designed to store and manage abuse reports in a structured manner. It includes methods for creating, updating, and retrieving abuse reports.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AbuseReportViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ActivityTrackingViewModel' class is a data model used for tracking and managing activity data. It includes methods for adding, updating, and deleting activity records.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'DeviceRegistrationViewModel' class is used to manage the registration of devices. It includes methods such as 'ValidateInput' and 'RegisterDevice' to handle device registration processes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DeviceRegistrationViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ForumCategoryItemViewModel' is a C# class that represents a view model for a forum category item. It provides methods for managing and displaying forum category information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumCategoryItemViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ForumCategoryViewModel' class is a model used to represent a forum category in a user interface. It contains methods to interact with forum categories such as retrieving, updating, and deleting them.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumCategoryViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'LoginResponseViewModel' is a C# class that represents the response data for a login request, providing information such as user credentials and authentication status.\r\n\r\nMethods:\r\n1. GetUsername() - Returns the username associated with the login response.\r\n2. GetToken() - Returns the authentication token generated for the logged-in user.\r\n3. IsAuthenticated() - Checks if the user is successfully authenticated based on the response data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LoginResponseViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'NotificationPreferenceViewModel' is a class that represents the view model for managing user notification preferences. It includes methods for updating, retrieving, and saving notification preferences.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationPreferenceViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Summary: A view model class for managing user preferences related to notifications.\r\n\r\nMethods:\r\n1. UpdateEmailNotificationPreference - Updates the user's email notification preference.\r\n2. UpdatePushNotificationPreference - Updates the user's push notification preference.\r\n3. UpdateSMSNotificationPreference - Updates the user's SMS notification preference.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationUserPreferencesUpdatedViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'NotificationUserPreferencesViewModel' class is designed to manage user preferences for notifications. It includes methods for updating, retrieving, and saving these preferences.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationUserPreferencesViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "NotificationViewModel is a class that represents a view model for handling notifications in a C# application. It includes methods for displaying, updating, and deleting notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "PathDetailsViewModel is a C# class that provides information and details about a specific path. It includes methods such as GetPathName, GetPathLength, and GetPathCoordinates to retrieve relevant data about the path.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PathDetailsViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "PostAnswerViewModel is a C# class that represents a view model for posting answers. It contains methods for submitting an answer to a question.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PostAnswerViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'PublishNewPostViewModel' is a C# class that represents the view model for publishing a new post. It contains methods for saving the post, adding tags, and uploading images.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PublishNewPostViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ReportActivityCourseInfoViewModel' is a class that provides information and data related to activity courses for reporting purposes. It includes methods for retrieving and manipulating course information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportActivityCouseInfoViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "UserLoginViewModel is a C# class representing the view model for user login functionality. It contains methods for handling user authentication and login processes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserLoginViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'VersionInfoViewModel' is a C# class that provides information about the version of a software application.\r\n\r\n1. GetVersionInfo(): Retrieves the version information of the software application.\r\n2. UpdateVersionInfo(): Updates the version information of the software application.\r\n3. DisplayVersionInfo(): Displays the version information of the software application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "VersionInfoViewModel",
            "namespace": "LMS.Models.ViewModels.V1",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ActivityTrackingWidgetViewModel' class is a view model used for tracking and displaying activity data. It includes methods for updating activities, retrieving activity data, and resetting the widget.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingWidgetViewModel",
            "namespace": "LMS.Models.ViewModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ApprenticeshipActivityTrackingViewModel' class is a data model used for tracking and managing apprenticeship activities. It includes methods for adding, updating, and deleting activity records.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApprenticeshipActivityTrackingViewModel",
            "namespace": "LMS.Models.ViewModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'NewProspectApprenticeshipLongtermViewModel' class is designed to store and manage data related to long-term apprenticeship prospects in a new prospect application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewProspectApprenticeshipLongtermViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Connection",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EvaluationGridInfosViewModel' class is a data model that provides information for displaying evaluation grid details in a view. It contains methods for retrieving and updating evaluation grid information.\r\n\r\n1. GetEvaluationGridInfo: Retrieves evaluation grid information.\r\n2. UpdateEvaluationGridInfo: Updates evaluation grid information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGridInfosViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Evaluations",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EvaluationObjectTypeViewModel' class is a model that represents the evaluation object type in a system. It contains methods for retrieving and updating evaluation object type information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationObjectTypeViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Evaluations",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'EvaluationOralEvent' class is designed to manage and evaluate oral events, providing methods for adding, updating, and retrieving event information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationOralEvent",
            "namespace": "LMS.Models.ViewModels.V2.Evaluations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Summary: 'EvaluationTools' is a C# class that provides various tools and methods for evaluating data and performing analysis.\r\n\r\nMethods:\r\n1. CalculateAverage - Calculates the average value of a given set of data.\r\n2. CalculateStandardDeviation - Calculates the standard deviation of a given set of data.\r\n3. GenerateRandomData - Generates random data for testing and evaluation purposes.\r\n4. FindMaxValue - Finds the maximum value in a given set of data.\r\n5. FindMinValue - Finds the minimum value in a given set of data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationTools",
            "namespace": "LMS.Models.ViewModels.V2.Evaluations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'EventTypeForScheduler' is a class that represents different event types that can be scheduled in a scheduler system.\r\n\r\nExposed Methods:\r\n1. GetEventType: Retrieves the event type associated with the scheduler.\r\n2. SetEventType: Sets the event type for the scheduler.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventTypeForScheduler",
            "namespace": "LMS.Models.ViewModels.V2.Evaluations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'EventUser' is a C# class that represents a user participating in events. It contains methods to manage user information and event participation.\r\n\r\nExposed Methods:\r\n1. AddEventAttendance - Adds the user to the attendance list of a specific event.\r\n2. RemoveEventAttendance - Removes the user from the attendance list of a specific event.\r\n3. UpdateUserInfo - Updates the user's information such as name, email, etc.\r\n4. GetEventAttendanceList - Retrieves the list of events the user is attending.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventUser",
            "namespace": "LMS.Models.ViewModels.V2.Evaluations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "EventMatiereViewModel is a C# class that represents a view model for events related to a specific subject matter. It includes methods such as GetEventDetails and UpdateEventStatus.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventMatiereViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'EventObjectViewModel' is a C# class that represents a view model for event objects, providing properties and methods to interact with event data.\r\n\r\n1. GetEventObjectData: Retrieves event object data.\r\n2. UpdateEventObjectData: Updates event object data.\r\n3. DeleteEventObject: Deletes the event object.\r\n4. AddEventObject: Adds a new event object.\r\n5. GetAllEventObjects: Retrieves all event objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventObjectViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A view model class that represents user participation data for events.\r\n\r\n1. GetEventUserParticipationData: Retrieves user participation data for a specific event.\r\n2. UpdateEventUserParticipationData: Updates user participation data for a specific event.\r\n3. CalculateUserParticipationPercentage: Calculates the percentage of user participation for a specific event.\r\n4. ResetUserParticipationData: Resets user participation data for a specific event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventUserParticipationViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'EventViewModel' class serves as a model for representing event data in a user interface, providing properties and methods to manage event information efficiently.\r\n\r\nExposed Methods:\r\n1. UpdateEventDetails - Updates the details of the event.\r\n2. AddAttendee - Adds an attendee to the event.\r\n3. RemoveAttendee - Removes an attendee from the event.\r\n4. GetEventDetails - Retrieves the details of the event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'AuthorizedFormViewModel' class is used to manage and display data for authorized forms, providing methods for interacting with form data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AuthorizedFormViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forms",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nJotFormViewModel is a C# class that serves as a view model for JotForm data, providing methods for managing and interacting with JotForm submissions.\r\n\r\nExposed Methods:\r\n1. GetFormSubmissions: Retrieves all submissions for a specific JotForm form.\r\n2. GetSubmissionDetails: Retrieves details for a specific submission within a JotForm form.\r\n3. UpdateSubmissionStatus: Updates the status of a submission within a JotForm form.\r\n4. DeleteSubmission: Deletes a specific submission within a JotForm form.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JotFormViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forms",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'SaveJotformSubmissionViewModel' class is designed to handle and store data from Jotform submissions. It includes methods for saving, updating, and retrieving submission information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SaveJotformSubmissionViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forms",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "AffectationLineV2ViewModel is a class that represents a view model for managing affectation lines in a system. It includes methods for updating, deleting, and retrieving affectation line information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AffectationLineV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ForumAnswerPostV2ViewModel' is a class that represents a view model for a forum answer post, containing methods for managing and displaying answer post data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumAnswerPostV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumAnswerV2ViewModel is a data model representing a version 2 forum answer for a forum application. It includes methods for retrieving, updating, and deleting forum answers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumAnswerV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ForumCategoryV2ViewModel' class is a view model used to represent and manage forum categories in a version 2 of a forum application. It contains methods for interacting with forum categories.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumCategoryV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ForumCommentV2ViewModel' is a C# class that represents a view model for forum comments, providing methods for managing and displaying comments in a forum.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumCommentV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ForumPostQuestionV2ViewModel' is a C# class that represents a view model for forum post questions, providing methods for managing and displaying question data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostQuestionV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumPostV2ViewModel is a class that represents a view model for a forum post, providing properties and methods for handling forum post data in a version 2 format.\r\n\r\nExposed methods:\r\n1. GetPostTitle() - Retrieves the title of the forum post.\r\n2. GetPostContent() - Retrieves the content of the forum post.\r\n3. GetAuthorName() - Retrieves the name of the author of the forum post.\r\n4. GetPostDate() - Retrieves the date the forum post was created.\r\n5. LikePost() - Increments the like count for the forum post.\r\n6. CommentOnPost(string comment) - Adds a comment to the forum post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ForumUploadV2ViewModel' class is a data model used for uploading content to a forum. It includes methods for handling file uploads and submitting posts.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumUploadV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'QuestionV2ViewModel' is a C# class designed to handle and manage data related to questions in a version 2 format. It includes methods for retrieving, updating, and deleting question data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "QuestionV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'HallOfFameRankingVm' class is a view model used to display rankings in a Hall of Fame. It contains methods to retrieve and display ranking information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameRankingVm",
            "namespace": "LMS.Models.ViewModels.V2.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'HallOfFameUserVm' class is a view model representing a user in a Hall of Fame. It contains properties for user information such as name, score, and rank.\r\n\r\nExposed methods:\r\n1. GetUserName: Retrieves the name of the user.\r\n2. GetUserScore: Retrieves the score of the user.\r\n3. GetUserRank: Retrieves the rank of the user in the Hall of Fame.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameUserVm",
            "namespace": "LMS.Models.ViewModels.V2.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'RankingPromotionVm' is a C# class that represents a view model for managing promotions in a ranking system. It includes methods for updating, deleting, and retrieving promotions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RankingPromotionVm",
            "namespace": "LMS.Models.ViewModels.V2.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'FileGridViewModel' class is designed to manage and display files in a grid view format. It includes methods for adding, deleting, and updating files within the grid.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FileGridViewModel",
            "namespace": "LMS.Models.ViewModels.V2.InternshipAgreement",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'InternshipGridStatusViewModel' class is designed to manage and display the status of internships in a grid format. It provides methods for updating and retrieving internship status information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipGridStatusViewModel",
            "namespace": "LMS.Models.ViewModels.V2.InternshipAgreement",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'InternshipGridViewModel' class is a data model used to represent and manage internship information in a grid view format.\r\n\r\nExposed methods:\r\n1. GetInternshipList: Retrieves a list of internships.\r\n2. AddInternship: Adds a new internship to the list.\r\n3. UpdateInternship: Updates an existing internship in the list.\r\n4. DeleteInternship: Removes an internship from the list.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InternshipGridViewModel",
            "namespace": "LMS.Models.ViewModels.V2.InternshipAgreement",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'PeriodGridViewModel' class is used to represent and manage data for a period grid view in a C# application.\r\n\r\nExposed methods:\r\n1. RefreshData() - Refreshes the data displayed in the period grid view.\r\n2. FilterData() - Filters the data displayed in the period grid view based on specified criteria.\r\n3. ExportData() - Exports the data displayed in the period grid view to a file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PeriodGridViewgModel",
            "namespace": "LMS.Models.ViewModels.V2.InternshipAgreement",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'IsogradCopy' is a C# class that provides methods for copying and manipulating Isograd data.\r\n\r\n1. Method: CopyData\r\nSummary: Copies Isograd data from one source to another.\r\n\r\n2. Method: FilterData\r\nSummary: Filters Isograd data based on specified criteria.\r\n\r\n3. Method: TransformData\r\nSummary: Transforms Isograd data using a specified transformation logic.\r\n\r\n4. Method: MergeData\r\nSummary: Merges Isograd data from multiple sources into a single dataset.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopy",
            "namespace": "LMS.Models.ViewModels.V2.Isograd",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'IsogradCopyCorrection' is a class designed to provide methods for correcting and editing text content related to Isograd.\r\n\r\n1. Method: CopyText\r\nSummary: Copies the text content for correction.\r\n\r\n2. Method: CorrectSpelling\r\nSummary: Corrects the spelling errors in the copied text.\r\n\r\n3. Method: RemoveDuplicates\r\nSummary: Removes duplicate words or phrases in the copied text.\r\n\r\n4. Method: AddPunctuation\r\nSummary: Adds punctuation marks to the copied text.\r\n\r\n5. Method: FormatText\r\nSummary: Formats the text content for better readability.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyCorrection",
            "namespace": "LMS.Models.ViewModels.V2.Isograd",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "IsogradViewModel is a class that represents the view model for Isograd, providing methods for interacting with Isograd data.\r\n\r\n1. GetIsogradData: Retrieves Isograd data.\r\n2. UpdateIsogradData: Updates Isograd data.\r\n3. DeleteIsogradData: Deletes Isograd data.\r\n4. AddIsogradData: Adds new Isograd data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Isograd",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'EventTypeViewModel' is a class that serves as a view model for event types, providing properties and methods to manage and display event type information.\r\n\r\nMethods:\r\n1. GetEventTypeName - Retrieves the name of the event type.\r\n2. SetEventTypeName - Sets the name of the event type.\r\n3. GetEventTypeDescription - Retrieves the description of the event type.\r\n4. SetEventTypeDescription - Sets the description of the event type.\r\n5. GetEventTypeColor - Retrieves the color associated with the event type.\r\n6. SetEventTypeColor - Sets the color associated with the event type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventTypeViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Lives",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "UpcomingEventViewModel is a data model class that represents upcoming events with properties such as event name, date, location, and description.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UpcomingEventViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Lives",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UpcomingModulesViewModel' is a C# class that provides data and functionality related to upcoming modules in a software application.\r\n\r\nMethods:\r\n1. GetUpcomingModules: Retrieves a list of upcoming modules.\r\n2. AddModule: Adds a new module to the upcoming modules list.\r\n3. RemoveModule: Removes a module from the upcoming modules list.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UpcomingModulesViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Lives",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EvalListingBlocViewModel' class is a ViewModel used for managing evaluation listings in a block format. It provides methods for retrieving, updating, and deleting evaluation data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvalListingBlocViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Medialib",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EvaluationStatusViewModel' class provides a model for tracking and managing evaluation statuses. It includes methods for updating, retrieving, and displaying evaluation status information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationStatusViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Medialib",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "EvaluationViewModel is a class that represents the view model for evaluations, providing methods for managing evaluation data.\r\n\r\nExposed methods:\r\n1. GetEvaluationById - Retrieves an evaluation by its unique identifier.\r\n2. AddEvaluation - Adds a new evaluation to the view model.\r\n3. UpdateEvaluation - Updates an existing evaluation in the view model.\r\n4. DeleteEvaluation - Deletes an evaluation from the view model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Medialib",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'NewsfeedAttachmentViewModel' is a class designed to represent attachments in a newsfeed, providing functionality to handle and display various types of attachments.\r\n\r\nExposed methods:\r\n1. GetAttachmentType() - Retrieves the type of attachment.\r\n2. GetAttachmentData() - Retrieves the data of the attachment.\r\n3. DisplayAttachment() - Displays the attachment in the newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedAttachmentViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "NewsfeedCommentViewModel is a class that represents a view model for displaying comments in a newsfeed. It contains methods to interact with and manage comments within the newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedCommentViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "NewsfeedPostViewModel is a C# class designed to represent a post in a newsfeed. It includes properties such as post content, author, likes, comments, and timestamps.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A view model class for promoting a user's newsfeed content.\r\n\r\nExposed Methods:\r\n1. GetUserId() - Retrieves the user's ID.\r\n2. SetPromotionStatus(bool status) - Sets the promotion status for the user's newsfeed content.\r\n3. GetPromotionStatus() - Retrieves the current promotion status for the user's newsfeed content.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedUserPromotionViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'NewsfeedUserTypeViewModel' is a C# class that represents a view model for a user type in a newsfeed. It contains methods for managing and displaying user type information in the newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedUserTypeViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'NewsfeedUserViewModel' class is a model representing a user's data for a newsfeed, containing methods for retrieving and displaying user information.\r\n\r\nMethods:\r\n1. GetUserPosts() - Retrieves the posts made by the user.\r\n2. GetUserName() - Retrieves the user's name.\r\n3. GetUserProfilePicture() - Retrieves the user's profile picture.\r\n4. GetFollowersCount() - Retrieves the number of followers the user has.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedUserViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Summary: A view model class for tracking non-apprenticeship activities.\r\n\r\nMethods:\r\n1. GetActivities: Retrieves a list of non-apprenticeship activities.\r\n2. AddActivity: Adds a new non-apprenticeship activity to the tracking list.\r\n3. UpdateActivity: Updates an existing non-apprenticeship activity in the tracking list.\r\n4. DeleteActivity: Removes a non-apprenticeship activity from the tracking list.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NonApprenticeshipActivityTrackingViewModel",
            "namespace": "LMS.Models.ViewModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'NotificationViewModel' class is designed to represent and manage notifications in an application. It includes methods for adding, updating, and deleting notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationViewModel",
            "namespace": "LMS.Models.ViewModels.V2",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UserInfoAddressViewModel' is a class that contains information about a user's address. It provides methods to retrieve and update address details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoAddressViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UserInfoLightViewModel' is a lightweight view model class in C# that provides basic user information for display purposes. It includes methods for setting and retrieving user data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoLightViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UserInfoPhoneNumberViewModel' is a C# class that contains information related to a user's phone number. It provides methods for managing and displaying user phone number details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoPhoneNumberViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'UserInfoPromotionPartenaireViewModel' class is a view model that contains information and data related to user promotions and partnerships. It provides methods to interact with and manage this information effectively.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoPromotionPartenaireViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UserInfoPromotionViewModel' is a class that encapsulates information related to user promotions, providing methods for managing and displaying user promotion data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoPromotionViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UserInfoStatusViewModel' is a C# class that represents the view model for user information status. It provides methods to manage and display user status information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoStatusViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UserInfoTypeViewModel' is a C# class that represents a view model for user information types, providing methods for managing and displaying user data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoTypeViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UserInfoViewModel' is a C# class that represents the user information view model. It contains methods to manage and display user data in the application.\r\n\r\n- GetUserInfo: Retrieves user information from the database.\r\n- UpdateUserInfo: Updates user information in the database.\r\n- DeleteUserInfo: Deletes user information from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'UserInfoWorkgroupViewModel' class is used to store and manage user information within a specific workgroup.\r\n\r\nExposed Methods:\r\n1. GetUserId: Retrieves the user's ID.\r\n2. GetUserName: Retrieves the user's name.\r\n3. GetUserEmail: Retrieves the user's email address.\r\n4. GetWorkgroupName: Retrieves the name of the workgroup the user belongs to.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfoWorkgroupViewModel",
            "namespace": "LMS.Models.ViewModels.V2.Profile",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'UploadedFileV2ViewModel' is a C# class that represents a view model for an uploaded file, providing methods to handle file data and metadata.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UploadedFileV2ViewModel",
            "namespace": "LMS.Models.ViewModels.V2.SpringQuiz",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'Appointment' class represents a scheduled appointment and includes methods for setting the appointment date and time, getting the appointment details, and canceling the appointment.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Appointment",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'IStudiStudentScheduler' is a class that provides methods for scheduling and managing student activities within a studio setting.\r\n\r\nExposed Methods:\r\n1. AddActivity - Adds a new activity to the student's schedule.\r\n2. RemoveActivity - Removes an activity from the student's schedule.\r\n3. UpdateActivity - Updates the details of an existing activity in the student's schedule.\r\n4. GetSchedule - Retrieves the student's current schedule of activities.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IStudiStudentScheduler",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: The 'OralCopy' class is designed to store and manage oral copies of documents.\r\n\r\nMethods:\r\n1. GetOralCopy: Retrieves the oral copy of the document.\r\n2. UpdateOralCopy: Updates the existing oral copy of the document.\r\n3. DeleteOralCopy: Deletes the oral copy of the document.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "OralCopy",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'OralCopyCorrection' class is used to facilitate the correction of oral text copies.\r\n\r\nMethods:\r\n1. CorrectText - Corrects the text based on specified criteria.\r\n2. HighlightErrors - Highlights errors in the text for easy identification.\r\n3. ProvideFeedback - Provides feedback on the corrected text.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "OralCopyCorrection",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'StudiOrganizerScheduler' class is designed to efficiently schedule and organize study sessions for students.\r\n\r\nExposed Methods:\r\n1. CreateStudySession: Creates a new study session with specified details.\r\n2. EditStudySession: Modifies the details of an existing study session.\r\n3. DeleteStudySession: Removes a study session from the scheduler.\r\n4. GetStudySessionDetails: Retrieves the details of a specific study session.\r\n5. GetAllStudySessions: Returns a list of all study sessions scheduled.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiOrganizerScheduler",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A class that represents an account in the StudiScheduler system, allowing users to manage their schedules and appointments.\r\n\r\nMethods:\r\n1. CreateSchedule - Creates a new schedule for the account.\r\n2. UpdateSchedule - Updates an existing schedule for the account.\r\n3. DeleteSchedule - Deletes a schedule from the account.\r\n4. AddAppointment - Adds a new appointment to the account's schedule.\r\n5. UpdateAppointment - Updates an existing appointment in the account's schedule.\r\n6. CancelAppointment - Cancels a scheduled appointment from the account.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerAccount",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "StudiSchedulerAppointmentType is a class designed to manage different types of appointments within a scheduling system. It includes methods for adding, updating, and deleting appointment types.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerAppointmentType",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'StudiSchedulerOralInfoViewModel' class is designed to manage and display information related to oral schedules in a study scheduling application.\r\n\r\n1. GetOralInfo: Retrieves oral information for a specific schedule.\r\n2. UpdateOralInfo: Updates oral information for a specific schedule.\r\n3. DeleteOralInfo: Deletes oral information for a specific schedule.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerOralInfoViewModel",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: StudiSchedulerSource is a C# class that provides methods for managing and accessing scheduling data for a study scheduler application.\r\n\r\nExposed Methods:\r\n1. AddScheduleEntry: Adds a new schedule entry to the scheduler.\r\n2. RemoveScheduleEntry: Removes a schedule entry from the scheduler.\r\n3. GetScheduleEntries: Retrieves a list of all schedule entries from the scheduler.\r\n4. UpdateScheduleEntry: Updates an existing schedule entry in the scheduler.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StudiSchedulerSource",
            "namespace": "LMS.Models.ViewModels.V2.StudiScheduler",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CourseMatiereV3ViewModel is a data model class that represents a course subject version 3 for viewing purposes. It contains properties and methods to interact with and display course subject information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseMatiereV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Course",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CourseModuleV3ViewModel is a C# class that represents a view model for a course module version 3. It contains methods for managing course module data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseModuleV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Course",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CourseParcoursMatieresListV3ViewModel is a view model class that represents a list of courses, paths, and subjects for version 3 of a curriculum. It provides methods to manage and display these elements.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseParcoursMatieresListV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Course",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CourseParcoursV3ViewModel is a C# class that represents a view model for a course parcours version 3. It contains methods to manage and display course information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseParcoursV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Course",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'AttachedFileV3ViewModel' class is a view model used to handle and manage attached files in a C# application. It includes methods for adding, removing, and retrieving attached files.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AttachedFileV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EventMatiereV3ViewModel' class is a view model that contains methods for handling events related to a specific subject matter in a version 3 context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventMatiereV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EventParcoursListV3ViewModel' class is designed to manage and display a list of parcours for a specific event. It provides methods to retrieve, update, and manipulate the parcours data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventParcoursListV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class representing a view model for managing a list of materials within a course event.\r\n\r\nExposed Methods:\r\n1. RefreshData - Refreshes the data in the view model.\r\n2. AddMatiere - Adds a new material to the list.\r\n3. RemoveMatiere - Removes a material from the list.\r\n4. UpdateMatiere - Updates the details of a material in the list.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventParcoursMatieresListV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'EventParcoursV3ViewModel' is a C# class that represents a view model for managing and displaying event parcours version 3 data.\r\n\r\nExposed Methods:\r\n1. GetParcoursData: Retrieves the parcours data for the event.\r\n2. UpdateParcoursData: Updates the parcours data for the event.\r\n3. DeleteParcoursData: Deletes the parcours data for the event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventParcoursV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'EventParticipationV3ViewModel' is a C# class that represents the view model for event participation version 3, providing methods for managing event participation data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventParticipationV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "EventsListingV3ViewModel is a C# class that serves as a view model for displaying a list of events. It contains methods for retrieving, filtering, and displaying event data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsListingV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EventTypeV3ViewModel' class is a view model that represents an event type in a C# application. It provides methods for handling event type data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventTypeV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Events",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'HallOfFameV3Pagination' class provides pagination functionality for the Hall of Fame version 3, allowing users to navigate through a list of items with ease.\r\n\r\nMethods:\r\n1. GetPage(int pageNumber) - Retrieves a specific page of items based on the page number.\r\n2. GetNextPage() - Retrieves the next page of items.\r\n3. GetPreviousPage() - Retrieves the previous page of items.\r\n4. GetFirstPage() - Retrieves the first page of items.\r\n5. GetLastPage() - Retrieves the last page of items.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameV3Pagination",
            "namespace": "LMS.Models.ViewModels.V3.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: HallOfFameV3User is a C# class that represents a user in version 3 of the Hall of Fame system. It contains methods for retrieving and updating user information.\r\n\r\nMethods:\r\n1. GetUserId() - Retrieves the unique identifier of the user.\r\n2. GetUserName() - Retrieves the name of the user.\r\n3. GetUserScore() - Retrieves the score of the user.\r\n4. UpdateUserName(string newName) - Updates the name of the user.\r\n5. UpdateUserScore(int newScore) - Updates the score of the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameV3User",
            "namespace": "LMS.Models.ViewModels.V3.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'HallOfFameV3Vm' class is a view model that provides methods for managing the Hall of Fame version 3.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HallOfFameV3Vm",
            "namespace": "LMS.Models.ViewModels.V3.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'Ranking' class is used to manage and display rankings for a list of items. It includes methods for adding items to the ranking, updating item scores, and retrieving the top ranked items.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Ranking",
            "namespace": "LMS.Models.ViewModels.V3.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'UserRank' class represents a user's ranking information.\r\n\r\nMethods:\r\n1. CalculateRank - Calculates the user's rank based on given criteria.\r\n2. UpdateRank - Updates the user's rank with new information.\r\n3. GetRank - Retrieves the user's current rank.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRank",
            "namespace": "LMS.Models.ViewModels.V3.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'UserRankV3Vm' is a C# class that represents a user's rank information and provides methods to interact with this data.\r\n\r\nExposed Methods:\r\n1. GetUserId(): Returns the user's ID.\r\n2. GetRank(): Returns the user's current rank.\r\n3. SetRank(int newRank): Sets the user's rank to the specified value.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRankV3Vm",
            "namespace": "LMS.Models.ViewModels.V3.HallOfFame",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'ChangeLogVersionFile' is a C# class that represents a version file used for tracking changes in a software project. It includes methods for adding, updating, and retrieving version information.\r\n\r\nExposed Methods:\r\n1. AddVersionEntry: Adds a new version entry to the file.\r\n2. UpdateVersionEntry: Updates an existing version entry in the file.\r\n3. GetVersionEntries: Retrieves all version entries from the file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ChangeLogVersionFile",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ChangeLogVersionViewModel is a class that represents a view model for displaying change log versions. It provides methods for retrieving and updating change log version information.\r\n\r\n1. GetChangeLogVersion: Retrieves the change log version information.\r\n2. UpdateChangeLogVersion: Updates the change log version information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ChangeLogVersionViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ChangeLogViewModel' class is designed to store and manage change log data for a specific application. It includes methods for retrieving, adding, and updating change log entries.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ChangeLogViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CourseServiceV3ViewModel is a C# class that provides various methods for managing and accessing course-related data in a version 3 of a course service.\r\n\r\nExposed methods:\r\n1. GetCourseById(int courseId) : Retrieves a course by its unique identifier.\r\n2. GetAllCourses() : Retrieves all available courses.\r\n3. AddCourse(Course course) : Adds a new course to the system.\r\n4. UpdateCourse(Course course) : Updates an existing course with new information.\r\n5. DeleteCourse(int courseId) : Deletes a course by its unique identifier.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseServiceV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'MatiereV3ViewModel' class is used to handle and manipulate data related to a specific version of a subject matter. It provides methods for retrieving, updating, and managing information associated with this version of the subject matter.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MatiereV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'MediathequeV3ViewModel' class is a view model designed to manage and display media content in a digital library application. It includes methods for adding, removing, and updating media items.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MediathequeV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'ModuleV3ViewModel' is a C# class that serves as a view model for Module V3, providing methods for interacting with and managing data related to Module V3.\r\n\r\nExposed Methods:\r\n1. LoadData - Loads data for Module V3.\r\n2. SaveData - Saves data for Module V3.\r\n3. ValidateData - Validates data for Module V3.\r\n4. UpdateUI - Updates the user interface for Module V3.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ModuleV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ParcoursV3ViewModel' class is a view model that contains methods for managing and displaying data related to version 3 of a parcours (course or route).",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'RessourceObjectMetaV3ViewModel' class provides a view model for managing resource object metadata in a C# application. It includes methods for retrieving, updating, and deleting metadata information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceObjectMetaV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'RessourceObjectV3ViewModel' is a C# class that represents a view model for managing resource objects in a version 3 system.\r\n\r\nExposed Methods:\r\n1. GetResourceObjectById(int id) - Retrieves a specific resource object by its ID.\r\n2. GetAllResourceObjects() - Retrieves all resource objects in the system.\r\n3. AddResourceObject(ResourceObjectV3 resourceObject) - Adds a new resource object to the system.\r\n4. UpdateResourceObject(ResourceObjectV3 resourceObject) - Updates an existing resource object in the system.\r\n5. DeleteResourceObject(int id) - Deletes a resource object by its ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceObjectV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'RessourceV3ViewModel' is a C# class that serves as a view model for managing and displaying resource information. It includes methods such as GetResource, UpdateResource, DeleteResource, and GetAllResources.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ServiceV3ViewModel is a C# class that provides data and functionality for version 3 of a service.\r\n\r\nExposed methods:\r\n1. GetServiceDetails - Retrieves details of the service.\r\n2. UpdateServiceStatus - Updates the status of the service.\r\n3. AddServiceToCart - Adds the service to the shopping cart.\r\n4. RemoveServiceFromCart - Removes the service from the shopping cart.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'ThemeV3ViewModel' is a C# class that serves as a view model for managing and displaying themes in a software application.\r\n\r\nExposed methods:\r\n1. LoadThemes - Loads themes from a data source.\r\n2. SaveTheme - Saves a theme to a data source.\r\n3. ApplyTheme - Applies a selected theme to the application interface.\r\n4. UpdateTheme - Updates an existing theme with new settings.\r\n5. DeleteTheme - Deletes a theme from the data source.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ThemeV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Medialibrary",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'GroupInfoUserV3ViewModel' is a C# class that provides information about users in a specific group. It includes methods such as GetGroupInfo(), GetUserList(), and UpdateUserStatus().",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GroupInfoUserV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'GroupMembersInfoV3ViewModel' is a C# class that provides information and operations related to group members for version 3 of a specific application.\r\n\r\n1. GetGroupMembersInfo: Retrieves information about the members of a group.\r\n2. AddMemberToGroup: Adds a new member to the group.\r\n3. RemoveMemberFromGroup: Removes a member from the group.\r\n4. UpdateMemberInfo: Updates the information of a specific member in the group.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GroupMembersInfoV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'NewsfeedAttachmentV3ViewModel' class is a view model used to represent attachments in a newsfeed. It contains methods for handling and displaying attachments in a newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedAttachmentV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'NewsfeedCommentV3ViewModel' is a C# class that represents a view model for displaying comments on a newsfeed, providing functionality to handle comment data.\r\n\r\nExposed Methods:\r\n1. GetCommentText(): Retrieves the text content of the comment.\r\n2. GetCommentAuthor(): Retrieves the author of the comment.\r\n3. GetCommentTimestamp(): Retrieves the timestamp when the comment was posted.\r\n4. LikeComment(): Allows the user to like the comment.\r\n5. ReplyToComment(): Enables the user to reply to the comment.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedCommentV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'NewsfeedItemV3ViewModel' is a C# class that represents a view model for newsfeed items, providing properties and methods to handle and display newsfeed content.\r\n\r\nExposed Methods:\r\n1. UpdateContent: Updates the content of the newsfeed item.\r\n2. Like: Increments the like count of the newsfeed item.\r\n3. Comment: Adds a comment to the newsfeed item.\r\n4. Share: Shares the newsfeed item with other users.\r\n5. Delete: Deletes the newsfeed item from the feed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedItemV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a view model for displaying new comments on a newsfeed, providing necessary data for rendering the view.\r\n\r\nMethods:\r\n1. UpdateCommentCount - Updates the count of comments on the newsfeed.\r\n2. AddNewComment - Adds a new comment to the newsfeed.\r\n3. GetCommentList - Retrieves a list of comments for the newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedNewCommentV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'NewsfeedNewPostV3ViewModel' class is a data model that represents a new post in a newsfeed. It contains properties and methods for managing and displaying new posts.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedNewPostV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'NewsfeedPostV3ViewModel' is a C# class that represents a view model for newsfeed posts, providing methods for interacting with and displaying post data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'NewsfeedUserPromotionV3ViewModel' class is a view model that contains data for promoting user activity on a newsfeed. It provides methods for managing user promotions in a newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedUserPromotionV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a view model for a version 3 newsfeed user type, providing methods for handling user data in a newsfeed application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedUserTypeV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Summary: 'NewsfeedUserV3ViewModel' is a view model class that represents a user's newsfeed data for version 3.\r\n\r\nExposed methods:\r\n1. GetNewsfeedItems: Retrieves newsfeed items for the user.\r\n2. AddNewsfeedItem: Adds a new item to the user's newsfeed.\r\n3. RemoveNewsfeedItem: Removes a specific item from the user's newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedUserV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a view model for a newsfeed displaying workgroups in a version 3 format. It contains methods to manage and display workgroups in the newsfeed.\r\n\r\nMethods:\r\n1. LoadWorkgroups - Loads workgroups for display in the newsfeed.\r\n2. AddWorkgroup - Adds a new workgroup to the newsfeed.\r\n3. RemoveWorkgroup - Removes a workgroup from the newsfeed.\r\n4. UpdateWorkgroup - Updates information for a specific workgroup in the newsfeed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedWorkgroupsV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V3.Newsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'ConnectionHubUser' is a class that represents a user connected to a connection hub in a C# application.\r\n\r\nExposed Methods:\r\n1. ConnectToHub() - Connects the user to the connection hub.\r\n2. DisconnectFromHub() - Disconnects the user from the connection hub.\r\n3. SendMessage(string message) - Sends a message to the connection hub.\r\n4. ReceiveMessage(string message) - Receives a message from the connection hub.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionHubUser",
            "namespace": "LMS.Models.ViewModels.V3.Signalr",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'ForumParcoursV4ViewModel' class is a view model that provides data and functionality for navigating and interacting with a forum in a C# application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumParcoursV4ViewModel",
            "namespace": "LMS.Models.ViewModels.V4",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "NewsfeedNewTeamPostV3ViewModel is a class that represents the view model for creating a new team post in a newsfeed. It includes methods for retrieving team information and posting new content.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedNewTeamPostV3ViewModel",
            "namespace": "LMS.Models.ViewModels.V4.TeamsNewsfeed",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ApprenticeshipActivityTrackingDto' class is used to track and manage apprenticeship activities, providing methods for retrieving, updating, and storing apprenticeship activity data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApprenticeshipActivityTrackingDto",
            "namespace": "LMS.ModelsDTOs.ActivityTracking",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ApprenticeshipAgreementProjectDto' class is a data transfer object used to represent an apprenticeship agreement project. It contains properties and methods for managing apprenticeship agreement projects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApprenticeshipAgreementProjectDto",
            "namespace": "LMS.ModelsDTOs.ActivityTracking",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "BaseActivityTrackingDto is a data transfer object class used for tracking activity in a base system. It contains methods for setting and getting activity information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BaseActivityTrackingDto",
            "namespace": "LMS.ModelsDTOs.ActivityTracking",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'NonApprenticeshipActivityTrackingDto' is a data transfer object used for tracking non-apprenticeship activities. It contains methods for retrieving and updating activity tracking information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NonApprenticeshipActivityTrackingDto",
            "namespace": "LMS.ModelsDTOs.ActivityTracking",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class serves as a data transfer object for tracking non-apprenticeship activities. It includes methods for retrieving and updating activity tracking information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NonApprenticeshipActivityTrackingRepoDto",
            "namespace": "LMS.ModelsDTOs.ActivityTracking",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'LoginResponseCodes' is an enum representing various response codes for login attempts, including account status, errors, and success. Members include AccountNotActive, AccountLocked, AccountDisabled, AccountTrialOver, WrongSchool, AccountNotFound, InternalServerError, and Ok.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "LoginResponseCodes",
            "namespace": "LMS.ModelsDTOs.Connexion",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CourseDto is a data transfer object class that represents a course with information such as title, description, and instructor.\r\n\r\nMethods:\r\n1. GetTitle() - Retrieves the title of the course.\r\n2. GetDescription() - Retrieves the description of the course.\r\n3. GetInstructor() - Retrieves the instructor of the course.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseDto",
            "namespace": "LMS.ModelsDTOs.Courses",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CourseElementDto is a data transfer object class that represents a course element with properties such as Id, Name, Description, and Duration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseElementDto",
            "namespace": "LMS.ModelsDTOs.Courses",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CourseSubscriptionDto is a data transfer object that represents a subscription to a course. It contains information about the user, course, and subscription status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseSubscriptionDto",
            "namespace": "LMS.ModelsDTOs.Courses",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: CRPromotion is a C# class that represents a promotion in a retail system. It contains methods to calculate discounts, apply promotions, and track promotion details.\r\n\r\nMethods:\r\n1. CalculateDiscount: Calculates the discount amount based on the promotion rules.\r\n2. ApplyPromotion: Applies the promotion to a specific item or order.\r\n3. TrackPromotionDetails: Tracks and logs the details of the promotion for reporting purposes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CRPromotion",
            "namespace": "LMS.ModelsDTOs.Courses",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'MatiereDto' is a data transfer object class in C# used to represent information about a specific subject or course. It includes methods to retrieve, update, and manipulate subject data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MatiereDto",
            "namespace": "LMS.ModelsDTOs.Courses",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ModuleDto is a data transfer object class that encapsulates information about a module, providing methods for accessing and manipulating module data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ModuleDto",
            "namespace": "LMS.ModelsDTOs.Courses",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'RessourceDto' is a C# class that represents a data transfer object for managing resources. It includes methods for retrieving, updating, and deleting resource information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceDto",
            "namespace": "LMS.ModelsDTOs.Courses",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ThemeDto is a data transfer object class that represents a theme in a software application.\r\n\r\nMethods:\r\n1. GetThemeId - Retrieves the unique identifier of the theme.\r\n2. SetThemeId - Sets the unique identifier of the theme.\r\n3. GetThemeName - Retrieves the name of the theme.\r\n4. SetThemeName - Sets the name of the theme.\r\n5. GetThemeColor - Retrieves the color associated with the theme.\r\n6. SetThemeColor - Sets the color associated with the theme.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ThemeDto",
            "namespace": "LMS.ModelsDTOs.Courses",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "DUser class is a data structure representing a user entity with properties and methods for user-related operations.\r\n\r\nExposed methods:\r\n1. AddUser(string username) - Adds a new user with the given username.\r\n2. RemoveUser(string username) - Removes the user with the given username.\r\n3. GetUser(string username) - Retrieves the user with the given username.\r\n4. UpdateUser(string username, string newUsername) - Updates the username of the user with the given username.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DUser",
            "namespace": "LMS.ModelsDTOs.Directory",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'AllowedSubmissionTypeViewModel' is a class that represents the allowed submission types for a certain system. It contains methods to get and set the submission types.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AllowedSubmissionTypeViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'CanBeginBlockExamViewModel' is a class that provides functionality for determining if a user can begin a block exam.\r\n\r\nMethods:\r\n1. bool CanUserBeginExam() - Checks if the user meets the requirements to begin the exam.\r\n2. bool IsExamInProgress() - Checks if an exam is currently in progress.\r\n3. void StartExam() - Initiates the exam for the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CanBeginBlockExamViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class keeps track of copies that are in need of a status update.\r\n\r\nMethods:\r\n1. AddCopy - Adds a copy to the list of copies needing a status update.\r\n2. RemoveCopy - Removes a copy from the list of copies needing a status update.\r\n3. GetCopies - Retrieves the list of copies needing a status update.\r\n4. ClearCopies - Clears the list of copies needing a status update.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopiesNeedingStatusUpdate",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'CopiesOriginalesItemViewModel' is a class that represents an item view model for original copies, providing methods to interact with and manipulate data related to original copies.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopiesOriginalesItemViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "CopiesOriginalesViewModel is a class that represents a view model for managing original copies. It includes methods such as GetOriginalCopies and AddOriginalCopy to interact with original copies data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopiesOriginalesViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'CopyStatusViewModel' class is used to track the status of a copy operation in a view model. It includes methods such as UpdateStatus and ResetStatus to manage the status information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CopyStatusViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'CorrectedQcmViewModel' is a C# class that provides functionality for viewing and managing corrected multiple-choice questionnaires (QCMs).\r\n\r\nExposed Methods:\r\n1. LoadQcmResults: Loads the corrected results of a specific QCM.\r\n2. GetStudentScore: Retrieves the score of a student for a specific QCM.\r\n3. UpdateGrade: Updates the grade of a student for a specific QCM.\r\n4. ExportResultsToPdf: Exports the corrected results of a QCM to a PDF file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CorrectedQcmViewModal",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A C# class used to represent the model for deleting an audio file.\r\n\r\nMethods:\r\n1. DeleteAudioFile() - Deletes the specified audio file.\r\n2. Validate() - Validates the input data before deleting the audio file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DeleteAudioFileBindingModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'DoBeginBlockExamViewModel' is a C# class that contains methods related to starting a new exam block.\r\n\r\nExposed Methods:\r\n1. StartExamBlock - Initiates a new exam block.\r\n2. ValidateExamBlock - Validates the exam block before beginning.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DoBeginBlockExamViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'EvalAndBlocAndCourseDto' is a data transfer object that combines evaluation, block, and course information into a single entity.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvalAndBlocAndCourseDto",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "EvalAvancement is a class designed to calculate and evaluate the progress or advancement of a certain task or project. It includes methods such as CalculatePercentageComplete, GetRemainingTime, and EvaluateProgressStatus.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvalAvancement",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'EvalModuleViewModule' is a C# class that contains methods for evaluating and viewing modules within a software system.\r\n\r\nExposed Methods:\r\n1. EvaluateModule - Evaluates the specified module based on certain criteria.\r\n2. ViewModule - Displays the details and content of the specified module.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvalModuleViewModule",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'EvalObjectCommentCorrecteur' is a class used for managing and correcting comments on evaluation objects.\r\n\r\nExposed methods:\r\n1. AddComment: Adds a new comment to the evaluation object.\r\n2. EditComment: Edits an existing comment on the evaluation object.\r\n3. DeleteComment: Deletes a comment from the evaluation object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvalObjectCommentCorrecteur",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "EvaluationCategoryViewModel represents a view model for an evaluation category, providing properties and methods to interact with evaluation data.\r\n\r\nMethods:\r\n1. GetCategoryName(): Retrieves the name of the evaluation category.\r\n2. SetCategoryName(string name): Sets the name of the evaluation category.\r\n3. GetCategoryScore(): Retrieves the score of the evaluation category.\r\n4. SetCategoryScore(int score): Sets the score of the evaluation category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationCategoryViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationDetailsViewModel' is a C# class that represents the view model for evaluation details, providing methods to interact with evaluation data.\r\n\r\nExposed Methods:\r\n1. GetEvaluationDetails - Retrieves evaluation details for a specific evaluation.\r\n2. UpdateEvaluationDetails - Updates evaluation details based on user input.\r\n3. DeleteEvaluation - Deletes a specific evaluation from the system.\r\n4. AddComment - Adds a comment to a specific evaluation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationDetailsViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "EvaluationGridInfoDto is a data transfer object class that contains information about an evaluation grid.\r\n\r\nExposed methods:\r\n1. GetEvaluationGridId: Retrieves the evaluation grid ID.\r\n2. GetEvaluationGridName: Retrieves the evaluation grid name.\r\n3. GetEvaluationGridDescription: Retrieves the evaluation grid description.\r\n4. GetEvaluationGridItems: Retrieves a list of evaluation grid items.\r\n5. GetEvaluationGridTotalScore: Retrieves the total score of the evaluation grid.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGridInfoDto",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'EvaluationListingItemViewModel' class is a model used to represent an evaluation item in a listing. It includes methods for retrieving and displaying evaluation details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationListingItemViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationObject' is a class that represents an object used for evaluation purposes, with methods for setting and getting evaluation criteria.\r\n\r\nExposed Methods:\r\n1. SetCriteria(string criteria) - Sets the evaluation criteria for the object.\r\n2. GetCriteria() - Retrieves the evaluation criteria set for the object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationObject",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'ModelCopieType' represents different types of document formats for copying, including Pdf and Word.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "ModelCopieType",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'OriginalCopyBindingModel' is a C# class that represents a binding model for managing original copies of a document.\r\n\r\n1. Method: Validate\r\nSummary: Validates the properties of the original copy binding model.\r\n\r\n2. Method: MapToOriginalCopyEntity\r\nSummary: Maps the properties of the binding model to an original copy entity object.\r\n\r\n3. Method: MapFromOriginalCopyEntity\r\nSummary: Maps the properties of an original copy entity object to the binding model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "OriginalCopyBindingModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class representing a model for rejecting copy requests.\r\n\r\n1. Method: RejectCopy\r\nSummary: Rejects a copy request.\r\n\r\n2. Method: Validate\r\nSummary: Validates the data in the reject copy model.\r\n\r\n3. Method: ToString\r\nSummary: Returns a string representation of the reject copy model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RejectCopyBindingModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A C# class that represents a model for resetting copy bindings.\r\n\r\nExposed Methods:\r\n1. ResetCopyBindingModel() - Initializes a new instance of the ResetCopyBindingModel class.\r\n2. ResetCopyBinding() - Resets the copy binding for a specific object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResetCopyBindingModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\nThe 'ResourceInfo' class provides information and data related to resources.\r\n\r\nExposed Methods:\r\n1. GetResourceName: Retrieves the name of the resource.\r\n2. GetResourceType: Retrieves the type of the resource.\r\n3. GetResourceSize: Retrieves the size of the resource.\r\n4. GetResourceLocation: Retrieves the location of the resource.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResourceInfo",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ResourceInfoViewModel is a C# class that provides information about a particular resource. It contains methods such as GetResourceName() and GetResourceType() to retrieve specific details about the resource.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResourceInfoViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: A class that represents the last status of a resource.\r\n\r\n1. Method: GetResourceStatus\r\nSummary: Retrieves the current status of the resource.\r\n\r\n2. Method: UpdateResourceStatus\r\nSummary: Updates the status of the resource to the specified value.\r\n\r\n3. Method: ResetResourceStatus\r\nSummary: Resets the status of the resource to its default value.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResourceLastStatus",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'RqthStructure' is a C# class that encapsulates methods for handling requests related to a specific data structure.\r\n\r\nMethods:\r\n1. AddElement - Adds a new element to the data structure.\r\n2. RemoveElement - Removes an element from the data structure.\r\n3. SearchElement - Searches for a specific element within the data structure.\r\n4. UpdateElement - Updates the value of an existing element in the data structure.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RqthStructure",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A data binding model for submitted evaluation data.\r\n\r\nMethods:\r\n1. ValidateData: Validates the submitted evaluation data.\r\n2. MapToEntity: Maps the submitted evaluation data to an entity object.\r\n3. SaveToDatabase: Saves the submitted evaluation data to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SubmittedEvaluationDataBindingModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: TransmitCopyDto is a data transfer object used for copying and transmitting data.\r\n\r\nMethods:\r\n1. TransmitData - Transmits data to a specified destination.\r\n2. CopyData - Copies data to a new location.\r\n3. UpdateData - Updates existing data with new information.\r\n4. ValidateData - Validates the data before transmitting or copying.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TransmitCopyDto",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "TypeRenduViewModel is a C# class that serves as a view model for rendering different types of data. It includes methods such as GetRenduType and SetRenduType to interact with the data being rendered.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TypeRenduViewModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Enum 'TypeToWork' represents different types of work, including Evaluation (0) and Module (1).",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "TypeToWork",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n'UploadAudioFileBindingModel' is a C# class designed to handle the binding model for uploading audio files. It contains methods to facilitate the process of uploading audio files.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UploadAudioFileBindingModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'UploadResponseBindingModel' is a C# class used to represent the response data for an upload operation.\r\n\r\nMethods:\r\n1. GetSuccessMessage() - Retrieves the success message from the upload response.\r\n2. GetErrorMessage() - Retrieves the error message from the upload response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UploadResponseBindingModel",
            "namespace": "LMS.ModelsDTOs.Evaluation",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "EventsFormDto is a C# class that represents a data transfer object for handling events information. It contains methods for retrieving and updating event details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsFormDto",
            "namespace": "LMS.ModelsDTOs.Event",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "LiveInfoDto is a data transfer object class that provides live information data for various purposes. It includes methods such as GetLiveInfo() to retrieve live information and UpdateLiveInfo() to update live information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveInfoDto",
            "namespace": "LMS.ModelsDTOs.Event",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "PromotionInfoDto is a data transfer object used to store information about promotions. It includes methods to retrieve and update promotion details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PromotionInfoDto",
            "namespace": "LMS.ModelsDTOs.Event",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'SchoolInfoDto' is a data transfer object class that contains information about a school, including methods for retrieving and updating school details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolInfoDto",
            "namespace": "LMS.ModelsDTOs.Event",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'AddQuestionViewModel' class is a view model used to add new questions. It includes methods to validate and submit the question to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AddQuestionViewModel",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'FAnswer' is a C# class that represents answers for a form. It includes methods for setting and getting answer values.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FAnswer",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "FCommentDetail class stores detailed information about a specific comment. It includes methods to retrieve, update, and delete comment details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FCommentDetail",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "FForumCategory is a class that represents a category within a forum. It contains methods for managing and interacting with forum categories.\r\n\r\n1. AddPost() - Adds a post to the forum category.\r\n2. RemovePost() - Removes a post from the forum category.\r\n3. GetPosts() - Retrieves all posts within the forum category.\r\n4. RenameCategory() - Renames the forum category.\r\n5. DeleteCategory() - Deletes the forum category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FForumCategory",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "FForumUploads is a class that handles uploading functionality for a forum platform. It contains methods such as UploadImage, UploadFile, and DeleteUpload to manage the uploading and deletion of files and images on the forum.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FForumUploads",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'FInscriptions_promotions' is a C# class that manages promotions and inscriptions for an event or program. It includes methods for adding, updating, and retrieving promotions and inscriptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FInscriptions_promotions",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'FListingQuestion' is a class that represents a question within a listing, providing methods for managing and interacting with questions in a listing.\r\n\r\nMethods:\r\n1. AddQuestion: Adds a new question to the listing.\r\n2. RemoveQuestion: Removes a question from the listing.\r\n3. EditQuestion: Edits the content of a question in the listing.\r\n4. GetQuestion: Retrieves a specific question from the listing.\r\n5. GetAllQuestions: Retrieves all questions in the listing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FListingQuestion",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'ForumTypeEnum' defines different types of forums, such as content, parcours, event, filiere, and general.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "ForumTypeEnum",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nFParcours is a C# class that represents a track or route, providing methods to manage and manipulate the path.\r\n\r\nExposed Methods:\r\n1. AddPoint: Adds a point to the track.\r\n2. RemovePoint: Removes a point from the track.\r\n3. CalculateDistance: Calculates the total distance of the track.\r\n4. ReverseTrack: Reverses the order of points in the track.\r\n5. ClearTrack: Clears all points from the track.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FParcours",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "FPromotion class represents a promotion in a retail system. It contains methods to apply, check eligibility, and get details of the promotion.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FPromotion",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: FUser class represents a user entity with various methods for user management.\r\n\r\nMethods:\r\n1. CreateNewUser - Creates a new user with specified details.\r\n2. UpdateUserDetails - Updates the details of an existing user.\r\n3. DeleteUser - Deletes a user from the system.\r\n4. GetUserById - Retrieves a user based on their unique identifier.\r\n5. GetAllUsers - Retrieves a list of all users in the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FUser",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'PaginationFListingQuestion' class is used for managing paginated listings of questions. It includes methods for retrieving a specific page of questions and navigating through the list.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PaginationFListingQuestion",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'QuestionChildDto' is a class used to generate a PostAnswerViewModel object with properties and nested objects based on its data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "QuestionChildDto",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Create a new PostAnswerViewModel object with various properties and nested objects based on the current object's data, then return it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "QuestionChildDto",
            "method_name": "ToPostAnswer",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'QuestionDetailsViewModel' is a C# class that contains methods for managing and displaying details of a question.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "QuestionDetailsViewModel",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'QuestionDto' is a C# class used for representing data transfer objects related to questions. It contains properties and methods for handling question information.\r\n\r\nExposed Methods:\r\n1. GetQuestionId() - Retrieves the question ID.\r\n2. SetQuestionId(int id) - Sets the question ID.\r\n3. GetQuestionText() - Retrieves the question text.\r\n4. SetQuestionText(string text) - Sets the question text.\r\n5. GetAnswerOptions() - Retrieves the answer options for the question.\r\n6. SetAnswerOptions(List",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "QuestionDto",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "QuestionOwnerUserDto represents a data transfer object for a user who owns a question. It contains properties related to the owner of the question.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "QuestionOwnerUserDto",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a data transfer object for a question owner user inscription promotion. It contains relevant information for promoting user inscriptions related to question ownership.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "QuestionOwnerUserInscriptionPromotionDto",
            "namespace": "LMS.ModelsDTOs.Forum",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'AffectationFormationDto' is a data transfer object class used to represent and manage information related to training assignments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "AffectationFormationDto",
            "namespace": "LMS.ModelsDTOs.ForumFormateur",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "FormationDto is a data transfer object class used to represent information about a formation. It contains properties such as Id, Name, Description, StartDate, EndDate, and IsActive.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormationDto",
            "namespace": "LMS.ModelsDTOs.ForumFormateur",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumCategoryDto is a data transfer object representing a category in a forum. It contains properties for the category's ID, name, description, and number of threads.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumCategoryDto",
            "namespace": "LMS.ModelsDTOs.ForumFormateur",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ForumFormateurAffectationDto' class is a data transfer object used for managing the assignment of forum moderators in an online forum platform. It contains properties and methods for handling the assignment of trainers to specific forums.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurAffectationDto",
            "namespace": "LMS.ModelsDTOs.ForumFormateur",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'ForumFormateurQuestionDto' is a data transfer object class used for storing information related to questions asked by forum participants to the instructor.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurQuestionDto",
            "namespace": "LMS.ModelsDTOs.ForumFormateur",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "ForumsFormateursFormDto is a data transfer object class used for storing information related to forums and formateurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumsFormateursFormDto",
            "namespace": "LMS.ModelsDTOs.ForumFormateur",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "OwnerUserDto represents a data transfer object for an owner user, containing information such as name, email, and phone number.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "OwnerUserDto",
            "namespace": "LMS.ModelsDTOs.ForumFormateur",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "JWPlayerDownloadLinkDto is a data transfer object class that represents a download link for a JWPlayer video. It contains properties for the download URL and the file name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerDownloadLinkDto",
            "namespace": "LMS.ModelsDTOs.JWPlayer",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'NFEcoleUser' is a class that represents a user within an educational platform for NFEcole. It includes methods for managing user information and interactions within the platform.\r\n\r\nMethods:\r\n1. UpdateUserInfo: Updates the user's information.\r\n2. GetUserCourses: Retrieves the courses the user is enrolled in.\r\n3. EnrollInCourse: Enrolls the user in a specific course.\r\n4. LeaveCourse: Removes the user from a course.\r\n5. SendMessage: Sends a message to another user within the platform.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NFEcoleUser",
            "namespace": "LMS.ModelsDTOs.Newsfeed",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'NFTag' class represents a data structure for storing information related to Near Field Communication (NFC) tags.\r\n\r\n1. Constructor: Initializes a new instance of the NFTag class.\r\n2. WriteData: Writes data to the NFC tag.\r\n3. ReadData: Reads data from the NFC tag.\r\n4. LockTag: Locks the NFC tag to prevent further writing.\r\n5. UnlockTag: Unlocks the NFC tag to allow writing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NFTag",
            "namespace": "LMS.ModelsDTOs.Newsfeed",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'Pagination' class provides functionality for managing pagination in a data set. It includes methods for calculating the total number of pages, getting the current page number, and retrieving the data for the current page.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Pagination",
            "namespace": "LMS.ModelsDTOs.Newsfeed",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'NewPartnerUserSubscriptionDto' is a data transfer object used to store information about a new partner user subscription.\r\n\r\n1. Method: GetUserId\r\nSummary: Retrieves the user ID associated with the subscription.\r\n\r\n2. Method: GetSubscriptionType\r\nSummary: Retrieves the type of subscription chosen by the partner user.\r\n\r\n3. Method: GetSubscriptionDuration\r\nSummary: Retrieves the duration of the subscription chosen by the partner user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewPartnerUserSubscriptionDto",
            "namespace": "LMS.ModelsDTOs.PartnerUser",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Enum 'NewPartnerUserSubscriptionResultCode' represents the possible result codes when subscribing a new partner user, including AccountAlreadyExistsAmongSchoolUsers, CourseWasNotFound, Ok, InvalidPartnerUserData, and SchoolIsNotMatching.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "NewPartnerUserSubscriptionResultCode",
            "namespace": "LMS.ModelsDTOs.PartnerUser",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'NewPartnerUserSubscriptionResultDto' class represents the result of a new partner user subscription. It contains methods to handle subscription-related data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewPartnerUserSubscriptionResultDto",
            "namespace": "LMS.ModelsDTOs.PartnerUser",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'PEvent' is a C# class that represents an event object, providing methods to interact with event data.\r\n\r\nMethods:\r\n1. GetName() - Retrieves the name of the event.\r\n2. GetDate() - Retrieves the date of the event.\r\n3. GetLocation() - Retrieves the location of the event.\r\n4. SetName(string newName) - Sets a new name for the event.\r\n5. SetDate(DateTime newDate) - Sets a new date for the event.\r\n6. SetLocation(string newLocation) - Sets a new location for the event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PEvent",
            "namespace": "LMS.ModelsDTOs.Planning",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'PEventMatiere' is a C# class that manages events related to academic subjects.\r\n\r\nExposed Methods:\r\n1. AddEvent: Adds a new event related to a specific subject.\r\n2. RemoveEvent: Removes a previously added event.\r\n3. UpdateEvent: Updates the details of an existing event.\r\n4. GetEvents: Retrieves all events associated with a particular subject.\r\n5. ClearEvents: Removes all events related to a subject.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PEventMatiere",
            "namespace": "LMS.ModelsDTOs.Planning",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'PEventParcours' class represents a specific event parcours with methods for managing and updating event details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PEventParcours",
            "namespace": "LMS.ModelsDTOs.Planning",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'PEventPromotion' is a C# class designed to manage promotions related to events.\r\n\r\n1. AddPromotion: Adds a new promotion to the event.\r\n2. RemovePromotion: Removes a promotion from the event.\r\n3. GetPromotions: Retrieves all promotions associated with the event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PEventPromotion",
            "namespace": "LMS.ModelsDTOs.Planning",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'PEventsEcolesUsers' class is designed to manage events, schools, and users within a system. It includes methods for handling various operations related to these entities.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PEventsEcolesUsers",
            "namespace": "LMS.ModelsDTOs.Planning",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "PEvents_objects is a class that contains methods for managing events related to objects.\r\n\r\nMethods:\r\n1. AddObjectEvent: Adds an event for a specific object.\r\n2. RemoveObjectEvent: Removes an event associated with an object.\r\n3. ClearAllObjectEvents: Clears all events related to objects.\r\n4. TriggerObjectEvent: Triggers a specific event for an object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PEvents_objects",
            "namespace": "LMS.ModelsDTOs.Planning",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'PEventType' is a C# class that represents different types of events.\r\n\r\nMethods:\r\n1. GetName() - Retrieves the name of the event type.\r\n2. GetDescription() - Retrieves the description of the event type.\r\n3. GetPriority() - Retrieves the priority of the event type.\r\n4. IsCritical() - Checks if the event type is critical.\r\n5. IsPublic() - Checks if the event type is public.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PEventType",
            "namespace": "LMS.ModelsDTOs.Planning",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'PUsers' class represents a collection of user objects with methods for managing and interacting with user data.\r\n\r\nExposed Methods:\r\n1. AddUser - Adds a new user to the collection.\r\n2. RemoveUser - Removes a user from the collection.\r\n3. GetUserById - Retrieves a user object by their unique identifier.\r\n4. GetAllUsers - Retrieves all user objects in the collection.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PUsers",
            "namespace": "LMS.ModelsDTOs.Planning",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'DiscoveryCoursesSubscriptionResultCode' provides result codes for subscription requests related to discovery courses, including codes for course not found, apprenticeship course required and not found, internal server error, and successful operation.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "DiscoveryCoursesSubscriptionResultCode",
            "namespace": "LMS.ModelsDTOs.Prospect",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: NewProspectDto is a data transfer object class used for representing new prospect information.\r\n\r\nMethods:\r\n1. GetProspectId - Gets the prospect ID.\r\n2. SetProspectId - Sets the prospect ID.\r\n3. GetProspectName - Gets the prospect name.\r\n4. SetProspectName - Sets the prospect name.\r\n5. GetProspectEmail - Gets the prospect email.\r\n6. SetProspectEmail - Sets the prospect email.\r\n7. GetProspectPhoneNumber - Gets the prospect phone number.\r\n8. SetProspectPhoneNumber - Sets the prospect phone number.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewProspectDto",
            "namespace": "LMS.ModelsDTOs.Prospect",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "This class represents a data transfer object for new prospects interested in long-term apprenticeship programs. It contains properties to store relevant information about the prospect.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewProspectLongtermApprenticeshipDto",
            "namespace": "LMS.ModelsDTOs.Prospect",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Enum 'ProspectActivationResultCode' represents the possible results of activating a prospect account, including codes for account status, course availability, errors, and successful activation.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "ProspectActivationResultCode",
            "namespace": "LMS.ModelsDTOs.Prospect",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ProspectCreationInfosDto' is a data transfer object that contains information related to creating a prospect. It includes methods for setting and retrieving prospect details such as name, email, and phone number.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProspectCreationInfosDto",
            "namespace": "LMS.ModelsDTOs.Prospect",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'ProspectCreationReturnStatusEnum' enum provides status codes for prospect creation operations, including success, errors, and warnings such as invalid data, existing enrollments, unrecognized sectors, and email sending failures.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "ProspectCreationReturnStatusEnum",
            "namespace": "LMS.ModelsDTOs.Prospect",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'ProspectRenewTokenResultCode' represents the possible result codes when renewing a prospect's token: AlreadyActiveAccount, AccountNotFound, InternalServerError, Ok.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "ProspectRenewTokenResultCode",
            "namespace": "LMS.ModelsDTOs.Prospect",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'SessionStateEnum' represents different states of a session, including Ongoing, OngoingNewTokenNeeded, and MustBeClosedAsTokenExpired.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "SessionStateEnum",
            "namespace": "LMS.ModelsDTOs.SessionState",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: TeamDto is a data transfer object class used to represent and transfer team information in a concise and standardized format.\r\n\r\nMethods:\r\n1. GetTeamName - Retrieves the name of the team.\r\n2. GetTeamMembers - Retrieves a list of team members.\r\n3. AddTeamMember - Adds a new team member to the team.\r\n4. RemoveTeamMember - Removes a team member from the team.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamDto",
            "namespace": "LMS.ModelsDTOs.Team",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'TeamMemberDto' is a data transfer object class representing a team member's information, including their name, role, and contact details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamMemberDto",
            "namespace": "LMS.ModelsDTOs.Team",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "TeamWithMembersDto class is a data transfer object that represents a team with its members. It provides methods to interact with team and member information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamWithMembersDto",
            "namespace": "LMS.ModelsDTOs.Team",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "`ConnectionReportRow` is a class that represents a single row of connection data for reporting purposes. It contains methods to retrieve and manipulate connection information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionReportRow",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'ConnReportInfo' is a C# class that contains information related to connection reports, providing methods to retrieve, update, and manage connection report data.\r\n\r\nExposed Methods:\r\n1. GetReportData() - Retrieves connection report data.\r\n2. UpdateReportData() - Updates connection report data.\r\n3. GenerateReport() - Generates a connection report based on the stored data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnReportInfo",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CountryViewModel represents a view model for displaying information about a country. It contains methods for retrieving and updating country data.\r\n\r\nMethods:\r\n1. GetCountryInfo - Retrieves information about a specific country.\r\n2. UpdateCountryInfo - Updates the information of a specific country.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CountryViewModel",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Global Description: 'CourseConnectionReportRow' is a C# class that represents a row of data in a course connection report.\r\n\r\nExposed Methods:\r\n1. GetCourseName() - Retrieves the name of the course associated with the report row.\r\n2. GetConnectionStatus() - Retrieves the connection status of the course in the report row.\r\n3. GetConnectionDate() - Retrieves the date of the connection for the course in the report row.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseConnectionReportRow",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "DegreeViewModel is a class that represents a view model for degrees. It contains properties and methods to handle degree-related data in a C# application.\r\n\r\nMethods:\r\n1. GetDegreeById(int id) - Retrieves a degree by its unique identifier.\r\n2. AddDegree(Degree degree) - Adds a new degree to the view model.\r\n3. UpdateDegree(Degree degree) - Updates an existing degree in the view model.\r\n4. DeleteDegree(int id) - Deletes a degree by its unique identifier.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DegreeViewModel",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "OccupationViewModel is a class that represents the view model for occupation-related data. It includes methods for retrieving, updating, and deleting occupation information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "OccupationViewModel",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "'SchoolUserDto' is a data transfer object class used to represent a user in a school system. It includes properties for user information such as name, email, and role.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolUserDto",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "The 'SchoolUserStatusAndTypeDto' class represents a data transfer object for storing information about the status and type of a user in a school system. It includes methods for setting and getting the user's status and type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolUserStatusAndTypeDto",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Enum 'SetPasswordResultCode' represents the possible results of a password setting operation, including InternalServerError, InvalidPassword, Ok, and UserNotFound.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "SetPasswordResultCode",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'SetSchoolUserStatusResultCode' represents the result codes for setting the status of a school user, including InternalServerError, SchoolUserNotFound, and Ok.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "SetSchoolUserStatusResultCode",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'UAdresses' is a C# class that provides methods for managing user addresses.\r\n\r\n1. AddAddress: Adds a new address to the user's list of addresses.\r\n2. RemoveAddress: Removes a specified address from the user's list of addresses.\r\n3. UpdateAddress: Updates the details of a specific address in the user's list.\r\n4. GetAddresses: Retrieves all addresses associated with the user.\r\n5. GetPrimaryAddress: Retrieves the primary address of the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UAdresses",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "UEcoles class represents a collection of schools and provides methods to manage and interact with these schools.\r\n\r\nMethods:\r\n1. AddEcole(string nom, string adresse) - Adds a new school to the collection with the given name and address.\r\n2. RemoveEcole(string nom) - Removes a school from the collection based on its name.\r\n3. GetEcole(string nom) - Retrieves a school from the collection based on its name.\r\n4. UpdateEcole(string nom, string nouvelleAdresse) - Updates the address of a school in the collection based on its name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UEcoles",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "UEcoleUserDevice is a class that represents a user device within a school environment. It provides methods for managing and interacting with user devices.\r\n\r\nMethods:\r\n1. ConnectDevice(): Connects the user device to the school network.\r\n2. DisconnectDevice(): Disconnects the user device from the school network.\r\n3. UpdateDeviceSettings(): Updates the settings of the user device.\r\n4. GetDeviceStatus(): Retrieves the current status of the user device.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UEcoleUserDevice",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "UEcoleUserPublic is a C# class that represents a public user in a school system. It includes methods for accessing and updating user information.\r\n\r\nMethods:\r\n1. GetUserId() - Retrieves the unique identifier of the user.\r\n2. GetUserName() - Retrieves the name of the user.\r\n3. GetRole() - Retrieves the role of the user.\r\n4. UpdateUserName(string newName) - Updates the name of the user.\r\n5. UpdateRole(string newRole) - Updates the role of the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UEcoleUserPublic",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "UEcoleUsers is a C# class that represents users within a school system. It provides methods for managing and interacting with user data.\r\n\r\n1. AddUser: Adds a new user to the school system.\r\n2. RemoveUser: Removes a user from the school system.\r\n3. GetUserById: Retrieves a user's information based on their ID.\r\n4. UpdateUser: Updates the information of an existing user.\r\n5. GetAllUsers: Retrieves a list of all users in the school system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UEcoleUsers",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "UInscriptionPromotion is a class that manages promotions for user inscriptions. It includes methods for creating, updating, deleting, and retrieving promotion information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UInscriptionPromotion",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'UPromotion' is a C# class that encapsulates promotion-related functionalities.\r\n\r\nExposed Methods:\r\n1. ApplyPromotion - Applies a promotion to a given item.\r\n2. CalculateDiscount - Calculates the discount amount for a given item based on the promotion.\r\n3. IsPromotionValid - Checks if a promotion is valid for a given item.\r\n4. GetPromotionDetails - Retrieves the details of a specific promotion.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UPromotion",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'UReportConnection' is a C# class that provides methods for establishing and managing connections to a reporting service.\r\n\r\nExposed Methods:\r\n1. Connect - Establishes a connection to the reporting service.\r\n2. Disconnect - Closes the connection to the reporting service.\r\n3. IsConnected - Checks if a connection to the reporting service is currently active.\r\n4. SendReport - Sends a report to the reporting service.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UReportConnection",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "UTypeVoie is a C# class that represents a type of road. It includes methods such as GetId() and GetLibelle() to retrieve the ID and label of the road type, respectively.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UTypeVoie",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: UUserPublic is a C# class that represents a user with public information.\r\n\r\nExposed Methods:\r\n1. GetUsername - Retrieves the username of the user.\r\n2. GetFirstName - Retrieves the first name of the user.\r\n3. GetLastName - Retrieves the last name of the user.\r\n4. GetEmail - Retrieves the email address of the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UUserPublic",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'UUsers' class represents a collection of user objects with various methods for managing user data.\r\n\r\nMethods:\r\n1. AddUser - Adds a new user to the collection.\r\n2. RemoveUser - Removes a user from the collection.\r\n3. GetUserById - Retrieves a user object by their unique identifier.\r\n4. UpdateUser - Updates an existing user's information.\r\n5. GetAllUsers - Retrieves all users in the collection.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UUsers",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "UUserSchoolDto is a data transfer object class that represents a user's school information. It includes methods for retrieving and updating the user's school details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UUserSchoolDto",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "UUserSchoolsListDto is a C# class that represents a list of schools associated with a user. It provides methods for managing and retrieving information about the user's schools.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UUserSchoolsListDto",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "UUserType is a C# class that represents a user type with methods for retrieving and updating user information.\r\n\r\nMethod 1: GetUserType\r\nSummary: Retrieves the type of user.\r\n\r\nMethod 2: SetUserType\r\nSummary: Updates the type of user.\r\n\r\nMethod 3: ValidateUserType\r\nSummary: Validates the user type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UUserType",
            "namespace": "LMS.ModelsDTOs.User",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Summary: 'NotificationEmailViewBag' is a C# class that contains methods for managing and generating email notifications for view bags.\r\n\r\nMethods:\r\n1. AddNotification: Adds a notification message to the view bag.\r\n2. ClearNotifications: Clears all notification messages from the view bag.\r\n3. GetNotifications: Retrieves a list of all notification messages from the view bag.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationEmailViewBag",
            "namespace": "LMS.Notifications",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'NotificationHelpers' is a C# class that provides methods for sending bulk emails asynchronously and updating notification receiver information in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationHelpers",
            "namespace": "LMS.Notifications",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'NotificationTypesHelper' is a C# class designed to provide helper methods for managing different types of notifications.\r\n\r\nExposed Methods:\r\n1. GetNotificationTypes() - Retrieves a list of all available notification types.\r\n2. GetNotificationTypeById(int id) - Retrieves a specific notification type by its unique identifier.\r\n3. AddNotificationType(string type) - Adds a new notification type to the list of available types.\r\n4. RemoveNotificationType(int id) - Removes a notification type from the list based on its identifier.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationTypesHelper",
            "namespace": "LMS.Notifications",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Represents an entity with methods and properties related to energy efficiency ratings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EER",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'EventParticipants' is a class that manages and stores information about participants in an event.\r\n\r\nMethods:\r\n1. AddParticipant: Adds a participant to the event.\r\n2. RemoveParticipant: Removes a participant from the event.\r\n3. GetParticipantsList: Retrieves a list of all participants in the event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventParticipants",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "NotificationSenderManager is a class that handles the asynchronous sending of various notifications to specified users based on specific criteria and conditions, including forum comments, posts, replies, wall interactions, event reminders, evaluation copies, oral sessions, quizzes, workgroup posts, ratings, and more.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send forum comment notifications to specified users based on the comment content and tags, excluding the comment owner and post owner, and handling various tag scenarios for different notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendForumCommentNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send forum post notifications to specific users based on post tags and ownership, creating a notification object and handling the notification asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendForumPostNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send forum reply notifications asynchronously to specified users based on the forum post's tags and favorites, as well as the post owner, and handle any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendForumReplyNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send a notification to users who commented on a post, considering their notification preferences and the post owner's preferences.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendWallCommentNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send a notification to users who liked a comment on a wall post, including preparing and saving the notification object in the database with relevant details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendWallCommentLikeNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send a notification to the user who posted a wall post that someone has liked it, while excluding the user who liked their own post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendWallPostLikeNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send a notification to users whose event is starting soon, based on specific criteria such as active user status, user type, and notification preferences, including creating and saving the notification object in the database and handling the notification asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendEventStartingSoonNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send a notification to the user about a corrected evaluation copy, with different email content and URL depending on the type of evaluation, and handle the notification process asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendCorrectedCopyNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create and send a notification to moderators and the student when an oral session is reserved, including session details and a personalized message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendOralReservedNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create and send a notification to inform a user before an oral evaluation session, including the session details and a personalized message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "CreateInformBeforeOralNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send an email notification containing the results of a failed quiz, including the user's score, duration, and related promotions, with specific formatting based on the score.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendQuizNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send a notification to specified users based on the post content and workgroup information, handling various conditions and user statuses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendWorkgroupPostNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send a notification email with a satisfaction questionnaire to specific users based on provided data, including user and resource information, satisfaction and difficulty levels, and user comments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendRatingNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Insert notification receivers into the database table \"Notifications.NotificationReceiver\" with specified data for each receiver.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "InsertNotificationReceivers",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Handle notification asynchronous by sending push and email notifications to specified users based on their notification preferences and device types, with the ability to force notifications if needed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "HandleNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Determine the template path and key based on the notification type code provided.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "DeterminTemplatePath",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the pseudo of the author with a specified ID asynchronously from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "GetAuthorPseudoAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of users who are affected to specific courses, subjects, modules, or themes, excluding the current user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "GetAffectedFormateursAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send a notification to users who have registered for a campus event, providing details about the event and instructions for participation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManager",
            "method_name": "SendCampusParticipateNotificationAsync",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'Np' class is a utility class that provides various mathematical and statistical functions for numerical processing.\r\n\r\nExposed Methods:\r\n1. 'Mean': Calculates the mean value of a collection of numbers.\r\n2. 'Median': Calculates the median value of a collection of numbers.\r\n3. 'Mode': Calculates the mode value of a collection of numbers.\r\n4. 'StandardDeviation': Calculates the standard deviation of a collection of numbers.\r\n5. 'Variance': Calculates the variance of a collection of numbers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Np",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'RecevierEcoleUsersMap' is a class that maps users to their respective schools in a receiver system.\r\n\r\nMethods:\r\n1. AddUserToSchool - Adds a user to a specific school.\r\n2. RemoveUserFromSchool - Removes a user from a specific school.\r\n3. GetSchoolByUser - Retrieves the school associated with a specific user.\r\n4. GetUserBySchool - Retrieves the users associated with a specific school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RecevierEcoleUsersMap",
            "namespace": "LMS.Notifications.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'ApiReturnNullException' is a C# class used for handling null return values from API calls.\r\n\r\nExposed Methods:\r\n1. ThrowNullException - Throws an exception when a null value is returned from an API call.\r\n2. HandleNullException - Handles the null return value from an API call by providing a default value or custom action.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiReturnNullException",
            "namespace": "LMS.Notifications.V3.Exceptions",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "DbReturnNullException class represents an exception that is thrown when a database query returns a null value unexpectedly.\r\n\r\nExposed methods:\r\n1. Constructor - Initializes a new instance of the DbReturnNullException class.\r\n2. SerializeObject - Serializes the object to a JSON string.\r\n3. DeserializeObject - Deserializes a JSON string to an object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DbReturnNullException",
            "namespace": "LMS.Notifications.V3.Exceptions",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'NoReceiverWithEnableNotificationException' class represents an exception that is thrown when attempting to send a notification without any receivers enabled to receive it.\r\n\r\nExposed methods:\r\n1. Constructor: Initializes a new instance of the NoReceiverWithEnableNotificationException class.\r\n2. ToString(): Returns a string that represents the current object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NoReceiverWithEnableNotificationException",
            "namespace": "LMS.Notifications.V3.Exceptions",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'NotificationModelNotFoundException' class is used to represent an exception when a notification model is not found. It provides methods to handle and manage this specific type of exception.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModelNotFoundException",
            "namespace": "LMS.Notifications.V3.Exceptions",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'RecordNotFoundException' is a class that represents an exception thrown when a record is not found in a data source.\r\n\r\nMethods:\r\n1. Constructor - Initializes a new instance of the RecordNotFoundException class.\r\n2. Constructor - Initializes a new instance of the RecordNotFoundException class with a specified error message.\r\n3. Constructor - Initializes a new instance of the RecordNotFoundException class with a specified error message and inner exception.\r\n4. Constructor - Initializes a new instance of the RecordNotFoundException class with a specified serialization information and streaming context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RecordNotFoundException",
            "namespace": "LMS.Notifications.V3.Exceptions",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\n'TargetTypeException' is a C# class designed to handle exceptions related to incorrect target types in a program.\r\n\r\nExposed Methods:\r\n1. Constructor - Initializes a new instance of the 'TargetTypeException' class with a specified error message.\r\n2. Constructor - Initializes a new instance of the 'TargetTypeException' class with a specified error message and a reference to the inner exception that is the cause of this exception.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TargetTypeException",
            "namespace": "LMS.Notifications.V3.Exceptions",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'UnAuthorizedException' class represents an exception that is thrown when a user is not authorized to perform a certain action.\r\n\r\nExposed Methods:\r\n1. Constructor - Initializes a new instance of the UnAuthorizedException class.\r\n2. Constructor - Initializes a new instance of the UnAuthorizedException class with a specified error message.\r\n3. Constructor - Initializes a new instance of the UnAuthorizedException class with a specified error message and inner exception.\r\n4. Constructor - Initializes a new instance of the UnAuthorizedException class with a specified serialization info and streaming context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UnAuthorizedException",
            "namespace": "LMS.Notifications.V3.Exceptions",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "WrongDtoModelException class is used to represent an exception that occurs when a Data Transfer Object (DTO) model is incorrect or invalid.\r\n\r\nExposed methods:\r\n1. WrongDtoModelException(string message) - Initializes a new instance of the WrongDtoModelException class with a specified error message.\r\n2. WrongDtoModelException(string message, Exception innerException) - Initializes a new instance of the WrongDtoModelException class with a specified error message and a reference to the inner exception that is the cause of this exception.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "WrongDtoModelException",
            "namespace": "LMS.Notifications.V3.Exceptions",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: This C# class represents a model for copying and evaluating notifications.\r\n\r\nMethods:\r\n1. CopyNotification - Copies a notification.\r\n2. EvaluateNotification - Evaluates a notification.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationEvaluationCopyModel",
            "namespace": "LMS.Notifications.V3.NotificationDbModels.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A C# class representing a data model for notifications in a database.\r\n\r\nExposed Methods:\r\n1. AddNotification: Adds a new notification to the database.\r\n2. GetNotificationById: Retrieves a notification from the database based on its ID.\r\n3. UpdateNotification: Updates an existing notification in the database.\r\n4. DeleteNotification: Deletes a notification from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationDbModel",
            "namespace": "LMS.Notifications.V3.NotificationDbModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'NotificationReceiversDbModel' is a class that represents a database model for storing notification receivers. It contains methods for retrieving, adding, updating, and deleting notification receivers in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationReceiversDbModel",
            "namespace": "LMS.Notifications.V3.NotificationDbModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'UserDbModel' is a C# class that represents a model for interacting with user data in a database.\r\n\r\nExposed Methods:\r\n1. GetUserById(int userId) - Retrieves a user from the database based on their ID.\r\n2. AddUser(User user) - Adds a new user to the database.\r\n3. UpdateUser(User user) - Updates an existing user in the database.\r\n4. DeleteUser(int userId) - Deletes a user from the database based on their ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserDbModel",
            "namespace": "LMS.Notifications.V3.NotificationDbModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nThe 'NotificationEvaluationRejectedModel' class represents a model for notifications that have been rejected during evaluation. It contains properties to store information related to the rejected notification.\r\n\r\nExposed Methods:\r\n1. GetNotificationId(): Retrieves the unique identifier of the rejected notification.\r\n2. GetReasonForRejection(): Retrieves the reason for the rejection of the notification.\r\n3. GetRejectedBy(): Retrieves the user who rejected the notification.\r\n4. GetTimestamp(): Retrieves the timestamp when the notification was rejected.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationEvaluationRejectedModel",
            "namespace": "LMS.Notifications.V3.NotificationDtoModels.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A C# class representing a model for rejected pedagogical evaluations in notifications.\r\n\r\nExposed Methods:\r\n1. GetEvaluationId() - Retrieves the evaluation ID.\r\n2. GetReasonForRejection() - Retrieves the reason for rejection of the evaluation.\r\n3. GetRejectedBy() - Retrieves the user who rejected the evaluation.\r\n4. GetRejectionDate() - Retrieves the date of rejection.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationEvaluationRejectedPedagoModel",
            "namespace": "LMS.Notifications.V3.NotificationDtoModels.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A C# class that represents a validated trainer model for notification evaluation.\r\n\r\nExposed Methods:\r\n1. ValidateTrainerEvaluation: Validates the trainer evaluation.\r\n2. GenerateNotification: Generates a notification based on the evaluation.\r\n3. UpdateTrainerModel: Updates the trainer model based on the evaluation results.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationEvaluationValidatedTrainerModel",
            "namespace": "LMS.Notifications.V3.NotificationDtoModels.Evaluation",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'NotificationOralDtoModel' is a C# class that represents a data transfer object for oral notifications. It contains properties to store information related to oral notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationOralDtoModel",
            "namespace": "LMS.Notifications.V3.NotificationDtoModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationRejectedModel' is a C# class that handles the creation of email templates for evaluation rejection notifications, mapping data from a specific database, casting target as copy ID, and deserializing JSON into a specific model object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create email templates for evaluation rejection notifications by populating the template with data from notification receiver models and sending the templates via email templating API, adding them to the collection of email templates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedModel",
            "method_name": "CreateMailTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve and map data from a specific database using the copy ID after casting the target as a copy ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedModel",
            "method_name": "GetAndMapDataFromDbSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Parse the NotificationTargetId as an integer copyId, throwing a TargetTypeException if unsuccessful.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedModel",
            "method_name": "CastTargetAsCopyId",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Deserialize a JSON string into a specific model object called NotificationEvaluationRejectedModel.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedModel",
            "method_name": "MapDtoToPropertiesSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Global Description:\r\nThe 'EvaluationRejectedPedagoModel' class handles the creation of email templates, retrieval and mapping of data from a specific database, casting of target IDs, and mapping of DTOs for notification of evaluation rejections in the pedagogical context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedPedagoModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create email templates for notification receivers based on evaluation rejection data and add them to the list of email templates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedPedagoModel",
            "method_name": "CreateMailTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve and map data from a specific database using the copy ID as a reference.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedPedagoModel",
            "method_name": "GetAndMapDataFromDbSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Parse the NotificationTargetId as an integer to assign it to the copyId variable, throwing a TargetTypeException if the parsing fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedPedagoModel",
            "method_name": "CastTargetAsCopyId",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Deserialize a JSON object into a specific model type for notification evaluation rejection in the pedagogical context.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationRejectedPedagoModel",
            "method_name": "MapDtoToPropertiesSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationValidatedStudentModel' is a class that handles the creation of email templates for evaluation validated students, retrieves and maps data from a specific database, and parses NotificationTargetId as an integer for setting it as the copyId, with error handling for parsing failures.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedStudentModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create email templates for a list of evaluation validated students with specific data and layout, and add them to the existing collection of email templates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedStudentModel",
            "method_name": "CreateMailTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve and map data from a specific database using the copy ID provided.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedStudentModel",
            "method_name": "GetAndMapDataFromDbSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Parse the NotificationTargetId as an integer to set it as the copyId, and throw a TargetTypeException if the parsing fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedStudentModel",
            "method_name": "CastTargetAsCopyId",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationValidatedTrainerModel' class is responsible for creating email templates, retrieving and mapping data from a specific database, parsing target IDs, and deserializing JSON strings into objects for evaluation and validation purposes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedTrainerModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create email templates for a list of notification receivers with specific data and send them via email templating API, adding the generated templates to the EmailTemplates list.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedTrainerModel",
            "method_name": "CreateMailTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve and map data from a specific database by copying the target ID and using a NotificationEvaluationDataService to get the evaluation copy.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedTrainerModel",
            "method_name": "GetAndMapDataFromDbSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Parse the NotificationTargetId as an integer copyId, throwing a TargetTypeException if the parsing fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedTrainerModel",
            "method_name": "CastTargetAsCopyId",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Deserialize a JSON string into a NotificationEvaluationValidatedTrainerModel object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationValidatedTrainerModel",
            "method_name": "MapDtoToPropertiesSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "This class, 'EvaluationVideoTransmitedStudentModel', handles the creation of email templates, retrieval and mapping of specific data from the database, and parsing of NotificationTargetId as an integer for evaluation purposes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationVideoTransmitedStudentModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create email templates for a list of notification receivers, including their personal information and copy details, and add them to the existing collection of email templates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationVideoTransmitedStudentModel",
            "method_name": "CreateMailTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve and map specific data from the database by casting target as copy ID and using NotificationEvaluationDataService to get evaluation copy.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationVideoTransmitedStudentModel",
            "method_name": "GetAndMapDataFromDbSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Parse the NotificationTargetId as an integer and assign the result to the copyId property, throwing a TargetTypeException if the parsing fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationVideoTransmitedStudentModel",
            "method_name": "CastTargetAsCopyId",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Evaluation",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "'NotificationConfirmMessagePedagoModel' is a class that handles creating mail templates and retrieving response delay hours for specific users from a database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationConfirmMessagePedagoModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Messenger",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create a mail template with specific data and add it to the list of email templates, ensuring that the email is not sent if the response delay hours are set to null.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationConfirmMessagePedagoModel",
            "method_name": "CreateMailTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Messenger",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve response delay hours for a specific user from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationConfirmMessagePedagoModel",
            "method_name": "GetAndMapDataFromDbSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Messenger",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Global Description: A C# class used to generate email and push notification templates for oral notifications 48 hours before the event, based on specified user data and oral information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationRemind48HoursBeforeOralModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Messenger",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create email templates for oral notifications to be sent to specified users, based on notification receiver models and oral data, and add them to the collection of email templates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationRemind48HoursBeforeOralModel",
            "method_name": "CreateMailTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Messenger",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create a push notification template based on the title and start date of an oral notification, and assign it to the corresponding user's mobile template.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationRemind48HoursBeforeOralModel",
            "method_name": "CreatePushTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Messenger",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Deserialize a JSON string into a NotificationOralDtoModel object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationRemind48HoursBeforeOralModel",
            "method_name": "MapDtoToPropertiesSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations.Messenger",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "'NotificationModel' is a class that handles the mapping, persisting, and sending of notifications to users via email and push notifications, based on their preferences and configurations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Map data transfer object (DTO) properties to notification properties, including sender, target, department name, receivers, and specific data if applicable.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "MapDtoToProperties",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Insert a new notification into the database with the specified sender, code, target, and title.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "PersistNotification",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Persist notification receivers data by inserting notification receivers into the database with specific attributes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "PersistNotificationReceivers",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve notification data from the database, map it to properties for users who should receive notifications, and handle notification preferences for push and email notifications. If no receivers are found with enabled notifications, throw an exception. If the notification implements a specific database method, call it asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "GetAndMapDataFromDb",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Send email notifications to each person specified in the EmailTemplates list, using the provided email template information and updating the notification receiver status accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "SendMail",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Send push notifications to users based on the specified mobile template, including title, message, notification ID, type, target ID, and sound, using Firebase Messenger for both Android and iOS devices, with error logging for any failures.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "SendPush",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Check if a user should receive a notification based on their notification preferences and configuration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "IsUserShouldReceiveNotification",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Return the list of notification receivers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "GetReceivers",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve the receivers who have email notifications enabled.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "GetReceiversForEmail",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Retrieve the receivers who have enabled push notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationModel",
            "method_name": "GetReceiversForPush",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nNotificationReceiverModel is a C# class that represents a model for receiving notifications. It provides methods for handling and processing notifications.\r\n\r\nExposed Methods:\r\n1. ReceiveNotification - Receives a notification and processes it accordingly.\r\n2. UpdateSettings - Updates the settings for receiving notifications.\r\n3. DeleteNotification - Deletes a specific notification from the receiver's queue.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationReceiverModel",
            "namespace": "LMS.Notifications.V3.NotificationModels.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create mail template",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationEmailModel",
            "method_name": "CreateMailTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Get data from db when specific data needed",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationHasSpecificDb",
            "method_name": "GetAndMapDataFromDbSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Map dto to properties if specifics data needed",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationHasSpecificDto",
            "method_name": "MapDtoToPropertiesSpecific",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "Map data from client to notification object",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "MapDtoToProperties",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Persist notification to database",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "PersistNotification",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Persist notification receivers to database",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "PersistNotificationReceivers",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Get data from database and map to notification object",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "GetAndMapDataFromDb",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Send mail",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "SendMail",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Send push to mobile",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "SendPush",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Return all receivers",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "GetReceivers",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Return receivers for email",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "GetReceiversForEmail",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Return receivers for push",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationModel",
            "method_name": "GetReceiversForPush",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Create push template for mobile",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationPushModel",
            "method_name": "CreatePushTemplate",
            "namespace": "LMS.Notifications.V3.NotificationModels.Interfaces",
            "summary_kind": "method",
            "functional_type": "DomainModel"
        }
    },
    {
        "page_content": "Global Description: NotificationDtoModel is a data transfer object class used to represent notifications in a simplified format.\r\n\r\nExposed Methods:\r\n1. GetNotificationId: Returns the unique identifier of the notification.\r\n2. GetNotificationMessage: Returns the message content of the notification.\r\n3. GetNotificationType: Returns the type of the notification (e.g. email, SMS, push notification).\r\n4. GetNotificationTimestamp: Returns the timestamp when the notification was sent.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationDtoModel",
            "namespace": "LMS.Notifications.V3.NotificationModels",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'NotificationSenderManagerV3' is a class that provides methods to send notifications asynchronously, handle notification types, create notification models, and send email notifications and push notifications to users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManagerV3",
            "namespace": "LMS.Notifications.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send notification asynchronously, checking if notification type exists, building model, mapping data, creating and persisting notification in database, sending push notification if applicable, creating and sending email notification if applicable, and persisting notification receivers in database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManagerV3",
            "method_name": "SendNotificationAsync",
            "namespace": "LMS.Notifications.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Send notification email and push to users, handling exceptions if notification type is deleted or not an email model, mapping data, creating and persisting notifications and receivers, creating mail template and sending mail.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManagerV3",
            "method_name": "SendMailAsync",
            "namespace": "LMS.Notifications.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a notification model based on the provided notification code by instantiating the appropriate notification model class.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationSenderManagerV3",
            "method_name": "BuildNotificationModel",
            "namespace": "LMS.Notifications.V3",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Check if notification is deleted",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationDataService",
            "method_name": "IsNotificationTypeDeleted",
            "namespace": "LMS.Notifications.V3.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get notification by id",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationDataService",
            "method_name": "GetNotificationById",
            "namespace": "LMS.Notifications.V3.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get Users data from db",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationDataService",
            "method_name": "GetUsersData",
            "namespace": "LMS.Notifications.V3.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Insert new notification to database",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationDataService",
            "method_name": "InsertNewNotification",
            "namespace": "LMS.Notifications.V3.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Insert notification receivers to database",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationDataService",
            "method_name": "InsertNotificationReceivers",
            "namespace": "LMS.Notifications.V3.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get notification sound",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationDataService",
            "method_name": "GetNotificationSound",
            "namespace": "LMS.Notifications.V3.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get copy model for copyId",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationEvaluationDataService",
            "method_name": "GetEvaluationCopy",
            "namespace": "LMS.Notifications.V3.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get the response delay hours for school",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INotificationMessengerDataService",
            "method_name": "GetResponseDelayHoursForEcoleUserId",
            "namespace": "LMS.Notifications.V3.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'ActivityTrackingRepository' is a C# class that provides methods to retrieve and track various activity data such as non-apprenticeship tracking, apprenticeship agreement projects, provisional hours, and connection time for users at specific schools.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve non-apprenticeship activity tracking data for a specified user and school, including project details, total hours, done seconds, begin and end dates, financer information, courses, and blocks.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingRepository",
            "method_name": "GetNonApprenticeshipActivityTrackings",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the apprenticeship agreement projects for a specified user and school, including project details such as start and end dates, financer, courses, and blocks.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingRepository",
            "method_name": "GetApprenticeshipAgreementProjects",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the sum of provisional hours before a specified date for a given apprenticeship information ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingRepository",
            "method_name": "GetPrevisionnalHoursSumBeforeDate",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the previsonnal hours for a specific apprenticeship information, year, and month after performing sanity checks on the input parameters.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingRepository",
            "method_name": "GetPrevisionnalHours",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the total number of seconds of connection time for a specific user at a particular school before a specified end date.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingRepository",
            "method_name": "GetConnectionTotalSecondsBeforeEndDate",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "BlocCompetenceRepository is a C# class used to retrieve the ID of a competence block by its code asynchronously while ensuring it is not deleted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BlocCompetenceRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the ID of a competence block by its code asynchronously, ensuring it is not deleted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BlocCompetenceRepository",
            "method_name": "GetBlocCompetenceIdByCodeAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "This class, 'EvaluationGridFormRepository', provides methods to retrieve information about evaluation grids based on JSON courses for a specific user and school, or from a provided user's JSON courses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGridFormRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve information about an evaluation grid based on JSON courses for a specific user and school, returning null if no courses are found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGridFormRepository",
            "method_name": "GetEvaluationGridInfosAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve information about an evaluation grid from a provided user's JSON courses, returning null if no courses are found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGridFormRepository",
            "method_name": "GetEvaluationGridInfosAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve information about a specific evaluation grid from a JSON object containing course evaluations, returning an EvaluationGridInfoDto object if found, or null.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationGridFormRepository",
            "method_name": "GetEvaluationGridInfos",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'FakeReportConnexionRepository' is a class that provides asynchronous methods to manipulate ReportConnexion objects in a database, including inserting, updating, deleting, and retrieving data. It also offers functionality to manage change detection and calculate time differences.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FakeReportConnexionRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The 'ForumPostRepository' class provides methods for retrieving, filtering, and handling forum posts based on various criteria such as user details, forum categories, search terms, and affectations, allowing for efficient management and display of forum content for formateurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Create a mapping expression to retrieve specific data from a forum post for a formateur, including details such as accepted answer ID, answers count, body, creation date, forum categories, handling status, owner user details, score, tags, title, update date, and view count.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "GetForumPostsFormateurMapExpression",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Filter forum posts based on whether they are linked to a selected forum type, which can only be either 'FORUM_CONTENT' or 'FORUM_PARCOURS'.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostIsLinkedIfItExistsToTheSelectedForumType",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve all forum posts that have not been handled by any formateur yet.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostIsNotHandled",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Filter forum posts to check if they are parent forum posts created by a specific user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostIsAParentForumPostCreatedByTheUser",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Check if the forum post is linked to a forum comment or a child forum post created by the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostIsLinkedToAForumCommentOrAChildForumPostCreatedByTheUser",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve forum posts that contain all the specified search terms in either their title or body.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostIsLinkedIfItExistsToTheSearchValue",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Filter forum posts where the update date is inferior to the specified start date, or return all forum posts if no start date is provided.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "UpdateDateInferiorToLastForumPostShownDate",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Filter forum posts based on their update date being superior to the last forum post shown date, or show all forum posts if no start date is specified.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "UpdateDateSuperiorToLastForumPostShownDate",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Check if a forum post does not have a parent and is available for viewing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostDoesntHaveAnyParentAndIsAvailable",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve forum posts linked to the selected affectations based on course, subject, module, and theme IDs, with the ability to handle different combinations of IDs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostIsLinkedIfItExistsToTheSelectedAffectations",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve all the forum posts that are linked to the forum affectations of the specified user, considering various conditions such as null values and deletion dates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostIsLinkedToTheForumAffectationsOfTheUser",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve all forum posts linked to the user from all of his forum affectations to a Parcours, with specific conditions on the ForumAffectations data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostParcoursIsLinkedToTheForumAffectationsOfTheUser",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve all the forum posts linked to the user from all of his forum affectations to a specific Matiere, based on certain conditions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostMatiereIsLinkedToTheForumAffectationsOfTheUser",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve all the forum posts linked to the user from all of his forum affectations to a module, based on specific conditions, such as matching user ID, Parcours ID, Matiere ID, Theme ID, and Date Delete.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostModuleIsLinkedToTheForumAffectationsOfTheUser",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve all forum posts that are linked to the forum affectations of a specific user based on certain conditions, such as matching user IDs, parcours IDs, matiere IDs, module IDs, and ensuring that the date delete is null or in the future.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "ForumPostThemeIsLinkedToTheForumAffectationsOfTheUser",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve forum posts linked to the forum affectations of a specific user by combining and filtering posts based on various criteria such as parcours, matiere, module, and theme.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "GetForumPostsLinkedToTheForumAffectations",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve forum posts based on various criteria such as section, affectations, user ID, forum type, and search value, and sort them accordingly for display in a forum for formateurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "GetForumPostsAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the count of unhandled forum posts linked to the forum affectations of a specific user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "GetUnhandledForumPostsCountAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve formations from affectations based on user ID, grouping them by course, subject, module, and theme, and creating a list of formation DTOs with corresponding labels.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumPostRepository",
            "method_name": "GetFormationsFromAffectations",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'GenericRepository' is a versatile class that provides asynchronous methods for CRUD operations on database entities.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Delete an entity from the database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "DeleteAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve all data from a specified table asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "GetAllAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the first element that satisfies the specified condition asynchronously from a given table.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "GetFirstWhereAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a list of items that meet the specified condition asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "GetListWhereAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve an item by its ID asynchronously from a specified table.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "GetByIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Insert a new object into a table and save changes asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "InsertAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Update asynchronously the changes made to the object in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "UpdateAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Add entity to a table without persisting changes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "AddWithoutSaving",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Save all changes made in this context to the underlying database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GenericRepository",
            "method_name": "DoSaveChangesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Contract of the activity tracking repository methods.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Get the repository data for activity trackings for non-apprenticeship projects.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingRepository",
            "method_name": "GetNonApprenticeshipActivityTrackings",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the apprenticheship agreements projects information.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingRepository",
            "method_name": "GetApprenticeshipAgreementProjects",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the previsionnal hours sum before the provided date, for the provided apprenticeship identifier.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingRepository",
            "method_name": "GetPrevisionnalHoursSumBeforeDate",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the previsionnal hours for the provided year and month, for the provided apprenticeship identifier.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingRepository",
            "method_name": "GetPrevisionnalHours",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a connection total duration in seconds, before an end date.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingRepository",
            "method_name": "GetConnectionTotalSecondsBeforeEndDate",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Contract of the Bloc Competence repository methods.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IBlocCompetenceRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a ID through its code, or null.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IBlocCompetenceRepository",
            "method_name": "GetBlocCompetenceIdByCodeAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Contract of the repository for forms.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationGridFormRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Returns information about an empty JotForm's evaluation's grid, or null.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationGridFormRepository",
            "method_name": "GetEvaluationGridInfosAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Returns information about an empty JotForm's evaluation's grid, or null.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationGridFormRepository",
            "method_name": "GetEvaluationGridInfosAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The repository interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumPostRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Deletes the asynchronous.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "DeleteAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets all asynchronous.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "GetAllAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the first where asynchronous.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "GetFirstWhereAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the list where asynchronous.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "GetListWhereAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the by identifier asynchronous.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "GetByIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Inserts the asynchronous.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "InsertAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Updates the asynchronous.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "UpdateAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Adds a new entity without saving changes.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "AddWithoutSaving",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Asynchronously saves all changes made in this context to the underlying database.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IGenericRepository",
            "method_name": "DoSaveChangesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The repository interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IInscriptionMatiereRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a Matiere subscription record, or null if it doesn't already exist.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IInscriptionMatiereRepository",
            "method_name": "GetMatiereSubscriptionAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The repository interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IInscriptionModuleRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a Module subscription record, or null if it doesn't already exist.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IInscriptionModuleRepository",
            "method_name": "GetModuleSubscriptionAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a session subscription record, or null if it doesn't already exist.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IInscriptionPromotionRepository",
            "method_name": "GetSessionSubscriptionAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The repository interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IInscriptionsParcourRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a course subscription record, or null if it doesn't already exist.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IInscriptionsParcourRepository",
            "method_name": "GetCourseSubscriptionAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a courses subscriptions record, or null if it doesn't already exist.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IInscriptionsParcourRepository",
            "method_name": "GetSectorJiraNameByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The repository interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IMatiereRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The repository interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IModuleRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'InscriptionMatiereRepository' is a C# class that allows for the retrieval of Matiere subscription records based on specific criteria, with the option to apply tracking conditions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionMatiereRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a Matiere subscription record based on specified session ID, Matiere ID, school ID, and user ID, returning null if it doesn't exist, with the option to apply tracking conditions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionMatiereRepository",
            "method_name": "GetMatiereSubscriptionAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'InscriptionModuleRepository' is a class that provides methods to retrieve Module subscription records based on session, matiere subscription, and module ID, with the option to use AsNoTracking.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionModuleRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the Module subscription record for a specific session, matiere subscription, and module ID, or null if it doesn't exist, with the option to use AsNoTracking.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionModuleRepository",
            "method_name": "GetModuleSubscriptionAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'InscriptionPromotionRepository' is a class that provides methods to retrieve promotions, promotion registrations, discovery course registrations, and session subscriptions asynchronously based on various user, school, and condition parameters.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionPromotionRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve promotions asynchronously based on user ID, school IDs list, and specific conditions such as date constraints and deletion status, then map the retrieved data to a custom promotion object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionPromotionRepository",
            "method_name": "GetPromotionsAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve promotions for a specified user from a specified school asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionPromotionRepository",
            "method_name": "GetPromotionsFromInscriptionsMatieresAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'InscriptionsParcourRepository' is a C# class that provides methods to retrieve course subscriptions and sector Jira names for users in a school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionsParcourRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the course subscription for a specified course, school, and user, with the option to exclude deleted entries and use tracking information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionsParcourRepository",
            "method_name": "GetCourseSubscriptionAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the Jira name of the sector for a specific user in a school, or null if it does not exist.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "InscriptionsParcourRepository",
            "method_name": "GetSectorJiraNameByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Repository contract for team comments.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamCommentRepository",
            "namespace": "LMS.Repositories.Interfaces",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a team comment by ID.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamCommentRepository",
            "method_name": "GetByIdAsync",
            "namespace": "LMS.Repositories.Interfaces",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Repository contract for team posts.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostRepository",
            "namespace": "LMS.Repositories.Interfaces",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Builds a query to get the team posts including its children (TeamPostsObjects, TeamPostsLikes, TeamComments, TeamCommentsObjects, TeamCommentsLikes).",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostRepository",
            "method_name": "GetTeamPostsQueryIncludingChildren",
            "namespace": "LMS.Repositories.Interfaces",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Builds a query to get one team post including its children (TeamPostsObjects, TeamPostsLikes, TeamComments, TeamCommentsObjects, TeamCommentsLikes).",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostRepository",
            "method_name": "GetTeamPostQueryIncludingChildren",
            "namespace": "LMS.Repositories.Interfaces",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The repository interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the discovery courses for a sector.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourRepository",
            "method_name": "GetDiscoveryCoursesBySectorAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the apprenticeship discovery course.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourRepository",
            "method_name": "GetApprenticeshipDiscoveryCourseAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Get the longterm apprenticeship courses. (the ones in the Coaching Alternance subsector)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourRepository",
            "method_name": "GetLongtermApprenticeshipCoursesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Get the default SchoolId from all Discovery Courses of the Sector",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourRepository",
            "method_name": "GetDiscoveryCoursesDefaultSchoolIdForSectorAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a course information by its code, for subscription purposes.\r\nIf the course is not found, null is returned.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourRepository",
            "method_name": "GetCourseInfoAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Service interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourService",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets the discovery courses for a school and a sector.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourService",
            "method_name": "GetDiscoveryCoursesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get parcours for the user",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourService",
            "method_name": "GetParcoursAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get global progression for the user",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IParcourService",
            "method_name": "GetGlobalProgressByParcoursAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Contract of the repository methods.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IReportConnexionRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Checks whether an evaluation exists or not.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IRessourceRepository",
            "method_name": "DoesEvaluationExistAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a trancked school user entity without any related object.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ISchoolUserRepository",
            "method_name": "GetTrackedSchoolUserOnlyAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Get all the school users attached to the given userId",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ISchoolUserRepository",
            "method_name": "GetSchoolUsersByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The repository interface for the entity.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IThemeRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserEventRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The Get.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserEventRepository",
            "method_name": "DoesEventExist",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The Add.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserEventRepository",
            "method_name": "Add",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Adds an entry and saves it.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserExternalSubscriptionRepository",
            "method_name": "AddAndDoSaveChangesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Get an ongoing subscription by its userId.\r\nOngoing means where \"isRegistered\" is not true (false or Null)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserExternalSubscriptionRepository",
            "method_name": "GetOngoingSubscriptionByUserId",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Get the last userExternalSubscription by creation date using the userId",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserExternalSubscriptionRepository",
            "method_name": "GetLastSubscriptionByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Get the last userExternalSubscription for longterm apprenticeship by creation date using the userId",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserExternalSubscriptionRepository",
            "method_name": "GetUserLongtermDiscoveryCoursesSubscriptionByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The GetUserByEmailAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetUserByEmailAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The GetUserByPseudoIncludingDeletedAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetUserByPseudoIncludingDeletedAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The GetSchoolUserAndStatusAndTypeByUserEmailAndSchoolCodeAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetSchoolUserAndStatusAndTypeByUserEmailAndSchoolCodeAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The GetSchoolUserAndStatusAndTypeByUserEmailAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetSchoolUserAndStatusAndTypeByUserEmailAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a school user information.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetSchoolUserAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets a schools ids user.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetSchoolsIdsUserAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The GetUsersNeedingTrialPeriodEndedReminder.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetUsersNeedingTrialPeriodEndedReminder",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The GetUsersNeedingTrialPeriodHalWayReminder.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetUsersNeedingTrialPeriodHalfWayReminder",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the discovery apprenticeship course users needing trial period halfway reminder.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetDiscoveryApprenticeshipCourseUsersNeedingTrialPeriodHalfWayReminder",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the discovery apprenticeship course users needing trial period ended reminder.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetDiscoveryApprenticeshipCourseUsersNeedingTrialPeriodEndedReminder",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Checks whether a user exists or not.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "DoesUserExistAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Checks whether a user is official (internal) or not (returns null if user isn't found)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "IsUserOfficialAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Checks whether a user is an admin com or not",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "IsUserAdminComAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Get all workgroups related to the specified user (from promotions, parcours, matieres, officials)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetUserWorkgroupsIdsAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Gets the user's types.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserRepository",
            "method_name": "GetUserTypesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "MatiereRepository is a C# class that provides methods to retrieve specific subjects with associated tags from a database, returning MatiereDto objects with subject details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MatiereRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a specific subject with its associated tag by ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MatiereRepository",
            "method_name": "GetMatiereWithTagById",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a specific subject with a corresponding tag code from the database, returning a MatiereDto object with the subject's code, ID, tag ID, and tag label.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MatiereRepository",
            "method_name": "GetMatiereWithTagByCode",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'ModuleRepository' is a C# class that provides methods to retrieve module information by ID or code, including associated tag information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ModuleRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve module information by its ID, including the tag information associated with it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ModuleRepository",
            "method_name": "GetModuleWithTagById",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a module with a specific tag by its code from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ModuleRepository",
            "method_name": "GetModuleWithTagByCode",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'ParcourRepository' is a C# class that provides methods for retrieving and managing various types of course subscriptions and information, such as discovery courses, apprenticeship courses, and course details, in an asynchronous manner.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the discovery courses for a specified sector, handling invalid sector codes and returning an empty collection if the sector code is default.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetDiscoveryCoursesBySectorAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the apprenticeship discovery course subscription for a specified user in a demo environment.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetApprenticeshipDiscoveryCourseAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve long-term apprenticeship courses subscriptions for non-demo users in the coaching alternance subsector and convert them to DTOs in an asynchronous manner.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetLongtermApprenticeshipCoursesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the default school ID for Discovery Courses of the Sector, prioritizing the most common default school or 'STUDI' if evenly numbered, and returning null if no default school is found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetDiscoveryCoursesDefaultSchoolIdForSectorAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a course with a specific tag by its ID asynchronously from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetCourseWithTagByIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a course with a specified tag by its code asynchronously from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetCourseWithTagByCodeAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve course information for a specified course code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetCourseInfoAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve discovery courses subscriptions query based on a specified sector external code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetDiscoveryCoursesBySectorQuery",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the base query for course subscriptions, filtering by demo status, non-deleted courses, and active promotions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourRepository",
            "method_name": "GetBaseQueryForCoursesSubscriptionsQuery",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The 'ReportConnexionRepository' class is responsible for managing and storing report connections. It provides methods for adding, updating, deleting, and retrieving report connections.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnexionRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Summary: 'RessourceRepository' is a class that provides methods for retrieving resource data along with tag information asynchronously, as well as checking the existence of evaluations in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a resource with a specific ID along with its tag information asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceRepository",
            "method_name": "GetRessourceWithTagByIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a resource with a specific code along with its associated tag information asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceRepository",
            "method_name": "GetRessourceWithTagByCodeAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a resource with a specific version ID and return its corresponding resource data with tag information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceRepository",
            "method_name": "GetRessourceWithTagByRessourceVersionIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Check if an evaluation with a specific ID exists and is not deleted in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceRepository",
            "method_name": "DoesEvaluationExistAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'SchoolRepository' is a class that provides methods to retrieve school information from a data cache based on unique identifiers, codes, and organization associations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a school by its unique identifier asynchronously from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolRepository",
            "method_name": "GetByIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a school by its unique code from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolRepository",
            "method_name": "GetByCode",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the IDs of schools associated with a specific organisme ID from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolRepository",
            "method_name": "GetSchoolsIdsByOrganismeId",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve schools by their IDs from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolRepository",
            "method_name": "GetByIds",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve schools from the cache based on specified school codes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolRepository",
            "method_name": "GetByCodes",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve schools based on the code of the organization they belong to.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolRepository",
            "method_name": "GetSchoolsByOrganismeCode",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'SchoolUserRepository' is a class that provides methods to retrieve school user information asynchronously based on various criteria such as user email, school code, and user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolUserRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the school user asynchronously based on the specified user email and school code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolUserRepository",
            "method_name": "GetSchoolUserAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the tracked school user with specific ID, excluding deleted users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolUserRepository",
            "method_name": "GetTrackedSchoolUserOnlyAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve all school users associated with a specific user ID, excluding any deleted users, from the database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolUserRepository",
            "method_name": "GetSchoolUsersByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'SectorRepository' is a class that provides methods to retrieve sector information based on codes, external codes, subsector external codes, and subsector Salesforce labels from a data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SectorRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a sector by its code from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SectorRepository",
            "method_name": "GetSectorByCode",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a sector by its external code from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SectorRepository",
            "method_name": "GetSectorByExternalCode",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the sector based on the external code of its subsector.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SectorRepository",
            "method_name": "GetSectorBySubSectorExternalCode",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the sector based on the subsector Salesforce label.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SectorRepository",
            "method_name": "GetSectorBySubSectorSalesforceLabel",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "TeamCommentRepository is a C# class that provides methods to retrieve team comments, including retrieving a comment by its ID asynchronously and retrieving the base team comment query with optional no tracking and filtering out deleted comments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a team comment by its ID in an asynchronous manner.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentRepository",
            "method_name": "GetByIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the base team comment query with optional no tracking, filtering out deleted comments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentRepository",
            "method_name": "GetBaseQuery",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Global Description: 'TeamPostRepository' is a C# class that provides methods to retrieve and create team posts with various filtering options based on criteria like update date, user ID, school IDs, and prospect status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve team posts for a specified team, filtering by update date, user ID, school IDs, and prospect status if needed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostRepository",
            "method_name": "GetTeamPostsQueryIncludingChildren",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a team post query including children, filtered by ID and potentially by user prospect status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostRepository",
            "method_name": "GetTeamPostQueryIncludingChildren",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the base team post query, including its children (TeamPostsObjects, TeamPostsLikes, TeamComments, TeamCommentsObjects, TeamCommentsLikes), optionally with no tracking enabled, filtered by date and organism ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostRepository",
            "method_name": "GetBaseQueryIncludingChildren",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Create a filter condition based on the specified NewsfeedWallFilterEnum, such as OFFICIAL, PINNED, or MESSAGE, to apply to TeamPost objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostRepository",
            "method_name": "CreateFilterCondition",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "TeamRepository is a C# class that provides methods to retrieve information about teams, including team members, active teams by user ID, and official coaches from active teams based on specific criteria.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a team with its members by team ID asynchronously, including various related entities such as team enrollments, user types, and promotions. If the team does not exist or is disabled, an exception is thrown.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamRepository",
            "method_name": "GetTeamWithMembersByTeamIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve active teams that a user is enrolled in, based on their user ID, excluding disabled teams and teams that have not reached the minimum allowed members, and including information about team enrollments and promotions for those teams.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamRepository",
            "method_name": "GetActiveTeamsByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the official coaches from active teams associated with a specific user ID asynchronously, filtering by animator team enrollment category.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamRepository",
            "method_name": "GetOfficialCoachsFromActiveTeamsByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "ThemeRepository is a C# class that provides methods to retrieve themes with specific tags by ID or code asynchronously from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ThemeRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a theme with a specific tag by its ID asynchronously from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ThemeRepository",
            "method_name": "GetThemeWithTagByIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a theme with a specific code along with its associated tag information asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ThemeRepository",
            "method_name": "GetThemeWithTagByCodeAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'UserEventRepository' is a class that provides methods to check the existence of specific events and add new user events to the database with user ID, school ID, and event type code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserEventRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Check if a specific event exists for a given user, school, and event type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserEventRepository",
            "method_name": "DoesEventExist",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Create a new user event in the database with the specified user ID, school ID, and event type code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserEventRepository",
            "method_name": "Add",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Summary: 'UserExternalSubscriptionRepository' is a C# class that provides methods to manage user external subscriptions, including adding new entries, retrieving ongoing subscriptions, last subscriptions, and longterm discovery courses subscriptions for specified users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserExternalSubscriptionRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Add a new user external subscription entry and save changes asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserExternalSubscriptionRepository",
            "method_name": "AddAndDoSaveChangesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the ongoing subscription for a specified user by checking for a null enrollment date in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserExternalSubscriptionRepository",
            "method_name": "GetOngoingSubscriptionByUserId",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the last external subscription for a specified user ID from the database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserExternalSubscriptionRepository",
            "method_name": "GetLastSubscriptionByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the user's longterm discovery courses subscription by user ID asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserExternalSubscriptionRepository",
            "method_name": "GetUserLongtermDiscoveryCoursesSubscriptionByUserIdAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "The 'UserRepository' class provides various asynchronous methods to retrieve user information, school details, reminders, and user types from the database while ensuring data integrity and privacy settings are maintained.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve user information and their first school by user email and school code asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetUserAndFirstSchoolByUserEmailAndSchoolCodeAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a user by their email address in an asynchronous manner from the database, ensuring the user is not deleted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetUserByEmailAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve a user by their pseudo, including deleted users, from the database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetUserByPseudoIncludingDeletedAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the school user's status and type by user email and school code asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetSchoolUserAndStatusAndTypeByUserEmailAndSchoolCodeAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the school user's status and type by user email asynchronously from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetSchoolUserAndStatusAndTypeByUserEmailAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the information of a school user associated with a specific user ID and school ID, ensuring that the user is not deleted and returning the result asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetSchoolUserAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the IDs of schools associated with a specified user that have not been deleted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetSchoolsIdsUserAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve users who are halfway through their trial period and need a reminder.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetUsersNeedingTrialPeriodHalfWayReminder",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve prospects who need a reminder for their trial period ending in 8 to 15 days.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetUsersNeedingTrialPeriodEndedReminder",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve apprenticeship course users who are halfway through their trial period and in need of a reminder.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetDiscoveryApprenticeshipCourseUsersNeedingTrialPeriodHalfWayReminder",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve apprenticeship course users who need a reminder for the trial period ending within 90 to 95 days.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetDiscoveryApprenticeshipCourseUsersNeedingTrialPeriodEndedReminder",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Check if a user with a specific ID exists in the database and is not marked as deleted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "DoesUserExistAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve whether a user is official or not from the database asynchronously, returning null if the user isn't found or is not official.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "IsUserOfficialAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Check if a user is an admin com or not in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "IsUserAdminComAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs related to the specified user, including promotions, parcours, matieres, and officials, with consideration for privacy settings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetUserWorkgroupsIdsAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve the user types for a specified user ID within a list of specified school IDs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetUserTypesAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Map connected EcoleUser to SchoolUserDto by projecting specific properties.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "BuildConnectedEcoleUserToSchoolUserDtoSelector",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "Retrieve prospects needing reminder for a specified time frame based on enrollment date and subscription type, and return a list of EcoleUser objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserRepository",
            "method_name": "GetProspectsNeedingReminderAsync",
            "namespace": "LMS.Repositories",
            "summary_kind": "method",
            "functional_type": "Repository"
        }
    },
    {
        "page_content": "'ActivityTrackingService' is a class that provides methods to retrieve, compute, and track activity data for users and schools, including apprenticeship projects and delay calculations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve activity trackings for a specified user and school, with retro compatibility mode enabled.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingService",
            "method_name": "GetActivityTrackings",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve non-apprenticeship activity trackings for a specified user and school, filtering out those with no courses or blocks, and transforming the data into a list of activity tracking objects sorted by remaining days.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingService",
            "method_name": "GetNonApprenticeshipActivityTrackings",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the apprenticeship activity trackings for a specified user and school, based on apprenticeship agreement projects information and tracking data from the last full month.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingService",
            "method_name": "GetApprenticeshipActivityTrackings",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Compute various metrics and build a DTO for tracking the activity of an apprenticeship project, including planned and completed hours, completion percentage, remaining hours, delay, and other project details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingService",
            "method_name": "GetApprenticeshipActivityTracking",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Calculate the level of delay for activity tracking based on cumulated remaining hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingService",
            "method_name": "GetDelay",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Compute and return the rounded total connection hours for a specific user and school before a specified end date.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ActivityTrackingService",
            "method_name": "GetRoundedDoneHoursBeforeEndDate",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'ConnectionService' class provides a variety of methods for handling user login, prospect creation, account activation, email sending, subscription management, and password management with error handling and validation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the user's web login is granted based on various conditions such as account existence, password validation, account status, and registration promotions, returning different response codes accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "IsUserWebLoginGrantedAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new prospect for a long-term apprenticeship program, setting enrollment sector if needed, and returning the prospect creation status with a warning if an unrecognized subsector is detected.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "CreateNewProspectLongtermApprenticeshipAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new prospect asynchronously, performing input data validation, prospect creation, and sending appropriate emails, returning prospect creation information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "CreateNewProspectAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Handle the creation of prospects in a batch, validate input data, create prospects, set enrollment sector, and send appropriate emails, with error handling and transaction rollback if needed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "BatchHandleProspectsCreationAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Activate a prospect account asynchronously, checking and updating user information, setting password, subscribing to courses, and handling exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "ActivateProspectAccountAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the user's external subscription is currently active based on the enrollment date being set or not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "IsUserExternalSubscriptionActive",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Send reminder emails to users who are halfway through their trial period, checking if they have already received the reminder and adding an event code if not, also handling a long-term trial reminder for apprenticeship course users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SendTrialPeriodHalfWayReminderAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Send reminder emails to users whose trial period has ended, checking if the reminder has already been sent and adding a user event accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SendTrialPeriodEndedReminderAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Renew an expired account token for a prospect user, checking user and school information, updating user status if needed, sending email notification, and handling potential errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "RenewAccountExpiredTokenAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create and handle a new partner user subscription, including validation of security code, DTO attributes, birth date, school code, existing user, course availability, and sending a welcome email with a generated token.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "HandleNewPartnerUserSubscriptionAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the enrollment sector for a long-term enrollment based on the provided Salesforce subsector code, handling sector selection and setting the sector external code accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SetEnrollementSectorForLongtermEnrollment",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a prospect if it is new, checking if the user already exists in any school and handling different scenarios based on their status and enrollment.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "CreateProspectIfNewAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Validate new prospect input data for lastname, firstname, and email address, returning a status and error message if any data is missing or invalid.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "NewProspectInputDataValidation",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create and send an email to a prospect user based on specified email type, user and school information, with optional phone number formatting and retry mechanism in case of failure.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SendEmailCreateUserProspectAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new MailAddress using the provided address and display name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "ToMailAddress",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Send a welcome conversation to a prospect who subscribed to a discovery course, using the learning department user as the conversation author, with a personalized message and specific recipients.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "AddWelcomeConversationToProspectForDiscoveryCourse",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Subscribe a prospect to all the discovery courses, checking for availability and apprenticeship course subscription if required, and handling exceptions accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SubscribeProspectToDiscoveryCoursesAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Send an email to the new prospect with the appropriate content, based on the prospect creation status and specified email type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SendNewProspectAppropriateEmailAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new user and/or a new school user based on the provided school code and user email. If the user already exists, only a new school user is created for the specified school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "CreateNewUserAndSchoolUser",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Send a welcome email to a partner based on the school code, user information, and template parameters, with error handling for failed email sending.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SendPartnerWelcomeEmailAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Encode a token with expiration and issue date for the password setup endpoint, including user ID, school ID, and issuer information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "GenerateTokenForPasswordSetup",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the password for a specified user asynchronously, returning different activation result codes based on the outcome of the operation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SetUserPasswordAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the user status to active asynchronously, handling different result codes and returning a corresponding prospect activation result code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SetUserStatusActiveAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Add a welcome conversation to a prospect for a discovery course, based on the user ID, user's first name, school ID, and school code, returning a result code indicating success or internal server error.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "AddWelcomeConversationAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Subscribe a user to discovery courses asynchronously and return the activation result based on the subscription status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SubscribeUserToDiscoveryCoursesAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Subscribe a user to longterm discovery courses asynchronously based on specified parameters, returning different prospect activation result codes depending on the subscription result.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SubscribeUserToLongtermDiscoveryCoursesAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Subscribe a prospect to longterm discovery courses, checking for valid user and school IDs, retrieving longterm apprenticeship and discovery courses to create a user course subscription graph with specified start and end dates, handling existing subscriptions and removing duplicates before saving new course subscriptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionService",
            "method_name": "SubscribeProspectToLongtermDiscoveryCoursesAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "This class is a comparer for CourseParcoursMatieresListV3ViewModel objects, providing methods to compare objects for equality and retrieve hash codes based on the ParcoursId property.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseParcoursMatieresListV3ViewModelComparer",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve promotions, courses, and subscribed subjects based on user ID, school IDs, and current date, filtering out optional subjects if not subscribed to.\r\n///",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseService",
            "method_name": "GetParcoursAndMatieres",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the course, subjects, and modules subscribed to by a user based on ongoing promotions, filtering out optional subjects not subscribed to by the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseService",
            "method_name": "GetParcoursMatieresAndModules",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Return the hash code of the ParcoursId property of the input object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseService",
            "method_name": "GetHashCode",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The 'EvaluationService' class provides a wide range of methods for managing evaluations, copies, progress tracking, and user interactions within an educational setting, including functionalities for creating, updating, and validating copies, as well as handling timezones, notifications, and exam session management.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the status and details of a transmitted copy for a specific evaluation, including handling different types of copy submissions and notifications.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "TransmitCopyAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the status and details of a copy, validate it, and send notifications to relevant users based on the evaluation category and the copy's progress.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "ValidateCopyAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a minimal copy of the original with specified date, user, and resources object version, and optionally save to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CreateMinimalCopieOriginalAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a minimal corrected copy asynchronously, adding it to the database if specified and returning the created copy.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CreateMinimalCopieCorrigeeAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a minimal started and corrected copy of the original progress, adding them to the database and returning a list of the created progress objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CreateMinimalStartedAndCorrectedCopieOriginaleAvancementAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a minimal copy of an advancement that has started, with the option to save to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CreateMinimalCopyAvancementStartedAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a minimal copy of avancement with corrected status, user, and date, adding it to the database if specified and returning the created copy.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CreateMinimalCopyAvancementCorrectedAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the resource type with a specific code from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetResourceType",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Convert the date from the server's timezone to the user's local timezone, handling exceptions if user timezone is not defined or recognized.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "ConvertFromServerTimeToUserLocalTime",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the code of a specific type evaluation from the cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetTypeEvaluationCode",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the resource category with a specified code from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetResourceCategory",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the resource type based on the specified resource type ID from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetResourceType",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the evaluation category by its ID from the data cache and return a new EvaluationCategoryViewModel with the code and title.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetEvaluationCategory",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the evaluation type rendu by submit type ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetSubmitType",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the copy status details by its ID from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetCopyStatus",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the current teacher is assigned to a corrected copy associated with the original copy, ensuring that both copies do not have a deletion date specified.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CorrectorIsAffectedToCopie",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the user's timezone name if it is different from the server's timezone name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetUserTimezoneNameIfAboard",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if a user has missed their exam, check if a user began their exam but did not submit their copy before the end of the allowed time, and return the original last status if no calculation is needed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetCopyLastStatus",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the inscription for a specified user and evaluation, with optional filtering by exam session, ensuring only one record is returned and checking for existence if required.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetInscriptionExamenAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the evaluation category is an exam block type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "IsEvaluationTypeBlockExam",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the user's timezone for a specific evaluation if available, otherwise log an error and throw an exception.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetUserTimeZoneAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the local time of a user based on their timezone ID obtained asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetUserLocalTimeAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Convert the current server time to the user's local time based on the provided timezone ID, throwing an exception if conversion fails.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetTimezoneLocalTime",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the user is allowed to begin the exam based on the current time and exam session boundaries, returning a view model with information about exam start authorization, session closure, and time until exam session opens.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CanBeginBlockExam",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the user can submit their exam copy block within the allowed time boundaries and update status if necessary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CanSubmitCopyBlockExamAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the actual start time of the user's exam, based on the earliest recorded start time in the exam progress.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetExamActualUserStartTime",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the end time of the actual user's exam if it has been transmitted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetExamActualUserEndTime",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the local user time when the block exam started, converting it from server time and handling exceptions if the user hasn't started the exam yet or if there are issues with the timezone conversion.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetBlockExamStartTimeLocalUserTime",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Calculate the time left for a user to transmit a block exam copy, taking into account user timezone, exam start time, preparation time, duration, and current local time.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetTimeLeftToTransmitBlockExamCopyAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update specific text elements in a Word document based on predefined keywords, then save and return the modified document as a byte array.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "SearchAndReplace",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the user copy associated with a specific evaluation ID for a given school user, including related resource versions, original copies, and progress statuses, from the database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetUserCopyByEvaluationIdAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the inscription exam details and calculate the exam duration including RQTH and preparation time asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetInscriptionExamenAndIsRqthAndDurationAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Calculate the total duration for the provided exam, including RQTH extra time and preparation time.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetBlockExamTotalDurationAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generate a new authentication token with a duration adapted to the exam length, adding 15 minutes extra time and limiting the validity to a minimum of the nominal token duration and a maximum of 6 hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "CreateSpecificAuthTokenAdaptedToBlockExamDuration",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the specified resource version is a QCM evaluation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "IsQcmEvaluation",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update copies that do not have an original copy and need to be updated to a non-transmitted status based on certain conditions, such as the student not uploading any document.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetCopiesWithNoOriginalCopyAndNeedingToBeUpdatedToNonTransmited",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve copies that have an original copy and need to be submitted, flagging them for status update to \"ENCOURS\" if necessary based on time constraints.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetCopiesWithOriginalCopyAndNeedingToBeSubmited",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update all copies that need to be changed to a status of NONTRANSMIS by fetching ongoing copies with no original copy and updating their status accordingly, returning a list of CopyIds for which the status has been updated.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "UpdateAllNeededCopiesToNonTransmis",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update all copies that have a user copy but have not been submitted, by retrieving copies with original copy and needing to be submitted, updating their status to transmit, and returning a list of CopyId for which the status has been updated.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "SubmitAllCopiesHavingUserCopyButNotSubmited",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the status of ongoing copies to NONPRESENTATION if the user's local time is past the session end date.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "UpdateAllNeededCopiesToNonPresentation",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the acceptance of exam rules for a provided exam entity in the database, with the current date and the user who updated it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "UpdateSetAcceptExamRulesAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the copy status with the provided status code and update the last copy status accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "AddCopyStatusAndUpdateLastCopyStatus",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Add a new copy original status and update the last copy original status based on the provided copy status code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "AddCopyOriginalStatusAndUpdateLastCopyStatus",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the copies to transmit status, by creating a payload for each copy with specific data and transmitting it asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "UpdateCopiesToTransmitStatus",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the inscriptions exams that have no user copy and have a session end date before tomorrow, in batches based on the configured batch size.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetInscriptionsExamensHavingNoUserCopyFinishingBeforeTomorrow",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a user copy with a specific status and reference based on evaluation and user information, storing it in the database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "AddCopyAndNoExaminationCopyStatusAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve copies that need a status update based on specified conditions, including filtering by certain codes and dates, and joining with other related entities to gather necessary information for the update process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetCopiesBeforeUpdateBaseQuery",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Calculate the exam duration, taking into account a potential increase for users with RQTH status and including preparation time information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationService",
            "method_name": "GetExamDurationWithRqthAndPreparationTime",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'EventIdComparer' is a C# class used to compare objects based on their EventId property value. It provides methods to check equality and retrieve the hash code of the EventId property.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventIdComparer",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'EventsService' is a class that provides various methods for retrieving, creating, and managing events, formations, and live sessions for users within a specific school environment.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the list of events with participation status for the current user at a specific school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetLives",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a list of events based on various filters, including user type, promotions, courses, and subjects, with additional information such as participant lists and owner details, and adjust dates to account for server time offset.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetAllLives",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the list of formations that a user is currently subscribed to, including details such as start and end dates, course information, and associated materials.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetFormations",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve events based on the user's promotions, courses, subjects, and school, filtered by search value if provided.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetUsersEventsQueryAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if a user is allowed to access a specific event by their ID and school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "IsUserAllowedToAccessEventAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve live information for a specific event, including details such as title, server URL, schools involved, promotions, subjects, number of posts, and whether to post on a wall based on user type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetLiveInfo",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create and save wall posts to announce the imminent start of a live session, ensuring posts are associated with relevant schools and workgroups, and handling potential exceptions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "CreateAndSavePostsForLiveStart",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a BigBlueButton client with specified server URL and configuration passwords.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetBBBClient",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new meeting on the BigBlueButton server with the provided live information, school DNS, and organization code, handling exceptions and logging errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "CreateBBBMeeting",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Notify users that a live session is about to start, generate a news feed post, publish through SignalR, inform students of the school, show access button, and send event starting soon notification asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "PublishNotificationsForLiveStart",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the query of the current user events based on the selected scope and filters, including options for replays, favorites, and calendar display.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetEventsQueryCorrespondingToThisScope",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the events list based on specified parameters, including filtering by search value, user ID, and scope, and returning a view model containing event details, user details, and event counts.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetEventsList",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve cached event views for events with a duration of at least 60 minutes and no deletion date within the last 12 hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetCachedEventViews",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a mapping expression to transform an Event entity into an EventListingItemV3ViewModel object with specific properties and associations.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetEventListingItemMapExpression",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Calculate the deletion date for a live post based on its creation date and the configured post lifetime in hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetLivePostDateDelete",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs for specified parcours that do not have a matiere ID associated with them.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetParcoursWorkgroupIds",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs associated with promotions specified in a list.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetPromotionWorkgroupIds",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs associated with specified promotions and materials.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetMatiereWorkgroupIds",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve parcours IDs based on specified matiere IDs asynchronously from a database, filtering by matieres that match the specified IDs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "GetParcoursIdsFromMatiereIdsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a list of PostWorkgroups based on the provided workgroup IDs, or return an empty list if no IDs are provided.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventsService",
            "method_name": "CopyPostWorkgroups",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'ExternalAuthenticationService' is a C# class that provides methods to retrieve user information for a specified school user from an external authentication service asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ExternalAuthenticationService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the user information for a specified school user, including their first name, last name, email, school ID, school name, promotion ID, promotion name, parcours ID, and parcours name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ExternalAuthenticationService",
            "method_name": "GetUserInfoAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'FormsService' is a class that provides methods for retrieving, checking, and validating various forms, evaluations, and user information based on specified conditions and constraints.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the list of available registration forms for a specified user based on certain conditions such as user type, user status, form categories, promotions, and form constraints.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "GetFormsAvailableAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the user has access to a form based on various conditions such as form existence, access constraints, submission history, and form availability, returning a response with access status and a reason for any errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "HasAccessToFormsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the status of a specific form submission for a user, including checking if the user has completed the form and if they are authorized to access it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "HasDoneFormAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the evaluation grid information for a specific user, evaluation, and school after checking for their existence and ensuring the evaluation grid information is present.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "GetEvaluationGridInfoAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve information about a JotForm's evaluation grid for a specified user and evaluation, ensuring the necessary checks for user and evaluation existence are performed before returning the grid information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "GetEvaluationGridInfoAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check for the existence of a user and throw an exception if the user record is not found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "DoUserExistenceCheckAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check for the existence of an evaluation record and throw an exception if it is not found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "DoEvaluationExistenceCheckAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Throw an exception if the school record with a specified ID is not found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "DoSchoolExistenceCheckAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Throw an exception if evaluation grid information is not found, including specific user, evaluation, and school IDs if applicable.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FormsService",
            "method_name": "DoEvaluationGridInfoExistenceCheck",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'ForumFormateurService' is a C# class that provides methods for retrieving and managing forum posts and assignments for trainers, including sorting, filtering, and detailed information retrieval.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the list of forum assignments for the trainers, including details such as school, course, subject, module, and theme, sorted by labels.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "method_name": "GetAffectations",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve forum posts based on specified forum type, filters for formateurs, and search terms, sorting and ordering the results accordingly before returning paginated data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "method_name": "GetFormateurForumPosts",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a sorted list of forum posts based on different criteria, including user interaction and specified date, with the ability to filter by start date.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "method_name": "SortingForFormateurForumPostsQuery",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve forum posts based on the affectations of a formateur, filtering them by tags associated with the formateur's parcours, matiere, module, and theme.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "method_name": "FilterOnFormateurAffectations",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a list of forum posts with detailed information about the post owner, category, and related data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "method_name": "ExecuteQueryGetFormateurForumPosts",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve forum post formations from affectations for a specified user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "method_name": "GetFormationsFromAffectations",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve all forum posts for a specified forum type and other filters related to formateurs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "method_name": "GetAllFormateurForumPostsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the number of unhandled forum posts for a specific user asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumFormateurService",
            "method_name": "GetUnhandledForumPostsCountAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'ForumService' is a C# class that provides methods to retrieve and filter forum posts based on various criteria such as parcours, category, acceptance/certification status, tags, user activity, modules, and search terms.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'ForumService' is a class that provides a variety of methods for managing forum-related functionalities, such as retrieving forum categories, posts, and parcours, creating forum questions, and handling data consistency checks and file uploads.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve forum categories based on forum type code from the data cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "GetForumCategoriesByForumType",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the active parcours for a specified user based on their registered promotions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "GetUserRegistedParcoursQuery",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve forum posts based on specified forum type, filters, and user permissions, including sorting, pagination, and filtering by date.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "GetForumPosts",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a forum question with specified data consistency checks, file uploads, category determination, and content forum post handling based on specified course elements.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "CreateForumQuestion",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if the specified course elements exist in the user's parcours JSON while creating a forum post, returning an error message if any element is missing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "CheckCourseElementsExistenceInUserParcoursJsonWhileCreatingForumPostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Save changes made to the data context asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "SaveDataContextChanges",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a list of forum posts with detailed information, including user details, category, and vote/favorite status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "ExecuteQueryGetForumPosts",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve inscriptions promotions query for a specified user and school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "GetUserInscriptionsPromotionsQuery",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Sort forum posts based on different criteria such as newness, popularity, favorites, and user activity, with the default sorting being by update date.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "SortingForForumPostsQuery",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the forum parcours that a user is registered to.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumService",
            "method_name": "GetForumParcours",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "GlobalExamService is a C# class that provides methods to generate a dynamic access URI and a user token for GlobalExam, ensuring all required parameters are present.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "GlobalExamService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Global Description: A class that determines if a user has access to the exam registration form.\r\n\r\nExposed Methods:\r\n1. CheckAccess: Checks if the user has access to the exam registration form.\r\n2. GrantAccess: Grants access to the exam registration form for the user.\r\n3. RevokeAccess: Revokes access to the exam registration form for the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HasAccessTpExamenRegistrationForm",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'HasDoneForm' is a class that tracks whether a specific form has been completed or not.\r\n\r\nExposed Methods:\r\n1. SetFormAsDone() - Marks the form as completed.\r\n2. SetFormAsNotDone() - Marks the form as not completed.\r\n3. CheckIfFormIsDone() - Checks if the form has been completed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HasDoneForm",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\nThe 'Holiday' class represents a holiday event with information such as name, date, and duration.\r\n\r\nMethods:\r\n1. GetName - Gets the name of the holiday.\r\n2. SetName - Sets the name of the holiday.\r\n3. GetDate - Gets the date of the holiday.\r\n4. SetDate - Sets the date of the holiday.\r\n5. GetDuration - Gets the duration of the holiday.\r\n6. SetDuration - Sets the duration of the holiday.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Holiday",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'HolidaysService' is a C# class that provides a method called 'GetHolidaysForPeriodsAsync' to retrieve holidays for a specific country, zip code, and time period, filtering based on the start and end dates of each period.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HolidaysService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve holidays for a specific country, zip code, and time period, filtering based on the start and end dates of each period.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HolidaysService",
            "method_name": "GetHolidaysForPeriodsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Checks if the user is allowed to access the specified event.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEventsService",
            "method_name": "IsUserAllowedToAccessEventAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets a live information.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEventsService",
            "method_name": "GetLiveInfo",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Creates and saves the wall posts to announce that a live is about to start.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEventsService",
            "method_name": "CreateAndSavePostsForLiveStart",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets a BigBlueButton client.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEventsService",
            "method_name": "GetBBBClient",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Creates a new meeting on the BigBlueButton server.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEventsService",
            "method_name": "CreateBBBMeeting",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Publish notifications to announce that a live is about to start.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEventsService",
            "method_name": "PublishNotificationsForLiveStart",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retourne la liste des affectations forum pour le formateurs",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumFormateurService",
            "method_name": "GetAffectations",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retourne la liste des affectations forum pour le formateurs",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumFormateurService",
            "method_name": "GetFormationsFromAffectations",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Sort formateur Forum posts depending on params",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumFormateurService",
            "method_name": "SortingForFormateurForumPostsQuery",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Filter forum posts on formateur affectations",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumFormateurService",
            "method_name": "FilterOnFormateurAffectations",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generic service to retrieve forum posts for a specified forum type and others filters for formateurs",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumFormateurService",
            "method_name": "GetFormateurForumPosts",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generic service to retrieve forum posts for formateurs depending on forumsFormateursFormDTO values\r\nCreated By Sofiane Jamai",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumFormateurService",
            "method_name": "GetAllFormateurForumPostsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generic service to retrieve the number of unhandled forum posts concerning the following user",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumFormateurService",
            "method_name": "GetUnhandledForumPostsCountAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get forum categories by forum type",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumService",
            "method_name": "GetForumCategoriesByForumType",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get query to retrieve all parcours user is registered to",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumService",
            "method_name": "GetUserRegistedParcoursQuery",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get forum posts",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumService",
            "method_name": "GetForumPosts",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create new question into forum",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumService",
            "method_name": "CreateForumQuestion",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get the parcours of a user for the forum dedicated",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IForumService",
            "method_name": "GetForumParcours",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Global Description: CourseCertificateFile is a C# class that represents a file containing a course certificate. It provides methods for generating, saving, and retrieving course certificate files.\r\n\r\n1. GenerateCertificateFile(): Generates a course certificate file.\r\n2. SaveCertificateFile(): Saves the course certificate file to a specified location.\r\n3. GetCertificateFile(): Retrieves the course certificate file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateFile",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CourseCertificateInformations class provides information related to a course certificate, including methods to retrieve and update certificate details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateInformations",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: A class that represents an inscription for a course certificate.\r\n\r\nExposed Methods:\r\n1. AddStudent(string studentName) - Adds a student's name to the course inscription.\r\n2. RemoveStudent(string studentName) - Removes a student's name from the course inscription.\r\n3. GetStudentList() - Retrieves a list of all students enrolled in the course inscription.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateInscription",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: The 'CourseCertificateSchool' class represents a school that offers courses and issues certificates to students upon completion.\r\n\r\n1. Method Name: EnrollStudent\r\nSummary: Enrolls a student in a course at the school.\r\n\r\n2. Method Name: IssueCertificate\r\nSummary: Issues a certificate to a student who has successfully completed a course at the school.\r\n\r\n3. Method Name: UpdateCourseList\r\nSummary: Updates the list of available courses at the school.\r\n\r\n4. Method Name: GenerateReport\r\nSummary: Generates a report of student progress and course completion at the school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateSchool",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\nThe 'CourseCertificateSchoolDetails' class provides details related to a school for issuing course certificates.\r\n\r\nExposed Methods:\r\n1. GetSchoolName() - Retrieves the name of the school.\r\n2. GetSchoolLocation() - Retrieves the location of the school.\r\n3. GetSchoolContactInfo() - Retrieves the contact information of the school.\r\n4. GetSchoolLogo() - Retrieves the logo of the school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateSchoolDetails",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CourseCertificateService is a C# class that provides methods to generate school and training certificates asynchronously, retrieve course certificate information from the database, and generate training information based on specific conditions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generate a school certificate asynchronously based on course and student information, including contract details, student data, and training course information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateService",
            "method_name": "GetSchoolCertificateAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generate a training certificate asynchronously based on course certificate information and selected certificate type, then download the certificate file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateService",
            "method_name": "GetTrainingCertificateAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve course certificate information from the database, including school details, subjects, contract dates, and promotion details based on the provided student, school, and promotion IDs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateService",
            "method_name": "GetCourseCertificateCourseFromDb",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generate trainings for a training certificate, including courses and subjects based on specific conditions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateService",
            "method_name": "GenerateTrainingsForTrainingCertificate",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generate training information for a school certificate based on course details, including subjects, dates, and optional courses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateService",
            "method_name": "GenerateTrainingsForSchoolCertificate",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Global Description: 'CourseCertificateStudent' is a class that represents a student enrolled in a course and their associated certificate.\r\n\r\nExposed Methods:\r\n1. GetName() - Retrieves the name of the student.\r\n2. GetCourse() - Retrieves the course that the student is enrolled in.\r\n3. GetCertificate() - Retrieves the certificate obtained by the student upon completion of the course.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateStudent",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CourseCertificateSubjects class is responsible for managing the subjects included in a course certificate.\r\n\r\n1. AddSubject: Adds a subject to the course certificate.\r\n2. RemoveSubject: Removes a subject from the course certificate.\r\n3. GetSubjects: Retrieves the list of subjects included in the course certificate.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseCertificateSubjects",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'DnsConfigService' class provides methods to retrieve and handle DNS configurations, including retrieving DNS config for a specified host, learning department name, origin/request host, and more.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DnsConfigService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the DNS configuration for the specified host.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DnsConfigService",
            "method_name": "GetDnsConfig",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the learning department name from the DNS configuration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DnsConfigService",
            "method_name": "GetLearningDepartmentName",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the origin or request host from the current HttpContext.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DnsConfigService",
            "method_name": "GetOriginOrRequestHost",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the DNS config for the specified host from the database, handling exceptions if the config is not found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DnsConfigService",
            "method_name": "GetDnsConfigByHostName",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the DNS config with the specified name, handling potential exceptions if the config is not found or found multiple times in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DnsConfigService",
            "method_name": "GetDnsConfigByName",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the DNS config with the specified name, without using cache, handling exceptions if the config is not found or found multiple times in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DnsConfigService",
            "method_name": "GetDnsConfigByNameWithoutCache",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'NotificationService' is a class that provides methods to retrieve and update notification preferences for users in a school system, handling errors and creating view models with notification details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the notification preferences for a user based on their access rights and school user ID, including notification types, notifications, and notification preferences, filtering by enabled notifications and creating a view model with notification details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationService",
            "method_name": "GetUserNotificationPreferences",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the notification preferences for a specified school user by removing old preferences and adding new ones, handling any potential errors during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NotificationService",
            "method_name": "SetUserNotificationPreferences",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'ParcourService' is a C# class that provides methods for retrieving and managing information related to discovery courses, user parcours, global progress, and themes with associated resources asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the discovery courses for a specified sector asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourService",
            "method_name": "GetDiscoveryCoursesAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the default school ID for discovery courses related to a specified sector asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourService",
            "method_name": "GetDiscoveryCoursesDefaultSchoolIdForSectorAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the parcours information for a user based on ongoing promotions and subscriptions, including details about matieres, modules, themes, and resources.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourService",
            "method_name": "GetParcoursAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the global progress for a specified user and school asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourService",
            "method_name": "GetGlobalProgressByParcoursAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve versioned themes with associated resources based on specified module, course, and theme IDs, including details such as name, code, availability date, image URL, description, duration, order, and resource information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourService",
            "method_name": "GetVersionnedThemes",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve themes with specific criteria and map them to a ViewModel dictionary for caching.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcourService",
            "method_name": "GetThemes",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'RegionalSettings' class provides methods to retrieve the time zone ID for a specified user based on their actual location or address, with a fallback to the default timezone if necessary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettings",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the time zone ID for a specified user, prioritizing their actual location timezone and fallback to their address timezone if available, otherwise return the default timezone.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegionalSettings",
            "method_name": "GetUserTimeZoneId",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ServiceAccessService is a class that provides methods to retrieve, activate, and report service access information for users, including URLs, activation status, and authentication tokens, with checks for service type and publication status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve service access information for a specified user and service code, including details such as URL, activation status, and access end date, with additional checks for service type and publication status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessService",
            "method_name": "GetServiceAccessByCodeAndEcoleUserId",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the url and token for a specified service, based on the user's school or partner DNS configuration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessService",
            "method_name": "GetUrlFromTokenByService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Activate a service for a specified user, checking for valid service code, user ID, and accessibility before updating the activation date and returning the service access URL with activation details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessService",
            "method_name": "ActivateService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Extract the current authorization token from the HTTP request headers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessService",
            "method_name": "getCurrentToken",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the GUID of a user associated with a specific school user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessService",
            "method_name": "getUserGuid",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new report service access entry in the database with the specified service code, user ID, and school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ServiceAccessService",
            "method_name": "ReportServiceAccess",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Global Description: The 'UserService' class provides methods for managing user data, including retrieving user IDs, creating new users, updating passwords, and checking user statuses and passwords against specified rules.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the user ID associated with a specified email address.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "GetPedagoUserIdFromEmailAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Generate an available pseudo by combining the first letter of the first name, the full last name in uppercase, and a number if needed based on existing pseudos in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "GetAvailablePseudoAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new user with specified details and insert it into the database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "CreateNewUserAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new Ecole user with specified user, school, user status, and user type, and insert it into the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "CreateNewEcoleUserAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the information of a school user with the specified user ID and school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "GetSchoolUserAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the password for a specified user in the database after validating and hashing it, with the option to save changes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "SetUserPasswordAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the school user status code based on the provided parameters, handling error cases and saving changes if specified.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "SetSchoolUserStatusAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if a given password meets the specified rules for validation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "ValidatePasswordRules",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if a user is a prospect using cached user types data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserService",
            "method_name": "IsUserProspectUsingCacheAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'WorkgroupService' is a class that provides methods to retrieve workgroup IDs for users and filter workgroups based on specified criteria.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "WorkgroupService",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs for a specified user with optional privacy settings and school IDs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "WorkgroupService",
            "method_name": "GetUserWorkgroupsAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Filter workgroups by excluding those associated with specified parcours codes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "WorkgroupService",
            "method_name": "GetDcgDscgWorkgroupFilterAsync",
            "namespace": "LMS.Services.Implementations",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Replace any school host with the current host into the posts bodies.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "INewsfeedPostService",
            "method_name": "ReplaceAnySchoolHostWithCurrentHost",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the methods contracts.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get activity trackings.\r\n1 ligne par formation par defaut\r\n1 ligne par bloc pour les parcours compétences.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingService",
            "method_name": "GetActivityTrackings",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get activity trackings for non-apprenticeship projects.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingService",
            "method_name": "GetNonApprenticeshipActivityTrackings",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get activity trackings for apprenticeship projects.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IActivityTrackingService",
            "method_name": "GetApprenticeshipActivityTrackings",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new prospect for long-term apprenticeship (parcours découverte 90j pour l'alternance).",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "method_name": "CreateNewProspectLongtermApprenticeshipAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create prospect if new (for the specified school)\r\nFor genuine new users (for this school), create it and send him account validation email.\r\nFor existing users, send him email corresponding to its status.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "method_name": "CreateNewProspectAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Activates a prospect account.\r\nThis action activates the user account, sets its password and does the discovery courses registration.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "method_name": "ActivateProspectAccountAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The SendTrialPeriodHalfWayReminderAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "method_name": "SendTrialPeriodHalfWayReminderAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The SendTrialPeriodEndedReminderAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "method_name": "SendTrialPeriodEndedReminderAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The RenewAccountExpiredTokenAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "method_name": "RenewAccountExpiredTokenAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Handles a new partner user subscription.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "method_name": "HandleNewPartnerUserSubscriptionAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Handle batch prospects creation.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IConnectionService",
            "method_name": "BatchHandleProspectsCreationAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ICourseCertificateService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetSchoolCertificateAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ICourseCertificateService",
            "method_name": "GetSchoolCertificateAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetTrainingCertificateAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ICourseCertificateService",
            "method_name": "GetTrainingCertificateAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get the DNS config",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IDnsConfigService",
            "method_name": "GetDnsConfig",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get the DNS config for the specified Host",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IDnsConfigService",
            "method_name": "GetDnsConfigByHostName",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get the DNS config with the specified name",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IDnsConfigService",
            "method_name": "GetDnsConfigByName",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get the DNS config with the specified name, without cache.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IDnsConfigService",
            "method_name": "GetDnsConfigByNameWithoutCache",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets the learning department name.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IDnsConfigService",
            "method_name": "GetLearningDepartmentName",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The IsQcmEvaluation.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "IsQcmEvaluation",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The TransmitCopyAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "TransmitCopyAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The ValidateCopyAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "ValidateCopyAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CreateMinimalCopieOriginal.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CreateMinimalCopieOriginalAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CreateMinimalCopieCorrigee.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CreateMinimalCopieCorrigeeAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CreateMinimalStartedAndCorrectedCopieOriginaleAvancement.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CreateMinimalStartedAndCorrectedCopieOriginaleAvancementAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CreateMinimalCopyAvancementStarted.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CreateMinimalCopyAvancementStartedAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CreateMinimalCopyAvancementCorrected.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CreateMinimalCopyAvancementCorrectedAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetResourceType.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetResourceType",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Localized date from:  server -> UTC -> user local time.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "ConvertFromServerTimeToUserLocalTime",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetTypeEvaluationCode.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetTypeEvaluationCode",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetExamActualUserStartTime.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetExamActualUserStartTime",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetExamActualUserEndTime.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetExamActualUserEndTime",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The IsEvaluationTypeBlockExam.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "IsEvaluationTypeBlockExam",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetResourceCategory.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetResourceCategory",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetResourceType.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetResourceType",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetEvaluationCategory.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetEvaluationCategory",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetSubmitType.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetSubmitType",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetCopyStatus.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetCopyStatus",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CorrectorIsAffectedToCopie.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CorrectorIsAffectedToCopie",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetUserTimezoneNameIfAboard.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetUserTimezoneNameIfAboard",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CalculateCopyLastStatus.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetCopyLastStatus",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetInscriptionExamen.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetInscriptionExamenAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetUserTimeZone.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetUserTimeZoneAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetUserLocalTime.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetUserLocalTimeAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetTimezoneLocalTime.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetTimezoneLocalTime",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CanBeginBlockExam.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CanBeginBlockExam",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CanSubmitCopyBlockExam.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CanSubmitCopyBlockExamAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetBlockExamStartTimeLocalUserTime.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetBlockExamStartTimeLocalUserTime",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetTimeLeftToTransmitBlockExamCopy.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetTimeLeftToTransmitBlockExamCopyAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The SearchAndReplace.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "SearchAndReplace",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetUserCopyByEvaluationId.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetUserCopyByEvaluationIdAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetIsRqthAndDuration.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetInscriptionExamenAndIsRqthAndDurationAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get the Total Duration Of the provided InscriptionExamen including RQTH extra time and preparation time",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetBlockExamTotalDurationAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create Specific Token Adapted To Exam Duration",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "CreateSpecificAuthTokenAdaptedToBlockExamDuration",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "GetCopiesWithUnrelevantOngoingStatuses.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetCopiesWithOriginalCopyAndNeedingToBeSubmited",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetCopiesWithNoUserCopyAndNeedingToBeUpdated.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "GetCopiesWithNoOriginalCopyAndNeedingToBeUpdatedToNonTransmited",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The UpdateAllNeededCopiesToNonTransmis.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "UpdateAllNeededCopiesToNonTransmis",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "UpdateAllNeededCopiesToEnCours.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "SubmitAllCopiesHavingUserCopyButNotSubmited",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "UpdateAllNeededCopiesToNonPresentation.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "UpdateAllNeededCopiesToNonPresentation",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Set exam's rules as accepted for the provided exam entity and save to DB",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IEvaluationService",
            "method_name": "UpdateSetAcceptExamRulesAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IExternalAuthenticationService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetUserInfoAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IExternalAuthenticationService",
            "method_name": "GetUserInfoAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IFormsService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetFormsAvailableAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IFormsService",
            "method_name": "GetFormsAvailableAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The HasAccessToFormsAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IFormsService",
            "method_name": "HasAccessToFormsAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The HasDoneFormAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IFormsService",
            "method_name": "HasDoneFormAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Returns information about an empty JotForm's evaluation's grid.\r\nAn exception may be thrown if any required information is not found.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IFormsService",
            "method_name": "GetEvaluationGridInfoAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Returns information about an empty JotForm's evaluation's grid.\r\nAn exception may be thrown if any required information is not found.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IFormsService",
            "method_name": "GetEvaluationGridInfoAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IHolidaysService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetHolidaysForPeriodsAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IHolidaysService",
            "method_name": "GetHolidaysForPeriodsAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetEvaluation.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "method_name": "GetEvaluation",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetOrCreateIfNotExistCopyUser.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "method_name": "GetOrCreateIfNotExistCopyUser",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The AddIsogradTestIdToCopy.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "method_name": "AddIsogradTestIdToCopy",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetCompleteCopyUserByTestIdAnCreateCopieOriginaleAndCorrigee.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "method_name": "GetCompleteCopyUserByTestIdAnCreateCopieOriginaleAndCorrigee",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The SaveJsonResult.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "method_name": "SaveJsonResult",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The SavePdfResult.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "method_name": "SavePdfResult",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CreateCopieAvancementStarted.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "method_name": "CreateCopieAvancementStarted",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The SendCopieUserWithSignalR.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradCopyService",
            "method_name": "SendCopieUserWithSignalR",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The CreateCandidateAndTakeTest.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradService",
            "method_name": "CreateCandidateAndTakeTest",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetResultAsJson.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradService",
            "method_name": "GetResultAsJson",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetResultAsPdf.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradService",
            "method_name": "GetResultAsPdf",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if student has got a CPF funding agreement",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IIsogradService",
            "method_name": "DetectIfCPFAgreementAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IProctoringService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "GetUserInfosByEmail.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IProctoringService",
            "method_name": "GetUserInfosAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "GetBlockExamSessionInfos.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IProctoringService",
            "method_name": "GetBlockExamSessionInfosAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "GetUserBlockExamSessionInfos.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IProctoringService",
            "method_name": "GetUserBlockExamSessionInfosAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Insert only one log in repôrtConnexion table",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IReportConnectionService",
            "method_name": "InsertOnlyOneAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update connection according an user (for keep alive or close connection)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IReportConnectionService",
            "method_name": "UpdateConnectionAccordingAnUserAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update connection according a session (for keep alive or close connection)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IReportConnectionService",
            "method_name": "UpdateConnectionAccordingASessionAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get a log according a pair userId/schoolId OR a userId/sessionId",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IReportConnectionService",
            "method_name": "GetAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get consildated time about an user",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IReportConnectionService",
            "method_name": "GetConsolidatedTimeAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Add complete report logs for mobile apps",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IReportConnectionService",
            "method_name": "AddMobileConnectionAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get weekly logs according a pair userId/schoolId",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IReportConnectionService",
            "method_name": "GetWeekLyLogsAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get ressources types for events",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IRessourceService",
            "method_name": "GetEventsRessourcesTypes",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get ressource type from the extension",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IRessourceService",
            "method_name": "GetEventsRessourceTypeFromExtension",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ISchoolService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetSchoolIdByCode.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ISchoolService",
            "method_name": "GetSchoolIdByCode",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The UpdateLastConsolidationDateAsync.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ISchoolService",
            "method_name": "UpdateLastConsolidationDateAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetSchoolConfig.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ISchoolService",
            "method_name": "GetSchoolConfigByCode",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets a school by its identifier.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ISchoolService",
            "method_name": "GetSchoolByIdAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get service by code",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IServiceAccessService",
            "method_name": "GetServiceAccessByCodeAndEcoleUserId",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Activate service",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IServiceAccessService",
            "method_name": "ActivateService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Add report service",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IServiceAccessService",
            "method_name": "ReportServiceAccess",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Make user disconnect from web LMS session specified in token (Logout)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ISessionService",
            "method_name": "LogoutWebAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Team newsfeed comment service contract.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamCommentService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Creates a new team post comment and returns its ID.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamCommentService",
            "method_name": "CreateNewTeamPostCommentAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Likes a team comment.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamCommentService",
            "method_name": "LikeTeamCommentAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Unlikes a team comment.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamCommentService",
            "method_name": "LikeTeamCommentUndoAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Deletes a team comment.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamCommentService",
            "method_name": "DeleteTeamCommentAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Team newsfeed post service contract.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets a team post by its ID.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "GetTeamPostByIdAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Creates a new team post.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "CreateNewTeamPostAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Deletes a team post.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "DeleteTeamPostAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets a collection of team posts for a school, a user, and a beginning date.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "GetTeamPostsAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets a team post for a school and a user.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "GetTeamPostAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Likes a post.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "LikePostAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Unlikes a post.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "LikePostUndoAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Pins a post.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "PinPostAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Unpins a post.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "PinPostUndoAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Hides a team post to prospects.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "HideToPropectsAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets a team post and checks for prerequisites (access to the team...).",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamPostService",
            "method_name": "GetTeamPostAndCheckForPrerequisitesAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Throws an exception if the team access is not granted.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITeamService",
            "method_name": "ValidateTeamAccessOrThrowAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Bulk Create Traces For Specified Users' Ids About Internal Rules Approval",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITraceService",
            "method_name": "CreateTracesForUsersInternalRulesApproval",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Fetch UsersIds Which Are Missing Traces About Internal Rules Approval",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "ITraceService",
            "method_name": "GetUsersIdsMissingTracesForInternalRulesApproval",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Creates a new user.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserService",
            "method_name": "CreateNewUserAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Creates a new school user.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserService",
            "method_name": "CreateNewEcoleUserAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Gets a school user information.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserService",
            "method_name": "GetSchoolUserAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Sets a user password.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserService",
            "method_name": "SetUserPasswordAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Sets a school user status.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserService",
            "method_name": "SetSchoolUserStatusAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Validates a password with the following rules:\r\nat least 8 characters,\r\nat least 1 numeric character,\r\nat least 1 lowercase letter,\r\nat least 1 uppercase letter,\r\nat least 1 special character.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserService",
            "method_name": "ValidatePasswordRules",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Checks whether a user is a prospect for a school.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserService",
            "method_name": "IsUserProspectUsingCacheAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "BulkInsert everything from the graph",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserSubscriptionService",
            "method_name": "SaveNewCourseSubscriptionsFromGraph",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Subscribe the user to a new course. Doesn't save change in the database.\r\nIf no graph is set in the model, create a new one and return it.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserSubscriptionService",
            "method_name": "GetNewUserCourseSubscriptionGraphAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Remove the whole subscription to a course for a user.\r\nWarning : DESTRUCTIVE ACTION",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IUserSubscriptionService",
            "method_name": "RemoveExistingSubscriptionToCourseIfExistsAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Filter workgroup if user parcours not contains DCG or DSCG",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IWorkgroupService",
            "method_name": "GetDcgDscgWorkgroupFilterAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Get all workgroups related to the specified user (from promotions, parcours, matieres, officials)",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IWorkgroupService",
            "method_name": "GetUserWorkgroupsAsync",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Defines the .",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IXmlService",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The GetSingleNodeValue.",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IXmlService",
            "method_name": "GetSingleNodeValue",
            "namespace": "LMS.Services.Interfaces",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "IsogradCopyService is a class that provides various methods for managing and manipulating Isograd copy user information, including retrieving evaluation data, creating copies, updating test IDs, saving results, sending notifications, and more.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve evaluation information and related data for a specific user based on their current progress and school, including title, description, score, maximum score, advancement code, notice URL, corrected copy, and additional score information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "GetEvaluation",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create or retrieve a copy of a user for a specified evaluation ID and school user ID, returning the complete copy user information by the copy user's ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "GetOrCreateIfNotExistCopyUser",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the Isograd test ID for a specified copy, along with the date and user who made the update, and save changes to the database, handling any potential errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "AddIsogradTestIdToCopy",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the complete copy user by test ID, create original and corrected copies if they do not exist, and save the changes to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "GetCompleteCopyUserByTestIdAnCreateCopieOriginaleAndCorrigee",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the note, maximum note, comment, user update and date update for a corrected copy, then update the final note, maximum note, comments, user update and date update for a user's copy, and save the changes to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "SaveJsonResult",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Upload a PDF file to a specified upload manager URL and save the result in the database, handling exceptions and logging errors if necessary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "SavePdfResult",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new copy advancement if none in progress, updating the last copy advancement code and saving it to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "CreateCopieAvancementStarted",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Send a copy of the Isograd user to online users with SignalR.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "SendCopieUserWithSignalR",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the copy user for a specified school user ID, evaluation ID, and non-deleted copy.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "GetCopyUser",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a complete copy of a user including their school, user information, copy details, resource version, resource, and Isograd evaluation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "GetCompleteCopyUserIncludes",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a complete copy user by the specified copy user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "GetCompleteCopyUserByCopieUsersId",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a copy of a user with specific details and save it to the database, including setting up the copy status, reference, and other necessary information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "CreateCopyUser",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the necessary information from the user's copy to create a new IsogradCopy object, including the reference, score, score maximum, last advancement code, notice URL, and corrected copy details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradCopyService",
            "method_name": "GetIsogradCopyFromCopieUser",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "IsogradService is a class that provides methods for creating candidates, retrieving test results in JSON or PDF format, detecting CPF agreements, and creating various models related to user information and resources.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a candidate and take a test, sending necessary information and handling potential errors, then return the test URL.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "method_name": "CreateCandidateAndTakeTest",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the result as JSON for a user, including various models, and handle any errors that may occur during the process.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "method_name": "GetResultAsJson",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the test results as a PDF for a user, handle potential errors and save the PDF result if successful.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "method_name": "GetResultAsPdf",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Detect if a CPF funding agreement exists for a specific user and copy ID, based on certain conditions, and return a boolean value.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "method_name": "DetectIfCPFAgreementAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new LisPersonModel object with attributes copied from a specified user's information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "method_name": "newLisPersonModel",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new Tosa context model with specified Id, Label, Title, and Type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "method_name": "newTosaContextModel",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new custom model with specific properties based on data from a user and their associated resources.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "method_name": "newTosaCustomModel",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new TosaResourceLinkModel object with a specific Id and Title based on data from a copied user's resource version evaluation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "IsogradService",
            "method_name": "newTosaResourceLinkModel",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The 'JwPlayerFileNotFoundException' class represents an exception that is thrown when a JW Player file is not found. It provides error handling for situations where a JW Player file cannot be located.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwPlayerFileNotFoundException",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Summary: 'JWPlayerService' is a class that provides methods to retrieve video and audio resources from JWPlayer repository, including download links, HLS links, and validation checks for input values.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a video from JWPlayer repository using the specified repository name and video ID, with proper validation checks for empty or null values.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerService",
            "method_name": "GetVideo",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the video information from a unique resource identifier, filtering by resource type, active status, and matching resource version.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerService",
            "method_name": "GetVideoFromRessourceUniqueId",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the download link for a specified type of video or audio with optional video quality specification from a video resource unique ID. If the requested type is audio, return the URL for the first audio source, if available. If the requested type is video and a specific video quality is specified, return the URL for the video source with that quality. If no matching audio or video sources are found, throw a JwPlayerFileNotFoundException.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerService",
            "method_name": "GetDownloadLink",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the HLS link for a specified resource unique ID, returning the URL if available, otherwise throwing a JwPlayerFileNotFoundException.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JWPlayerService",
            "method_name": "GetHlsLink",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'NewsfeedCommentService' is a C# class that handles commenting on posts, including checking user permissions, creating new comments, sending notifications, and deleting comments with appropriate permissions and updates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedCommentService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check if a user can comment on a post based on their rights and workgroup memberships.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedCommentService",
            "method_name": "CanPostBeCommentedAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new comment on a post with specified text, user ID, and associated files, updating the post's last update date if needed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedCommentService",
            "method_name": "CreateNewPostCommentAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Send a notification and update the newsfeed with a new comment asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedCommentService",
            "method_name": "NotifyOnCommentCreationAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Delete a comment asynchronously if the user has the appropriate permissions, update the comment's deletion date and user, and notify relevant clients through a hub.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedCommentService",
            "method_name": "DeleteCommentAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'NewsfeedPostService' is a class that provides methods for creating, retrieving, updating, and deleting posts in a newsfeed, as well as handling notifications and audience targeting.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new post based on user input, with specific post type and workgroup requirements, extracting hashtags and uploading associated files, then saving and returning the post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "CreateNewPostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a post by its ID asynchronously, including related user, workgroups, and events, filtering out any deleted posts.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "GetPostByIdAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Send notifications to specific groups or users when a new post is created, based on its privacy settings and workgroups, and enqueue a background job to handle additional notifications if needed.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "NotifyOnPostCreationAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Delete a post asynchronously, checking permissions and updating deletion information before saving changes and notifying relevant clients.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "DeletePostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the audience workgroups for a specific post, based on user permissions and post attributes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "GetAudienceAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update a post to make it public by adding the default school workgroup, updating the date and user, and saving changes to the database, with necessary validations and exception handling.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "MakePublicAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the 'HideToProspects' property of a post with the specified ID, after checking user rights and post existence.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "SetHideToPropectAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the post type asynchronously based on certain conditions like post formation tab, user type, ownership, and comments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "GetPostTypeAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Replace any school host in the posts' bodies with the current host.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedPostService",
            "method_name": "ReplaceAnySchoolHostWithCurrentHost",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'NewsfeedRightsService' is a C# class that provides methods to check and retrieve user rights for specific post types, enabling determination of allowed actions based on user roles and permissions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedRightsService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the user rights for a specific post type and determine if a certain action is allowed based on the user's role and permissions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedRightsService",
            "method_name": "CheckRight",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'NewsfeedService' class provides methods to handle newsfeed posts, comments, and filtering conditions for retrieving and managing wall posts for users with various access permissions and filtering criteria.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Return the newsfeed post service.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedService",
            "method_name": "Post",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Return the newsfeed comment service.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedService",
            "method_name": "Comment",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a paginated list of wall posts for a specified user, considering various filtering conditions and workgroup access permissions, along with user and post data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedService",
            "method_name": "GetWall",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a filter condition based on the specified NewsfeedWallFilterEnum, returning a lambda expression to filter posts accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedService",
            "method_name": "CreateFilterCondition",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a filter condition to hide posts from prospects based on the current user's status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedService",
            "method_name": "CreateHideToProspectFilterCondition",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a filter condition based on specified tag IDs, allowing only posts with matching tags to pass through.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedService",
            "method_name": "CreateTagsFilterCondition",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a condition based on workgroup, user workgroups, school IDs, and post ownership.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedService",
            "method_name": "CreateWorkgroupCondition",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Global Description: The 'Period' class represents a time period with start and end dates.\r\n\r\nMethods:\r\n1. GetStart(): Retrieves the start date of the period.\r\n2. GetEnd(): Retrieves the end date of the period.\r\n3. GetDuration(): Calculates and returns the duration of the period in days.\r\n4. OverlapsWith(Period otherPeriod): Checks if the current period overlaps with another period.\r\n5. ContainsDate(DateTime date): Checks if a specific date falls within the period.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Period",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ProctoringService' class provides methods to retrieve user information, exam session details, and proctoring information from the database for evaluation purposes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve user information, evaluation data, and user inscription exam details from the database and return a view model with the user's basic information and timezone ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringService",
            "method_name": "GetUserInfosAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve information about a specific block exam session, including details such as school, parcours, promotion, evaluation block, resource, scheduled start and end times, and exam duration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringService",
            "method_name": "GetBlockExamSessionInfosAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve all necessary information related to a user's block exam session, including user details, evaluation details, session timing, and proctoring information, and return it as a view model.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ProctoringService",
            "method_name": "GetUserBlockExamSessionInfosAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "RegistrationFormInfo class is used to store information related to a registration form. It includes methods such as GetFullName() which returns the full name of the user, GetEmail() which returns the email address of the user, and GetPhoneNumber() which returns the phone number of the user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RegistrationFormInfo",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'ReportConnectionService' class provides methods for inserting, updating, retrieving, and managing connection logs for specified users, schools, and sessions in a system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Insert only one log entry asynchronously with specified user, connection details, and device information, and return the inserted log entry ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "method_name": "InsertOnlyOneAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update a connection log for a specified user according to given parameters, closing the connection if specified, or keeping it alive if not.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "method_name": "UpdateConnectionAccordingAnUserAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the connection status according to a session, either keeping it alive or closing it with a specified deconnection mode.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "method_name": "UpdateConnectionAccordingASessionAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the log data for a specified user with optional school and session filters.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "method_name": "GetAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the total consolidated working time for a specified user in a particular school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "method_name": "GetConsolidatedTimeAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Add mobile connection asynchronously by posting mobile reports for a specified user after transforming null values.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "method_name": "AddMobileConnectionAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve weekly logs for a specified user and school ID asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "method_name": "GetWeekLyLogsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the log request object by replacing any null values with default values if applicable.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ReportConnectionService",
            "method_name": "TransformNullValues",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'RessourceService' is a C# class that provides methods for retrieving and handling event resource types, including getting resource types based on specified codes and extensions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the resource types for events that match the specified codes, ordered by label.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceService",
            "method_name": "GetEventsRessourcesTypes",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the resource type for a specified extension from a list of event resource types, handling any exceptions by logging an error message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RessourceService",
            "method_name": "GetEventsRessourceTypeFromExtension",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'SchoolService' is a class that provides methods for retrieving and updating school information, such as configuration data, IDs, and last consolidation dates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the school configuration data by code, including various details such as name, website, telephone, and email addresses.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolService",
            "method_name": "GetSchoolConfigByCode",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the school ID based on a given school code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolService",
            "method_name": "GetSchoolIdByCode",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the last consolidation date for a specified school.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolService",
            "method_name": "UpdateLastConsolidationDateAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a school by its ID asynchronously, throwing an exception if the school is not found.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolService",
            "method_name": "GetSchoolByIdAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Global Description: 'SchoolServiceHelper' is a C# class designed to assist in retrieving and managing school-related data for users, including merging schools, retrieving actual school lists, and handling merged organisms IDs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SchoolServiceHelper",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'SessionService' class provides methods for managing user sessions, including creating user devices, starting sessions, checking session status, and updating session information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new user device if it does not already exist in the database, and return the device ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionService",
            "method_name": "GetOrCreateUserDeviceAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Start a session asynchronously, capturing various user and device information, including user agent, device ID, IP address, and time zone, for each school ID in a list.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionService",
            "method_name": "StartSessionAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Determine if the user agent is from a mobile device based on specific conditions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionService",
            "method_name": "IsMobileDevice",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the connection status according to a session ID retrieved from a validated token payload.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionService",
            "method_name": "KeepSessionAliveAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Check the validity of a session token and determine if a new token is needed based on the remaining time before expiration.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionService",
            "method_name": "CheckSessionStatus",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update session status by checking token validity, retrieving session status, and performing actions based on the status such as generating a new token or closing the session if the token has expired.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionService",
            "method_name": "CheckAndUpdateSessionStatusAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update a user's connection status according to a session ID and disconnection mode.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SessionService",
            "method_name": "LogoutWebAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new comment on a team post with optional uploaded files, update the team post, and return the created comment as a viewmodel.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentService",
            "method_name": "CreateNewTeamPostCommentAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the likes on a team comment, ensuring that the current user has not already liked it, and increment the comment's score before saving the changes and retrieving the user's information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentService",
            "method_name": "LikeTeamCommentAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Undo the like on a team comment, after checking if the user has previously liked it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentService",
            "method_name": "LikeTeamCommentUndoAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Delete a team comment after checking if the user is the owner or an official user, then log the deletion by updating the comment's deletion date and user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentService",
            "method_name": "DeleteTeamCommentAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a team comment with its parent team post asynchronously, while performing sanity checks and ensuring access to the team post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentService",
            "method_name": "GetTeamCommentWithParentTeamPostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "This class represents a comment made by a team member on a post belonging to their parent team. It contains methods for adding, editing, and deleting comments.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamCommentWithParentTeamPost",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'TeamPostService' is a class that provides various methods for managing team posts, including creating, retrieving, liking, pinning, hiding, and deleting posts, as well as checking for prerequisites and generating view models.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a team post by its ID, including related team events posts and event types, ensuring the post has not been deleted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "GetTeamPostByIdAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new team post with specified content, tags, files, and associated team, and save it to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "CreateNewTeamPostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Delete a team post asynchronously, checking if the user is the owner or an official user before logically deleting it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "DeleteTeamPostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve team posts, including users, for a specified team ID with validation checks and filtering options.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "GetTeamPostsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a team post and associated users, convert it to a view model, replace any school host with the current host, and return a view model containing the post and users.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "GetTeamPostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Like a team post asynchronously, checking for prerequisites and updating post likes if not already liked by the current user, then retrieve the user's information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "LikePostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Remove the user's like on a team post and update the post score accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "LikePostUndoAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Pin a team post if it is not already pinned, update deletion date if necessary, and save changes to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "PinPostAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the pinned property of a team post to mark it as not pinned, after performing sanity checks and verifying that the post is currently pinned.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "PinPostUndoAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Update the 'HideToProspects' property of a team post, along with the date and user who made the update, after performing sanity checks and getting the necessary data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "HideToPropectsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the team post and check for prerequisites asynchronously, including validating team access and user prospect status.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "GetTeamPostAndCheckForPrerequisitesAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a view model for a newsfeed post based on a team post, including details such as post ID, creation date, body, likers, user, views, attachments, comments, and visibility to prospects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamPostService",
            "method_name": "GetTeamPostMapExpression",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "TeamService is a class that provides methods to retrieve information about teams and their members, validate team access, and retrieve official coaches of active teams.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve a team with its members by team ID, ensuring that the connected user is a member of the team to access the information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamService",
            "method_name": "GetTeamWithMembersByTeamIdAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve active teams for a specified user ID and school ID asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamService",
            "method_name": "GetActiveTeamsByUserIdAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve active teams for a specified user ID asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamService",
            "method_name": "GetActiveTeamsByUserIdAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the official coaches of active teams by user ID asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamService",
            "method_name": "GetTeamsOfficialCoachsByUserIdAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Throw an exception if the current user does not belong to the specified team and cannot access its posts.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TeamService",
            "method_name": "ValidateTeamAccessOrThrowAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'`TraceService` is a class that handles the creation and retrieval of traces for users' internal rules approval, ensuring proper tracking and error handling during database operations.'",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create new traces for specified users regarding the internal rules approval, checking for existing traces and user acceptance status, and handling errors during database save.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceService",
            "method_name": "CreateTracesForUsersInternalRulesApproval",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Retrieve the users' Ids who have accepted internal rules but do not have a trace of internal rules approval created yet, considering both new and older trace formats.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TraceService",
            "method_name": "GetUsersIdsMissingTracesForInternalRulesApproval",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "The 'UserInfo' class is used to store and manage user information. It includes methods for setting and retrieving user details such as name, age, and email address.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserInfo",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'UserSubscriptionService' class provides methods for managing user subscriptions to courses, sessions, matieres, bloc competences, and modules, including saving, updating, and removing subscriptions in bulk and individually.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Save new course subscriptions from a given graph by using bulk insert.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "SaveNewCourseSubscriptionsFromGraph",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create or update a user's course subscription graph asynchronously, checking and instantiating a new graph if none exists.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "GetNewUserCourseSubscriptionGraphAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Remove existing subscription to a course if it exists, by deleting related entries in various repositories based on user, school, and course subscription information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "RemoveExistingSubscriptionToCourseIfExistsAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Validate the subscription details of a user to a course model, ensuring all parameters are valid and not null.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "CheckSubscribeUserToCourseModel",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Subscribe a user to a course and its sessions, creating a new subscription entry in the database with the specified user, school, and course information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "SubscribeUserToCourseAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a subscription for a user to a session, including subscribing the user to related matieres and bloc competences within the session.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "SubscribeUserToSessionAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Subscribe a user to a Matiere along with its Modules, creating a new InscriptionMatiere and subscribing to each Module if available.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "SubscribeUserToMatiereAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a new subscription for a user to a BlocCompetence, with specified details such as start and end dates and coefficient.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "SubscribeUserToBlocCompetenceAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Create a subscription for a user to a module with specified details, and add it to the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "SubscribeUserToModuleAsync",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "Save course subscription data using bulk insert for various entities such as parcours, matieres, blocs competences, modules, and promotions in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UserSubscriptionService",
            "method_name": "SaveCourseSubscriptionGraphUsingBulkInsert",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'XmlService' is a C# class that provides methods to retrieve a single node value from an XML string based on a specified key, handling various scenarios efficiently.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "XmlService",
            "namespace": "LMS.Services",
            "summary_kind": "method",
            "functional_type": "Service"
        }
    },
    {
        "page_content": "'ConnectionMapping' is a class that manages connections within conversations, allowing for adding, retrieving, and removing connection IDs efficiently.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionMapping",
            "namespace": "LMS.SignalR",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a new entry in the dictionary with the given key and add the specified connection ID to it, handling potential failures.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionMapping",
            "method_name": "Add",
            "namespace": "LMS.SignalR",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Add a range of connection Ids to a conversation's existing list of connection Ids, creating a new list if necessary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionMapping",
            "method_name": "AddRange",
            "namespace": "LMS.SignalR",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the connection Ids associated with a given key, excluding those belonging to a specified user if provided.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionMapping",
            "method_name": "GetConnectionsIds",
            "namespace": "LMS.SignalR",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Remove a specific connection Id from a conversation, and if the connection Id is the last one in the conversation, remove the entire conversation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionMapping",
            "method_name": "Remove",
            "namespace": "LMS.SignalR",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Bulk remove connection Ids associated with a conversation Id, and if the connection Id list becomes empty, remove the conversation Id from the dictionary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionMapping",
            "method_name": "RemoveRange",
            "namespace": "LMS.SignalR",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'CourseHub' is a class that manages report activities for courses, allowing users to start, stop, and update their activity status with relevant information stored in the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CourseHub",
            "namespace": "LMS.SignalR.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'EvaluationHub' is a class designed to manage and store evaluations for a variety of purposes.\r\n\r\nMethods:\r\n1. AddEvaluation: Adds a new evaluation to the hub.\r\n2. GetEvaluationById: Retrieves an evaluation by its unique ID.\r\n3. GetAllEvaluations: Retrieves all evaluations stored in the hub.\r\n4. UpdateEvaluation: Updates an existing evaluation in the hub.\r\n5. DeleteEvaluation: Removes an evaluation from the hub.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EvaluationHub",
            "namespace": "LMS.SignalR.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ForumHub is a C# class that serves as a central hub for forum-related functionalities.\r\n\r\nMethods:\r\n1. CreatePost() - Creates a new post in the forum.\r\n2. EditPost() - Edits an existing post in the forum.\r\n3. DeletePost() - Deletes a post from the forum.\r\n4. GetPosts() - Retrieves all posts from the forum.\r\n5. AddComment() - Adds a comment to a post in the forum.\r\n6. DeleteComment() - Deletes a comment from a post in the forum.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ForumHub",
            "namespace": "LMS.SignalR.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: The 'LiveHub' class manages report activities for replays, allowing users to start, stop, create, and close report activities while updating relevant database information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveHub",
            "namespace": "LMS.SignalR.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create report activity for replays with user ID, event ID, school ID, and user device information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveHub",
            "method_name": "StartReportActivity",
            "namespace": "LMS.SignalR.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Close report activity for the current user identified by their user ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveHub",
            "method_name": "StopReportActivity",
            "namespace": "LMS.SignalR.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Close the report activity associated with a user if it exists, calculating the duration of the replay/event and updating the database accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveHub",
            "method_name": "CloseReportActivityForReplays",
            "namespace": "LMS.SignalR.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a new report activity for replays, updating the duration of an existing report activity if it exists, and associating the user with the new report activity.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "LiveHub",
            "method_name": "CreateReportActivityForReplays",
            "namespace": "LMS.SignalR.V1",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ConnectionV2Hub' class manages user connections, updates online user lists, and handles user disconnections and reconnections, while also informing clients about connection status and managing user devices in the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Connect the user to the system if not already impersonating, log any exceptions that occur, and then call the base class' OnConnected method.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "method_name": "OnConnected",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Update the online user list with the user's connection information and notify clients about the connection.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "method_name": "ConnectUserRoutine",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Remove the user's session and update the online users list if the user is disconnected, logging any errors that occur.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "method_name": "OnDisconnected",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Update the list of online users with the current user's information and connection details when the user reconnects to the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "method_name": "OnReconnected",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Update all clients with the count of online users, send the list of online users to the current user, and notify other clients when a user logs in.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "method_name": "KeepClientsInformedAboutConnection",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a new user device entry in the database if it does not already exist, based on the provided user ID, Ecole ID, and device information.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "method_name": "GetOrCreateUserDevice",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the list of online users and their connection details, including mobile and web status, for a specified school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "method_name": "GetOnlineUsersAsync",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Check if the current HttpContext is impersonating an admin by decoding the admin token from the request headers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ConnectionV2Hub",
            "method_name": "IsImpersonating",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'NewsfeedV2Hub' is a class that handles real-time notifications for comments, likes, and posts in a newsfeed, as well as managing user connections based on school and workgroups.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Notify other clients that a comment has been deleted for a specific post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "method_name": "CommentDeleted",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Notify other clients when a comment is liked on a specific post.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "method_name": "CommentLiked",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Broadcast the publication of a comment on a specific post to all other clients.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "method_name": "CommentPublished",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Add the user to specific groups based on their school and workgroups upon connection.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "method_name": "OnConnected",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Remove user and workgroup connections when disconnected from the server.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "method_name": "OnDisconnected",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Notify all other clients that a post has been deleted by sending the post ID as a parameter.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "method_name": "PostDeleted",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Notify other clients that a post has been liked by a specific user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "method_name": "PostLiked",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Broadcast the publication of a newsfeed post to all other clients.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NewsfeedV2Hub",
            "method_name": "PostPublished",
            "namespace": "LMS.SignalR.V2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Summary: 'SimpleInjectorHubActivator' is a class that allows for the instantiation and retrieval of a specified hub type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SimpleInjectorHubActivator",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Instantiate and return an instance of a specified hub type.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SimpleInjectorHubActivator",
            "method_name": "Create",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'Startup' class is responsible for configuring various services, repositories, and dependencies using SimpleInjector and OWIN middleware, as well as setting up JSON formatting, logging, Hangfire, SignalR, Swagger documentation, API version support, and AutoMapper for the LMS API.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Configure various services, repositories, and dependencies, including authentication, caching, database contexts, and API routes using SimpleInjector and OWIN middleware.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "method_name": "Configuration",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Update the JSON configuration settings to remove XML formatting, preserve references, ignore reference loops, and format dates in a specific way.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "method_name": "ConfigureJson",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Configure the Hangfire storage options, queues, dashboard, and server for the specified site name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "method_name": "ConfigureHangfire",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Configure the SignalR pipeline to handle requests starting with \"/signalr\", set up CORS middleware, enable JSONP for older browsers, and run the SignalR pipeline under the specified path with a disconnect timeout of 90 seconds.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "method_name": "ConfigureSignalr",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Configure logging settings for Serilog, including enriching log data with various request and user information, setting machine and school properties, and writing logs to a MySQL database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "method_name": "ConfigureSerilog",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Configure Swagger documentation for multiple versions of the LMS API, including descriptions and authorization token support.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "method_name": "ConfigureSwagger",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Determine if a specified API version is supported based on the controller namespace.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "method_name": "VersionSupportResolver",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Configure AutoMapper by creating a new MapperConfiguration instance, loading all profiles from the LMS namespace, registering the instance in the container, and creating a mapper using the container's instance.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Startup",
            "method_name": "ConfigureAutoMapper",
            "namespace": "LMS",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ApiUploadHelpers is a C# class that provides methods to validate and process upload requests, including checking for valid sources, file sizes, types, and uploading details to a resources server asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiUploadHelpers",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate the upload request by checking for a valid source, allowed upload sources, presence of uploaded file, file size, allowed file type, and setting file details accordingly.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiUploadHelpers",
            "method_name": "CheckUploadRequest",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Validate multiple file upload requests, checking file sizes, types, and details before processing.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiUploadHelpers",
            "method_name": "CheckMultipleUploadRequest",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Upload file details, source, user ID, and school ID to the resources server asynchronously, handling potential errors and returning an upload response.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ApiUploadHelpers",
            "method_name": "UploadToRessourcesServerAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Creates a new Context",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IBbActions",
            "method_name": "CreateContextAsync",
            "namespace": "LMS.Utils.BBCollaborate",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Creates an interview between multiple users (at least one teacher and one student).",
        "metadata": {
            "struct_type": "Interface",
            "struct_name": "IBbActions",
            "method_name": "CreateInterviewAsync",
            "namespace": "LMS.Utils.BBCollaborate",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "BbbCallbackHeader is a C# class that represents the header information for a callback in a BigBlueButton integration. It contains methods for setting and getting callback header properties such as event name, meeting ID, and timestamp.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BbbCallbackHeader",
            "namespace": "LMS.Utils.BigBlueButton",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\n\r\nBigBlueButtonCallback is a C# class that handles callback events and responses from the BigBlueButton API. It contains methods for processing various types of callback data.\r\n\r\nExposed Methods:\r\n1. ProcessMeetingEndedEvent - Processes data when a meeting has ended.\r\n2. ProcessRecordingStatusEvent - Processes data related to recording status updates.\r\n3. ProcessParticipantJoinedEvent - Processes data when a participant joins a meeting.\r\n4. ProcessParticipantLeftEvent - Processes data when a participant leaves a meeting.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BigBlueButtonCallback",
            "namespace": "LMS.Utils.BigBlueButton",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'EventInformation' is a C# class that contains information about an event, including methods to retrieve and update event details.\r\n\r\nMethods:\r\n1. GetEventDetails() - Retrieves details of the event.\r\n2. UpdateEventDetails() - Updates the details of the event.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventInformation",
            "namespace": "LMS.Utils.BigBlueButton",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\nMeetingCreatedPayload is a C# class that represents a payload containing information about a newly created meeting.\r\n\r\nExposed Methods:\r\n1. GetMeetingId - Retrieves the unique identifier of the created meeting.\r\n2. GetMeetingTitle - Retrieves the title of the created meeting.\r\n3. GetMeetingDate - Retrieves the date of the created meeting.\r\n4. GetOrganizer - Retrieves the organizer of the created meeting.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "MeetingCreatedPayload",
            "namespace": "LMS.Utils.BigBlueButton",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'RecordPublishedPayload' represents a data structure that contains information about a published record. It includes methods for retrieving and updating the record details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "RecordPublishedPayload",
            "namespace": "LMS.Utils.BigBlueButton",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "BBBV2Attributes is a C# class that contains methods for handling attributes related to version 2 of BBB (Big Blue Button) integration.\r\n\r\nExposed methods:\r\n1. GetMeetingID: Retrieves the meeting ID associated with the BBB V2 attributes.\r\n2. GetJoinURL: Generates the join URL for the meeting using the BBB V2 attributes.\r\n3. GetRecordings: Retrieves the recordings related to the meeting using the BBB V2 attributes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BBBV2Attributes",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'BBBV2Data' is a C# class that contains methods for handling and manipulating data related to version 2 of the BBB system.\r\n\r\nMethods:\r\n1. GetDataById(int id) - Retrieves data by its unique identifier.\r\n2. UpdateData(int id, string newData) - Updates the data with the specified identifier with new information.\r\n3. DeleteData(int id) - Deletes data based on the given identifier.\r\n4. GetAllData() - Retrieves all data stored in the BBBV2Data class.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BBBV2Data",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "BBBV2Event class represents an event in the BBBV2 system. It includes methods for managing and handling events.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BBBV2Event",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'BBBV2EventType' defines different types of events such as meeting creation and ending of a published rap session.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "BBBV2EventType",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "BBBV2Meeting class represents a meeting object with methods for scheduling, updating, and canceling meetings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BBBV2Meeting",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: BBBV2Playback is a C# class designed for managing playback operations in version 2 of the BBB system.\r\n\r\nMethods:\r\n1. Play(): Initiates playback of the selected media.\r\n2. Pause(): Pauses the current playback.\r\n3. Stop(): Stops the current playback and resets to the beginning.\r\n4. SeekTo(double time): Seeks to a specific time in the media playback.\r\n5. SetVolume(int volume): Sets the volume level for the playback.\r\n6. Mute(): Mutes the playback audio.\r\n7. Unmute(): Unmutes the playback audio.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BBBV2Playback",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: BBBV2Recording is a C# class that represents a recording in version 2 of the BBB system.\r\n\r\nExposed Methods:\r\n1. StartRecording() - Starts recording the session.\r\n2. StopRecording() - Stops recording the session.\r\n3. PauseRecording() - Pauses the recording of the session.\r\n4. ResumeRecording() - Resumes the recording of the session.\r\n5. GetRecordingStatus() - Retrieves the current status of the recording.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BBBV2Recording",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "BBBV2RecordingMetadata is a class that contains metadata information for a recording in BBBV2 system.\r\n\r\nExposed methods:\r\n1. GetRecordingId() - Gets the unique identifier of the recording.\r\n2. GetRecordingName() - Gets the name of the recording.\r\n3. GetRecordingDate() - Gets the date of the recording.\r\n4. GetRecordingDuration() - Gets the duration of the recording.\r\n5. GetRecordingSize() - Gets the size of the recording file.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "BBBV2RecordingMetadata",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'EventInformationV2' is a class that contains methods to manage and retrieve information related to events.\r\n\r\nMethods:\r\n1. GetEventDetails - Retrieves details of a specific event.\r\n2. UpdateEventDetails - Updates the details of a specific event.\r\n3. AddNewEvent - Adds a new event to the system.\r\n4. DeleteEvent - Deletes a specific event from the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EventInformationV2",
            "namespace": "LMS.Utils.BigBlueButtonV2",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: CacheKeys is a C# class that provides a set of methods for generating and managing keys used in caching data.\r\n\r\nExposed Methods:\r\n1. GenerateUserKey: Generates a unique key for caching user data.\r\n2. GenerateProductKey: Generates a key for caching product data.\r\n3. GenerateCustomKey: Generates a custom key for caching data based on input parameters.\r\n4. IsValidKey: Checks if a given key is valid for caching purposes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CacheKeys",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'DataCache' class provides methods to retrieve various types of data from the database with caching enabled for efficient access and performance.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve all active forum types from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetForumTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the forum categories for a specified forum type, excluding any categories that have been deleted, ordered by their display order.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetForumCategories",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a forum category by its ID from the database, including the associated forum type, ensuring it is not deleted or expired.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetForumCategoryById",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the legal notices data from the database with a cache timeout of twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetLegalNotices",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of event types from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetEventTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of phone number types from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetPhoneNumberTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of user feedback types from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetFeedbackTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of user types from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetUserTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of notification types from the database with caching enabled for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetNotificationTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of convention contract types from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetConventionContractTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of resource types from the database without tracking changes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetResourceTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of rejection motives from the database, with a caching mechanism in place to avoid frequent database calls.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetRejectionMotives",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of exam statuses from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetExamStatuses",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of professional experience contract types from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetProExpContractTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the list of forum vote types from the database with caching for 12 hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetForumVoteTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of financeurs with their data stored in cache for twelve hours, if available, otherwise fetch data from the database and return it.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetFinanceurs",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of recommended resources from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetResourceRecommandation",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of resources version motives from the database with no tracking enabled and cache the result for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetResourceVersionMotives",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of TypeEnvoi objects from the database with no tracking.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetTypeEnvoi",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of version types from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetVersionTypes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the statuses of copies from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetCopyStatuses",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of ParcoursThemes from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetParcoursThemes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of evaluation categories from the database with a cache timeout of twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetEvaluationCategories",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of type evaluations from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetTypesEvaluations",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the list of evaluation mode correction modes from the database with caching for 12 hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetEvaluationCorrectionModes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of countries from the database with a caching mechanism that expires every twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetCountries",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of EvaluationTypeRendu objects from the database with no tracking enabled and cache the result for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetEvaluationTypeRendu",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of servers from the cache with a timeout of twelve hours, or fetch from the database if not available.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetServers",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the statuses of all advisors from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetConseillersStatuses",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of resource categories from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetResourceCategories",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of professional situations with caching for a specified time period from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetProfessionalSituations",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of diplomas from the database with no tracking enabled and cache the result for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetDiplomes",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of TypeVoie objects from the database with no tracking enabled and cache the result for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetTypeVoies",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the list of user statuses from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetUserStatuses",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the satisfaction levels data from the database with caching for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetNiveauSatisfaction",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of Parcours Categories from the database with no tracking enabled and cache it for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetParcoursCategories",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the list of parcours niveaux from the database with no tracking.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetParcoursNiveaux",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the list of frequency gratifications with caching for a specified time period.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetFrequenceGratifications",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of momentjournees with caching for a specified duration from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetMomentJournee",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the list of week days from the database with a caching mechanism that expires every twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetWeekDays",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of ConventionStageStatuts from the database with no tracking.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetConventionStageStatuts",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of convention stage file categories from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetConventionStageFileCategories",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of form categories from the database with a cache timeout of twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetFormCategories",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of platforms from the database with a cache timeout of twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetPlatforms",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of sectors with their corresponding sub-sectors from the database, caching the result for twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetSectors",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of schools with their associated data, including the organization, DNS configuration, and access rights, from the database.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetSchools",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of DNS configurations from the database with caching for one hour.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetDnsConfigs",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve thumbnails for modules with their corresponding filenames from the database and cache them with a three-hour timeout.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetModulesThumbnails",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve thumbnails for all subjects with their respective IDs and filenames from the database, with caching for three hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetMatieresThumbnails",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs associated with a user in specified schools, considering privacy settings and based on their promotions and subjects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetUserWorkgroups",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the official workgroups for a specified school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetOfficielsWorkgroups",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the official workgroup IDs for specified school IDs.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetOfficielsWorkgroups",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the promotion IDs for a specified user based on certain conditions, including school IDs and access dates.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetUserPromotionIds",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the matiere IDs for a specified user within certain school IDs that have not been deleted.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetUserMatiereIds",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs that have parcours associated with specific promotions and without any specific matiere ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetParcoursWorkgroupIds",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs associated with promotions based on specified conditions.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetPromotionWorkgroupIds",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the workgroup IDs that have specific promotions and subjects, with an option to consider privacy settings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetMatiereWorkgroupIds",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the default school workgroup ID for a specified school ID by accessing the cache or database if necessary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetDefaultSchoolWorkgroupId",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the latest versions of active and available resources, including associated resource objects and metadata, sorted by version numbers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetResourcesVersionsEx",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a collection of user types for the provided user ID and the provided schools IDs asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetUserTypesAsync",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve metadata objects from the database with a cache timeout of twelve hours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetResourceObjectsMeta",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve a list of tags for the newsfeed, excluding promo tags, ordered by name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetNewsfeedTags",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the list of forum tags that are associated with forum posts, ordered by name.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DataCache",
            "method_name": "GetForumTags",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "TagDto is a data transfer object class used to represent a tag entity in the system.\r\n\r\nExposed methods:\r\n1. GetName() - Retrieves the name of the tag.\r\n2. SetName(string name) - Sets the name of the tag.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TagDto",
            "namespace": "LMS.Utils.Cache.Dtos",
            "summary_kind": "method",
            "functional_type": "TransferObject"
        }
    },
    {
        "page_content": "TCache is a C# class used for retrieving and storing objects in cache, either synchronously or asynchronously, with the ability to generate data if not already cached.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TCache",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve an object from cache if available, otherwise generate it using a specified function and store it in cache for a defined period of time.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TCache",
            "method_name": "Get",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve data from cache if available, otherwise fetch data asynchronously and store in cache for future use.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "TCache",
            "method_name": "GetAsync",
            "namespace": "LMS.Utils.Cache",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Class 'Calendar' provides methods to calculate and retrieve dates of Easter, Easter Monday, Ascension, Pentecost, Pentecost Monday, holidays, and determine the next working day, excluding Pentecost as a holiday.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Calendar",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ChunkHelper' is a C# class that provides a method to split a list of items into chunks of a specified size.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ChunkHelper",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ControllerHelper' is a utility class designed to assist in retrieving school IDs, checking user roles, and retrieving school codes based on authentication and configuration settings in a C# application.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ControllerHelper",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "DateTimeExtensions is a class that provides various methods for manipulating and calculating dates and times, including finding the first day of the week, retrieving the first Monday and last Sunday of a trimester, calculating the days and years between dates, checking if the time difference is greater than a year, adding working days to a date, calculating the number of working days between dates, and converting DateTime to the local time zone.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DateTimeExtensions",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'Decode64Helper' is a C# class that provides a method to decode a string from Base64 encoding to UTF-8 format.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Decode64Helper",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Summary: 'DictionaryHelper' is a C# class that provides methods for merging dictionaries and retrieving values with error handling.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "DictionaryHelper",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'EmailParameters' is a C# class that contains parameters for sending emails, including information such as sender, recipient, subject, and body.\r\n\r\nMethods:\r\n1. SetSender: Sets the email sender.\r\n2. SetRecipient: Sets the email recipient.\r\n3. SetSubject: Sets the email subject.\r\n4. SetBody: Sets the email body.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EmailParameters",
            "namespace": "LMS.Utils.Email",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ProspectEmailType' is an enum that represents different types of emails that can be sent to prospects such as students, sign-ups, password resets, account status notifications, and trial period reminders.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "ProspectEmailType",
            "namespace": "LMS.Utils.Email",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "This class provides extension methods for converting between Entity DTOs and View Models in C#, including methods for initializing mappers, creating DTO objects, lists of DTO objects, and view models based on entity data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Initialize the mapper if it is currently null.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "InitMapper",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a DTO object based on the provided team entity data, handling null cases appropriately.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToDto",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a list of TeamMemberDto objects based on the input teamMembersEntities, with additional data such as user information, membership type, profile picture path, and Blackboard Collaborate URL for the connected user.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToTeamMembersDtos",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a DTO object containing team information and its members' information, with specified conditions for user and school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToTeamWithMembersDto",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Convert a list of teams to a list of TeamDto objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToDtos",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a new TeamWithMembersVM object based on the provided teamWithMembersDto data, converting the Team object to a TeamWithMembersVM object and keeping the Members list as is.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToVM",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Convert a list of team data transfer objects to a list of team view models.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToVM",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a new TeamVM object based on the provided TeamDto data, returning null if the data is null.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToVM",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a data transfer object from a course element entity, including its code, ID, tag ID, and tag label. If the course element entity is null, return null.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToDto",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a DTO object based on the properties of a given course element entity, including code, ID, tag ID, and tag label. If the course element entity is null, return null.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToDto",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a DTO object from a course element entity, including specific properties.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToDto",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a DTO object with specific properties from a course element entity, handling null cases.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionExtensionMethods",
            "method_name": "ToDto",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "This class provides methods for converting between Entity DTOs and View Models.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EntityDtoAndVMConversionProfile",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "EnumExtensions is a C# class that provides a method called ToStringArray which converts enum values to strings and returns an array of strings.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "EnumExtensions",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'FileDetails' is a class that provides a string representation of the filename and local filename.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FileDetails",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a string representation of the filename and local filename.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "FileDetails",
            "method_name": "ToString",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'Helpers' class provides various utility methods for tasks such as extracting hashtags, normalizing strings, calculating MD5 hashes, formatting phone numbers, validating email addresses, and more.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Helpers",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Summary: 'HttpContextExtension' is a C# class that provides methods to retrieve and handle host and origin information from HTTP requests efficiently.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HttpContextExtension",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'HubHelper' class provides methods to retrieve user and device information, such as current user Id, mobile device detection, school ID based on code, and user device info based on authentication token and headers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "HubHelper",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'JwPlayerHelper' is a C# class designed to assist in retrieving the best quality video or audio URL for a specified media ID using the JW Player platform, while also handling potential errors.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "JwPlayerHelper",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Convert the number into a human-readable size format, such as byte, kilobyte, megabyte, etc.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "NumberExtensions",
            "method_name": "ToPrettyPrintSize",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'Parser' class reads and deserializes JSON content from a specified file into a list of 'PrcrsParcours' objects, with error handling capabilities.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "Parser",
            "namespace": "LMS.Utils.Parcours",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'PrcrsMatiere' is a C# class that handles the processing of materials. It contains methods for adding, updating, and deleting materials.\r\n\r\nMethods:\r\n1. AddMatiere: Adds a new material to the system.\r\n2. UpdateMatiere: Updates an existing material with new information.\r\n3. DeleteMatiere: Deletes a material from the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PrcrsMatiere",
            "namespace": "LMS.Utils.Parcours",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description:\r\nThe 'PrcrsModule' class is a module that provides various processing functionalities.\r\n\r\nExposed Methods:\r\n1. ProcessData: Processes the input data.\r\n2. ValidateData: Validates the input data.\r\n3. SaveData: Saves the processed data.\r\n4. UpdateData: Updates the processed data.\r\n5. DeleteData: Deletes the processed data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PrcrsModule",
            "namespace": "LMS.Utils.Parcours",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Global Description: 'PrcrsParcours' is a class designed to manage and track progress in a parcours or course.\r\n\r\nExposed Methods:\r\n1. StartParcours() - Starts the parcours.\r\n2. EndParcours() - Ends the parcours.\r\n3. UpdateProgress(int progress) - Updates the progress in the parcours.\r\n4. GetProgress() - Retrieves the current progress in the parcours.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PrcrsParcours",
            "namespace": "LMS.Utils.Parcours",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "PrcrsRessource is a C# class that provides methods for managing resources efficiently. Methods include:\r\n1. LoadResource - Loads a resource from a specified location.\r\n2. SaveResource - Saves a resource to a specified location.\r\n3. UpdateResource - Updates a resource with new data.\r\n4. DeleteResource - Deletes a resource from the system.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PrcrsRessource",
            "namespace": "LMS.Utils.Parcours",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Represents a collection of resource objects used for processing tasks.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PrcrsRessourceObjects",
            "namespace": "LMS.Utils.Parcours",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "PrcrsTheme is a C# class that represents a theme for a processing application. It includes methods for setting the theme color, font, and style.\r\n\r\nMethods:\r\n1. SetThemeColor - Sets the color of the theme.\r\n2. SetThemeFont - Sets the font of the theme.\r\n3. SetThemeStyle - Sets the style of the theme.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PrcrsTheme",
            "namespace": "LMS.Utils.Parcours",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'ParcoursMapper' is a class that provides methods to map and transform parcours, matieres, modules, themes, resources, blocs, evaluations, and evaluation modules into JSON objects.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursMapper",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ParcoursReader is a class that provides methods for retrieving, caching, and managing various parcours hierarchies, JSON data, courses, and evaluations asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Set a version flag for parcours retrieval.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "SetVersion",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Return a singleton instance of a specified object.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "RegisterSingletonInstance",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Return the ParcoursReader singleton instance, throwing an exception if it has not been instantiated yet.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetSingleton",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Update the directory for parcours files if a new directory is provided.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "SetParcoursFilesDir",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve and cache all published parcours hierarchy asynchronously, using either version 1 or version 2 depending on a specified condition.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetAndCacheAllPublishedParcoursHierarchyAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve all published parcours hierarchy from the database, cache them, and return them as a concurrent dictionary.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetAndCacheAllPublishedParcoursHierarchyV1Async",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve and cache all published parcours hierarchies asynchronously, by fetching parcours list with hierarchy and storing them in a concurrent dictionary in memory cache.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetAndCacheAllPublishedParcoursHierarchyV2Async",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Create a cache policy with an absolute expiration time based on a specified delay.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetCachePolicy",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the JSON data for a specific user's parcours at a specified school ID.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetParcoursJsonAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the JSON representation of parcours for the user, filtering by school if provided, and returning a dictionary of parcours codes and corresponding details.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetParcoursJsonAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve and cache all published parcours hierarchies based on specified parcours codes.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetParcoursJsonAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve and cache a JSON representation of a parcours by its ID, using memory cache if available and handling exceptions if the parcours cannot be loaded.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetAndCacheParcoursJsonByParcoursIdAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve the JSON data for a specific parcours code from a cached list of published parcours hierarchies.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetParcoursJsonAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve and return a list of published parcours in JSON format.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetParcoursJsonAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve courses and evaluations asynchronously for a specified evaluation code.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetCoursesAndEvaluationsAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Retrieve courses, evaluations, and associated information based on specified evaluation codes from a database asynchronously.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ParcoursReader",
            "method_name": "GetCoursesAndEvaluationsAsync",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "'PersonalInfoRegex' is a C# class that provides methods for reformatting phone numbers, validating French social security numbers, and checking the format and key of social security numbers.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "PersonalInfoRegex",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Enum 'SizeUnits' represents different size units ranging from Byte to Yottabyte (YB). Each member has a corresponding integer value.",
        "metadata": {
            "struct_type": "Enum",
            "struct_name": "SizeUnits",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "SMTPMail is a class designed to handle sending emails asynchronously with SSL encryption, error handling, and the ability to customize email content using Razor templating.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "SMTPMail",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'StringExtensions' class provides methods to manipulate strings, including converting to camel case, snake case, and retrieving values from dictionaries with null handling.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "StringExtensions",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "The 'UploadResponse' class represents the response received after uploading a file, providing methods to access and manipulate the upload status and data.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "UploadResponse",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "WebsiteConfiguration class represents the configuration settings for a website. It includes methods for retrieving and updating the website's configuration settings.\r\n\r\n1. GetConfigurationSettings(): Retrieves the current configuration settings for the website.\r\n2. UpdateConfigurationSettings(): Updates the configuration settings for the website.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "WebsiteConfiguration",
            "namespace": "LMS.Utils",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CreateContextResponse class represents the response object for creating a new context in the system.\r\n\r\nMethods:\r\n1. CreateContextResponse() - Initializes a new instance of the CreateContextResponse class.\r\n2. SetSuccess(string message) - Sets the response as successful with the specified message.\r\n3. SetError(string message) - Sets the response as an error with the specified message.\r\n4. GetResponseMessage() - Gets the response message.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CreateContextResponse",
            "namespace": "Studi.BBCollab.DataLayer.Responses",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "CreateInterviewResponse is a C# class used to represent the response generated when creating a new interview. It includes methods such as GetInterviewId() to retrieve the unique identifier of the created interview and GetStatus() to check the status of the operation.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "CreateInterviewResponse",
            "namespace": "Studi.BBCollab.DataLayer.Responses",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "ResponseBase is a C# class that provides a method to convert the object to a JSON string without formatting.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResponseBase",
            "namespace": "Studi.BBCollab.DataLayer.Responses",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    },
    {
        "page_content": "Convert the object to a JSON string without formatting.",
        "metadata": {
            "struct_type": "Class",
            "struct_name": "ResponseBase",
            "method_name": "ToString",
            "namespace": "Studi.BBCollab.DataLayer.Responses",
            "summary_kind": "method",
            "functional_type": "Other"
        }
    }
]