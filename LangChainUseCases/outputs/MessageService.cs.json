{
    "name": "MessageService",
    "class_name": "MessageService",
    "interfaces_names": [
        " IMessageService"
    ],
    "methods": [
        {
            "name": "MessageService",
            "method_name": "MessageService",
            "summary_lines": [],
            "attributs": [],
            "method_return_type": null,
            "code": "\n        _messageAttachmentService = messageAttachmentService;\n        _unitOfWork = unitOfWork;\n        _conversationRepository = conversationRepository;\n        _messageRepository = messageRepository;\n        _messageAttachmentRepository = messageAttachmentRepository;\n        _userRepository = userRepository;\n        _correspondantRepository = correspondantRepository;\n    ",
            "is_async": false,
            "is_task": false,
            "is_ctor": true,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        },
        {
            "name": "GetLastMessageDateByConversationIdExceptUserIdAsync",
            "method_name": "GetLastMessageDateByConversationIdExceptUserIdAsync",
            "summary_lines": [
                "<summary>",
                "description",
                "</summary>",
                "<param name=\"conversationId\"></param>",
                "<param name=\"userId\"></param>",
                "<returns></returns>"
            ],
            "attributs": [],
            "method_return_type": "DateTime?",
            "code": "\n        return await _messageRepository.GetLastMessageDateByConversationIdExceptUserIdAsync(conversationId, userId);\n    ",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        },
        {
            "name": "CountMessagesAsync",
            "method_name": "CountMessagesAsync",
            "summary_lines": [
                "<inheritdoc/>"
            ],
            "attributs": [
                "[Obsolete(\"This method is deprecated, use CountMessagesAsync instead.\")]"
            ],
            "method_return_type": "int",
            "code": "\n        return await _messageRepository.CountMessagesWithFilterAndSort(userId, schoolsIds, listingSelector);\n    ",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        },
        {
            "name": "CountFilteredMessagesByConversationIdAsync",
            "method_name": "CountFilteredMessagesByConversationIdAsync",
            "summary_lines": [],
            "attributs": [],
            "method_return_type": "int",
            "code": "\n        return await _messageRepository.CountFilteredMessagesByConversationIdAsync(conversationId, listingSelector);\n    ",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        },
        {
            "name": "GetUnreadMessageCountByUserIdAndSchoolIdAsync",
            "method_name": "GetUnreadMessageCountByUserIdAndSchoolIdAsync",
            "summary_lines": [],
            "attributs": [],
            "method_return_type": "IUnreadMessageCountAto",
            "code": "\n        var unreadMessageCountByConversation = await _messageRepository.GetUnreadMessagesByUserIdAndSchoolIdAsync(userId, schoolId);\n\n        return unreadMessageCountByConversation.ToAto();\n    ",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        },
        {
            "name": "GetPaginatedMessagesByConversationIdAsync",
            "method_name": "GetPaginatedMessagesByConversationIdAsync",
            "summary_lines": [],
            "attributs": [],
            "method_return_type": "PaginedData<IMessageRAto>",
            "code": "\n        var conversation = await _conversationRepository.GetConversationByIdAsync(conversationId);\n\n        Guard.Against.Null(conversation, ErrorCode.Api.Lms.Messenger.DataValidation.Query.Conversation.NotFoundById, paramsValues: conversationId.ToString());\n\n        var conversationUserIds = await _conversationRepository.GetCorrespondantsUserIdsByConversationIdAsync(conversationId);\n\n        Guard.Against.False(conversationUserIds.Contains(userId), ErrorCode.Api.Lms.Messenger.DataValidation.Query.Conversation.UserNotInCorrespondants, paramsValues: new string[] ",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        },
        {
            "name": "AddMessageAsync",
            "method_name": "AddMessageAsync",
            "summary_lines": [],
            "attributs": [],
            "method_return_type": "IMessageRAto",
            "code": "\n        int messageCreatedId;\n        var currentUser = await _userRepository.GetUserByIdAsync(messageWAto.UserId);\n\n        await _unitOfWork.RegisterRepositoryAsync(_messageRepository);\n        await _unitOfWork.RegisterRepositoryAsync(_messageAttachmentRepository);\n        await _unitOfWork.RegisterRepositoryAsync(_correspondantRepository);\n\n        try\n        ",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        },
        {
            "name": "GetMessageByIdAsync",
            "method_name": "GetMessageByIdAsync",
            "summary_lines": [],
            "attributs": [],
            "method_return_type": "IMessageRAto",
            "code": "\n        var messageRIto = await _messageRepository.GetMessageByIdAsync(messageId);\n\n        var currentUser = await _userRepository.GetUserByIdAsync(currentUserId);\n\n        var user = await _userRepository.GetUserByIdAsync(messageRIto.SenderCorrespondant.UserId);\n\n        var guids = messageRIto.AttachmentsUploadedFiles.Select(a => a.UploadedFileGuid).ToList();\n        if (messageRIto.AudioMessageUploadedFile != null)\n        ",
            "is_async": true,
            "is_task": true,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        },
        {
            "name": "UpdateIsArchivedForUserIdByConversationsIdsAsync",
            "method_name": "UpdateIsArchivedForUserIdByConversationsIdsAsync",
            "summary_lines": [
                "<inheritdoc/>"
            ],
            "attributs": [],
            "method_return_type": "Task",
            "code": "\n        var conversations = await _conversationRepository.GetConversationsByConversationIdsAndUserIdAsync(conversationIds, userId);\n                \n        List<string> conversationsIdsWhereUserIdDontBelongs = new();\n\n        foreach (var conversation in conversations)\n        ",
            "is_async": true,
            "is_task": false,
            "is_ctor": false,
            "is_static": false,
            "is_abstract": false,
            "is_override": false,
            "is_virtual": false,
            "is_sealed": false,
            "is_new": false,
            "code_chunks": null
        }
    ],
    "properties": [
        {
            "name": "_unitOfWork",
            "prop_name": "_unitOfWork",
            "prop_type": "IUnitOfWork",
            "is_property": false,
            "is_field": true
        },
        {
            "name": "_messageAttachmentService",
            "prop_name": "_messageAttachmentService",
            "prop_type": "IMessageAttachmentService",
            "is_property": false,
            "is_field": true
        },
        {
            "name": "_conversationRepository",
            "prop_name": "_conversationRepository",
            "prop_type": "IConversationRepository",
            "is_property": false,
            "is_field": true
        },
        {
            "name": "_messageRepository",
            "prop_name": "_messageRepository",
            "prop_type": "IMessageRepository",
            "is_property": false,
            "is_field": true
        },
        {
            "name": "_messageAttachmentRepository",
            "prop_name": "_messageAttachmentRepository",
            "prop_type": "IMessageAttachmentRepository",
            "is_property": false,
            "is_field": true
        },
        {
            "name": "_userRepository",
            "prop_name": "_userRepository",
            "prop_type": "IUserRepository",
            "is_property": false,
            "is_field": true
        },
        {
            "name": "_correspondantRepository",
            "prop_name": "_correspondantRepository",
            "prop_type": "ICorrespondantRepository",
            "is_property": false,
            "is_field": true
        }
    ]
}