import os
import ast
import argparse
import networkx as nx
from typing import List, Dict, Any, Set

class DependencySplitter:
    def __init__(self, base_dir: str, project_name: str, granularity: int) -> None:
        self.base_dir: str = base_dir
        self.project_name: str = project_name
        self.granularity: int = granularity
        self.files_map: Dict[str,str] = {}
        self.internal_deps: nx.DiGraph = nx.DiGraph()
        self.external_deps: Dict[str,Set[str]] = {}

    def list_python_files(self) -> List[str]:
        result: List[str] = []
        for root, _, files in os.walk(self.base_dir):
            for f in files:
                if f.endswith(".py"):
                    result.append(os.path.join(root, f))
        return result

    def to_module(self, path: str) -> str:
        rel: str = os.path.relpath(path, self.base_dir).replace("\\",".").replace("/",".")
        if rel.endswith(".py"):
            rel = rel[:-3]
        return rel

    def extract_imports(self, path: str) -> Any:
        try:
            with open(path, "r", encoding="utf-8") as f:
                tree: Any = ast.parse(f.read())
        except:
            return [], []
        internals: List[str] = []
        externals: List[str] = []
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    if alias.name.startswith(self.project_name+"."):
                        internals.append(alias.name)
                    else:
                        externals.append(alias.name)
            elif isinstance(node, ast.ImportFrom):
                if node.module:
                    if node.module.startswith(self.project_name+"."):
                        internals.append(node.module)
                    else:
                        externals.append(node.module)
        return list(set(internals)), list(set(externals))

    def build_graphs(self) -> None:
        py_files: List[str] = self.list_python_files()
        for p in py_files:
            m: str = self.to_module(p)
            self.files_map[m] = p
            self.internal_deps.add_node(m)
        for p in py_files:
            m: str = self.to_module(p)
            internals, externals = self.extract_imports(p)
            self.external_deps[m] = set(externals)
            for i in internals:
                i_mod: str = i.replace(self.project_name+".","")
                full: str = self.project_name+"."+i_mod
                if full in self.internal_deps.nodes:
                    self.internal_deps.add_edge(m, full)

    def find_communities(self) -> List[Set[str]]:
        undirected: nx.Graph = self.internal_deps.to_undirected()
        comms: Any = nx.algorithms.community.greedy_modularity_communities(undirected)
        return [set(c) for c in comms]

    def split_large(self, group: Set[str]) -> List[Set[str]]:
        if len(group) <= self.granularity:
            return [group]
        sub: nx.Graph = self.internal_deps.subgraph(group).to_undirected()
        try:
            left, right = nx.algorithms.community.kernighan_lin_bisection(sub)
        except:
            return [group]
        return self.split_large(set(left)) + self.split_large(set(right))

    def run(self) -> None:
        self.build_graphs()
        comms: List[Set[str]] = self.find_communities()
        final_groups: List[Set[str]] = []
        for c in comms:
            final_groups.extend(self.split_large(c))
        final_sorted = [sorted(list(g)) for g in final_groups]
        singletons = [g for g in final_sorted if len(g)==1]
        print("Fichiers sans dépendances internes:")
        for s in singletons:
            mod = s[0]
            if self.internal_deps.out_degree(mod)==0 and self.internal_deps.in_degree(mod)==0:
                print("  -", mod)
        print()
        print("Proposition de découpage:")
        idx = 1
        for g in final_sorted:
            print(f"Groupe {idx} (taille {len(g)}):")
            idx += 1
            ex_deps: Set[str] = set()
            for m in g:
                ex_deps.update(self.external_deps[m])
            for m in g:
                print("  -", m)
            print("  Dépendances externes:", sorted(list(ex_deps)))
            print()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("base_dir", type=str)
    parser.add_argument("project_name", type=str)
    parser.add_argument("--granularity", type=int, default=10)
    args = parser.parse_args()
    splitter = DependencySplitter(args.base_dir, args.project_name, args.granularity)
    splitter.run()
