{"version":3,"file":"index-3383f5c5.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../node_modules/react-query/devtools/index.js","../../node_modules/zustand/esm/middleware.mjs","../../src/stores/appStore.ts","../../src/components/common/Navbar.tsx","../../src/components/common/Sidebar.tsx","../../src/components/common/MetricCard.tsx","../../src/components/dashboard/PortfolioSummary.tsx","../../src/components/ui/Card.tsx","../../src/components/ui/Button.tsx","../../src/components/ui/Input.tsx","../../src/components/dashboard/QuickActions.tsx","../../src/components/ui/Badge.tsx","../../src/components/dashboard/RecentActivity.tsx","../../src/components/dashboard/PerformanceOverview.tsx","../../src/components/dashboard/MarketOverview.tsx","../../src/services/api.ts","../../src/services/portfolioService.ts","../../src/types/index.ts","../../src/services/tradingService.ts","../../src/services/chartService.ts","../../src/components/dashboard/Dashboard.tsx","../../src/components/ui/Select.tsx","../../src/components/charts/ChartControls.tsx","../../src/components/charts/CandlestickChart.tsx","../../src/components/charts/ChartsPage.tsx","../../src/components/trading/TradingPage.tsx","../../src/components/portfolio/PortfolioPage.tsx","../../src/components/strategies/StrategiesPage.tsx","../../src/components/settings/SettingsPage.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","if (process.env.NODE_ENV !== 'development') {\n  module.exports = {\n    ReactQueryDevtools: function () {\n      return null\n    },\n    ReactQueryDevtoolsPanel: function () {\n      return null\n    },\n  }\n} else {\n  module.exports = require('./development')\n}\n","const reduxImpl = (reducer, initial) => (set, _get, api) => {\n  api.dispatch = (action) => {\n    set((state) => reducer(state, action), false, action);\n    return action;\n  };\n  api.dispatchFromDevtools = true;\n  return { dispatch: (...a) => api.dispatch(...a), ...initial };\n};\nconst redux = reduxImpl;\n\nconst trackedConnections = /* @__PURE__ */ new Map();\nconst getTrackedConnectionState = (name) => {\n  const api = trackedConnections.get(name);\n  if (!api) return {};\n  return Object.fromEntries(\n    Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])\n  );\n};\nconst extractConnectionInformation = (store, extensionConnector, options) => {\n  if (store === void 0) {\n    return {\n      type: \"untracked\",\n      connection: extensionConnector.connect(options)\n    };\n  }\n  const existingConnection = trackedConnections.get(options.name);\n  if (existingConnection) {\n    return { type: \"tracked\", store, ...existingConnection };\n  }\n  const newConnection = {\n    connection: extensionConnector.connect(options),\n    stores: {}\n  };\n  trackedConnections.set(options.name, newConnection);\n  return { type: \"tracked\", store, ...newConnection };\n};\nconst devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {\n  const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;\n  let extensionConnector;\n  try {\n    extensionConnector = (enabled != null ? enabled : (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n  } catch (_e) {\n  }\n  if (!extensionConnector) {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && enabled) {\n      console.warn(\n        \"[zustand devtools middleware] Please install/enable Redux devtools extension\"\n      );\n    }\n    return fn(set, get, api);\n  }\n  const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);\n  let isRecording = true;\n  api.setState = (state, replace, nameOrAction) => {\n    const r = set(state, replace);\n    if (!isRecording) return r;\n    const action = nameOrAction === void 0 ? { type: anonymousActionType || \"anonymous\" } : typeof nameOrAction === \"string\" ? { type: nameOrAction } : nameOrAction;\n    if (store === void 0) {\n      connection == null ? void 0 : connection.send(action, get());\n      return r;\n    }\n    connection == null ? void 0 : connection.send(\n      {\n        ...action,\n        type: `${store}/${action.type}`\n      },\n      {\n        ...getTrackedConnectionState(options.name),\n        [store]: api.getState()\n      }\n    );\n    return r;\n  };\n  const setStateFromDevtools = (...a) => {\n    const originalIsRecording = isRecording;\n    isRecording = false;\n    set(...a);\n    isRecording = originalIsRecording;\n  };\n  const initialState = fn(api.setState, get, api);\n  if (connectionInformation.type === \"untracked\") {\n    connection == null ? void 0 : connection.init(initialState);\n  } else {\n    connectionInformation.stores[connectionInformation.store] = api;\n    connection == null ? void 0 : connection.init(\n      Object.fromEntries(\n        Object.entries(connectionInformation.stores).map(([key, store2]) => [\n          key,\n          key === connectionInformation.store ? initialState : store2.getState()\n        ])\n      )\n    );\n  }\n  if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\n    let didWarnAboutReservedActionType = false;\n    const originalDispatch = api.dispatch;\n    api.dispatch = (...a) => {\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && a[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\n        console.warn(\n          '[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.'\n        );\n        didWarnAboutReservedActionType = true;\n      }\n      originalDispatch(...a);\n    };\n  }\n  connection.subscribe((message) => {\n    var _a;\n    switch (message.type) {\n      case \"ACTION\":\n        if (typeof message.payload !== \"string\") {\n          console.error(\n            \"[zustand devtools middleware] Unsupported action format\"\n          );\n          return;\n        }\n        return parseJsonThen(\n          message.payload,\n          (action) => {\n            if (action.type === \"__setState\") {\n              if (store === void 0) {\n                setStateFromDevtools(action.state);\n                return;\n              }\n              if (Object.keys(action.state).length !== 1) {\n                console.error(\n                  `\n                    [zustand devtools middleware] Unsupported __setState action format. \n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\n                    `\n                );\n              }\n              const stateFromDevtools = action.state[store];\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\n                setStateFromDevtools(stateFromDevtools);\n              }\n              return;\n            }\n            if (!api.dispatchFromDevtools) return;\n            if (typeof api.dispatch !== \"function\") return;\n            api.dispatch(action);\n          }\n        );\n      case \"DISPATCH\":\n        switch (message.payload.type) {\n          case \"RESET\":\n            setStateFromDevtools(initialState);\n            if (store === void 0) {\n              return connection == null ? void 0 : connection.init(api.getState());\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"COMMIT\":\n            if (store === void 0) {\n              connection == null ? void 0 : connection.init(api.getState());\n              return;\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"ROLLBACK\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                connection == null ? void 0 : connection.init(api.getState());\n                return;\n              }\n              setStateFromDevtools(state[store]);\n              connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n            });\n          case \"JUMP_TO_STATE\":\n          case \"JUMP_TO_ACTION\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\n                setStateFromDevtools(state[store]);\n              }\n            });\n          case \"IMPORT_STATE\": {\n            const { nextLiftedState } = message.payload;\n            const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\n            if (!lastComputedState) return;\n            if (store === void 0) {\n              setStateFromDevtools(lastComputedState);\n            } else {\n              setStateFromDevtools(lastComputedState[store]);\n            }\n            connection == null ? void 0 : connection.send(\n              null,\n              // FIXME no-any\n              nextLiftedState\n            );\n            return;\n          }\n          case \"PAUSE_RECORDING\":\n            return isRecording = !isRecording;\n        }\n        return;\n    }\n  });\n  return initialState;\n};\nconst devtools = devtoolsImpl;\nconst parseJsonThen = (stringified, f) => {\n  let parsed;\n  try {\n    parsed = JSON.parse(stringified);\n  } catch (e) {\n    console.error(\n      \"[zustand devtools middleware] Could not parse the received json\",\n      e\n    );\n  }\n  if (parsed !== void 0) f(parsed);\n};\n\nconst subscribeWithSelectorImpl = (fn) => (set, get, api) => {\n  const origSubscribe = api.subscribe;\n  api.subscribe = (selector, optListener, options) => {\n    let listener = selector;\n    if (optListener) {\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n      let currentSlice = selector(api.getState());\n      listener = (state) => {\n        const nextSlice = selector(state);\n        if (!equalityFn(currentSlice, nextSlice)) {\n          const previousSlice = currentSlice;\n          optListener(currentSlice = nextSlice, previousSlice);\n        }\n      };\n      if (options == null ? void 0 : options.fireImmediately) {\n        optListener(currentSlice, currentSlice);\n      }\n    }\n    return origSubscribe(listener);\n  };\n  const initialState = fn(set, get, api);\n  return initialState;\n};\nconst subscribeWithSelector = subscribeWithSelectorImpl;\n\nconst combine = (initialState, create) => (...a) => Object.assign({}, initialState, create(...a));\n\nfunction createJSONStorage(getStorage, options) {\n  let storage;\n  try {\n    storage = getStorage();\n  } catch (_e) {\n    return;\n  }\n  const persistStorage = {\n    getItem: (name) => {\n      var _a;\n      const parse = (str2) => {\n        if (str2 === null) {\n          return null;\n        }\n        return JSON.parse(str2, options == null ? void 0 : options.reviver);\n      };\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n      return parse(str);\n    },\n    setItem: (name, newValue) => storage.setItem(\n      name,\n      JSON.stringify(newValue, options == null ? void 0 : options.replacer)\n    ),\n    removeItem: (name) => storage.removeItem(name)\n  };\n  return persistStorage;\n}\nconst toThenable = (fn) => (input) => {\n  try {\n    const result = fn(input);\n    if (result instanceof Promise) {\n      return result;\n    }\n    return {\n      then(onFulfilled) {\n        return toThenable(onFulfilled)(result);\n      },\n      catch(_onRejected) {\n        return this;\n      }\n    };\n  } catch (e) {\n    return {\n      then(_onFulfilled) {\n        return this;\n      },\n      catch(onRejected) {\n        return toThenable(onRejected)(e);\n      }\n    };\n  }\n};\nconst oldImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    getStorage: () => localStorage,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage;\n  try {\n    storage = options.getStorage();\n  } catch (_e) {\n  }\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const thenableSerialize = toThenable(options.serialize);\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    let errorInSync;\n    const thenable = thenableSerialize({ state, version: options.version }).then(\n      (serializedValue) => storage.setItem(options.name, serializedValue)\n    ).catch((e) => {\n      errorInSync = e;\n    });\n    if (errorInSync) {\n      throw errorInSync;\n    }\n    return thenable;\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a;\n    if (!storage) return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => cb(get()));\n    const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get())) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((storageValue) => {\n      if (storageValue) {\n        return options.deserialize(storageValue);\n      }\n    }).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then((migratedState) => {\n      var _a2;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.getStorage) {\n        storage = newOptions.getStorage();\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  hydrate();\n  return stateFromStorage || configResult;\n};\nconst newImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    storage: createJSONStorage(() => localStorage),\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage = options.storage;\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    return storage.setItem(options.name, {\n      state,\n      version: options.version\n    });\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  api.getInitialState = () => configResult;\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a, _b;\n    if (!storage) return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => {\n      var _a2;\n      return cb((_a2 = get()) != null ? _a2 : configResult);\n    });\n    const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return [\n              true,\n              options.migrate(\n                deserializedStorageValue.state,\n                deserializedStorageValue.version\n              )\n            ];\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return [false, deserializedStorageValue.state];\n        }\n      }\n      return [false, void 0];\n    }).then((migrationResult) => {\n      var _a2;\n      const [migrated, migratedState] = migrationResult;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      if (migrated) {\n        return setItem();\n      }\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      stateFromStorage = get();\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.storage) {\n        storage = newOptions.storage;\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  if (!options.skipHydration) {\n    hydrate();\n  }\n  return stateFromStorage || configResult;\n};\nconst persistImpl = (config, baseOptions) => {\n  if (\"getStorage\" in baseOptions || \"serialize\" in baseOptions || \"deserialize\" in baseOptions) {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.\"\n      );\n    }\n    return oldImpl(config, baseOptions);\n  }\n  return newImpl(config, baseOptions);\n};\nconst persist = persistImpl;\n\nexport { combine, createJSONStorage, devtools, persist, redux, subscribeWithSelector };\n","import { create } from 'zustand'\r\nimport { persist } from 'zustand/middleware'\r\nimport type { AppState, ChartState, TradingState } from '@/types'\r\n\r\ninterface AppStore extends AppState {\r\n  // Actions\r\n  toggleSidebar: () => void\r\n  setSidebarOpen: (open: boolean) => void\r\n  toggleDarkMode: () => void\r\n  setSelectedPortfolio: (portfolioId: string | null) => void\r\n  setActiveStrategy: (strategyName: string | null) => void\r\n}\r\n\r\ninterface ChartStore extends ChartState {\r\n  // Actions\r\n  setSelectedSymbol: (symbol: string | null) => void\r\n  setSelectedInterval: (interval: string) => void\r\n  setSelectedChartFile: (filename: string | null) => void\r\n}\r\n\r\ninterface TradingStore extends TradingState {\r\n  // Actions\r\n  setAutoTradingEnabled: (enabled: boolean) => void\r\n  setSelectedStrategy: (strategy: string | null) => void\r\n  setRiskPerTrade: (risk: number) => void\r\n}\r\n\r\n// Main app store\r\nexport const useAppStore = create<AppStore>()(\r\n  persist(\r\n    (set) => ({\r\n      // Initial state\r\n      sidebarOpen: true,\r\n      darkMode: false,\r\n      selectedPortfolio: null,\r\n      activeStrategy: null,\r\n\r\n      // Actions\r\n      toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),\r\n      setSidebarOpen: (open) => set({ sidebarOpen: open }),\r\n      toggleDarkMode: () => set((state) => ({ darkMode: !state.darkMode })),\r\n      setSelectedPortfolio: (portfolioId) => set({ selectedPortfolio: portfolioId }),\r\n      setActiveStrategy: (strategyName) => set({ activeStrategy: strategyName }),\r\n    }),\r\n    {\r\n      name: 'turtle-app-store',\r\n      partialize: (state) => ({\r\n        darkMode: state.darkMode,\r\n        selectedPortfolio: state.selectedPortfolio,\r\n        activeStrategy: state.activeStrategy,\r\n      }),\r\n    }\r\n  )\r\n)\r\n\r\n// Chart store\r\nexport const useChartStore = create<ChartStore>()(\r\n  persist(\r\n    (set) => ({\r\n      // Initial state\r\n      selectedSymbol: null,\r\n      selectedInterval: '1d',\r\n      selectedChartFile: null,\r\n\r\n      // Actions\r\n      setSelectedSymbol: (symbol) => set({ selectedSymbol: symbol }),\r\n      setSelectedInterval: (interval) => set({ selectedInterval: interval }),\r\n      setSelectedChartFile: (filename) => set({ selectedChartFile: filename }),\r\n    }),\r\n    {\r\n      name: 'turtle-chart-store',\r\n    }\r\n  )\r\n)\r\n\r\n// Trading store\r\nexport const useTradingStore = create<TradingStore>()(\r\n  persist(\r\n    (set) => ({\r\n      // Initial state\r\n      autoTradingEnabled: false,\r\n      selectedStrategy: null,\r\n      riskPerTrade: 0.02,\r\n\r\n      // Actions\r\n      setAutoTradingEnabled: (enabled) => set({ autoTradingEnabled: enabled }),\r\n      setSelectedStrategy: (strategy) => set({ selectedStrategy: strategy }),\r\n      setRiskPerTrade: (risk) => set({ riskPerTrade: risk }),\r\n    }),\r\n    {\r\n      name: 'turtle-trading-store',\r\n    }\r\n  )\r\n)","import { Menu, X, TrendingUp, Settings, Moon, Sun } from 'lucide-react'\r\nimport { useAppStore } from '@/stores/appStore'\r\n\r\nexport function Navbar() {\r\n  const { sidebarOpen, toggleSidebar, darkMode, toggleDarkMode } = useAppStore()\r\n\r\n  return (\r\n    <nav className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 h-16 flex items-center justify-between px-4 shadow-sm\">\r\n      {/* Left section */}\r\n      <div className=\"flex items-center space-x-4\">\r\n        <button\r\n          onClick={toggleSidebar}\r\n          className=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\r\n        >\r\n          {sidebarOpen ? (\r\n            <X className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\r\n          ) : (\r\n            <Menu className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\r\n          )}\r\n        </button>\r\n        \r\n        <div className=\"flex items-center space-x-2\">\r\n          <TrendingUp className=\"h-8 w-8 text-primary-600\" />\r\n          <div>\r\n            <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n              Turtle Trading Bot\r\n            </h1>\r\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n              Advanced Trading Strategy Platform\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Right section */}\r\n      <div className=\"flex items-center space-x-3\">\r\n        {/* Theme toggle */}\r\n        <button\r\n          onClick={toggleDarkMode}\r\n          className=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\r\n          title={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n        >\r\n          {darkMode ? (\r\n            <Sun className=\"h-5 w-5 text-yellow-500\" />\r\n          ) : (\r\n            <Moon className=\"h-5 w-5 text-gray-600\" />\r\n          )}\r\n        </button>\r\n\r\n        {/* Settings */}\r\n        <button className=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\">\r\n          <Settings className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\r\n        </button>\r\n\r\n        {/* Status indicator */}\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n          <span className=\"text-sm text-gray-600 dark:text-gray-300\">Connected</span>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}","import { NavLink } from 'react-router-dom'\r\nimport {\r\n  BarChart3,\r\n  TrendingUp,\r\n  Wallet,\r\n  Brain,\r\n  Settings,\r\n  Home,\r\n  Activity\r\n} from 'lucide-react'\r\n\r\ninterface SidebarProps {\r\n  isOpen: boolean\r\n}\r\n\r\nconst navigationItems = [\r\n  { to: '/', label: 'Dashboard', icon: Home },\r\n  { to: '/charts', label: 'Charts', icon: BarChart3 },\r\n  { to: '/trading', label: 'Trading', icon: TrendingUp },\r\n  { to: '/portfolio', label: 'Portfolio', icon: Wallet },\r\n  { to: '/strategies', label: 'Strategies', icon: Brain },\r\n  { to: '/settings', label: 'Settings', icon: Settings },\r\n]\r\n\r\nexport function Sidebar({ isOpen }: SidebarProps) {\r\n  return (\r\n    <aside\r\n      className={`fixed left-0 top-16 h-[calc(100vh-64px)] bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 transition-all duration-300 z-40 ${\r\n        isOpen ? 'w-64' : 'w-16'\r\n      }`}\r\n    >\r\n      <div className=\"flex flex-col h-full\">\r\n        {/* Navigation */}\r\n        <nav className=\"flex-1 px-3 py-4 space-y-2\">\r\n          {navigationItems.map((item) => {\r\n            const Icon = item.icon\r\n            return (\r\n              <NavLink\r\n                key={item.to}\r\n                to={item.to}\r\n                className={({ isActive }) =>\r\n                  `flex items-center px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n                    isActive\r\n                      ? 'bg-primary-100 text-primary-700 dark:bg-primary-900 dark:text-primary-300'\r\n                      : 'text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800'\r\n                  }`\r\n                }\r\n              >\r\n                <Icon className={`h-5 w-5 ${isOpen ? 'mr-3' : ''}`} />\r\n                {isOpen && <span>{item.label}</span>}\r\n              </NavLink>\r\n            )\r\n          })}\r\n        </nav>\r\n\r\n        {/* Status section */}\r\n        {isOpen && (\r\n          <div className=\"p-3 border-t border-gray-200 dark:border-gray-700\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Activity className=\"h-4 w-4 text-green-500\" />\r\n              <div className=\"flex-1 min-w-0\">\r\n                <p className=\"text-xs font-medium text-gray-900 dark:text-white\">\r\n                  System Status\r\n                </p>\r\n                <p className=\"text-xs text-green-600 dark:text-green-400\">\r\n                  All systems operational\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </aside>\r\n  )\r\n}","import { ReactNode } from 'react'\r\nimport { TrendingUp, TrendingDown } from 'lucide-react'\r\n\r\ninterface MetricCardProps {\r\n  title: string\r\n  value: string | number\r\n  subtitle?: string\r\n  change?: number\r\n  changeType?: 'currency' | 'percentage'\r\n  icon?: ReactNode\r\n  className?: string\r\n  valueColor?: 'positive' | 'negative' | 'neutral'\r\n}\r\n\r\nexport function MetricCard({\r\n  title,\r\n  value,\r\n  subtitle,\r\n  change,\r\n  changeType = 'percentage',\r\n  icon,\r\n  className = '',\r\n  valueColor = 'neutral'\r\n}: MetricCardProps) {\r\n  const getValueColorClass = () => {\r\n    switch (valueColor) {\r\n      case 'positive':\r\n        return 'text-success-600 dark:text-success-400'\r\n      case 'negative':\r\n        return 'text-danger-600 dark:text-danger-400'\r\n      default:\r\n        return 'text-gray-900 dark:text-white'\r\n    }\r\n  }\r\n\r\n  const getChangeColorClass = () => {\r\n    if (change === undefined) return ''\r\n    return change >= 0\r\n      ? 'text-success-600 dark:text-success-400'\r\n      : 'text-danger-600 dark:text-danger-400'\r\n  }\r\n\r\n  const formatChange = () => {\r\n    if (change === undefined) return null\r\n    \r\n    const prefix = change >= 0 ? '+' : ''\r\n    const suffix = changeType === 'percentage' ? '%' : ''\r\n    \r\n    return (\r\n      <div className={`flex items-center space-x-1 ${getChangeColorClass()}`}>\r\n        {change >= 0 ? (\r\n          <TrendingUp className=\"h-3 w-3\" />\r\n        ) : (\r\n          <TrendingDown className=\"h-3 w-3\" />\r\n        )}\r\n        <span className=\"text-xs font-medium\">\r\n          {prefix}{Math.abs(change).toFixed(2)}{suffix}\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`metric-card ${className}`}>\r\n      <div className=\"flex items-start justify-between\">\r\n        <div className=\"flex-1\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            {icon && <div className=\"text-gray-500 dark:text-gray-400\">{icon}</div>}\r\n            <p className=\"metric-label\">{title}</p>\r\n          </div>\r\n          \r\n          <div className=\"mt-1\">\r\n            <p className={`metric-value ${getValueColorClass()}`}>\r\n              {typeof value === 'number' ? value.toLocaleString() : value}\r\n            </p>\r\n            {subtitle && (\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                {subtitle}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {change !== undefined && (\r\n          <div className=\"ml-2\">\r\n            {formatChange()}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { MetricCard } from '@/components/common/MetricCard'\r\nimport { Wallet, TrendingUp, Target, Activity, Award } from 'lucide-react'\r\nimport type { PortfolioSummary as PortfolioSummaryType } from '@/types'\r\n\r\ninterface PortfolioSummaryProps {\r\n  summary: PortfolioSummaryType\r\n}\r\n\r\nexport function PortfolioSummary({ summary }: PortfolioSummaryProps) {\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2\r\n    }).format(value)\r\n  }\r\n\r\n  const formatPercentage = (value: number) => {\r\n    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n      <MetricCard\r\n        title=\"Portfolio Balance\"\r\n        value={formatCurrency(summary.current_balance)}\r\n        subtitle=\"Available cash\"\r\n        icon={<Wallet className=\"h-4 w-4\" />}\r\n        valueColor=\"neutral\"\r\n      />\r\n      \r\n      <MetricCard\r\n        title=\"Total Equity\"\r\n        value={formatCurrency(summary.equity)}\r\n        subtitle=\"Cash + unrealized P&L\"\r\n        change={summary.return_percentage}\r\n        changeType=\"percentage\"\r\n        valueColor={summary.equity >= summary.current_balance ? 'positive' : 'negative'}\r\n        icon={<TrendingUp className=\"h-4 w-4\" />}\r\n      />\r\n      \r\n      <MetricCard\r\n        title=\"Total P&L\"\r\n        value={formatCurrency(summary.total_pnl)}\r\n        subtitle={`Realized: ${formatCurrency(summary.realized_pnl)}`}\r\n        valueColor={summary.total_pnl >= 0 ? 'positive' : 'negative'}\r\n        icon={<Target className=\"h-4 w-4\" />}\r\n      />\r\n      \r\n      <MetricCard\r\n        title=\"Open Trades\"\r\n        value={summary.open_trades}\r\n        subtitle={`Total: ${summary.total_trades}`}\r\n        icon={<Activity className=\"h-4 w-4\" />}\r\n      />\r\n      \r\n      <MetricCard\r\n        title=\"Win Rate\"\r\n        value={formatPercentage(summary.win_rate)}\r\n        subtitle={`Max DD: ${formatPercentage(summary.max_drawdown)}`}\r\n        valueColor={summary.win_rate >= 50 ? 'positive' : 'negative'}\r\n        icon={<Award className=\"h-4 w-4\" />}\r\n      />\r\n    </div>\r\n  )\r\n}","import { ReactNode } from 'react'\r\n\r\nexport interface CardProps {\r\n  children: ReactNode\r\n  className?: string\r\n  padding?: boolean\r\n}\r\n\r\ninterface CardHeaderProps {\r\n  children: ReactNode\r\n  className?: string\r\n}\r\n\r\ninterface CardContentProps {\r\n  children: ReactNode\r\n  className?: string\r\n}\r\n\r\ninterface CardFooterProps {\r\n  children: ReactNode\r\n  className?: string\r\n}\r\n\r\nexport function Card({ children, className = '', padding = true }: CardProps) {\r\n  return (\r\n    <div className={`card ${padding ? 'p-6' : ''} ${className}`}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function CardHeader({ children, className = '' }: CardHeaderProps) {\r\n  return (\r\n    <div className={`card-header ${className}`}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function CardContent({ children, className = '' }: CardContentProps) {\r\n  return (\r\n    <div className={`card-content ${className}`}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function CardFooter({ children, className = '' }: CardFooterProps) {\r\n  return (\r\n    <div className={`px-6 py-4 border-t border-gray-200 dark:border-gray-700 ${className}`}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nCard.Header = CardHeader\r\nCard.Content = CardContent\r\nCard.Footer = CardFooter","import { ButtonHTMLAttributes, ReactNode } from 'react'\r\nimport { Loader2 } from 'lucide-react'\r\n\r\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'destructive' | 'outline' | 'ghost'\r\n  size?: 'sm' | 'md' | 'lg'\r\n  loading?: boolean\r\n  icon?: ReactNode\r\n  children: ReactNode\r\n}\r\n\r\nexport function Button({\r\n  variant = 'primary',\r\n  size = 'md',\r\n  loading = false,\r\n  icon,\r\n  children,\r\n  className = '',\r\n  disabled,\r\n  ...props\r\n}: ButtonProps) {\r\n  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed'\r\n  \r\n  const variantClasses = {\r\n    default: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',\r\n    primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',\r\n    secondary: 'bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500',\r\n    success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-green-500',\r\n    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',\r\n    destructive: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',\r\n    outline: 'border border-gray-300 dark:border-gray-600 bg-transparent hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300',\r\n    ghost: 'bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300'\r\n  }\r\n  \r\n  const sizeClasses = {\r\n    sm: 'px-3 py-1.5 text-sm',\r\n    md: 'px-4 py-2 text-sm',\r\n    lg: 'px-6 py-3 text-base'\r\n  }\r\n\r\n  return (\r\n    <button\r\n      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}\r\n      disabled={disabled || loading}\r\n      {...props}\r\n    >\r\n      {loading ? (\r\n        <>\r\n          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\r\n          Loading...\r\n        </>\r\n      ) : (\r\n        <>\r\n          {icon && <span className=\"mr-2\">{icon}</span>}\r\n          {children}\r\n        </>\r\n      )}\r\n    </button>\r\n  )\r\n}","import { InputHTMLAttributes, SelectHTMLAttributes, forwardRef } from 'react'\r\n\r\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n  label?: string\r\n  error?: string\r\n  helperText?: string\r\n}\r\n\r\ninterface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {\r\n  label?: string\r\n  error?: string\r\n  helperText?: string\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const Input = forwardRef<HTMLInputElement, InputProps>(\r\n  ({ label, error, helperText, className = '', ...props }, ref) => {\r\n    return (\r\n      <div className=\"space-y-1\">\r\n        {label && (\r\n          <label className=\"label\">\r\n            {label}\r\n          </label>\r\n        )}\r\n        <input\r\n          ref={ref}\r\n          className={`input ${error ? 'border-red-500 focus:ring-red-500' : ''} ${className}`}\r\n          {...props}\r\n        />\r\n        {error && (\r\n          <p className=\"text-sm text-red-600 dark:text-red-400\">{error}</p>\r\n        )}\r\n        {helperText && !error && (\r\n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">{helperText}</p>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nInput.displayName = 'Input'\r\n\r\nexport const Select = forwardRef<HTMLSelectElement, SelectProps>(\r\n  ({ label, error, helperText, className = '', children, ...props }, ref) => {\r\n    return (\r\n      <div className=\"space-y-1\">\r\n        {label && (\r\n          <label className=\"label\">\r\n            {label}\r\n          </label>\r\n        )}\r\n        <select\r\n          ref={ref}\r\n          className={`select ${error ? 'border-red-500 focus:ring-red-500' : ''} ${className}`}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </select>\r\n        {error && (\r\n          <p className=\"text-sm text-red-600 dark:text-red-400\">{error}</p>\r\n        )}\r\n        {helperText && !error && (\r\n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">{helperText}</p>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nSelect.displayName = 'Select'\r\n\r\nexport function NumberInput({ label, error, helperText, className = '', ...props }: InputProps) {\r\n  return (\r\n    <Input\r\n      type=\"number\"\r\n      label={label}\r\n      error={error}\r\n      helperText={helperText}\r\n      className={className}\r\n      {...props}\r\n    />\r\n  )\r\n}","import { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Card } from '@/components/ui/Card'\r\nimport { Button } from '@/components/ui/Button'\r\nimport { Select } from '@/components/ui/Input'\r\nimport { \r\n  TrendingUp, \r\n  BarChart3, \r\n  Brain, \r\n  Download, \r\n  Play, \r\n  Pause \r\n} from 'lucide-react'\r\nimport { useTradingStore } from '@/stores/appStore'\r\nimport toast from 'react-hot-toast'\r\n\r\ninterface QuickActionsProps {\r\n  availableCharts: string[]\r\n  portfolioId?: string\r\n}\r\n\r\nexport function QuickActions({ availableCharts }: Omit<QuickActionsProps, 'portfolioId'>) {\r\n  const navigate = useNavigate()\r\n  const { autoTradingEnabled, setAutoTradingEnabled } = useTradingStore()\r\n  const [selectedChart, setSelectedChart] = useState('')\r\n\r\n  const formatFilename = (filename: string) => {\r\n    return filename\r\n      .replace('.json', '')\r\n      .replace(/_/g, ' ')\r\n      .replace(/-/g, ' ')\r\n      .split(' ')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ')\r\n  }\r\n\r\n  const handleQuickTrade = () => {\r\n    if (!selectedChart) {\r\n      toast.error('Please select a chart first')\r\n      return\r\n    }\r\n    navigate('/trading')\r\n  }\r\n\r\n  const handleViewChart = () => {\r\n    if (!selectedChart) {\r\n      toast.error('Please select a chart first')\r\n      return\r\n    }\r\n    navigate('/charts')\r\n  }\r\n\r\n  const handleToggleAutoTrading = () => {\r\n    setAutoTradingEnabled(!autoTradingEnabled)\r\n    toast.success(autoTradingEnabled ? 'Auto-trading disabled' : 'Auto-trading enabled')\r\n  }\r\n\r\n  return (\r\n    <Card className=\"p-4\">\r\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n        Quick Actions\r\n      </h3>\r\n      \r\n      <div className=\"space-y-4\">\r\n        {/* Chart Selection */}\r\n        <Select\r\n          label=\"Select Chart\"\r\n          value={selectedChart}\r\n          onChange={(e) => setSelectedChart(e.target.value)}\r\n        >\r\n          <option value=\"\">Choose a chart...</option>\r\n          {availableCharts.map((file) => (\r\n            <option key={file} value={file}>\r\n              {formatFilename(file)}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"grid grid-cols-2 gap-2\">\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            onClick={handleQuickTrade}\r\n            icon={<TrendingUp className=\"h-4 w-4\" />}\r\n            disabled={!selectedChart}\r\n          >\r\n            Quick Trade\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={handleViewChart}\r\n            icon={<BarChart3 className=\"h-4 w-4\" />}\r\n            disabled={!selectedChart}\r\n          >\r\n            View Chart\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Navigation Buttons */}\r\n        <div className=\"space-y-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => navigate('/strategies')}\r\n            icon={<Brain className=\"h-4 w-4\" />}\r\n            className=\"w-full justify-start\"\r\n          >\r\n            Manage Strategies\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => navigate('/settings')}\r\n            icon={<Download className=\"h-4 w-4\" />}\r\n            className=\"w-full justify-start\"\r\n          >\r\n            Download Data\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Auto Trading Toggle */}\r\n        <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n              Auto Trading\r\n            </span>\r\n            <div className={`h-2 w-2 rounded-full ${autoTradingEnabled ? 'bg-green-500' : 'bg-gray-400'}`}></div>\r\n          </div>\r\n          \r\n          <Button\r\n            variant={autoTradingEnabled ? 'danger' : 'success'}\r\n            size=\"sm\"\r\n            onClick={handleToggleAutoTrading}\r\n            icon={autoTradingEnabled ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\r\n            className=\"w-full\"\r\n          >\r\n            {autoTradingEnabled ? 'Disable Auto Trading' : 'Enable Auto Trading'}\r\n          </Button>\r\n          \r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n            {autoTradingEnabled \r\n              ? 'Automated trading is active based on strategy signals'\r\n              : 'Manual trading mode - trades require confirmation'\r\n            }\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  )\r\n}","import { ReactNode } from 'react'\r\n\r\nexport interface BadgeProps {\r\n  children: ReactNode\r\n  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger'\r\n  size?: 'sm' | 'md'\r\n  className?: string\r\n}\r\n\r\nexport function Badge({ \r\n  children, \r\n  variant = 'primary', \r\n  size = 'sm',\r\n  className = '' \r\n}: BadgeProps) {\r\n  const baseClasses = 'inline-flex items-center font-medium rounded-full'\r\n  \r\n  const variantClasses = {\r\n    primary: 'bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300',\r\n    secondary: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',\r\n    success: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',\r\n    warning: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',\r\n    danger: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'\r\n  }\r\n  \r\n  const sizeClasses = {\r\n    sm: 'px-2 py-0.5 text-xs',\r\n    md: 'px-2.5 py-1 text-sm'\r\n  }\r\n\r\n  return (\r\n    <span className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}>\r\n      {children}\r\n    </span>\r\n  )\r\n}","import { Card } from '@/components/ui/Card'\r\nimport { Badge } from '@/components/ui/Badge'\r\nimport { TrendingUp, TrendingDown, Clock, Activity } from 'lucide-react'\r\nimport type { Trade, TradingSignal } from '@/types'\r\n\r\ninterface RecentActivityProps {\r\n  trades: Trade[]\r\n  signals: TradingSignal[]\r\n}\r\n\r\nexport function RecentActivity({ trades, signals }: RecentActivityProps) {\r\n  const formatTime = (timestamp: string) => {\r\n    return new Date(timestamp).toLocaleString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  }\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2\r\n    }).format(value)\r\n  }\r\n\r\n  const getTradeIcon = (tradeType: string) => {\r\n    return tradeType === 'long' \r\n      ? <TrendingUp className=\"h-4 w-4 text-green-500\" />\r\n      : <TrendingDown className=\"h-4 w-4 text-red-500\" />\r\n  }\r\n\r\n  const getSignalIcon = (signalType: string) => {\r\n    switch (signalType) {\r\n      case 'entry':\r\n        return <TrendingUp className=\"h-4 w-4 text-blue-500\" />\r\n      case 'exit':\r\n        return <TrendingDown className=\"h-4 w-4 text-orange-500\" />\r\n      default:\r\n        return <Activity className=\"h-4 w-4 text-gray-500\" />\r\n    }\r\n  }\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const variants: Record<string, 'success' | 'warning' | 'danger' | 'secondary'> = {\r\n      open: 'success',\r\n      closed: 'secondary',\r\n      pending: 'warning',\r\n      cancelled: 'danger'\r\n    }\r\n    return variants[status] || 'secondary'\r\n  }\r\n\r\n  // Combine and sort recent activity\r\n  const recentActivity = [\r\n    ...trades.slice(0, 5).map(trade => ({\r\n      id: trade.id,\r\n      type: 'trade' as const,\r\n      timestamp: trade.entry_time,\r\n      data: trade\r\n    })),\r\n    ...signals.slice(0, 5).map(signal => ({\r\n      id: signal.id,\r\n      type: 'signal' as const,\r\n      timestamp: signal.timestamp,\r\n      data: signal\r\n    }))\r\n  ].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\r\n    .slice(0, 8)\r\n\r\n  return (\r\n    <Card className=\"p-6\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Recent Activity\r\n        </h3>\r\n        <div className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400\">\r\n          <Clock className=\"h-4 w-4\" />\r\n          <span>Last 24 hours</span>\r\n        </div>\r\n      </div>\r\n\r\n      {recentActivity.length === 0 ? (\r\n        <div className=\"text-center py-8\">\r\n          <Activity className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\r\n          <p className=\"text-gray-500 dark:text-gray-400\">No recent activity</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-3\">\r\n          {recentActivity.map((item) => (\r\n            <div key={`${item.type}-${item.id}`} className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\r\n              <div className=\"flex-shrink-0\">\r\n                {item.type === 'trade' \r\n                  ? getTradeIcon(item.data.trade_type)\r\n                  : getSignalIcon(item.data.signal_type)\r\n                }\r\n              </div>\r\n              \r\n              <div className=\"flex-1 min-w-0\">\r\n                {item.type === 'trade' ? (\r\n                  <div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                        {item.data.trade_type.toUpperCase()} {item.data.symbol}\r\n                      </span>\r\n                      <Badge variant={getStatusBadge(item.data.status)}>\r\n                        {item.data.status}\r\n                      </Badge>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400\">\r\n                      <span>{formatCurrency(item.data.entry_price)}</span>\r\n                      <span>•</span>\r\n                      <span>{item.data.quantity} units</span>\r\n                      {item.data.realized_pnl !== 0 && (\r\n                        <>\r\n                          <span>•</span>\r\n                          <span className={item.data.realized_pnl >= 0 ? 'text-green-600' : 'text-red-600'}>\r\n                            {formatCurrency(item.data.realized_pnl)}\r\n                          </span>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                        {item.data.signal_type.toUpperCase()} signal for {item.data.symbol}\r\n                      </span>\r\n                      <Badge variant=\"secondary\">\r\n                        {(item.data.confidence * 100).toFixed(0)}%\r\n                      </Badge>\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      {item.data.reason} • {formatCurrency(item.data.price)}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"flex-shrink-0 text-xs text-gray-400 dark:text-gray-500\">\r\n                {formatTime(item.timestamp)}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Card>\r\n  )\r\n}","import { Line } from 'react-chartjs-2'\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js'\r\nimport { Card } from '@/components/ui/Card'\r\nimport type { PortfolioPerformance } from '@/types'\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n)\r\n\r\ninterface PerformanceOverviewProps {\r\n  performance: PortfolioPerformance\r\n  timeRange: string\r\n}\r\n\r\nexport function PerformanceOverview({ performance, timeRange }: PerformanceOverviewProps) {\r\n  const chartData = {\r\n    labels: performance.dates,\r\n    datasets: [\r\n      {\r\n        label: 'Equity Curve',\r\n        data: performance.equity_curve,\r\n        borderColor: '#3b82f6',\r\n        backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n        borderWidth: 2,\r\n        fill: true,\r\n        tension: 0.1,\r\n        pointRadius: 0,\r\n        pointHoverRadius: 4\r\n      },\r\n      {\r\n        label: 'Cumulative Returns',\r\n        data: performance.cumulative_returns.map(r => r * 100),\r\n        borderColor: '#10b981',\r\n        backgroundColor: 'rgba(16, 185, 129, 0.1)',\r\n        borderWidth: 2,\r\n        fill: false,\r\n        tension: 0.1,\r\n        pointRadius: 0,\r\n        pointHoverRadius: 4,\r\n        yAxisID: 'percentage'\r\n      }\r\n    ]\r\n  }\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    interaction: {\r\n      mode: 'index' as const,\r\n      intersect: false,\r\n    },\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: `Portfolio Performance - ${timeRange.toUpperCase()}`,\r\n        font: {\r\n          size: 16,\r\n          weight: 'bold' as const\r\n        }\r\n      },\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      tooltip: {\r\n        mode: 'index' as const,\r\n        intersect: false,\r\n        callbacks: {\r\n          title: (context: any) => {\r\n            return new Date(context[0].label).toLocaleDateString()\r\n          },\r\n          label: (context: any) => {\r\n            const label = context.dataset.label || ''\r\n            if (label === 'Equity Curve') {\r\n              return `${label}: $${context.parsed.y.toLocaleString()}`\r\n            } else {\r\n              return `${label}: ${context.parsed.y.toFixed(2)}%`\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        display: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Date'\r\n        }\r\n      },\r\n      y: {\r\n        type: 'linear' as const,\r\n        display: true,\r\n        position: 'left' as const,\r\n        title: {\r\n          display: true,\r\n          text: 'Portfolio Value ($)'\r\n        },\r\n        ticks: {\r\n          callback: function(value: any) {\r\n            return '$' + value.toLocaleString()\r\n          }\r\n        }\r\n      },\r\n      percentage: {\r\n        type: 'linear' as const,\r\n        display: true,\r\n        position: 'right' as const,\r\n        title: {\r\n          display: true,\r\n          text: 'Cumulative Return (%)'\r\n        },\r\n        grid: {\r\n          drawOnChartArea: false,\r\n        },\r\n        ticks: {\r\n          callback: function(value: any) {\r\n            return value.toFixed(1) + '%'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const formatMetric = (value: number, isPercentage = false) => {\r\n    if (isPercentage) {\r\n      return `${value >= 0 ? '+' : ''}${(value * 100).toFixed(2)}%`\r\n    }\r\n    return value.toFixed(2)\r\n  }\r\n\r\n  return (\r\n    <Card className=\"p-6\">\r\n      <div className=\"h-80 mb-6\">\r\n        <Line data={chartData} options={options} />\r\n      </div>\r\n      \r\n      {/* Performance Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n            {formatMetric(performance.sharpe_ratio)}\r\n          </div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Sharpe Ratio</div>\r\n        </div>\r\n        \r\n        <div className=\"text-center\">\r\n          <div className={`text-2xl font-bold ${performance.max_drawdown < 0 ? 'text-red-600' : 'text-gray-900 dark:text-white'}`}>\r\n            {formatMetric(performance.max_drawdown, true)}\r\n          </div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Max Drawdown</div>\r\n        </div>\r\n        \r\n        <div className=\"text-center\">\r\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n            {formatMetric(performance.volatility, true)}\r\n          </div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Volatility</div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  )\r\n}","import { useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { Card } from '@/components/ui/Card'\r\nimport { Button } from '@/components/ui/Button'\r\nimport { RefreshCw, TrendingUp, TrendingDown } from 'lucide-react'\r\n\r\n// Mock market data - in real app this would come from an API\r\nconst mockMarketData = [\r\n  { symbol: 'BTCUSD', price: 43250.50, change: 1250.30, changePercent: 2.98 },\r\n  { symbol: 'ETHUSD', price: 2680.75, change: -85.25, changePercent: -3.08 },\r\n  { symbol: 'EURUSD', price: 1.0895, change: 0.0012, changePercent: 0.11 },\r\n  { symbol: 'GBPUSD', price: 1.2734, change: -0.0043, changePercent: -0.34 },\r\n  { symbol: 'USDJPY', price: 149.82, change: 0.76, changePercent: 0.51 }\r\n]\r\n\r\nexport function MarketOverview() {\r\n  const [refreshing, setRefreshing] = useState(false)\r\n\r\n  // In a real app, this would fetch from market data API\r\n  const { data: marketData = mockMarketData, refetch } = useQuery(\r\n    'marketOverview',\r\n    () => Promise.resolve(mockMarketData),\r\n    {\r\n      refetchInterval: 30000, // Refresh every 30 seconds\r\n      staleTime: 15000 // Consider data stale after 15 seconds\r\n    }\r\n  )\r\n\r\n  const handleRefresh = async () => {\r\n    setRefreshing(true)\r\n    await refetch()\r\n    setTimeout(() => setRefreshing(false), 1000)\r\n  }\r\n\r\n  const formatPrice = (symbol: string, price: number) => {\r\n    // Format based on asset type\r\n    if (symbol.includes('USD') && !symbol.startsWith('USD')) {\r\n      return `$${price.toLocaleString()}`\r\n    } else if (symbol.startsWith('USD')) {\r\n      return price.toFixed(2)\r\n    } else {\r\n      return price.toFixed(4)\r\n    }\r\n  }\r\n\r\n  const formatChange = (change: number, symbol: string) => {\r\n    const prefix = change >= 0 ? '+' : ''\r\n    if (symbol.includes('USD') && !symbol.startsWith('USD')) {\r\n      return `${prefix}$${change.toFixed(2)}`\r\n    } else {\r\n      return `${prefix}${change.toFixed(4)}`\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className=\"p-4\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Market Overview\r\n        </h3>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={handleRefresh}\r\n          disabled={refreshing}\r\n        >\r\n          <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\r\n        </Button>\r\n      </div>\r\n\r\n      <div className=\"space-y-3\">\r\n        {marketData.map((item) => (\r\n          <div\r\n            key={item.symbol}\r\n            className=\"flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\r\n          >\r\n            <div>\r\n              <div className=\"font-medium text-gray-900 dark:text-white text-sm\">\r\n                {item.symbol}\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                {formatPrice(item.symbol, item.price)}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"text-right\">\r\n              <div className={`flex items-center space-x-1 text-sm ${\r\n                item.change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\r\n              }`}>\r\n                {item.change >= 0 ? (\r\n                  <TrendingUp className=\"h-3 w-3\" />\r\n                ) : (\r\n                  <TrendingDown className=\"h-3 w-3\" />\r\n                )}\r\n                <span>{formatChange(item.change, item.symbol)}</span>\r\n              </div>\r\n              <div className={`text-xs ${\r\n                item.changePercent >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\r\n              }`}>\r\n                {item.changePercent >= 0 ? '+' : ''}{item.changePercent.toFixed(2)}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mt-4 pt-3 border-t border-gray-200 dark:border-gray-700\">\r\n        <div className=\"flex items-center justify-center text-xs text-gray-500 dark:text-gray-400\">\r\n          <div className=\"h-2 w-2 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\r\n          Live market data • Updates every 30s\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  )\r\n}","import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios'\r\nimport toast from 'react-hot-toast'\r\n\r\n// API Configuration\r\nconst API_BASE_URL = (import.meta as any).env?.VITE_API_URL || 'http://localhost:8000'\r\n\r\n// Create axios instance\r\nconst api: AxiosInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add auth token if available\r\n    const token = localStorage.getItem('auth_token')\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    return response\r\n  },\r\n  (error: AxiosError) => {\r\n    // Handle common errors\r\n    if (error.response?.status === 401) {\r\n      // Unauthorized - clear token and redirect to login\r\n      localStorage.removeItem('auth_token')\r\n      toast.error('Session expired. Please log in again.')\r\n    } else if (error.response?.status === 403) {\r\n      toast.error('Access denied')\r\n    } else if (error.response?.status === 404) {\r\n      toast.error('Resource not found')\r\n    } else if (error.response?.status === 500) {\r\n      toast.error('Server error. Please try again later.')\r\n    } else if (error.code === 'NETWORK_ERROR') {\r\n      toast.error('Network error. Please check your connection.')\r\n    } else {\r\n      // Generic error message\r\n      const message = (error.response?.data as any)?.detail || error.message || 'An error occurred'\r\n      toast.error(message)\r\n    }\r\n\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// API response types\r\nexport interface ApiResponse<T = any> {\r\n  success: boolean\r\n  message?: string\r\n  data?: T\r\n}\r\n\r\nexport interface PaginatedResponse<T = any> extends ApiResponse<T[]> {\r\n  total: number\r\n  page: number\r\n  size: number\r\n  pages: number\r\n}\r\n\r\n// Generic API methods\r\nexport class ApiClient {\r\n  static async get<T>(url: string, params?: any): Promise<T> {\r\n    const response = await api.get(url, { params })\r\n    return response.data\r\n  }\r\n\r\n  static async post<T>(url: string, data?: any, config?: any): Promise<T> {\r\n    const response = await api.post(url, data, config)\r\n    return response.data\r\n  }\r\n\r\n  static async put<T>(url: string, data?: any): Promise<T> {\r\n    const response = await api.put(url, data)\r\n    return response.data\r\n  }\r\n\r\n  static async delete<T>(url: string, config?: any): Promise<T> {\r\n    const response = await api.delete(url, config)\r\n    return response.data\r\n  }\r\n\r\n  static async patch<T>(url: string, data?: any): Promise<T> {\r\n    const response = await api.patch(url, data)\r\n    return response.data\r\n  }\r\n}\r\n\r\nexport default api","import { ApiClient } from './api'\r\nimport type { Portfolio, PortfolioRequest, PortfolioResponse, PortfolioPerformance, Trade } from '@/types'\r\n\r\nexport interface PortfolioValue {\r\n  total_value: number\r\n  cash_balance: number\r\n  positions_value: number\r\n  unrealized_pnl: number\r\n  realized_pnl: number\r\n}\r\n\r\nexport interface PortfolioMetrics {\r\n  total_return: number\r\n  annualized_return: number\r\n  volatility: number\r\n  sharpe_ratio: number\r\n  max_drawdown: number\r\n  win_rate: number\r\n  profit_factor: number\r\n  calmar_ratio: number\r\n}\r\n\r\nexport interface DrawdownData {\r\n  current_drawdown: number\r\n  max_drawdown: number\r\n  drawdown_duration: number\r\n  recovery_time?: number\r\n  drawdown_periods: Array<{\r\n    start_date: string\r\n    end_date: string\r\n    max_drawdown: number\r\n    recovery_date?: string\r\n  }>\r\n}\r\n\r\nexport interface RiskMetrics {\r\n  var_95: number\r\n  var_99: number\r\n  cvar_95: number\r\n  cvar_99: number\r\n  beta?: number\r\n  alpha?: number\r\n  information_ratio?: number\r\n  tracking_error?: number\r\n}\r\n\r\nexport interface RebalanceRecommendation {\r\n  symbol: string\r\n  current_weight: number\r\n  target_weight: number\r\n  recommended_action: 'buy' | 'sell' | 'hold'\r\n  quantity: number\r\n  value: number\r\n}\r\n\r\nexport class PortfolioService {\r\n  /**\r\n   * List all portfolios\r\n   */\r\n  static async getPortfolios(): Promise<Portfolio[]> {\r\n    return ApiClient.get<Portfolio[]>('/api/portfolio/list')\r\n  }\r\n\r\n  /**\r\n   * Get portfolio positions\r\n   */\r\n  static async getPortfolioPositions(portfolioId: string): Promise<any[]> {\r\n    return ApiClient.get<any[]>(`/api/portfolio/${portfolioId}/positions`)\r\n  }\r\n\r\n  /**\r\n   * Get portfolio performance data\r\n   */\r\n  static async getPortfolioPerformance(portfolioId: string): Promise<PortfolioPerformance> {\r\n    return ApiClient.get<PortfolioPerformance>(`/api/portfolio/${portfolioId}/performance`)\r\n  }\r\n\r\n  /**\r\n   * Create new portfolio\r\n   */\r\n  static async createPortfolio(request: PortfolioRequest): Promise<PortfolioResponse> {\r\n    return ApiClient.post<PortfolioResponse>('/api/portfolio/create', request)\r\n  }\r\n\r\n  /**\r\n   * Get portfolio by ID\r\n   */\r\n  static async getPortfolio(portfolioId: string): Promise<Portfolio> {\r\n    return ApiClient.get<Portfolio>(`/api/portfolio/${portfolioId}`)\r\n  }\r\n\r\n  /**\r\n   * Update portfolio balance\r\n   */\r\n  static async updateBalance(\r\n    portfolioId: string, \r\n    newBalance: number, \r\n    reason?: string\r\n  ): Promise<Portfolio> {\r\n    const data = { balance: newBalance, reason }\r\n    return ApiClient.put<Portfolio>(`/api/portfolio/${portfolioId}/balance`, data)\r\n  }\r\n\r\n  /**\r\n   * Add trade to portfolio\r\n   */\r\n  static async addTrade(portfolioId: string, trade: Trade): Promise<Portfolio> {\r\n    return ApiClient.post<Portfolio>(`/api/portfolio/${portfolioId}/trade`, trade)\r\n  }\r\n\r\n  /**\r\n   * Get portfolio trades\r\n   */\r\n  static async getPortfolioTrades(\r\n    portfolioId: string,\r\n    limit?: number,\r\n    offset?: number\r\n  ): Promise<Trade[]> {\r\n    const params: any = {}\r\n    if (limit) params.limit = limit\r\n    if (offset) params.offset = offset\r\n    \r\n    return ApiClient.get<Trade[]>(`/api/portfolio/${portfolioId}/trades`, params)\r\n  }\r\n\r\n  /**\r\n   * Calculate total portfolio value\r\n   */\r\n  static async getPortfolioValue(portfolioId: string): Promise<PortfolioValue> {\r\n    return ApiClient.get<PortfolioValue>(`/api/portfolio/${portfolioId}/value`)\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics\r\n   */\r\n  static async getPerformance(\r\n    portfolioId: string,\r\n    startDate?: string,\r\n    endDate?: string\r\n  ): Promise<PortfolioPerformance> {\r\n    const params: any = {}\r\n    if (startDate) params.start_date = startDate\r\n    if (endDate) params.end_date = endDate\r\n    \r\n    return ApiClient.get<PortfolioPerformance>(`/api/portfolio/${portfolioId}/performance`, params)\r\n  }\r\n\r\n  /**\r\n   * Calculate portfolio drawdown\r\n   */\r\n  static async getDrawdown(portfolioId: string): Promise<DrawdownData> {\r\n    return ApiClient.get<DrawdownData>(`/api/portfolio/${portfolioId}/drawdown`)\r\n  }\r\n\r\n  /**\r\n   * Get risk metrics\r\n   */\r\n  static async getRiskMetrics(\r\n    portfolioId: string,\r\n    benchmark?: string\r\n  ): Promise<RiskMetrics> {\r\n    const params = benchmark ? { benchmark } : {}\r\n    return ApiClient.get<RiskMetrics>(`/api/portfolio/${portfolioId}/risk-metrics`, params)\r\n  }\r\n\r\n  /**\r\n   * Generate rebalancing trades\r\n   */\r\n  static async getRebalanceRecommendations(\r\n    portfolioId: string,\r\n    targetWeights: Record<string, number>\r\n  ): Promise<RebalanceRecommendation[]> {\r\n    const data = { target_weights: targetWeights }\r\n    return ApiClient.post<RebalanceRecommendation[]>(`/api/portfolio/${portfolioId}/rebalance`, data)\r\n  }\r\n\r\n  /**\r\n   * Delete portfolio\r\n   */\r\n  static async deletePortfolio(portfolioId: string): Promise<{ message: string }> {\r\n    return ApiClient.delete<{ message: string }>(`/api/portfolio/${portfolioId}`)\r\n  }\r\n\r\n  /**\r\n   * Get portfolio summary statistics\r\n   */\r\n  static async getPortfolioSummary(portfolioId: string) {\r\n    const [portfolio, value, performance] = await Promise.all([\r\n      this.getPortfolio(portfolioId),\r\n      this.getPortfolioValue(portfolioId),\r\n      this.getPerformance(portfolioId)\r\n    ])\r\n\r\n    return {\r\n      portfolio,\r\n      value,\r\n      performance,\r\n      totalReturn: ((value.total_value - portfolio.initial_balance) / portfolio.initial_balance) * 100\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate position size based on portfolio risk\r\n   */\r\n  static calculatePositionSize(\r\n    portfolioValue: number,\r\n    riskPerTrade: number,\r\n    entryPrice: number,\r\n    stopLoss: number\r\n  ): number {\r\n    const riskAmount = portfolioValue * (riskPerTrade / 100)\r\n    const riskPerShare = Math.abs(entryPrice - stopLoss)\r\n    \r\n    if (riskPerShare === 0) return 0\r\n    \r\n    return Math.floor(riskAmount / riskPerShare)\r\n  }\r\n}","// Core trading types\r\nexport interface Candle {\r\n  timestamp: string\r\n  open: number\r\n  high: number\r\n  low: number\r\n  close: number\r\n  volume?: number\r\n}\r\n\r\nexport interface ChartMetadata {\r\n  asset_name: string\r\n  currency: string\r\n  period_duration: string\r\n  symbol?: string\r\n  exchange?: string\r\n}\r\n\r\nexport interface ChartData {\r\n  metadata: ChartMetadata\r\n  candles: Candle[]\r\n}\r\n\r\nexport interface ChartDataRequest {\r\n  symbol: string\r\n  interval?: string\r\n  limit?: number\r\n  start_date?: string\r\n  end_date?: string\r\n}\r\n\r\nexport interface ChartDataResponse {\r\n  success: boolean\r\n  message?: string\r\n  data?: ChartData\r\n  filename?: string\r\n}\r\n\r\n// Trading types\r\nexport enum TradeType {\r\n  LONG = 'long',\r\n  SHORT = 'short'\r\n}\r\n\r\nexport enum TradeStatus {\r\n  OPEN = 'open',\r\n  CLOSED = 'closed',\r\n  PENDING = 'pending',\r\n  CANCELLED = 'cancelled'\r\n}\r\n\r\nexport interface Trade {\r\n  id: string\r\n  symbol: string\r\n  trade_type: TradeType\r\n  status: TradeStatus\r\n  entry_price: number\r\n  entry_time: string\r\n  quantity: number\r\n  exit_price?: number\r\n  exit_time?: string\r\n  stop_loss?: number\r\n  take_profit?: number\r\n  realized_pnl: number\r\n  unrealized_pnl: number\r\n  strategy_name?: string\r\n  notes?: string\r\n}\r\n\r\nexport interface TradeRequest {\r\n  symbol: string\r\n  trade_type: TradeType\r\n  quantity: number\r\n  price?: number\r\n  stop_loss?: number\r\n  take_profit?: number\r\n  strategy_name?: string\r\n}\r\n\r\nexport interface TradeResponse {\r\n  success: boolean\r\n  message?: string\r\n  trade?: Trade\r\n}\r\n\r\n// Portfolio types\r\nexport interface Portfolio {\r\n  id: string\r\n  name: string\r\n  initial_balance: number\r\n  current_balance: number\r\n  currency: string\r\n  total_value: number\r\n  unrealized_pnl: number\r\n  realized_pnl: number\r\n  total_pnl: number\r\n  total_trades: number\r\n  winning_trades: number\r\n  losing_trades: number\r\n  max_drawdown: number\r\n  risk_per_trade: number\r\n}\r\n\r\nexport interface PortfolioSummary {\r\n  current_balance: number\r\n  equity: number\r\n  total_pnl: number\r\n  unrealized_pnl: number\r\n  realized_pnl: number\r\n  open_trades: number\r\n  total_trades: number\r\n  win_rate: number\r\n  return_percentage: number\r\n  max_drawdown: number\r\n}\r\n\r\nexport interface PositionSummary {\r\n  symbol: string\r\n  open_positions: number\r\n  total_units: number\r\n  average_price: number\r\n  unrealized_pnl: number\r\n  side: string\r\n}\r\n\r\nexport interface PortfolioPerformance {\r\n  daily_returns: number[]\r\n  cumulative_returns: number[]\r\n  equity_curve: number[]\r\n  dates: string[]\r\n  sharpe_ratio: number\r\n  max_drawdown: number\r\n  volatility: number\r\n}\r\n\r\nexport interface PortfolioRequest {\r\n  name: string\r\n  initial_balance: number\r\n  currency?: string\r\n  risk_per_trade?: number\r\n}\r\n\r\nexport interface PortfolioResponse {\r\n  success: boolean\r\n  message?: string\r\n  portfolio?: Portfolio\r\n}\r\n\r\n// Strategy types\r\nexport enum SignalType {\r\n  ENTRY = 'entry',\r\n  EXIT = 'exit',\r\n  PYRAMID = 'pyramid',\r\n  STOP_LOSS = 'stop_loss',\r\n  TAKE_PROFIT = 'take_profit'\r\n}\r\n\r\nexport interface TradingSignal {\r\n  id: string\r\n  symbol: string\r\n  signal_type: SignalType\r\n  trade_type: TradeType\r\n  price: number\r\n  confidence: number\r\n  quantity: number\r\n  reason: string\r\n  timestamp: string\r\n  strategy_name: string\r\n  stop_loss?: number\r\n  take_profit?: number\r\n  metadata?: Record<string, any>\r\n}\r\n\r\nexport interface StrategyConfig {\r\n  name: string\r\n  description?: string\r\n  version?: string\r\n  parameters?: Record<string, any>\r\n  entry_rules?: string[]\r\n  exit_rules?: string[]\r\n  max_position_size?: number\r\n  stop_loss_pct?: number\r\n  take_profit_pct?: number\r\n  timeframes?: string[]\r\n  is_active?: boolean\r\n  created_at?: string\r\n}\r\n\r\nexport interface BacktestRequest {\r\n  strategy_name: string\r\n  symbol: string\r\n  start_date: string\r\n  end_date: string\r\n  initial_balance?: number\r\n  parameters?: Record<string, any>\r\n}\r\n\r\nexport interface BacktestResult {\r\n  strategy_name: string\r\n  symbol: string\r\n  start_date: string\r\n  end_date: string\r\n  initial_balance: number\r\n  final_balance: number\r\n  total_return: number\r\n  total_trades: number\r\n  winning_trades: number\r\n  losing_trades: number\r\n  win_rate: number\r\n  max_drawdown: number\r\n  sharpe_ratio: number\r\n  trades: any[]\r\n  signals: TradingSignal[]\r\n  equity_curve: number[]\r\n  returns: number[]\r\n  dates: string[]\r\n}\r\n\r\n// Market data types\r\nexport interface TradingPair {\r\n  symbol: string\r\n  asset_name: string\r\n  currency: string\r\n  base?: string\r\n  quote?: string\r\n}\r\n\r\nexport interface DataSource {\r\n  name: string\r\n  description: string\r\n  type: string\r\n  supported_intervals: string[]\r\n  api_key_required?: boolean\r\n  rate_limit?: number\r\n}\r\n\r\nexport interface PriceData {\r\n  symbol: string\r\n  price: number\r\n  change: number\r\n  change_percent: number\r\n  volume: number\r\n  timestamp: string\r\n  high_24h?: number\r\n  low_24h?: number\r\n  market_cap?: number\r\n}\r\n\r\n// API response types\r\nexport interface ApiResponse<T = any> {\r\n  success: boolean\r\n  message?: string\r\n  data?: T\r\n}\r\n\r\nexport interface PaginatedResponse<T = any> extends ApiResponse<T[]> {\r\n  total: number\r\n  page: number\r\n  size: number\r\n  pages: number\r\n}\r\n\r\n// UI State types\r\nexport interface AppState {\r\n  sidebarOpen: boolean\r\n  darkMode: boolean\r\n  selectedPortfolio: string | null\r\n  activeStrategy: string | null\r\n}\r\n\r\nexport interface ChartState {\r\n  selectedSymbol: string | null\r\n  selectedInterval: string\r\n  selectedChartFile: string | null\r\n}\r\n\r\nexport interface TradingState {\r\n  autoTradingEnabled: boolean\r\n  selectedStrategy: string | null\r\n  riskPerTrade: number\r\n}\r\n\r\n// Utility types\r\nexport type SortDirection = 'asc' | 'desc'\r\n\r\nexport interface SortConfig {\r\n  key: string\r\n  direction: SortDirection\r\n}\r\n\r\nexport interface FilterConfig {\r\n  [key: string]: any\r\n}\r\n\r\nexport interface TableColumn<T = any> {\r\n  key: keyof T\r\n  label: string\r\n  sortable?: boolean\r\n  render?: (value: any, item: T) => React.ReactNode\r\n}\r\n\r\n// WebSocket types\r\nexport interface WebSocketMessage {\r\n  type: string\r\n  data: any\r\n  timestamp: string\r\n}\r\n\r\nexport interface RealtimeUpdate {\r\n  type: 'trade' | 'signal' | 'portfolio' | 'price'\r\n  data: any\r\n}","import { ApiClient } from './api'\r\nimport type {\r\n  Trade,\r\n  TradeRequest,\r\n  TradeResponse,\r\n  TradingSignal,\r\n  StrategyConfig,\r\n  BacktestRequest,\r\n  BacktestResult\r\n} from '@/types'\r\nimport { TradeStatus, TradeType } from '@/types'\r\n\r\nexport interface Position {\r\n  symbol: string\r\n  quantity: number\r\n  entry_price: number\r\n  current_price: number\r\n  unrealized_pnl: number\r\n  side: 'long' | 'short'\r\n  entry_time: string\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  total_trades: number\r\n  winning_trades: number\r\n  losing_trades: number\r\n  win_rate: number\r\n  total_pnl: number\r\n  avg_win: number\r\n  avg_loss: number\r\n  profit_factor: number\r\n  max_drawdown: number\r\n  sharpe_ratio: number\r\n  return_percentage: number\r\n}\r\n\r\nexport interface PositionCalculation {\r\n  symbol: string\r\n  position_size: number\r\n  risk_amount: number\r\n  entry_price: number\r\n  stop_loss: number\r\n  take_profit?: number\r\n  risk_reward_ratio: number\r\n}\r\n\r\nexport interface StopTarget {\r\n  trade_id: string\r\n  symbol: string\r\n  current_price: number\r\n  stop_loss: number\r\n  take_profit?: number\r\n  should_close: boolean\r\n  reason: string\r\n}\r\n\r\nexport class TradingService {\r\n  /**\r\n   * Get trading strategies\r\n   */\r\n  static async getStrategies(): Promise<StrategyConfig[]> {\r\n    return ApiClient.get<StrategyConfig[]>('/api/trading/strategies')\r\n  }\r\n\r\n  /**\r\n   * Get trading signals\r\n   */\r\n  static async getSignals(\r\n    symbol?: string,\r\n    limit: number = 100\r\n  ): Promise<TradingSignal[]> {\r\n    const params: any = { limit }\r\n    if (symbol) params.symbol = symbol\r\n    \r\n    return ApiClient.get<TradingSignal[]>('/api/trading/signals', params)\r\n  }\r\n\r\n  /**\r\n   * Get backtest results\r\n   */\r\n  static async getBacktestResults(\r\n    strategyName: string,\r\n    symbol?: string\r\n  ): Promise<BacktestResult[]> {\r\n    const params: any = { strategy_name: strategyName }\r\n    if (symbol) params.symbol = symbol\r\n    \r\n    return ApiClient.get<BacktestResult[]>('/api/trading/backtest/results', params)\r\n  }\r\n\r\n  /**\r\n   * Run backtest\r\n   */\r\n  static async runBacktest(request: BacktestRequest): Promise<BacktestResult> {\r\n    return ApiClient.post<BacktestResult>('/api/trading/backtest', request)\r\n  }\r\n\r\n  /**\r\n   * Activate strategy\r\n   */\r\n  static async activateStrategy(strategyName: string): Promise<{ success: boolean }> {\r\n    return ApiClient.post<{ success: boolean }>('/api/trading/strategy/activate', { \r\n      strategy_name: strategyName \r\n    })\r\n  }\r\n\r\n  /**\r\n   * Deactivate strategy\r\n   */\r\n  static async deactivateStrategy(strategyName: string): Promise<{ success: boolean }> {\r\n    return ApiClient.post<{ success: boolean }>('/api/trading/strategy/deactivate', { \r\n      strategy_name: strategyName \r\n    })\r\n  }\r\n\r\n  /**\r\n   * Start auto trading\r\n   */\r\n  static async startAutoTrading(): Promise<{ success: boolean }> {\r\n    return ApiClient.post<{ success: boolean }>('/api/trading/auto/start', {})\r\n  }\r\n\r\n  /**\r\n   * Stop auto trading\r\n   */\r\n  static async stopAutoTrading(): Promise<{ success: boolean }> {\r\n    return ApiClient.post<{ success: boolean }>('/api/trading/auto/stop', {})\r\n  }\r\n\r\n  /**\r\n   * Get all trades (open/closed)\r\n   */\r\n  static async getTrades(\r\n    status?: 'open' | 'closed' | 'all',\r\n    symbol?: string,\r\n    limit: number = 100\r\n  ): Promise<Trade[]> {\r\n    const params: any = { limit }\r\n    if (status && status !== 'all') params.status = status\r\n    if (symbol) params.symbol = symbol\r\n    \r\n    return ApiClient.get<Trade[]>('/api/trading/trades', params)\r\n  }\r\n\r\n  /**\r\n   * Create new trade\r\n   */\r\n  static async createTrade(request: TradeRequest): Promise<TradeResponse> {\r\n    return ApiClient.post<TradeResponse>('/api/trading/trade', request)\r\n  }\r\n\r\n  /**\r\n   * Close existing trade\r\n   */\r\n  static async closeTrade(tradeId: string, exitPrice?: number): Promise<TradeResponse> {\r\n    const data: any = { trade_id: tradeId }\r\n    if (exitPrice) data.exit_price = exitPrice\r\n    \r\n    return ApiClient.post<TradeResponse>('/api/trading/close', data)\r\n  }\r\n\r\n  /**\r\n   * Get open positions\r\n   */\r\n  static async getPositions(symbol?: string): Promise<Position[]> {\r\n    const params = symbol ? { symbol } : {}\r\n    return ApiClient.get<Position[]>('/api/trading/positions', params)\r\n  }\r\n\r\n  /**\r\n   * Get trading performance statistics\r\n   */\r\n  static async getPerformance(\r\n    symbol?: string,\r\n    startDate?: string,\r\n    endDate?: string\r\n  ): Promise<PerformanceMetrics> {\r\n    const params: any = {}\r\n    if (symbol) params.symbol = symbol\r\n    if (startDate) params.start_date = startDate\r\n    if (endDate) params.end_date = endDate\r\n    \r\n    return ApiClient.get<PerformanceMetrics>('/api/trading/performance', params)\r\n  }\r\n\r\n  /**\r\n   * Check stop losses and take profits\r\n   */\r\n  static async checkStopsTargets(symbol?: string): Promise<StopTarget[]> {\r\n    const params = symbol ? { symbol } : {}\r\n    return ApiClient.get<StopTarget[]>('/api/trading/stops-targets', params)\r\n  }\r\n\r\n  /**\r\n   * Calculate position size based on risk\r\n   */\r\n  static async calculatePosition(\r\n    symbol: string,\r\n    entryPrice: number,\r\n    stopLoss: number,\r\n    riskAmount: number,\r\n    takeProfit?: number\r\n  ): Promise<PositionCalculation> {\r\n    const data = {\r\n      symbol,\r\n      entry_price: entryPrice,\r\n      stop_loss: stopLoss,\r\n      risk_amount: riskAmount,\r\n      take_profit: takeProfit\r\n    }\r\n    \r\n    return ApiClient.post<PositionCalculation>('/api/trading/calculate-position', data)\r\n  }\r\n\r\n  /**\r\n   * WebSocket connection for real-time trade updates\r\n   */\r\n  static connectWebSocket(onMessage: (data: any) => void): WebSocket | null {\r\n    try {\r\n      const wsUrl = (import.meta as any).env?.VITE_WS_URL || 'ws://localhost:8000/api/trading/ws'\r\n      const ws = new WebSocket(wsUrl)\r\n      \r\n      ws.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data)\r\n          onMessage(data)\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error)\r\n        }\r\n      }\r\n      \r\n      ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error)\r\n      }\r\n      \r\n      ws.onclose = () => {\r\n        console.log('WebSocket connection closed')\r\n      }\r\n      \r\n      return ws\r\n    } catch (error) {\r\n      console.error('Error creating WebSocket connection:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate position size based on risk management\r\n   */\r\n  static calculatePositionSize(\r\n    accountBalance: number,\r\n    riskPerTrade: number,\r\n    entryPrice: number,\r\n    stopLoss: number\r\n  ): number {\r\n    const riskAmount = accountBalance * riskPerTrade\r\n    const riskPerShare = Math.abs(entryPrice - stopLoss)\r\n    \r\n    if (riskPerShare === 0) return 0\r\n    \r\n    return Math.floor(riskAmount / riskPerShare)\r\n  }\r\n\r\n  /**\r\n   * Calculate trade P&L\r\n   */\r\n  static calculatePnL(\r\n    trade: Trade,\r\n    currentPrice?: number\r\n  ): { realizedPnL: number; unrealizedPnL: number } {\r\n    let realizedPnL = 0\r\n    let unrealizedPnL = 0\r\n\r\n    if (trade.status === TradeStatus.CLOSED && trade.exit_price) {\r\n      if (trade.trade_type === TradeType.LONG) {\r\n        realizedPnL = (trade.exit_price - trade.entry_price) * trade.quantity\r\n      } else {\r\n        realizedPnL = (trade.entry_price - trade.exit_price) * trade.quantity\r\n      }\r\n    } else if (trade.status === TradeStatus.OPEN && currentPrice) {\r\n      if (trade.trade_type === TradeType.LONG) {\r\n        unrealizedPnL = (currentPrice - trade.entry_price) * trade.quantity\r\n      } else {\r\n        unrealizedPnL = (trade.entry_price - currentPrice) * trade.quantity\r\n      }\r\n    }\r\n\r\n    return { realizedPnL, unrealizedPnL }\r\n  }\r\n}","import { ApiClient } from './api'\r\nimport type { ChartData } from '@/types'\r\n\r\nexport interface TechnicalIndicators {\r\n  sma?: number[]\r\n  ema?: number[]\r\n  rsi?: number[]\r\n  macd?: {\r\n    macd: number[]\r\n    signal: number[]\r\n    histogram: number[]\r\n  }\r\n  bollinger_bands?: {\r\n    upper: number[]\r\n    middle: number[]\r\n    lower: number[]\r\n  }\r\n}\r\n\r\nexport interface ChartPattern {\r\n  type: string\r\n  start_index: number\r\n  end_index: number\r\n  confidence: number\r\n  description: string\r\n}\r\n\r\nexport interface SupportResistanceLevel {\r\n  level: number\r\n  type: 'support' | 'resistance'\r\n  strength: number\r\n  touches: number[]\r\n}\r\n\r\nexport interface VolatilityData {\r\n  historical_volatility: number\r\n  implied_volatility?: number\r\n  volatility_percentile: number\r\n  rolling_volatility: number[]\r\n}\r\n\r\nexport interface MarketSummary {\r\n  symbol: string\r\n  price: number\r\n  change: number\r\n  change_percent: number\r\n  volume: number\r\n  high_24h: number\r\n  low_24h: number\r\n  market_cap?: number\r\n  timestamp: string\r\n}\r\n\r\nexport class ChartService {\r\n  /**\r\n   * List available chart files\r\n   */\r\n  static async listChartFiles(): Promise<string[]> {\r\n    return ApiClient.get<string[]>('/api/charts/files')\r\n  }\r\n\r\n  /**\r\n   * Get chart data with technical indicators\r\n   */\r\n  static async getChartData(\r\n    symbol: string,\r\n    interval: string = '1d',\r\n    limit: number = 100,\r\n    indicators?: string[]\r\n  ): Promise<ChartData & { indicators?: TechnicalIndicators }> {\r\n    const params: any = { symbol, interval, limit }\r\n    if (indicators && indicators.length > 0) {\r\n      params.indicators = indicators.join(',')\r\n    }\r\n    \r\n    return ApiClient.get<ChartData & { indicators?: TechnicalIndicators }>('/api/charts/data', params)\r\n  }\r\n\r\n  /**\r\n   * Get chart statistics\r\n   */\r\n  static async getChartStats(filename: string): Promise<any> {\r\n    return ApiClient.get(`/api/charts/stats/${filename}`)\r\n  }\r\n\r\n  /**\r\n   * Resample chart data to different interval\r\n   */\r\n  static async resampleChartData(filename: string, interval: string): Promise<ChartData> {\r\n    return ApiClient.post<ChartData>('/api/charts/resample', { filename, interval })\r\n  }\r\n\r\n  /**\r\n   * Calculate technical indicators\r\n   */\r\n  static async getIndicators(\r\n    symbol: string,\r\n    indicators: string[],\r\n    period?: number,\r\n    interval: string = '1d'\r\n  ): Promise<TechnicalIndicators> {\r\n    const data = {\r\n      symbol,\r\n      indicators,\r\n      period,\r\n      interval\r\n    }\r\n    \r\n    return ApiClient.post<TechnicalIndicators>('/api/charts/indicators', data)\r\n  }\r\n\r\n  /**\r\n   * Detect chart patterns\r\n   */\r\n  static async getPatterns(\r\n    symbol: string,\r\n    pattern_types?: string[],\r\n    interval: string = '1d'\r\n  ): Promise<ChartPattern[]> {\r\n    const params: any = { symbol, interval }\r\n    if (pattern_types && pattern_types.length > 0) {\r\n      params.pattern_types = pattern_types.join(',')\r\n    }\r\n    \r\n    return ApiClient.get<ChartPattern[]>('/api/charts/patterns', params)\r\n  }\r\n\r\n  /**\r\n   * Get support and resistance levels\r\n   */\r\n  static async getSupportResistance(\r\n    symbol: string,\r\n    interval: string = '1d',\r\n    lookback_periods: number = 50\r\n  ): Promise<SupportResistanceLevel[]> {\r\n    const params = {\r\n      symbol,\r\n      interval,\r\n      lookback_periods\r\n    }\r\n    \r\n    return ApiClient.get<SupportResistanceLevel[]>('/api/charts/support-resistance', params)\r\n  }\r\n\r\n  /**\r\n   * Calculate price volatility\r\n   */\r\n  static async getVolatility(\r\n    symbol: string,\r\n    period: number = 20,\r\n    interval: string = '1d'\r\n  ): Promise<VolatilityData> {\r\n    const params = {\r\n      symbol,\r\n      period,\r\n      interval\r\n    }\r\n    \r\n    return ApiClient.get<VolatilityData>('/api/charts/volatility', params)\r\n  }\r\n\r\n  /**\r\n   * Get market summary for symbol\r\n   */\r\n  static async getMarketSummary(symbol: string): Promise<MarketSummary> {\r\n    const params = { symbol }\r\n    \r\n    return ApiClient.get<MarketSummary>('/api/charts/market-summary', params)\r\n  }\r\n}","import { useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { PortfolioSummary } from './PortfolioSummary'\r\nimport { QuickActions } from './QuickActions'\r\nimport { RecentActivity } from './RecentActivity'\r\nimport { PerformanceOverview } from './PerformanceOverview'\r\nimport { MarketOverview } from './MarketOverview'\r\nimport { Card } from '@/components/ui/Card'\r\nimport { PortfolioService } from '@/services/portfolioService'\r\nimport { TradingService } from '@/services/tradingService'\r\nimport { ChartService } from '@/services/chartService'\r\nimport { useAppStore } from '@/stores/appStore'\r\nimport type { Trade, TradingSignal } from '@/types'\r\n\r\nexport function Dashboard() {\r\n  const { selectedPortfolio } = useAppStore()\r\n  const [timeRange, setTimeRange] = useState<'1d' | '7d' | '30d' | '90d'>('30d')\r\n\r\n  // Get default portfolio ID if none selected\r\n  const { data: portfolios = [] } = useQuery('portfolios', PortfolioService.getPortfolios)\r\n  const portfolioId = selectedPortfolio || portfolios[0]?.id\r\n\r\n  // Portfolio summary\r\n  const { data: portfolioSummary, isLoading: portfolioLoading } = useQuery(\r\n    ['portfolioSummary', portfolioId],\r\n    () => portfolioId ? PortfolioService.getPortfolioSummary(portfolioId) : undefined,\r\n    { enabled: !!portfolioId }\r\n  )\r\n\r\n  // Recent trades\r\n  const { data: recentTrades = [] } = useQuery<Trade[]>(\r\n    'recentTrades',\r\n    () => TradingService.getTrades(undefined, undefined, 10),\r\n    { refetchInterval: 30000 } // Refresh every 30 seconds\r\n  )\r\n\r\n  // Recent signals\r\n  const { data: recentSignals = [] } = useQuery<TradingSignal[]>(\r\n    'recentSignals',\r\n    () => TradingService.getSignals(undefined, 10),\r\n    { refetchInterval: 30000 }\r\n  )\r\n\r\n  // Available chart files\r\n  const { data: chartFiles = [] } = useQuery<string[]>('chartFiles', ChartService.listChartFiles)\r\n\r\n  // Portfolio performance\r\n  const { data: performance } = useQuery(\r\n    ['portfolioPerformance', portfolioId, timeRange],\r\n    () => portfolioId ? PortfolioService.getPortfolioPerformance(portfolioId) : null,\r\n    { enabled: !!portfolioId }\r\n  )\r\n\r\n\r\n  if (portfolioLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"spinner\"></div>\r\n        <span className=\"ml-2 text-gray-600 dark:text-gray-400\">Loading dashboard...</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Page Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n            Trading Dashboard\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Overview of your trading performance and market activity\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Time Range Selector */}\r\n        <div className=\"mt-4 sm:mt-0\">\r\n          <div className=\"flex space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1\">\r\n            {['1d', '7d', '30d', '90d'].map((range) => (\r\n              <button\r\n                key={range}\r\n                onClick={() => setTimeRange(range as any)}\r\n                className={`px-3 py-1 text-sm font-medium rounded transition-colors ${\r\n                  timeRange === range\r\n                    ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm'\r\n                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\r\n                }`}\r\n              >\r\n                {range.toUpperCase()}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Portfolio Summary */}\r\n      {portfolioSummary && portfolioSummary.portfolio && portfolioSummary.value && (\r\n        <PortfolioSummary summary={{\r\n          current_balance: portfolioSummary.value.cash_balance,\r\n          equity: portfolioSummary.value.total_value,\r\n          total_pnl: portfolioSummary.value.realized_pnl + portfolioSummary.value.unrealized_pnl,\r\n          unrealized_pnl: portfolioSummary.value.unrealized_pnl,\r\n          realized_pnl: portfolioSummary.value.realized_pnl,\r\n          open_trades: 0, // This would need to be fetched separately\r\n          total_trades: portfolioSummary.portfolio.total_trades,\r\n          win_rate: portfolioSummary.portfolio.winning_trades / portfolioSummary.portfolio.total_trades * 100,\r\n          return_percentage: portfolioSummary.totalReturn,\r\n          max_drawdown: portfolioSummary.portfolio.max_drawdown\r\n        }} />\r\n      )}\r\n\r\n      {/* Main Grid */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Left Column */}\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          {/* Performance Overview */}\r\n          {performance && (\r\n            <PerformanceOverview \r\n              performance={performance} \r\n              timeRange={timeRange}\r\n            />\r\n          )}\r\n\r\n          {/* Recent Activity */}\r\n          <RecentActivity \r\n            trades={recentTrades} \r\n            signals={recentSignals} \r\n          />\r\n        </div>\r\n\r\n        {/* Right Column */}\r\n        <div className=\"space-y-6\">\r\n          {/* Quick Actions */}\r\n          <QuickActions \r\n            availableCharts={chartFiles}\r\n          />\r\n\r\n          {/* Market Overview */}\r\n          <MarketOverview />\r\n\r\n          {/* System Status */}\r\n          <Card className=\"p-4\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n              System Status\r\n            </h3>\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">API Connection</span>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\r\n                  <span className=\"text-sm text-green-600 dark:text-green-400\">Connected</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Data Feed</span>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                  <span className=\"text-sm text-green-600 dark:text-green-400\">Live</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Trading Engine</span>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <div className=\"h-2 w-2 bg-yellow-500 rounded-full\"></div>\r\n                  <span className=\"text-sm text-yellow-600 dark:text-yellow-400\">Standby</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { forwardRef, SelectHTMLAttributes } from 'react'\r\nimport { clsx } from 'clsx'\r\n\r\nexport interface SelectProps extends Omit<SelectHTMLAttributes<HTMLSelectElement>, 'size'> {\r\n  variant?: 'default' | 'outline'\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nexport const Select = forwardRef<HTMLSelectElement, SelectProps>(\r\n  ({ className, variant = 'default', size = 'md', ...props }, ref) => {\r\n    return (\r\n      <select\r\n        ref={ref}\r\n        className={clsx(\r\n          'rounded-md border border-gray-300 bg-white px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500',\r\n          {\r\n            'h-8 px-2 text-xs': size === 'sm',\r\n            'h-10 px-3 text-sm': size === 'md',\r\n            'h-12 px-4 text-base': size === 'lg',\r\n            'border-gray-300': variant === 'default',\r\n            'border-gray-300 bg-transparent': variant === 'outline',\r\n          },\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\n\r\nSelect.displayName = 'Select'","import { Select, Button } from '@/components/ui'\r\nimport { Download, RefreshCw, Settings, TrendingUp } from 'lucide-react'\r\n\r\ninterface ChartControlsProps {\r\n  selectedInterval: string\r\n  onIntervalChange: (interval: string) => void\r\n  availableIntervals: string[]\r\n  selectedFile: string | null\r\n  onFileChange: (filename: string) => void\r\n  availableFiles: string[]\r\n  onRefresh: () => void\r\n  onDownload: () => void\r\n  loading?: boolean\r\n}\r\n\r\nconst INTERVAL_LABELS: Record<string, string> = {\r\n  '1min': '1 Minute',\r\n  '5min': '5 Minutes',\r\n  '15min': '15 Minutes',\r\n  '1h': '1 Hour',\r\n  '4h': '4 Hours',\r\n  '12h': '12 Hours',\r\n  '1d': '1 Day',\r\n  '1w': '1 Week'\r\n}\r\n\r\nexport function ChartControls({\r\n  selectedInterval,\r\n  onIntervalChange,\r\n  availableIntervals,\r\n  selectedFile,\r\n  onFileChange,\r\n  availableFiles,\r\n  onRefresh,\r\n  onDownload,\r\n  loading = false\r\n}: ChartControlsProps) {\r\n  const formatFilename = (filename: string) => {\r\n    // Remove .json extension and format for display\r\n    return filename\r\n      .replace('.json', '')\r\n      .replace(/_/g, ' ')\r\n      .replace(/-/g, ' ')\r\n      .split(' ')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ')\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-4 mb-6\">\r\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0 lg:space-x-4\">\r\n        {/* Chart Selection */}\r\n        <div className=\"flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\r\n          <div className=\"min-w-0 flex-1\">\r\n            <Select\r\n              value={selectedFile || ''}\r\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => onFileChange(e.target.value)}\r\n            >\r\n              <option value=\"\">Select a chart file...</option>\r\n              {availableFiles.map((file) => (\r\n                <option key={file} value={file}>\r\n                  {formatFilename(file)}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n\r\n          <div className=\"min-w-0 flex-1\">\r\n            <Select\r\n              value={selectedInterval}\r\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => onIntervalChange(e.target.value)}\r\n              disabled={!selectedFile}\r\n            >\r\n              {availableIntervals.map((interval) => (\r\n                <option key={interval} value={interval}>\r\n                  {INTERVAL_LABELS[interval] || interval}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={onRefresh}\r\n            disabled={loading}\r\n            icon={<RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />}\r\n          >\r\n            Refresh\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={onDownload}\r\n            icon={<Download className=\"h-4 w-4\" />}\r\n          >\r\n            Download Data\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            icon={<Settings className=\"h-4 w-4\" />}\r\n          >\r\n            Chart Settings\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chart Info */}\r\n      {selectedFile && (\r\n        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400\">\r\n            <div className=\"flex items-center space-x-1\">\r\n              <TrendingUp className=\"h-4 w-4\" />\r\n              <span>File: {formatFilename(selectedFile)}</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-1\">\r\n              <span>Interval: {INTERVAL_LABELS[selectedInterval] || selectedInterval}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}","import { useEffect, useRef, useState } from 'react'\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  TimeScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartOptions\r\n} from 'chart.js'\r\nimport { Chart } from 'react-chartjs-2'\r\nimport { CandlestickController, CandlestickElement } from 'chartjs-chart-financial'\r\nimport 'chartjs-adapter-date-fns'\r\nimport type { ChartData as ChartDataType, Candle } from '@/types'\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  TimeScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  CandlestickController,\r\n  CandlestickElement\r\n)\r\n\r\ninterface CandlestickChartProps {\r\n  data: ChartDataType\r\n  height?: number\r\n  showVolume?: boolean\r\n  overlays?: {\r\n    high_20?: number\r\n    low_20?: number\r\n    high_55?: number\r\n    low_55?: number\r\n  }\r\n  signals?: Array<{\r\n    timestamp: string\r\n    price: number\r\n    type: 'buy' | 'sell'\r\n    label?: string\r\n  }>\r\n}\r\n\r\nexport function CandlestickChart({ \r\n  data, \r\n  height = 400, \r\n  showVolume = false,\r\n  overlays = {},\r\n  signals = []\r\n}: CandlestickChartProps) {\r\n  const chartRef = useRef<ChartJS>(null)\r\n  const [chartData, setChartData] = useState<any>(null)\r\n\r\n  useEffect(() => {\r\n    if (!data.candles || data.candles.length === 0) return\r\n\r\n    // Transform candle data for Chart.js\r\n    const candleData = data.candles.map((candle: Candle) => ({\r\n      x: new Date(candle.timestamp).getTime(),\r\n      o: candle.open,\r\n      h: candle.high,\r\n      l: candle.low,\r\n      c: candle.close,\r\n      v: candle.volume || 0\r\n    }))\r\n\r\n    // Create datasets\r\n    const datasets: any[] = [\r\n      {\r\n        label: data.metadata.asset_name,\r\n        data: candleData,\r\n        type: 'candlestick',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1,\r\n        color: {\r\n          up: '#22c55e',\r\n          down: '#ef4444',\r\n          unchanged: '#6b7280'\r\n        }\r\n      }\r\n    ]\r\n\r\n    // Add overlay lines\r\n    if (overlays.high_20) {\r\n      datasets.push({\r\n        label: '20-Day High',\r\n        data: candleData.map(d => ({ x: d.x, y: overlays.high_20 })),\r\n        type: 'line',\r\n        borderColor: '#3b82f6',\r\n        borderDash: [5, 5],\r\n        borderWidth: 1,\r\n        pointRadius: 0,\r\n        fill: false\r\n      })\r\n    }\r\n\r\n    if (overlays.low_20) {\r\n      datasets.push({\r\n        label: '20-Day Low',\r\n        data: candleData.map(d => ({ x: d.x, y: overlays.low_20 })),\r\n        type: 'line',\r\n        borderColor: '#3b82f6',\r\n        borderDash: [5, 5],\r\n        borderWidth: 1,\r\n        pointRadius: 0,\r\n        fill: false\r\n      })\r\n    }\r\n\r\n    if (overlays.high_55) {\r\n      datasets.push({\r\n        label: '55-Day High',\r\n        data: candleData.map(d => ({ x: d.x, y: overlays.high_55 })),\r\n        type: 'line',\r\n        borderColor: '#ef4444',\r\n        borderDash: [2, 2],\r\n        borderWidth: 1,\r\n        pointRadius: 0,\r\n        fill: false\r\n      })\r\n    }\r\n\r\n    if (overlays.low_55) {\r\n      datasets.push({\r\n        label: '55-Day Low',\r\n        data: candleData.map(d => ({ x: d.x, y: overlays.low_55 })),\r\n        type: 'line',\r\n        borderColor: '#ef4444',\r\n        borderDash: [2, 2],\r\n        borderWidth: 1,\r\n        pointRadius: 0,\r\n        fill: false\r\n      })\r\n    }\r\n\r\n    // Add trading signals\r\n    if (signals.length > 0) {\r\n      const buySignals = signals.filter(s => s.type === 'buy').map(s => ({\r\n        x: new Date(s.timestamp).getTime(),\r\n        y: s.price\r\n      }))\r\n\r\n      const sellSignals = signals.filter(s => s.type === 'sell').map(s => ({\r\n        x: new Date(s.timestamp).getTime(),\r\n        y: s.price\r\n      }))\r\n\r\n      if (buySignals.length > 0) {\r\n        datasets.push({\r\n          label: 'Buy Signals',\r\n          data: buySignals,\r\n          type: 'scatter',\r\n          backgroundColor: '#22c55e',\r\n          borderColor: '#16a34a',\r\n          pointRadius: 6,\r\n          pointHoverRadius: 8,\r\n          showLine: false\r\n        })\r\n      }\r\n\r\n      if (sellSignals.length > 0) {\r\n        datasets.push({\r\n          label: 'Sell Signals',\r\n          data: sellSignals,\r\n          type: 'scatter',\r\n          backgroundColor: '#ef4444',\r\n          borderColor: '#dc2626',\r\n          pointRadius: 6,\r\n          pointHoverRadius: 8,\r\n          showLine: false\r\n        })\r\n      }\r\n    }\r\n\r\n    // Add volume chart if requested\r\n    if (showVolume) {\r\n      datasets.push({\r\n        label: 'Volume',\r\n        data: candleData.map(d => ({ x: d.x, y: d.v })),\r\n        type: 'bar',\r\n        backgroundColor: 'rgba(156, 163, 175, 0.3)',\r\n        borderColor: 'rgba(156, 163, 175, 0.8)',\r\n        borderWidth: 1,\r\n        yAxisID: 'volume',\r\n        order: 1\r\n      })\r\n    }\r\n\r\n    setChartData({ datasets })\r\n  }, [data, overlays, signals, showVolume])\r\n\r\n  const options: ChartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    interaction: {\r\n      mode: 'index',\r\n      intersect: false,\r\n    },\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: `${data.metadata.asset_name} (${data.metadata.currency}) - ${data.metadata.period_duration}`,\r\n        font: {\r\n          size: 16,\r\n          weight: 'bold'\r\n        }\r\n      },\r\n      legend: {\r\n        display: true,\r\n        position: 'top'\r\n      },\r\n      tooltip: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n          title: (context) => {\r\n            const date = new Date(context[0].parsed.x)\r\n            return date.toLocaleString()\r\n          },\r\n          label: (context) => {\r\n            const dataset = context.dataset\r\n            if (dataset.type === 'candlestick') {\r\n              const data = context.raw as any\r\n              return [\r\n                `Open: ${data.o.toFixed(2)}`,\r\n                `High: ${data.h.toFixed(2)}`,\r\n                `Low: ${data.l.toFixed(2)}`,\r\n                `Close: ${data.c.toFixed(2)}`,\r\n                `Volume: ${data.v.toLocaleString()}`\r\n              ]\r\n            }\r\n            return `${dataset.label}: ${context.parsed.y.toFixed(2)}`\r\n          }\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        type: 'time',\r\n        time: {\r\n          displayFormats: {\r\n            minute: 'HH:mm',\r\n            hour: 'MMM dd HH:mm',\r\n            day: 'MMM dd',\r\n            week: 'MMM dd',\r\n            month: 'MMM yyyy',\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Time'\r\n        }\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n        position: 'right',\r\n        title: {\r\n          display: true,\r\n          text: `Price (${data.metadata.currency})`\r\n        }\r\n      },\r\n      ...(showVolume && {\r\n        volume: {\r\n          type: 'linear',\r\n          position: 'left',\r\n          title: {\r\n            display: true,\r\n            text: 'Volume'\r\n          },\r\n          grid: {\r\n            display: false\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  if (!chartData) {\r\n    return (\r\n      <div className=\"chart-container flex items-center justify-center\">\r\n        <div className=\"spinner\"></div>\r\n        <span className=\"ml-2 text-gray-600\">Loading chart...</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-container\" style={{ height: `${height}px` }}>\r\n      <Chart\r\n        ref={chartRef}\r\n        type={\"candlestick\" as any}\r\n        data={chartData}\r\n        options={options}\r\n      />\r\n    </div>\r\n  )\r\n}","import { useState, useEffect } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { toast } from 'react-hot-toast'\r\nimport { ChartControls } from './ChartControls'\r\nimport { CandlestickChart } from './CandlestickChart'\r\nimport { MetricCard } from '@/components/common/MetricCard'\r\nimport { Card } from '@/components/ui/Card'\r\nimport { ChartService } from '@/services/chartService'\r\nimport { useChartStore } from '@/stores/appStore'\r\nimport type { ChartData } from '@/types'\r\nimport { BarChart3, Clock, TrendingUp, Volume2 } from 'lucide-react'\r\n\r\nexport function ChartsPage() {\r\n  const {\r\n    selectedChartFile,\r\n    selectedInterval,\r\n    setSelectedChartFile,\r\n    setSelectedInterval\r\n  } = useChartStore()\r\n\r\n  const [chartData, setChartData] = useState<ChartData | null>(null)\r\n  const [chartStats, setChartStats] = useState<any>(null)\r\n\r\n  // Query for available chart files\r\n  const { data: chartFiles = [], isLoading: filesLoading, refetch: refetchFiles } = useQuery(\r\n    'chartFiles',\r\n    ChartService.listChartFiles,\r\n    {\r\n      onError: (error) => {\r\n        toast.error('Failed to load chart files')\r\n        console.error('Chart files error:', error)\r\n      }\r\n    }\r\n  )\r\n\r\n  // Query for chart data when file is selected\r\n  const { isLoading: chartLoading, refetch: refetchChart } = useQuery(\r\n    ['chartData', selectedChartFile],\r\n    () => selectedChartFile ? ChartService.getChartData(selectedChartFile) : null,\r\n    {\r\n      enabled: !!selectedChartFile,\r\n      onSuccess: (data) => {\r\n        if (data) {\r\n          setChartData(data)\r\n          // Load chart statistics\r\n          ChartService.getChartStats(selectedChartFile!).then(setChartStats)\r\n        }\r\n      },\r\n      onError: (error) => {\r\n        toast.error('Failed to load chart data')\r\n        console.error('Chart data error:', error)\r\n      }\r\n    }\r\n  )\r\n\r\n  // Get available intervals based on chart data\r\n  const getAvailableIntervals = () => {\r\n    if (!chartData) return ['1d']\r\n    \r\n    const nativePeriod = chartData.metadata.period_duration\r\n    const hierarchy = ['1min', '5min', '15min', '1h', '4h', '12h', '1d', '1w']\r\n    const nativeIndex = hierarchy.indexOf(nativePeriod)\r\n    \r\n    return nativeIndex >= 0 ? hierarchy.slice(nativeIndex) : hierarchy\r\n  }\r\n\r\n  // Handle file selection\r\n  const handleFileChange = (filename: string) => {\r\n    if (filename) {\r\n      setSelectedChartFile(filename)\r\n    }\r\n  }\r\n\r\n  // Handle interval change\r\n  const handleIntervalChange = (interval: string) => {\r\n    setSelectedInterval(interval)\r\n    \r\n    // If interval is different from native, resample the data\r\n    if (chartData && interval !== chartData.metadata.period_duration) {\r\n      ChartService.resampleChartData(selectedChartFile!, interval)\r\n        .then((resampledData) => {\r\n          setChartData({\r\n            ...resampledData,\r\n            metadata: {\r\n              ...resampledData.metadata,\r\n              period_duration: interval\r\n            }\r\n          })\r\n        })\r\n        .catch((error) => {\r\n          toast.error('Failed to resample chart data')\r\n          console.error('Resample error:', error)\r\n        })\r\n    }\r\n  }\r\n\r\n  // Handle refresh\r\n  const handleRefresh = () => {\r\n    refetchFiles()\r\n    if (selectedChartFile) {\r\n      refetchChart()\r\n    }\r\n  }\r\n\r\n  // Handle download (placeholder)\r\n  const handleDownload = () => {\r\n    toast('Download functionality will be implemented')\r\n  }\r\n\r\n  // Auto-select first file if none selected\r\n  useEffect(() => {\r\n    if (chartFiles.length > 0 && !selectedChartFile) {\r\n      setSelectedChartFile(chartFiles[0])\r\n    }\r\n  }, [chartFiles, selectedChartFile, setSelectedChartFile])\r\n\r\n  const isLoading = filesLoading || chartLoading\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Page Header */}\r\n      <div>\r\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n          Charts\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Interactive candlestick charts with trading analysis\r\n        </p>\r\n      </div>\r\n\r\n      {/* Chart Controls */}\r\n      <ChartControls\r\n        selectedInterval={selectedInterval}\r\n        onIntervalChange={handleIntervalChange}\r\n        availableIntervals={getAvailableIntervals()}\r\n        selectedFile={selectedChartFile}\r\n        onFileChange={handleFileChange}\r\n        availableFiles={chartFiles}\r\n        onRefresh={handleRefresh}\r\n        onDownload={handleDownload}\r\n        loading={isLoading}\r\n      />\r\n\r\n      {/* Chart Statistics */}\r\n      {chartStats && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <MetricCard\r\n            title=\"Price Range\"\r\n            value={`${chartStats.priceStats.min.toFixed(2)} - ${chartStats.priceStats.max.toFixed(2)}`}\r\n            subtitle={chartData?.metadata.currency}\r\n            icon={<BarChart3 className=\"h-4 w-4\" />}\r\n          />\r\n          <MetricCard\r\n            title=\"Price Change\"\r\n            value={`${chartStats.priceStats.change.toFixed(2)}`}\r\n            change={chartStats.priceStats.changePercent}\r\n            changeType=\"percentage\"\r\n            valueColor={chartStats.priceStats.change >= 0 ? 'positive' : 'negative'}\r\n            icon={<TrendingUp className=\"h-4 w-4\" />}\r\n          />\r\n          <MetricCard\r\n            title=\"Total Candles\"\r\n            value={chartStats.totalCandles.toLocaleString()}\r\n            subtitle={`${selectedInterval} intervals`}\r\n            icon={<Clock className=\"h-4 w-4\" />}\r\n          />\r\n          <MetricCard\r\n            title=\"Avg Volume\"\r\n            value={chartStats.volumeStats.average.toLocaleString()}\r\n            subtitle=\"Per period\"\r\n            icon={<Volume2 className=\"h-4 w-4\" />}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Main Chart */}\r\n      <Card className=\"p-6\">\r\n        {isLoading ? (\r\n          <div className=\"flex items-center justify-center h-96\">\r\n            <div className=\"spinner\"></div>\r\n            <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\r\n              Loading chart data...\r\n            </span>\r\n          </div>\r\n        ) : chartData ? (\r\n          <CandlestickChart\r\n            data={chartData}\r\n            height={500}\r\n            showVolume={true}\r\n          />\r\n        ) : (\r\n          <div className=\"flex items-center justify-center h-96\">\r\n            <div className=\"text-center\">\r\n              <BarChart3 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n              <p className=\"text-gray-600 dark:text-gray-400\">\r\n                {chartFiles.length === 0 \r\n                  ? 'No chart files available. Download some data to get started.'\r\n                  : 'Select a chart file to view the data.'\r\n                }\r\n              </p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Card>\r\n\r\n      {/* Chart Information */}\r\n      {chartData && (\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Chart Information\r\n          </h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm\">\r\n            <div>\r\n              <span className=\"font-medium text-gray-700 dark:text-gray-300\">Asset:</span>\r\n              <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\r\n                {chartData.metadata.asset_name}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <span className=\"font-medium text-gray-700 dark:text-gray-300\">Currency:</span>\r\n              <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\r\n                {chartData.metadata.currency}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <span className=\"font-medium text-gray-700 dark:text-gray-300\">Period:</span>\r\n              <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\r\n                {chartData.metadata.period_duration}\r\n              </span>\r\n            </div>\r\n            {chartStats && (\r\n              <>\r\n                <div>\r\n                  <span className=\"font-medium text-gray-700 dark:text-gray-300\">Date Range:</span>\r\n                  <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\r\n                    {new Date(chartStats.dateRange.start).toLocaleDateString()} - {new Date(chartStats.dateRange.end).toLocaleDateString()}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"font-medium text-gray-700 dark:text-gray-300\">Avg Price:</span>\r\n                  <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\r\n                    {chartStats.priceStats.average.toFixed(2)} {chartData.metadata.currency}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"font-medium text-gray-700 dark:text-gray-300\">Total Volume:</span>\r\n                  <span className=\"ml-2 text-gray-600 dark:text-gray-400\">\r\n                    {chartStats.volumeStats.total.toLocaleString()}\r\n                  </span>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  )\r\n}","import { useState } from 'react'\r\nimport { Button } from '@/components/ui/Button'\r\nimport { Card } from '@/components/ui/Card'\r\nimport { useQuery } from 'react-query'\r\nimport { TradingService } from '@/services/tradingService'\r\nimport { StrategyConfig, TradingSignal, Trade } from '@/types'\r\n\r\nexport function TradingPage() {\r\n  const [selectedStrategy, setSelectedStrategy] = useState<string | null>(null)\r\n  const [autoTradingEnabled, setAutoTradingEnabled] = useState(false)\r\n\r\n  const { data: strategies = [], isLoading: strategiesLoading } = useQuery<StrategyConfig[]>(\r\n    'strategies',\r\n    TradingService.getStrategies\r\n  )\r\n\r\n  const { data: signals = [] } = useQuery<TradingSignal[]>(\r\n    'trading-signals',\r\n    () => TradingService.getSignals()\r\n  )\r\n\r\n  const { data: trades = [] } = useQuery<Trade[]>(\r\n    'trades',\r\n    () => TradingService.getTrades()\r\n  )\r\n\r\n  const handleToggleAutoTrading = async () => {\r\n    if (!selectedStrategy) return\r\n    \r\n    try {\r\n      if (autoTradingEnabled) {\r\n        await TradingService.stopAutoTrading()\r\n      } else {\r\n        await TradingService.startAutoTrading()\r\n      }\r\n      setAutoTradingEnabled(!autoTradingEnabled)\r\n    } catch (error) {\r\n      console.error('Error toggling auto trading:', error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900\">Trading</h1>\r\n        <Button \r\n          onClick={handleToggleAutoTrading}\r\n          disabled={!selectedStrategy}\r\n          variant={autoTradingEnabled ? 'destructive' : 'default'}\r\n        >\r\n          {autoTradingEnabled ? 'Stop Auto Trading' : 'Start Auto Trading'}\r\n        </Button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Strategy Selection</h3>\r\n          {strategiesLoading ? (\r\n            <div>Loading strategies...</div>\r\n          ) : (\r\n            <div className=\"space-y-2\">\r\n              {strategies.map((strategy) => (\r\n                <div\r\n                  key={strategy.name}\r\n                  className={`p-3 border rounded-lg cursor-pointer ${\r\n                    selectedStrategy === strategy.name\r\n                      ? 'border-blue-500 bg-blue-50'\r\n                      : 'border-gray-300 hover:bg-gray-50'\r\n                  }`}\r\n                  onClick={() => setSelectedStrategy(strategy.name)}\r\n                >\r\n                  <div className=\"font-medium\">{strategy.name}</div>\r\n                  {strategy.description && (\r\n                    <div className=\"text-sm text-gray-600\">{strategy.description}</div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Recent Signals</h3>\r\n          <div className=\"space-y-3\">\r\n            {signals.slice(0, 5).map((signal: TradingSignal) => (\r\n              <div key={signal.id} className=\"border-l-4 border-blue-500 pl-3\">\r\n                <div className=\"font-medium\">{signal.symbol}</div>\r\n                <div className=\"text-sm text-gray-600\">\r\n                  {signal.signal_type} - {signal.trade_type}\r\n                </div>\r\n                <div className=\"text-sm text-gray-500\">\r\n                  ${signal.price.toFixed(2)}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Active Trades</h3>\r\n          <div className=\"space-y-3\">\r\n            {trades.filter((trade: Trade) => trade.status === 'open').slice(0, 5).map((trade: Trade) => (\r\n              <div key={trade.id} className=\"border-l-4 border-green-500 pl-3\">\r\n                <div className=\"font-medium\">{trade.symbol}</div>\r\n                <div className=\"text-sm text-gray-600\">\r\n                  {trade.trade_type} - {trade.quantity} units\r\n                </div>\r\n                <div className={`text-sm ${\r\n                  trade.unrealized_pnl >= 0 ? 'text-green-600' : 'text-red-600'\r\n                }`}>\r\n                  P&L: ${trade.unrealized_pnl.toFixed(2)}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">Trade History</h3>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full\">\r\n            <thead>\r\n              <tr className=\"border-b\">\r\n                <th className=\"text-left py-2\">Symbol</th>\r\n                <th className=\"text-left py-2\">Type</th>\r\n                <th className=\"text-left py-2\">Quantity</th>\r\n                <th className=\"text-left py-2\">Entry Price</th>\r\n                <th className=\"text-left py-2\">Exit Price</th>\r\n                <th className=\"text-left py-2\">P&L</th>\r\n                <th className=\"text-left py-2\">Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {trades.map((trade: Trade) => (\r\n                <tr key={trade.id} className=\"border-b\">\r\n                  <td className=\"py-2\">{trade.symbol}</td>\r\n                  <td className=\"py-2\">{trade.trade_type}</td>\r\n                  <td className=\"py-2\">{trade.quantity}</td>\r\n                  <td className=\"py-2\">${trade.entry_price.toFixed(2)}</td>\r\n                  <td className=\"py-2\">\r\n                    {trade.exit_price ? `$${trade.exit_price.toFixed(2)}` : '-'}\r\n                  </td>\r\n                  <td className={`py-2 ${\r\n                    trade.realized_pnl >= 0 ? 'text-green-600' : 'text-red-600'\r\n                  }`}>\r\n                    ${trade.realized_pnl.toFixed(2)}\r\n                  </td>\r\n                  <td className=\"py-2\">\r\n                    <span className={`px-2 py-1 text-xs rounded-full ${\r\n                      trade.status === 'open' ? 'bg-green-100 text-green-800' :\r\n                      trade.status === 'closed' ? 'bg-gray-100 text-gray-800' :\r\n                      'bg-yellow-100 text-yellow-800'\r\n                    }`}>\r\n                      {trade.status}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  )\r\n}","import { useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { Card } from '@/components/ui/Card'\r\nimport { Button } from '@/components/ui/Button'\r\nimport { PortfolioService } from '@/services/portfolioService'\r\nimport { Portfolio, PositionSummary } from '@/types'\r\nimport { PortfolioSummary } from '@/components/dashboard/PortfolioSummary'\r\n\r\nexport function PortfolioPage() {\r\n  const [selectedPortfolio, setSelectedPortfolio] = useState<string | null>(null)\r\n\r\n  const { data: portfolios = [], isLoading: portfoliosLoading } = useQuery<Portfolio[]>(\r\n    'portfolios',\r\n    PortfolioService.getPortfolios\r\n  )\r\n\r\n  const { data: portfolioSummary } = useQuery(\r\n    ['portfolio-summary', selectedPortfolio],\r\n    () => selectedPortfolio ? PortfolioService.getPortfolioSummary(selectedPortfolio) : undefined,\r\n    {\r\n      enabled: !!selectedPortfolio\r\n    }\r\n  )\r\n\r\n  const { data: positions = [] } = useQuery<PositionSummary[]>(\r\n    ['portfolio-positions', selectedPortfolio],\r\n    () => selectedPortfolio ? PortfolioService.getPortfolioPositions(selectedPortfolio) : Promise.resolve([]),\r\n    {\r\n      enabled: !!selectedPortfolio\r\n    }\r\n  )\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900\">Portfolio</h1>\r\n        <Button>Create Portfolio</Button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Portfolio Selection</h3>\r\n          {portfoliosLoading ? (\r\n            <div>Loading portfolios...</div>\r\n          ) : (\r\n            <div className=\"space-y-2\">\r\n              {portfolios.map((portfolio) => (\r\n                <div\r\n                  key={portfolio.id}\r\n                  className={`p-3 border rounded-lg cursor-pointer ${\r\n                    selectedPortfolio === portfolio.id\r\n                      ? 'border-blue-500 bg-blue-50'\r\n                      : 'border-gray-300 hover:bg-gray-50'\r\n                  }`}\r\n                  onClick={() => setSelectedPortfolio(portfolio.id)}\r\n                >\r\n                  <div className=\"font-medium\">{portfolio.name}</div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    ${portfolio.current_balance.toFixed(2)}\r\n                  </div>\r\n                  <div className={`text-sm ${\r\n                    portfolio.total_pnl >= 0 ? 'text-green-600' : 'text-red-600'\r\n                  }`}>\r\n                    {portfolio.total_pnl >= 0 ? '+' : ''}${portfolio.total_pnl.toFixed(2)}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </Card>\r\n\r\n        <div className=\"lg:col-span-3 space-y-6\">\r\n          {selectedPortfolio && portfolioSummary && portfolioSummary.portfolio && portfolioSummary.value && (\r\n            <>\r\n              <PortfolioSummary summary={{\r\n                current_balance: portfolioSummary.value.cash_balance,\r\n                equity: portfolioSummary.value.total_value,\r\n                total_pnl: portfolioSummary.value.realized_pnl + portfolioSummary.value.unrealized_pnl,\r\n                unrealized_pnl: portfolioSummary.value.unrealized_pnl,\r\n                realized_pnl: portfolioSummary.value.realized_pnl,\r\n                open_trades: 0, // This would need to be fetched separately\r\n                total_trades: portfolioSummary.portfolio.total_trades,\r\n                win_rate: portfolioSummary.portfolio.winning_trades / portfolioSummary.portfolio.total_trades * 100,\r\n                return_percentage: portfolioSummary.totalReturn,\r\n                max_drawdown: portfolioSummary.portfolio.max_drawdown\r\n              }} />\r\n\r\n              <Card className=\"p-6\">\r\n                <h3 className=\"text-lg font-semibold mb-4\">Open Positions</h3>\r\n                {positions.length === 0 ? (\r\n                  <div className=\"text-gray-500 text-center py-8\">\r\n                    No open positions\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"overflow-x-auto\">\r\n                    <table className=\"min-w-full\">\r\n                      <thead>\r\n                        <tr className=\"border-b\">\r\n                          <th className=\"text-left py-2\">Symbol</th>\r\n                          <th className=\"text-left py-2\">Side</th>\r\n                          <th className=\"text-left py-2\">Positions</th>\r\n                          <th className=\"text-left py-2\">Units</th>\r\n                          <th className=\"text-left py-2\">Avg Price</th>\r\n                          <th className=\"text-left py-2\">Unrealized P&L</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {positions.map((position) => (\r\n                          <tr key={position.symbol} className=\"border-b\">\r\n                            <td className=\"py-2 font-medium\">{position.symbol}</td>\r\n                            <td className=\"py-2\">\r\n                              <span className={`px-2 py-1 text-xs rounded-full ${\r\n                                position.side === 'long' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\r\n                              }`}>\r\n                                {position.side}\r\n                              </span>\r\n                            </td>\r\n                            <td className=\"py-2\">{position.open_positions}</td>\r\n                            <td className=\"py-2\">{position.total_units}</td>\r\n                            <td className=\"py-2\">${position.average_price.toFixed(2)}</td>\r\n                            <td className={`py-2 ${\r\n                              position.unrealized_pnl >= 0 ? 'text-green-600' : 'text-red-600'\r\n                            }`}>\r\n                              {position.unrealized_pnl >= 0 ? '+' : ''}${position.unrealized_pnl.toFixed(2)}\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                )}\r\n              </Card>\r\n\r\n              <Card className=\"p-6\">\r\n                <h3 className=\"text-lg font-semibold mb-4\">Portfolio Details</h3>\r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                  <div>\r\n                    <div className=\"text-sm text-gray-600\">Total Trades</div>\r\n                    <div className=\"text-lg font-semibold\">{portfolioSummary.portfolio.total_trades}</div>\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"text-sm text-gray-600\">Win Rate</div>\r\n                    <div className=\"text-lg font-semibold\">{(portfolioSummary.portfolio.winning_trades / portfolioSummary.portfolio.total_trades * 100).toFixed(1)}%</div>\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"text-sm text-gray-600\">Return</div>\r\n                    <div className={`text-lg font-semibold ${\r\n                      portfolioSummary.totalReturn >= 0 ? 'text-green-600' : 'text-red-600'\r\n                    }`}>\r\n                      {portfolioSummary.totalReturn >= 0 ? '+' : ''}{portfolioSummary.totalReturn.toFixed(2)}%\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"text-sm text-gray-600\">Max Drawdown</div>\r\n                    <div className=\"text-lg font-semibold text-red-600\">\r\n                      {portfolioSummary.portfolio.max_drawdown.toFixed(2)}%\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n            </>\r\n          )}\r\n\r\n          {!selectedPortfolio && (\r\n            <Card className=\"p-6\">\r\n              <div className=\"text-center py-12\">\r\n                <div className=\"text-gray-500 mb-4\">Select a portfolio to view details</div>\r\n                <Button>Create New Portfolio</Button>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { Card } from '@/components/ui/Card'\r\nimport { Button } from '@/components/ui/Button'\r\nimport { Input } from '@/components/ui/Input'\r\nimport { TradingService } from '@/services/tradingService'\r\nimport { StrategyConfig, BacktestResult } from '@/types'\r\n\r\nexport function StrategiesPage() {\r\n  const [selectedStrategy, setSelectedStrategy] = useState<string | null>(null)\r\n  const [backtestConfig, setBacktestConfig] = useState({\r\n    symbol: 'BTCUSDT',\r\n    startDate: '',\r\n    endDate: '',\r\n    initialBalance: 10000\r\n  })\r\n\r\n  const { data: strategies = [], isLoading: strategiesLoading, refetch } = useQuery<StrategyConfig[]>(\r\n    'strategies',\r\n    TradingService.getStrategies\r\n  )\r\n\r\n  const { data: backtestResults = [] } = useQuery<BacktestResult[]>(\r\n    ['backtest-results', selectedStrategy],\r\n    () => selectedStrategy ? TradingService.getBacktestResults(selectedStrategy) : Promise.resolve([]),\r\n    {\r\n      enabled: !!selectedStrategy\r\n    }\r\n  )\r\n\r\n  const handleRunBacktest = async () => {\r\n    if (!selectedStrategy) return\r\n    \r\n    try {\r\n      await TradingService.runBacktest({\r\n        strategy_name: selectedStrategy,\r\n        symbol: backtestConfig.symbol,\r\n        start_date: backtestConfig.startDate,\r\n        end_date: backtestConfig.endDate,\r\n        initial_balance: backtestConfig.initialBalance\r\n      })\r\n      // Refetch results after running backtest\r\n      refetch()\r\n    } catch (error) {\r\n      console.error('Error running backtest:', error)\r\n    }\r\n  }\r\n\r\n  const handleActivateStrategy = async (strategyName: string, isActive: boolean) => {\r\n    try {\r\n      if (isActive) {\r\n        await TradingService.activateStrategy(strategyName)\r\n      } else {\r\n        await TradingService.deactivateStrategy(strategyName)\r\n      }\r\n      refetch()\r\n    } catch (error) {\r\n      console.error('Error updating strategy status:', error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900\">Strategies</h1>\r\n        <Button>Create Strategy</Button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Available Strategies</h3>\r\n          {strategiesLoading ? (\r\n            <div>Loading strategies...</div>\r\n          ) : (\r\n            <div className=\"space-y-3\">\r\n              {strategies.map((strategy) => (\r\n                <div\r\n                  key={strategy.name}\r\n                  className={`p-4 border rounded-lg ${\r\n                    selectedStrategy === strategy.name\r\n                      ? 'border-blue-500 bg-blue-50'\r\n                      : 'border-gray-300'\r\n                  }`}\r\n                >\r\n                  <div className=\"flex justify-between items-start mb-2\">\r\n                    <div\r\n                      className=\"cursor-pointer flex-1\"\r\n                      onClick={() => setSelectedStrategy(strategy.name)}\r\n                    >\r\n                      <div className=\"font-medium\">{strategy.name}</div>\r\n                      {strategy.description && (\r\n                        <div className=\"text-sm text-gray-600 mt-1\">\r\n                          {strategy.description}\r\n                        </div>\r\n                      )}\r\n                      {strategy.version && (\r\n                        <div className=\"text-xs text-gray-500 mt-1\">\r\n                          v{strategy.version}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant={strategy.is_active ? 'destructive' : 'default'}\r\n                      onClick={() => handleActivateStrategy(strategy.name, !strategy.is_active)}\r\n                    >\r\n                      {strategy.is_active ? 'Deactivate' : 'Activate'}\r\n                    </Button>\r\n                  </div>\r\n                  \r\n                  {strategy.parameters && (\r\n                    <div className=\"mt-3 p-2 bg-gray-50 rounded text-xs\">\r\n                      <div className=\"font-medium mb-1\">Parameters:</div>\r\n                      <div className=\"space-y-1\">\r\n                        {Object.entries(strategy.parameters).map(([key, value]) => (\r\n                          <div key={key} className=\"flex justify-between\">\r\n                            <span>{key}:</span>\r\n                            <span>{String(value)}</span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Backtest Configuration</h3>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Symbol</label>\r\n              <Input\r\n                value={backtestConfig.symbol}\r\n                onChange={(e) => setBacktestConfig(prev => ({ ...prev, symbol: e.target.value }))}\r\n                placeholder=\"BTCUSDT\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Start Date</label>\r\n              <Input\r\n                type=\"date\"\r\n                value={backtestConfig.startDate}\r\n                onChange={(e) => setBacktestConfig(prev => ({ ...prev, startDate: e.target.value }))}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">End Date</label>\r\n              <Input\r\n                type=\"date\"\r\n                value={backtestConfig.endDate}\r\n                onChange={(e) => setBacktestConfig(prev => ({ ...prev, endDate: e.target.value }))}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Initial Balance</label>\r\n              <Input\r\n                type=\"number\"\r\n                value={backtestConfig.initialBalance}\r\n                onChange={(e) => setBacktestConfig(prev => ({ ...prev, initialBalance: Number(e.target.value) }))}\r\n              />\r\n            </div>\r\n            <Button\r\n              onClick={handleRunBacktest}\r\n              disabled={!selectedStrategy}\r\n              className=\"w-full\"\r\n            >\r\n              Run Backtest\r\n            </Button>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Backtest Results</h3>\r\n          {!selectedStrategy ? (\r\n            <div className=\"text-gray-500\">Select a strategy to view backtest results</div>\r\n          ) : backtestResults.length === 0 ? (\r\n            <div className=\"text-gray-500\">No backtest results available</div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <div className=\"text-sm text-gray-600\">Total Return</div>\r\n                  <div className={`text-lg font-semibold ${\r\n                    (backtestResults[0]?.total_return ?? 0) >= 0 ? 'text-green-600' : 'text-red-600'\r\n                  }`}>\r\n                    {(backtestResults[0]?.total_return ?? 0) >= 0 ? '+' : ''}{(backtestResults[0]?.total_return ?? 0).toFixed(2)}%\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"text-sm text-gray-600\">Win Rate</div>\r\n                  <div className=\"text-lg font-semibold\">{(backtestResults[0]?.win_rate ?? 0).toFixed(1)}%</div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"text-sm text-gray-600\">Total Trades</div>\r\n                  <div className=\"text-lg font-semibold\">{backtestResults[0]?.total_trades ?? 0}</div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"text-sm text-gray-600\">Max Drawdown</div>\r\n                  <div className=\"text-lg font-semibold text-red-600\">\r\n                    {(backtestResults[0]?.max_drawdown ?? 0).toFixed(2)}%\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"text-sm text-gray-600\">Sharpe Ratio</div>\r\n                  <div className=\"text-lg font-semibold\">{(backtestResults[0]?.sharpe_ratio ?? 0).toFixed(2)}</div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"text-sm text-gray-600\">Final Balance</div>\r\n                  <div className=\"text-lg font-semibold\">${(backtestResults[0]?.final_balance ?? 0).toLocaleString()}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Card>\r\n      </div>\r\n\r\n      {selectedStrategy && backtestResults && (\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Trade Details</h3>\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full text-sm\">\r\n              <thead>\r\n                <tr className=\"border-b\">\r\n                  <th className=\"text-left py-2\">Symbol</th>\r\n                  <th className=\"text-left py-2\">Type</th>\r\n                  <th className=\"text-left py-2\">Entry</th>\r\n                  <th className=\"text-left py-2\">Exit</th>\r\n                  <th className=\"text-left py-2\">Quantity</th>\r\n                  <th className=\"text-left py-2\">P&L</th>\r\n                  <th className=\"text-left py-2\">Return %</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {(backtestResults[0]?.trades ?? []).slice(0, 10).map((trade: any, index: number) => (\r\n                  <tr key={index} className=\"border-b\">\r\n                    <td className=\"py-2\">{trade.symbol || backtestResults[0]?.symbol || 'N/A'}</td>\r\n                    <td className=\"py-2\">{trade.type || 'long'}</td>\r\n                    <td className=\"py-2\">${trade.entry_price?.toFixed(2) || 'N/A'}</td>\r\n                    <td className=\"py-2\">${trade.exit_price?.toFixed(2) || 'N/A'}</td>\r\n                    <td className=\"py-2\">{trade.quantity || 'N/A'}</td>\r\n                    <td className={`py-2 ${\r\n                      (trade.pnl || 0) >= 0 ? 'text-green-600' : 'text-red-600'\r\n                    }`}>\r\n                      ${(trade.pnl || 0).toFixed(2)}\r\n                    </td>\r\n                    <td className={`py-2 ${\r\n                      (trade.return_pct || 0) >= 0 ? 'text-green-600' : 'text-red-600'\r\n                    }`}>\r\n                      {(trade.return_pct || 0).toFixed(2)}%\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  )\r\n}","import { useState, useEffect } from 'react'\r\nimport { Card } from '@/components/ui/Card'\r\nimport { Button } from '@/components/ui/Button'\r\nimport { Input } from '@/components/ui/Input'\r\nimport { useAppStore } from '@/stores/appStore'\r\n\r\ninterface SettingsData {\r\n  apiUrl: string\r\n  defaultPortfolio: string\r\n  riskPerTrade: number\r\n  maxOpenTrades: number\r\n  autoTradingEnabled: boolean\r\n  notifications: {\r\n    email: boolean\r\n    browser: boolean\r\n    tradeExecutions: boolean\r\n    significantPnL: boolean\r\n  }\r\n  display: {\r\n    darkMode: boolean\r\n    compactView: boolean\r\n    showAdvancedMetrics: boolean\r\n  }\r\n}\r\n\r\nexport function SettingsPage() {\r\n  const { darkMode } = useAppStore()\r\n  const [settings, setSettings] = useState<SettingsData>({\r\n    apiUrl: 'http://localhost:8000',\r\n    defaultPortfolio: '',\r\n    riskPerTrade: 2,\r\n    maxOpenTrades: 5,\r\n    autoTradingEnabled: false,\r\n    notifications: {\r\n      email: true,\r\n      browser: true,\r\n      tradeExecutions: true,\r\n      significantPnL: true\r\n    },\r\n    display: {\r\n      darkMode: darkMode,\r\n      compactView: false,\r\n      showAdvancedMetrics: false\r\n    }\r\n  })\r\n\r\n  const [isSaving, setIsSaving] = useState(false)\r\n\r\n  useEffect(() => {\r\n    // Load settings from localStorage or API\r\n    const savedSettings = localStorage.getItem('turtle-trading-settings')\r\n    if (savedSettings) {\r\n      try {\r\n        const parsed = JSON.parse(savedSettings)\r\n        setSettings({ ...settings, ...parsed })\r\n      } catch (error) {\r\n        console.error('Error loading settings:', error)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  const handleSave = async () => {\r\n    setIsSaving(true)\r\n    try {\r\n      // Save to localStorage (in a real app, this would be an API call)\r\n      localStorage.setItem('turtle-trading-settings', JSON.stringify(settings))\r\n      \r\n      // Update app store if needed\r\n      if (settings.display.darkMode !== darkMode) {\r\n        useAppStore.getState().toggleDarkMode()\r\n      }\r\n      \r\n      // Show success message\r\n      console.log('Settings saved successfully')\r\n    } catch (error) {\r\n      console.error('Error saving settings:', error)\r\n    } finally {\r\n      setIsSaving(false)\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setSettings({\r\n      apiUrl: 'http://localhost:8000',\r\n      defaultPortfolio: '',\r\n      riskPerTrade: 2,\r\n      maxOpenTrades: 5,\r\n      autoTradingEnabled: false,\r\n      notifications: {\r\n        email: true,\r\n        browser: true,\r\n        tradeExecutions: true,\r\n        significantPnL: true\r\n      },\r\n      display: {\r\n        darkMode: false,\r\n        compactView: false,\r\n        showAdvancedMetrics: false\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900\">Settings</h1>\r\n        <div className=\"space-x-2\">\r\n          <Button variant=\"outline\" onClick={handleReset}>\r\n            Reset to Defaults\r\n          </Button>\r\n          <Button onClick={handleSave} disabled={isSaving}>\r\n            {isSaving ? 'Saving...' : 'Save Settings'}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">API Configuration</h3>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">API Base URL</label>\r\n              <Input\r\n                value={settings.apiUrl}\r\n                onChange={(e) => setSettings(prev => ({ ...prev, apiUrl: e.target.value }))}\r\n                placeholder=\"http://localhost:8000\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Trading Settings</h3>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Default Portfolio</label>\r\n              <Input\r\n                value={settings.defaultPortfolio}\r\n                onChange={(e) => setSettings(prev => ({ ...prev, defaultPortfolio: e.target.value }))}\r\n                placeholder=\"Enter portfolio ID\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Risk Per Trade (%)</label>\r\n              <Input\r\n                type=\"number\"\r\n                min=\"0.1\"\r\n                max=\"10\"\r\n                step=\"0.1\"\r\n                value={settings.riskPerTrade}\r\n                onChange={(e) => setSettings(prev => ({ ...prev, riskPerTrade: Number(e.target.value) }))}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Max Open Trades</label>\r\n              <Input\r\n                type=\"number\"\r\n                min=\"1\"\r\n                max=\"20\"\r\n                value={settings.maxOpenTrades}\r\n                onChange={(e) => setSettings(prev => ({ ...prev, maxOpenTrades: Number(e.target.value) }))}\r\n              />\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"autoTrading\"\r\n                checked={settings.autoTradingEnabled}\r\n                onChange={(e) => setSettings(prev => ({ ...prev, autoTradingEnabled: e.target.checked }))}\r\n                className=\"rounded border-gray-300\"\r\n              />\r\n              <label htmlFor=\"autoTrading\" className=\"text-sm font-medium\">\r\n                Enable Auto Trading\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Notifications</h3>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"emailNotifications\"\r\n                checked={settings.notifications.email}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  notifications: { ...prev.notifications, email: e.target.checked }\r\n                }))}\r\n                className=\"rounded border-gray-300\"\r\n              />\r\n              <label htmlFor=\"emailNotifications\" className=\"text-sm font-medium\">\r\n                Email Notifications\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"browserNotifications\"\r\n                checked={settings.notifications.browser}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  notifications: { ...prev.notifications, browser: e.target.checked }\r\n                }))}\r\n                className=\"rounded border-gray-300\"\r\n              />\r\n              <label htmlFor=\"browserNotifications\" className=\"text-sm font-medium\">\r\n                Browser Notifications\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"tradeExecutions\"\r\n                checked={settings.notifications.tradeExecutions}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  notifications: { ...prev.notifications, tradeExecutions: e.target.checked }\r\n                }))}\r\n                className=\"rounded border-gray-300\"\r\n              />\r\n              <label htmlFor=\"tradeExecutions\" className=\"text-sm font-medium\">\r\n                Trade Executions\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"significantPnL\"\r\n                checked={settings.notifications.significantPnL}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  notifications: { ...prev.notifications, significantPnL: e.target.checked }\r\n                }))}\r\n                className=\"rounded border-gray-300\"\r\n              />\r\n              <label htmlFor=\"significantPnL\" className=\"text-sm font-medium\">\r\n                Significant P&L Changes\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Display Settings</h3>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"darkMode\"\r\n                checked={settings.display.darkMode}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  display: { ...prev.display, darkMode: e.target.checked }\r\n                }))}\r\n                className=\"rounded border-gray-300\"\r\n              />\r\n              <label htmlFor=\"darkMode\" className=\"text-sm font-medium\">\r\n                Dark Mode\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"compactView\"\r\n                checked={settings.display.compactView}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  display: { ...prev.display, compactView: e.target.checked }\r\n                }))}\r\n                className=\"rounded border-gray-300\"\r\n              />\r\n              <label htmlFor=\"compactView\" className=\"text-sm font-medium\">\r\n                Compact View\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"showAdvancedMetrics\"\r\n                checked={settings.display.showAdvancedMetrics}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  display: { ...prev.display, showAdvancedMetrics: e.target.checked }\r\n                }))}\r\n                className=\"rounded border-gray-300\"\r\n              />\r\n              <label htmlFor=\"showAdvancedMetrics\" className=\"text-sm font-medium\">\r\n                Show Advanced Metrics\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">System Information</h3>\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n          <div>\r\n            <div className=\"text-gray-600\">Frontend Version</div>\r\n            <div className=\"font-medium\">1.0.0</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"text-gray-600\">API Status</div>\r\n            <div className=\"font-medium text-green-600\">Connected</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"text-gray-600\">Last Updated</div>\r\n            <div className=\"font-medium\">{new Date().toLocaleDateString()}</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"text-gray-600\">Environment</div>\r\n            <div className=\"font-medium\">Development</div>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  )\r\n}","import { Routes, Route } from 'react-router-dom'\r\nimport { Navbar } from '@/components/common/Navbar'\r\nimport { Sidebar } from '@/components/common/Sidebar'\r\nimport { Dashboard } from '@/components/dashboard/Dashboard'\r\nimport { ChartsPage } from '@/components/charts/ChartsPage'\r\nimport { TradingPage } from '@/components/trading/TradingPage'\r\nimport { PortfolioPage } from '@/components/portfolio/PortfolioPage'\r\nimport { StrategiesPage } from '@/components/strategies/StrategiesPage'\r\nimport { SettingsPage } from '@/components/settings/SettingsPage'\r\nimport { useAppStore } from '@/stores/appStore'\r\n\r\nfunction App() {\r\n  const { sidebarOpen } = useAppStore()\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <Navbar />\r\n      <div className=\"flex h-[calc(100vh-64px)]\">\r\n        <Sidebar isOpen={sidebarOpen} />\r\n        <main className={`flex-1 overflow-auto transition-all duration-300 ${\r\n          sidebarOpen ? 'ml-64' : 'ml-16'\r\n        }`}>\r\n          <div className=\"p-6\">\r\n            <Routes>\r\n              <Route path=\"/\" element={<Dashboard />} />\r\n              <Route path=\"/charts\" element={<ChartsPage />} />\r\n              <Route path=\"/trading\" element={<TradingPage />} />\r\n              <Route path=\"/portfolio\" element={<PortfolioPage />} />\r\n              <Route path=\"/strategies\" element={<StrategiesPage />} />\r\n              <Route path=\"/settings\" element={<SettingsPage />} />\r\n            </Routes>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport { QueryClient, QueryClientProvider } from 'react-query'\r\nimport { ReactQueryDevtools } from 'react-query/devtools'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport { Toaster } from 'react-hot-toast'\r\n\r\nimport App from './App.tsx'\r\nimport './index.css'\r\n\r\n// Create a query client\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      refetchOnWindowFocus: false,\r\n      retry: 1,\r\n      staleTime: 5 * 60 * 1000, // 5 minutes\r\n    },\r\n  },\r\n})\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n    <QueryClientProvider client={queryClient}>\r\n      <BrowserRouter>\r\n        <App />\r\n        <Toaster\r\n          position=\"top-right\"\r\n          toastOptions={{\r\n            duration: 4000,\r\n            style: {\r\n              background: '#363636',\r\n              color: '#fff',\r\n            },\r\n            success: {\r\n              style: {\r\n                background: '#10b981',\r\n              },\r\n            },\r\n            error: {\r\n              style: {\r\n                background: '#ef4444',\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </BrowserRouter>\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  </React.StrictMode>,\r\n)"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","devtoolsModule","createJSONStorage","getStorage","options","storage","name","_a","parse","str2","str","newValue","toThenable","fn","input","result","onFulfilled","_onRejected","_onFulfilled","onRejected","oldImpl","config","baseOptions","set","get","api","state","persistedState","currentState","hasHydrated","hydrationListeners","finishHydrationListeners","args","thenableSerialize","setItem","errorInSync","thenable","serializedValue","savedSetState","replace","configResult","stateFromStorage","hydrate","cb","postRehydrationCallback","storageValue","deserializedStorageValue","migratedState","_a2","newOptions","newImpl","_b","migrationResult","migrated","persistImpl","persist","useAppStore","create","open","portfolioId","strategyName","useChartStore","symbol","interval","filename","useTradingStore","enabled","strategy","risk","Navbar","sidebarOpen","toggleSidebar","darkMode","toggleDarkMode","jsxs","jsx","X","Menu","TrendingUp","Sun","Moon","Settings","navigationItems","Home","BarChart3","Wallet","Brain","Sidebar","isOpen","item","Icon","NavLink","isActive","Activity","MetricCard","title","value","subtitle","change","changeType","icon","className","valueColor","getValueColorClass","getChangeColorClass","formatChange","prefix","suffix","TrendingDown","PortfolioSummary","summary","formatCurrency","formatPercentage","Target","Award","Card","children","padding","CardHeader","CardContent","CardFooter","Button","variant","size","loading","disabled","props","baseClasses","variantClasses","sizeClasses","Fragment","Loader2","Input","forwardRef","label","error","helperText","ref","Select","QuickActions","availableCharts","navigate","useNavigate","autoTradingEnabled","setAutoTradingEnabled","selectedChart","setSelectedChart","useState","formatFilename","word","handleQuickTrade","toast","handleViewChart","handleToggleAutoTrading","file","Download","Pause","Play","Badge","RecentActivity","trades","signals","formatTime","timestamp","getTradeIcon","tradeType","getSignalIcon","signalType","getStatusBadge","status","recentActivity","trade","signal","Clock","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","PerformanceOverview","performance","timeRange","chartData","r","context","formatMetric","isPercentage","Line","mockMarketData","MarketOverview","refreshing","setRefreshing","marketData","refetch","useQuery","handleRefresh","formatPrice","price","RefreshCw","API_BASE_URL","axios","token","response","_c","_d","message","_f","_e","ApiClient","url","params","data","PortfolioService","request","newBalance","reason","limit","offset","startDate","endDate","benchmark","targetWeights","portfolio","portfolioValue","riskPerTrade","entryPrice","stopLoss","riskAmount","riskPerShare","TradeType","TradeStatus","TradingService","tradeId","exitPrice","takeProfit","onMessage","wsUrl","ws","event","accountBalance","currentPrice","realizedPnL","unrealizedPnL","ChartService","indicators","period","pattern_types","lookback_periods","Dashboard","selectedPortfolio","setTimeRange","portfolios","portfolioSummary","portfolioLoading","recentTrades","recentSignals","chartFiles","range","clsx","INTERVAL_LABELS","ChartControls","selectedInterval","onIntervalChange","availableIntervals","selectedFile","onFileChange","availableFiles","onRefresh","onDownload","TimeScale","CandlestickController","CandlestickElement","CandlestickChart","height","showVolume","overlays","chartRef","useRef","setChartData","useEffect","candleData","candle","datasets","buySignals","s","sellSignals","dataset","Chart","ChartsPage","selectedChartFile","setSelectedChartFile","setSelectedInterval","chartStats","setChartStats","filesLoading","refetchFiles","chartLoading","refetchChart","getAvailableIntervals","nativePeriod","hierarchy","nativeIndex","handleFileChange","handleIntervalChange","resampledData","handleDownload","isLoading","Volume2","TradingPage","selectedStrategy","setSelectedStrategy","strategies","strategiesLoading","PortfolioPage","setSelectedPortfolio","portfoliosLoading","positions","position","StrategiesPage","backtestConfig","setBacktestConfig","backtestResults","handleRunBacktest","handleActivateStrategy","key","prev","_g","_h","_i","index","SettingsPage","settings","setSettings","isSaving","setIsSaving","savedSettings","parsed","handleSave","handleReset","App","Routes","Route","queryClient","QueryClient","ReactDOM","React","QueryClientProvider","BrowserRouter","Toaster","ReactQueryDevtools"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}